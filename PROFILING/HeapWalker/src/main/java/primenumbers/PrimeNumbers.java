/*
 * PrimeNumbers.java
 *
 * Created on June 10, 2005, 2:57 PM
 */

package primenumbers;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import javax.swing.Timer;
import javax.swing.UIManager;


/**
 *
 * @author  gs145266
 */
public class PrimeNumbers extends javax.swing.JFrame implements ActionListener {
    
    private Map<int[], int[]> cache_ = new HashMap<int[], int[]>(100);
    private int[] result_;
    private PrimeCalculator calc_;
    private Timer timer_ = new Timer(1000, this);
    private String resultColor_ = "blue";
    Map<int[], int[]> completeResults_ = new HashMap<int[], int[]>();
    public static final long serialVersionUID = -1;
    
    /** Creates new form PrimeNumbers */
    public PrimeNumbers() {
        initComponents();
        initManagement();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        userInput = new javax.swing.JTextField();
        statusValue = new javax.swing.JLabel();
        calcButton = new javax.swing.JButton();
        fillerL = new javax.swing.JLabel();
        fillerR = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jLabel1.setText("Enter a Number:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(15, 12, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        userInput.setMinimumSize(new java.awt.Dimension(100, 19));
        userInput.setPreferredSize(new java.awt.Dimension(100, 19));
        userInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userInputActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 6, 0, 12);
        getContentPane().add(userInput, gridBagConstraints);

        statusValue.setMaximumSize(new java.awt.Dimension(99, 15));
        statusValue.setMinimumSize(new java.awt.Dimension(99, 15));
        statusValue.setPreferredSize(new java.awt.Dimension(99, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 12, 0, 0);
        getContentPane().add(statusValue, gridBagConstraints);

        calcButton.setText("Calculate Prime Numbers");
        calcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 15, 0);
        getContentPane().add(calcButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        getContentPane().add(fillerL, gridBagConstraints);

        fillerR.setMaximumSize(new java.awt.Dimension(99, 0));
        fillerR.setMinimumSize(new java.awt.Dimension(99, 0));
        fillerR.setPreferredSize(new java.awt.Dimension(99, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        getContentPane().add(fillerR, gridBagConstraints);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    
    private void calcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcButtonActionPerformed
        
        // turn this button off for the duration of the operation
        calcButton.setEnabled(false);
        
        // get the requested value
        String maxString = userInput.getText();
        
        // convert and check for validity
        int maxValue = 0;
        boolean valid = true;
        try {
            maxValue = Integer.parseInt(maxString);
        } catch (Exception e) {
            e.printStackTrace();
            valid = false;
        }
        
        if (valid) {
            if (maxValue < 2) {
                valid = false;
            }
            if (maxValue > 100000000) {
                valid = false;
            }
        }
        
        // need to report an error if the value is not valid
        if (!valid) {
            statusValue.setText("Value must be an integer >= 2 " +
                    "and <= 100000000");
            statusValue.setForeground(Color.RED);
            calcButton.setEnabled(true);
        } else {
            // do the processing
            processRequest(maxValue);
        }
        
    }//GEN-LAST:event_calcButtonActionPerformed
    
    /**
     * process a request - check the cache and use that if the entry
     * exists; otherwise, calculate the prime numbers
     */
    private void processRequest(int maxValue) {
        
        String result = "";
        Integer maxInt = new Integer(maxValue);
        
        int[] primes = cache_.get(maxInt);
        if (primes != null) {
            // we've found a match - no need to recalc.
            result = "Largest prime number less than or equal to " +
                    maxValue + " is: " + primes[primes.length-1];
            statusValue.setText(result);
            statusValue.setForeground(Color.BLUE);
        } else {
            // we need to calculate the prime numbers -
            // do it on a separate thread.
            statusValue.setText("Initializing...");
            statusValue.setForeground(Color.BLACK);
            calc_ = new PrimeCalculator(this, maxValue);
            calc_.start();
            getTimer().start();
        }
    }
    
    
    /**
     * Handle the end result
     *
     */
    void processResult(int value, int[] primes) {
        
        // store this off for possible later use
        cache_.put(primes, primes);
        
        // update the user
        getTimer().stop();
        String result = "Largest prime number less than or equal to " +
                value + " is: " + primes[primes.length-1];
        statusValue.setText(result);
        Color foreground = Color.BLUE;
        if (getResultColor().toUpperCase().equals("RED")) {
            foreground = Color.RED;
        }
        statusValue.setForeground(foreground);
        calcButton.setEnabled(true);
    }
    
    /**
     *
     */
    public void actionPerformed(java.awt.event.ActionEvent e) {
        // if there's something interesting to report, update
        // the status display
        if (calc_.primeCandidate_ > 0) {
            String status = "Examining: " + calc_.examining_;
            statusValue.setText(status);
            statusValue.setForeground(Color.BLACK);
        }
    }
    
    /**
     * Setup the JMX Agent and let its
     * mbean know about the timer.
     */
    private void initManagement() {
        try {
            primenumbers.agent.JMXAgent agent =
                    primenumbers.agent.JMXAgent.getDefault();
            
            // the mbean needs access to this object in order
            // to make changes to it.
            agent.getPrimeNumbersMgmt().setManaged(this);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    private void userInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userInputActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_userInputActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                
                PrimeNumbers pn = new PrimeNumbers();
                pn.setTitle("Sieve");
                pn.setVisible(true);
            }
        });
    }
    
//    public static void main(String args[]) {
//        String result = stringOp("Test", "toLowerCase");
//        System.out.println(result);
//        result = stringOp("Test", "toUpperCase");
//        System.out.println(result);
//    }
    
//    public static String stringOp(String word, String operation) {
//        String result = null;
//        Class c = String.class;
//        Method stringMethod;
//        try {
//            stringMethod = c.getMethod(operation, (Class[]) null);
//            result = (String) stringMethod.invoke(word, (Object[]) null);
//        } catch (NoSuchMethodException e) {
//            System.out.println(e);
//        } catch (IllegalAccessException e) {
//            System.out.println(e);
//        } catch (InvocationTargetException e) {
//            System.out.println(e);
//        }
//        return result;
//    }
        
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calcButton;
    private javax.swing.JLabel fillerL;
    private javax.swing.JLabel fillerR;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel statusValue;
    private javax.swing.JTextField userInput;
    // End of variables declaration//GEN-END:variables
    
    public Timer getTimer() {
        return timer_;
    }
    
    public void setTimer(Timer timer_) {
        this.timer_ = timer_;
    }
    
    public String getResultColor() {
        return resultColor_;
    }
    
    public void setResultColor(String resultColor_) {
        this.resultColor_ = resultColor_;
    }

//    public void actionPerformed(ActionEvent e) {
//    }

    
    }
