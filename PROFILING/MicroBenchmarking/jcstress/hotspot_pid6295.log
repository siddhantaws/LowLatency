<?xml version='1.0' encoding='UTF-8'?>
<hotspot_log version='160 1' process='6295' time_ms='1451750985761'>
<vm_version>
<name>
OpenJDK 64-Bit Server VM
</name>
<release>
25.66-b00-fastdebug
</release>
<info>
OpenJDK 64-Bit Server VM (25.66-b00-fastdebug) for linux-amd64 JRE (1.8.0-internal-mohit_2016_01_02_20_06-b00), built on Jan  2 2016 20:22:16 by &quot;mohit&quot; with gcc 4.8.4
</info>
</vm_version>
<vm_arguments>
<args>
-XX:-RestrictContended -XX:+StressLCM -XX:+StressGCM -XX:+WhiteBoxAPI -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineSize=0 
</args>
<command>
tests-custom/target/jcstress.jar -t .*FencedAcquireReleaseTest.* -v -iters 20 -f 5
</command>
<launcher>
SUN_STANDARD
</launcher>
<properties>
java.vm.specification.name=Java Virtual Machine Specification
java.vm.version=25.66-b00-fastdebug
java.vm.name=OpenJDK 64-Bit Server VM
java.vm.info=mixed mode, sharing
java.ext.dirs=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/ext:/usr/java/packages/lib/ext
java.endorsed.dirs=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/endorsed
sun.boot.library.path=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/amd64
java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib
java.home=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre
java.class.path=tests-custom/target/jcstress.jar
sun.boot.class.path=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/resources.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/rt.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/sunrsasign.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/jsse.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/jce.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/charsets.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/jfr.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/classes
java.vm.specification.vendor=Oracle Corporation
java.vm.specification.version=1.8
java.vm.vendor=Oracle Corporation
sun.java.command=tests-custom/target/jcstress.jar -t .*FencedAcquireReleaseTest.* -v -iters 20 -f 5
sun.java.launcher=SUN_STANDARD
</properties>
</vm_arguments>
<tty>
<blob name='MethodHandlesAdapterBlob' size='182000'>
<sect index='1' size='182000' free='177714'/>
</blob>
<writer thread='139875532781312'/>
Could not load hsdis-amd64.so; library not loadable; PrintAssembly is disabled
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='23'>
{method}
 - this oop:          0x00007f3755688830
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f37556850e8 constant pool [680] {0x00007f37556850e8} for &apos;java/lang/String&apos; cache=0x00007f375574e5e0
 - access:            0x81000001  public 
 - name:              &apos;charAt&apos;
 - signature:         &apos;(I)C&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758bc9ba0
 - code size:         29
 - code start:        0x00007f37556887f0
 - code end (excl):   0x00007f375568880d
 - method data:       0x00007f375583d8d8
 - checked ex length: 0
 - linenumber start:  0x00007f375568880d
 - localvar length:   2
 - localvar start:    0x00007f3755688816
 - compiled code: nmethod    306    2       3       java.lang.String::charAt (29 bytes)
#
#  char ( java/lang/String:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N79: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B7 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	testl   RDX, RDX
02e   	jl,s   B7  P=0.000000 C=5928.000000
02e
030   B2: #	B9 B3 &lt;- B1  Freq: 1
030   	movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
034   	movl    RBP, [R10 + #12 (8-bit)]	# range
038   	NullCheck R10
038
038   B3: #	B8 B4 &lt;- B2  Freq: 0.999999
038   	cmpl    RDX, RBP
03a   	jge,s   B8  P=0.000000 C=5928.000000
03a
03c   B4: #	B6 B5 &lt;- B3  Freq: 0.999998
03c   	movl    RSI, #-28	# int
041   	cmpl    RDX, RBP	# unsigned
043   	jnb,us  B6  P=0.000001 C=-1.000000
043
045   B5: #	N79 &lt;- B4  Freq: 0.999997
045   	movzwl  RAX, [R10 + #16 + RDX &lt;&lt; #1]	# ushort/char
04b   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

056   	ret
056
057   B6: #	N79 &lt;- B4  Freq: 1.01328e-06
057   	movl    RBP, RDX	# spill
059   	movl    [rsp + #0], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
05f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #0 STK[1]=RBP
        # OopMap{[0]=NarrowOop off=100}
064   	int3	# ShouldNotReachHere
064
069   B7: #	N79 &lt;- B1  Freq: 5e-07
069   	movq    RBP, RSI	# spill
06c   	movl    [rsp + #4], RDX	# spill
070   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
077   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # OopMap{rbp=Oop off=124}
07c   	int3	# ShouldNotReachHere
07c
081   B8: #	N79 &lt;- B3  Freq: 4.76836e-07
081   	movq    [rsp + #0], RSI	# spill
085   	movl    [rsp + #12], RDX	# spill
089   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
08f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #0 L[1]=rsp + #12 STK[0]=rsp + #12 STK[1]=RBP
        # OopMap{[0]=Oop off=148}
094   	int3	# ShouldNotReachHere
094
099   B9: #	N79 &lt;- B2  Freq: 1.01328e-06
099   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
09f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=164}
0a4   	int3	# ShouldNotReachHere
0a4

</opto_assembly>
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='54'>
{method}
 - this oop:          0x00007f375568a070
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f37556850e8 constant pool [680] {0x00007f37556850e8} for &apos;java/lang/String&apos; cache=0x00007f375574e5e0
 - access:            0xc1000001  public 
 - name:              &apos;hashCode&apos;
 - signature:         &apos;()I&apos;
 - max stack:         4
 - max locals:        4
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      3
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef680: 0xb0000000 i2c: 0x00007f3758b11620 c2i: 0x00007f3758b1175a c2iUV: 0x00007f3758b1172d
 - compiled entry     0x00007f3758bc8da0
 - code size:         55
 - code start:        0x00007f3755689ff8
 - code end (excl):   0x00007f375568a02f
 - method data:       0x00007f375588ca20
 - checked ex length: 0
 - linenumber start:  0x00007f375568a02f
 - localvar length:   4
 - localvar start:    0x00007f375568a03e
 - compiled code: nmethod    409    1       3       java.lang.String::hashCode (55 bytes)
#
#  int ( java/lang/String:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N198: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (144 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movq    RCX, RSI	# spill
02f   	movl    R11, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
033   	xorl    RAX, RAX	# int
035   	movl    R10, [RSI + #16 (8-bit)]	# int ! Field: java/lang/String.hash
039   	testl   R10, R10
03c   	je,s   B3  P=0.775750 C=767.000000
03c
03e   B2: #	B16 &lt;- B1  Freq: 0.22425
03e   	movl    RAX, R10	# spill
041   	jmp     B16
041
046   B3: #	B19 B4 &lt;- B1  Freq: 0.77575
046   	movl    RBX, #1	# int
04b   	movl    RDI, [R11 + #12 (8-bit)]	# range
04f   	NullCheck R11
04f
04f   B4: #	B16 B5 &lt;- B3  Freq: 0.775749
04f   	testl   RDI, RDI
051   	jle     B16  P=0.015126 C=595.000000
051
057   B5: #	B18 B6 &lt;- B4  Freq: 0.764015
057   	movl    R8, RDI	# spill
05a   	decl    R8	# int
05d   	movl    RSI, RDI	# spill
05f   	addl    RSI, #-3	# int
062   	testl  RDI, RDI	# unsigned
064   	jbe,u  B18  P=0.000001 C=-1.000000
064
06a   B6: #	B18 B7 &lt;- B5  Freq: 0.764014
06a   	movl    R9, #-2147483648	# int
070   	cmpl    R8, RSI
073   	cmovll RSI, R9	# signed, int
077   	cmpl    R8, RDI	# unsigned
07a   	jnb,u  B18  P=0.000001 C=-1.000000
07a
080   B7: #	B10 B8 &lt;- B6  Freq: 0.764013
080   	movzwl  R10, [R11 + #16 (8-bit)]	# ushort/char
085   	movl    R9, R10	# spill
088   	sall    R9, #5
08c   	movl    RAX, R9	# spill
08f   	subl    RAX, R10	# int
092   	cmpl    RSI, #1
095   	jg,s   B10  P=0.999999 C=-1.000000
095
097   B8: #	B11 &lt;- B7  Freq: 7.74159e-07
097   	movl    RAX, R9	# spill
09a   	jmp,s   B11
      	nop 	# 4 bytes pad for loops and calls

0a0   B9: #	B10 &lt;- B10  top-of-loop Freq: 21.3793
0a0   	subl    RAX, R10	# int
0a3
0a3   B10: #	B9 B11 &lt;- B7 B9 	Loop: B10-B9 inner main of N68 Freq: 22.1433
0a3   	movslq  R10, RBX	# i2l
0a6   	movzwl  R8, [R11 + #16 + RBX &lt;&lt; #1]	# ushort/char
0ac   	movzwl  RDX, [R11 + #18 + R10 &lt;&lt; #1]	# ushort/char
0b2   	movzwl  RBP, [R11 + #22 + R10 &lt;&lt; #1]	# ushort/char
0b8   	movzwl  R9, [R11 + #20 + R10 &lt;&lt; #1]	# ushort/char
0be   	addl    RAX, R8	# int
0c1   	movl    R8, RAX	# spill
0c4   	sall    R8, #5
0c8   	subl    R8, RAX	# int
0cb   	addl    R8, RDX	# int
0ce   	movl    RAX, R8	# spill
0d1   	sall    RAX, #5
0d4   	subl    RAX, R8	# int
0d7   	addl    RAX, R9	# int
0da   	movl    R10, RAX	# spill
0dd   	sall    R10, #5
0e1   	subl    R10, RAX	# int
0e4   	addl    R10, RBP	# int
0e7   	movl    RAX, R10	# spill
0ea   	sall    RAX, #5
0ed   	addl    RBX, #4	# int
0f0   	cmpl    RBX, RSI
0f2   	jl,s   B9	# loop end  P=0.965497 C=16398.000000
0f2
0f4   B11: #	B17 B12 &lt;- B8 B10  Freq: 0.764013
0f4   	cmpl    RBX, RDI
0f6   	jge,s   B17  P=0.500000 C=-1.000000
0f6
0f8   B12: #	B13 &lt;- B11  Freq: 0.382007
0f8   	# castII of RBX
0f8
0f8   B13: #	B15 B14 &lt;- B12 B14 	Loop: B13-B14 inner post of N200 Freq: 0.764013
0f8   	movzwl  R9, [R11 + #16 + RBX &lt;&lt; #1]	# ushort/char
0fe   	subl    RAX, R10	# int
101   	addl    RAX, R9	# int
104   	movl    R8, RAX	# spill
107   	sall    R8, #5
10b   	incl    RBX	# int
10d   	cmpl    RBX, RDI
10f   	jge,s   B15	# loop end  P=0.500000 C=16398.000000
10f
111   B14: #	B13 &lt;- B13  Freq: 0.382007
111   	movl    R10, RAX	# spill
114   	movl    RAX, R8	# spill
117   	jmp,s   B13
117
119   B15: #	B16 &lt;- B13 B17  Freq: 0.764013
119   	movl    [RCX + #16 (8-bit)], RAX	# int ! Field: java/lang/String.hash
119
11c   B16: #	N198 &lt;- B15 B4 B2  Freq: 0.999998
11c   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

127   	ret
127
128   B17: #	B15 &lt;- B11  Freq: 0.382007
128   	movl    RAX, R10	# spill
12b   	jmp,s   B15
12b
12d   B18: #	N198 &lt;- B6 B5  Freq: 1.53817e-06
12d   	movl    RSI, #-122	# int
132   	movl    RBP, R11	# spill
135   	movq    [rsp + #0], RCX	# spill
      	nop 	# 2 bytes pad for loops and calls
13b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::hashCode @ bci:33  L[0]=rsp + #0 L[1]=#0 L[2]=RBP L[3]=#0
        # OopMap{rbp=NarrowOop [0]=Oop off=320}
140   	int3	# ShouldNotReachHere
140
145   B19: #	N198 &lt;- B3  Freq: 7.86051e-07
145   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
14b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::hashCode @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap{off=336}
150   	int3	# ShouldNotReachHere
150

</opto_assembly>
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='64'>
{method}
 - this oop:          0x00007f375568a260
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f37556850e8 constant pool [680] {0x00007f37556850e8} for &apos;java/lang/String&apos; cache=0x00007f375574e5e0
 - access:            0xc1000001  public 
 - name:              &apos;indexOf&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         4
 - max locals:        6
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef6c8: 0xbaa00000 i2c: 0x00007f3758b11ca0 c2i: 0x00007f3758b11de0 c2iUV: 0x00007f3758b11db3
 - compiled entry     0x00007f3758bfcbc0
 - code size:         70
 - code start:        0x00007f375568a1b8
 - code end (excl):   0x00007f375568a1fe
 - method data:       0x00007f37558f8e88
 - checked ex length: 0
 - linenumber start:  0x00007f375568a1fe
 - localvar length:   6
 - localvar start:    0x00007f375568a216
 - compiled code: nmethod    437   11       3       java.lang.String::indexOf (70 bytes)
#
#  int ( java/lang/String:NotNull:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N254: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B32 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (160 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	movq    R11, RSI	# spill
02f   	movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
033   	movl    RSI, #-10	# int
038   	movl    RBP, [R10 + #12 (8-bit)]	# range
03c   	NullCheck R10
03c
03c   B2: #	B30 B3 &lt;- B1  Freq: 0.999999
03c   	movl    RAX, #-1	# int
041   	movl    R8, RBP	# spill
044   	decl    R8	# int
047   	movl    RSI, #-155	# int
04c   	movl    R9, #-2147483648	# int
052   	testl   RCX, RCX
054   	jl     B30  P=0.000000 C=910.000000
054
05a   B3: #	B28 B4 &lt;- B2  Freq: 0.999999
05a   	cmpl    RCX, RBP
05c   	jge     B28  P=0.049451 C=910.000000
05c
062   B4: #	B31 B5 &lt;- B3  Freq: 0.950548
062   	movl    RDI, RBP	# spill
064   	addl    RDI, #-3	# int
067   	cmpl    R8, RDI
06a   	cmovll RDI, R9	# signed, int
06e   	cmpl    RDX, #65536
074   	jge     B31  P=0.000000 C=865.000000
074
07a   B5: #	B29 B6 &lt;- B4  Freq: 0.950548
07a   	cmpl    RCX, RBP	# unsigned
07c   	jnb,u  B29  P=0.000001 C=-1.000000
07c
082   B6: #	B29 B7 &lt;- B5  Freq: 0.950547
082   	movl    R11, RCX	# spill
085   	incl    R11	# int
088   	cmpl    R8, RBP	# unsigned
08b   	jnb,u  B29  P=0.000001 C=-1.000000
08b
091   B7: #	B26 B8 &lt;- B6 B9 	Loop: B7-B9 inner pre of N191 Freq: 1.8441
091   	movl    RBX, RCX	# spill
093   	incl    RBX	# int
095   	movzwl  R8, [R10 + #16 + RCX &lt;&lt; #1]	# ushort/char
09b   	cmpl    R8, RDX
09e   	je     B26  P=0.030906 C=16922.000000
09e
0a4   B8: #	B10 B9 &lt;- B7  Freq: 1.7871
0a4   	cmpl    RBX, R11
0a7   	jge,s   B10	# loop end  P=0.500000 C=16399.000000
0a7
0a9   B9: #	B7 &lt;- B8  Freq: 0.893551
0a9   	movl    RCX, RBX	# spill
0ab   	jmp,s   B7
0ab
0ad   B10: #	B17 B11 &lt;- B8  Freq: 0.893551
0ad   	cmpl    RBX, RDI
0af   	jge,s   B17  P=0.000001 C=-1.000000
0af
0b1   B11: #	B12 &lt;- B10  Freq: 0.89355
0b1   	# castII of RBX
      	nop 	# 15 bytes pad for loops and calls

0c0   B12: #	B22 B13 &lt;- B11 B16 	Loop: B12-B16 inner main of N110 Freq: 6.59524
0c0   	movslq  R11, RBX	# i2l
0c3   	movl    R13, RBX	# spill
0c6   	addl    R13, #2	# int
0ca   	movzwl  R8, [R10 + #16 + RBX &lt;&lt; #1]	# ushort/char
0d0   	movzwl  R9, [R10 + #18 + R11 &lt;&lt; #1]	# ushort/char
0d6   	cmpl    R8, RDX
0d9   	je,s   B22  P=0.030906 C=16922.000000
0d9
0db   B13: #	B24 B14 &lt;- B12  Freq: 6.3914
0db   	movzwl  R8, [R10 + #20 + R11 &lt;&lt; #1]	# ushort/char
0e1   	movl    RCX, RBX	# spill
0e3   	addl    RCX, #2	# int
0e6   	cmpl    R9, RDX
0e9   	je,s   B24  P=0.030906 C=16922.000000
0e9
0eb   B14: #	B23 B15 &lt;- B13  Freq: 6.19387
0eb   	movzwl  R11, [R10 + #22 + R11 &lt;&lt; #1]	# ushort/char
0f1   	cmpl    R8, RDX
0f4   	je,s   B23  P=0.030906 C=16922.000000
0f4
0f6   B15: #	B25 B16 &lt;- B14  Freq: 6.00244
0f6   	addl    RBX, #4	# int
0f9   	cmpl    R11, RDX
0fc   	je,s   B25  P=0.030906 C=16922.000000
0fc
0fe   B16: #	B12 B17 &lt;- B15  Freq: 5.81692
0fe   	cmpl    RBX, RDI
100   	jl,s   B12	# loop end  P=0.980190 C=16399.000000
100
102   B17: #	B28 B18 &lt;- B10 B16  Freq: 0.115234
102   	cmpl    RBX, RBP
104   	jge,s   B28  P=0.500000 C=-1.000000
104
106   B18: #	B19 &lt;- B17  Freq: 0.0576171
106   	# castII of RBX
      	nop 	# 2 bytes pad for loops and calls

108   B19: #	B27 B20 &lt;- B18 B21 	Loop: B19-B21 inner post of N191 Freq: 0.11178
108   	movzwl  R8, [R10 + #16 + RBX &lt;&lt; #1]	# ushort/char
10e   	movl    R11, RBX	# spill
111   	incl    R11	# int
114   	cmpl    R8, RDX
117   	je,s   B27  P=0.030906 C=16922.000000
117
119   B20: #	B28 B21 &lt;- B19  Freq: 0.108325
119   	cmpl    R11, RBP
11c   	jge,s   B28	# loop end  P=0.500000 C=16399.000000
11c
11e   B21: #	B19 &lt;- B20  Freq: 0.0541624
11e   	movl    RBX, R11	# spill
121   	jmp,s   B19
121
123   B22: #	B23 &lt;- B12  Freq: 0.203836
123   	movl    R13, RBX	# spill
123
126   B23: #	B26 &lt;- B22 B14  Freq: 0.395267
126   	movl    RCX, R13	# spill
129   	jmp,s   B26
129
12b   B24: #	B25 &lt;- B13  Freq: 0.197536
12b   	movl    RCX, RBX	# spill
12b
12d   B25: #	B26 &lt;- B24 B15  Freq: 0.38305
12d   	incl    RCX	# int
12f
12f   B26: #	B27 &lt;- B7 B23 B25  Freq: 0.835311
12f   	movl    RBX, RCX	# spill
12f
131   B27: #	B28 &lt;- B19 B26  Freq: 0.838766
131   	movl    RAX, RBX	# spill
131
133   B28: #	N254 &lt;- B3 B27 B20 B17  Freq: 0.999996
133   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

13e   	ret
13e
13f   B29: #	N254 &lt;- B6 B5  Freq: 1.92634e-06
13f   	movl    [rsp + #0], RDX	# spill
142   	movl    [rsp + #4], R10	# spill
147   	movl    [rsp + #8], RCX	# spill
14b   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
153   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:43  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=RBP L[4]=rsp + #4 L[5]=rsp + #8
        # OopMap{[4]=NarrowOop off=344}
158   	int3	# ShouldNotReachHere
158
15d   B30: #	N254 &lt;- B2  Freq: 4.76837e-07
15d   	movl    [rsp + #0], RDX	# spill
160   	movl    [rsp + #8], RCX	# spill
164   	movq    [rsp + #16], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
16b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::indexOf @ bci:7  L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=RBP L[4]=_ L[5]=_ STK[0]=rsp + #8
        # OopMap{[16]=Oop off=368}
170   	int3	# ShouldNotReachHere
170
175   B31: #	N254 &lt;- B4  Freq: 4.53257e-07
175   	movl    [rsp + #4], RCX	# spill
179   	movl    [rsp + #8], RDX	# spill
17d   	movq    [rsp + #16], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
183   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::indexOf @ bci:25  L[0]=rsp + #16 L[1]=rsp + #8 L[2]=rsp + #4 L[3]=RBP L[4]=_ L[5]=_ STK[0]=rsp + #8 STK[1]=#65536
        # OopMap{[16]=Oop off=392}
188   	int3	# ShouldNotReachHere
188
18d   B32: #	N254 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
18f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap{off=404}
194   	int3	# ShouldNotReachHere
194

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='94'>
{method}
 - this oop:          0x00007f37556b99a8
 - method holder:     &apos;java/lang/Thread&apos;
 - constants:         0x00007f37556b6650 constant pool [605] {0x00007f37556b6650} for &apos;java/lang/Thread&apos; cache=0x00007f3755755258
 - access:            0x81000009  public static 
 - name:              &apos;interrupted&apos;
 - signature:         &apos;()Z&apos;
 - max stack:         3
 - max locals:        0
 - size of params:    0
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680efa70: 0x i2c: 0x00007f3758b144a0 c2i: 0x00007f3758b145d6 c2iUV: 0x00007f3758b145a9
 - compiled entry     0x00007f3758c280a0
 - code size:         8
 - code start:        0x00007f37556b9998
 - code end (excl):   0x00007f37556b99a0
 - method data:       0x00007f3755a05c18
 - checked ex length: 0
 - linenumber start:  0x00007f37556b99a0
 - localvar length:   0
 - compiled code: nmethod    513   88       3       java.lang.Thread::interrupted (8 bytes)
#
#  bool (  )
#
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B3 B6  Freq: 1
abababab
000   B1: #	B4 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (104 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	# TLS is in R15
00c   	xorl    RAX, RAX	# int
00e   	movq    RSI, [R15 + #504 (32-bit)]	# ptr
015   	
015   	movq    R10, [R15 + #504 (32-bit)]	# ptr
01c   	cmpq    R10, RSI	# ptr
01f   	jne,us  B4  P=0.001000 C=-1.000000
01f
021   B2: #	B4 B3 &lt;- B1  Freq: 0.999
021   	movq    R10, [R15 + #312 (32-bit)]	# ptr
028   	movl    R10, [R10 + #28 (8-bit)]	# int
02c   	testl   R10, R10
02f   	jne,s   B4  P=0.001000 C=-1.000000
02f
031   B3: #	N1 &lt;- B2 B5  Freq: 1
031   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

03c   	ret
03c
03d   B4: #	B6 B5 &lt;- B1 B2  Freq: 0.001999
03d   	movl    RDX, #1	# int
      	nop 	# 1 bytes pad for loops and calls
043   	call,static  java.lang.Thread::isInterrupted
        # java.lang.Thread::interrupted @ bci:4 
        # OopMap{off=72}
048
048   B5: #	B3 &lt;- B4  Freq: 0.00199896
        # Block is sole successor of call
048   	jmp,s   B3
048
04a   B6: #	N1 &lt;- B4  Freq: 1.999e-08
04a   	# exception oop is in rax; no code emitted
04a   	movq    RSI, RAX	# spill
04d   	addq    rsp, 16	# Destroy frame
	popq   rbp

052   	jmp     rethrow_stub
052

</opto_assembly>
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='97' compile_kind='osr'>
{method}
 - this oop:          0x00007f3755aaaf70
 - method holder:     &apos;org/openjdk/jcstress/Options$BurningTask&apos;
 - constants:         0x00007f3755aaace8 constant pool [30] {0x00007f3755aaace8} for &apos;org/openjdk/jcstress/Options$BurningTask&apos; cache=0x00007f3755aab000
 - access:            0xc1000001  public 
 - name:              &apos;run&apos;
 - signature:         &apos;()V&apos;
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef680: 0xb0000000 i2c: 0x00007f3758b11620 c2i: 0x00007f3758b1175a c2iUV: 0x00007f3758b1172d
 - compiled entry     0x00007f3758c2bf80
 - code size:         10
 - code start:        0x00007f3755aaaf50
 - code end (excl):   0x00007f3755aaaf5a
 - method data:       0x00007f3755aab090
 - checked ex length: 0
 - linenumber start:  0x00007f3755aaaf5a
 - localvar length:   1
 - localvar start:    0x00007f3755aaaf62
 - compiled code: nmethod    544   96       3       org.openjdk.jcstress.Options$BurningTask::run (10 bytes)
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N95: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B5 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (192 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

01c   	movq    RDI, RSI	# spill
01f   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
02c   	jmp,s   B5
02c
02e   B2: #	B9 B3 &lt;- B5 B7  top-of-loop Freq: 1999
02e   	movl    RDX, #1	# int
033   	call,static  java.lang.Thread::isInterrupted
        # java.lang.Thread::interrupted @ bci:4 
        # org.openjdk.jcstress.Options$BurningTask::run @ bci:0  L[0]=_
        # OopMap{off=56}
038
038   B3: #	B8 B4 &lt;- B2  Freq: 1998.96
        # Block is sole successor of call
038   	testl   RAX, RAX
03a   	jne,s   B8  P=0.000000 C=30340.000000
      	nop 	# 4 bytes pad for loops and calls

040   B4: #	B5 &lt;- B6 B3  top-of-loop Freq: 1e+06
040   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.Options$BurningTask::run @ bci:6  L[0]=_
        # OopMap{off=64}
046
046   B5: #	B2 B6 &lt;- B1 B4 	Loop: B5-B4 inner  Freq: 1e+06
046   	# TLS is in R15
046   	movq    RSI, [R15 + #504 (32-bit)]	# ptr
04d   	
04d   	# TLS is in R15
04d   	movq    R10, [R15 + #312 (32-bit)]	# ptr
054   	# TLS is in R15
054   	movq    R11, [R15 + #504 (32-bit)]	# ptr
05b   	cmpq    R11, RSI	# ptr
05e   	jne,us  B2  P=0.001000 C=-1.000000
05e
060   B6: #	B4 B7 &lt;- B5  Freq: 999000
060   	movl    R11, [R10 + #28 (8-bit)]	# int
064   	testl   R11, R11
067   	je,s   B4  P=0.999000 C=-1.000000
067
069   B7: #	B2 &lt;- B6  Freq: 999
069   	jmp,s   B2
069
06b   B8: #	N95 &lt;- B3  Freq: 0.0476181
06b   	movl    RBP, RAX	# spill
06d   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
073   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.Options$BurningTask::run @ bci:3  L[0]=_ STK[0]=RBP
        # OopMap{off=120}
078   	int3	# ShouldNotReachHere
078
07d   B9: #	N95 &lt;- B2  Freq: 0.952382
07d   	# exception oop is in rax; no code emitted
07d   	movq    RSI, RAX	# spill
080   	addq    rsp, 16	# Destroy frame
	popq   rbp

085   	jmp     rethrow_stub
085

</opto_assembly>
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='100' compile_kind='osr'>
{method}
 - this oop:          0x00007f3755a87df8
 - method holder:     &apos;org/openjdk/jcstress/Options&apos;
 - constants:         0x00007f3755a86030 constant pool [546] {0x00007f3755a86030} for &apos;org/openjdk/jcstress/Options&apos; cache=0x00007f3755a89f60
 - access:            0xc1000002  private 
 - name:              &apos;figureOutHotCPUs&apos;
 - signature:         &apos;()I&apos;
 - max stack:         5
 - max locals:        9
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      10
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef680: 0xb0000000 i2c: 0x00007f3758b11620 c2i: 0x00007f3758b1175a c2iUV: 0x00007f3758b1172d
 - compiled entry     0x00007f3758c314e0
 - code size:         201
 - code start:        0x00007f3755a87cb0
 - code end (excl):   0x00007f3755a87d79
 - method data:       0x00007f3755aab248
 - checked ex length: 0
 - linenumber start:  0x00007f3755a87d79
 - localvar length:   8
 - localvar start:    0x00007f3755a87d96
 - compiled code: nmethod    616   99       3       org.openjdk.jcstress.Options::figureOutHotCPUs (201 bytes)
#
#  int ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N231: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B18 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (192 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c   	movl    R10, [RSI + #16 (8-bit)]	# int
020   	movl    [rsp + #32], R10	# spill
025   	movq    R10, [RSI + #32 (8-bit)]	# long
029   	movq    [rsp + #16], R10	# spill
02e   	movq    RBX, [RSI + #24 (8-bit)]	# ptr
032   	movl    R11, [RSI + #48 (8-bit)]	# int
036   	movl    [rsp + #8], R11	# spill
03b   	movq    RBP, [RSI + #56 (8-bit)]	# ptr
03f   	movq    RDI, RSI	# spill
042   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
04f   	testq   RBP, RBP	# ptr
052   	je     B18  P=0.001000 C=-1.000000
052
058   B2: #	B14 B3 &lt;- B1  Freq: 0.999
058   	movq    R10, RBP	# spill
05b   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
05f   	decode_klass_not_null RSI,R11
06d   	movq    RAX, precise klass java/util/concurrent/ExecutorService: 0x00007f3768319ae0:Constant:exact *	# ptr
077   	movq    R11, [RSI + #32 (8-bit)]	# class
07b   	cmpq    R11, RAX	# ptr
07e   	jne,u  B14  P=0.170000 C=-1.000000
07e
084   B3: #	B4 &lt;- B2 B14  Freq: 0.999
084   	movq    R8, RBP	# spill
087   	# checkcastPP of R8
087
087   B4: #	B19 B5 &lt;- B3 B18  Freq: 1
087   	testq   RBX, RBX	# ptr
08a   	je     B19  P=0.001000 C=-1.000000
08a
090   B5: #	B15 B6 &lt;- B4  Freq: 0.999
090   	movl    R11, [RBX + #8 (8-bit)]	# compressed klass ptr
094   	cmpl    R11, narrowklass: precise klass java/util/ArrayList: 0x00007f376831a2c0:Constant:exact *	# compressed klass ptr
09b   	jne,u  B15  P=0.000001 C=-1.000000
09b
0a1   B6: #	B7 &lt;- B5  Freq: 0.998999
0a1   	# checkcastPP of RBX
0a1
0a1   B7: #	B9 &lt;- B6 B19  Freq: 0.999999
0a1   	movslq  RBP, [RSP + #8 (32-bit)]	# int -&gt; long
0a6   	movq    [rsp + #24], RBX	# spill
0ab   	movq    [rsp + #0], R8	# spill
0af   	jmp,s   B9
0af
0b1   B8: #	B9 &lt;- B12  top-of-loop Freq: 83561.7
0b1   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.Options::figureOutHotCPUs @ bci:124  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=rsp + #24 L[6]=rsp + #32 L[7]=_ L[8]=_
        # OopMap{[0]=Oop [24]=Oop off=177}
0b7
0b7   B9: #	B17 B10 &lt;- B7 B8 	Loop: B9-B8 inner  Freq: 83563.5
0b7   	call_leaf,runtime  currentTimeMillis
        No JVM State Info
        # 
0c4   	subq    RAX, [RSP + #16 (32-bit)]	# long
0c9   	cmpq    RAX, RBP
0cc   	jge     B17  P=0.000000 C=52457.000000
0cc
0d2   B10: #	B16 B11 &lt;- B9  Freq: 83563.5
0d2   	movq    R10, java/lang/Class:exact *	# ptr
0dc   	movl    R10, [R10 + #104 (8-bit)]	# compressed ptr ! Field: java/lang/Runtime.currentRuntime
0e0   	testl   R10, R10	# compressed ptr
0e3   	je     B16  P=0.000001 C=-1.000000
0e3
0e9   B11: #	B20 B12 &lt;- B10  Freq: 83563.4
0e9   	decode_heap_oop_not_null RSI,R10
      	nop 	# 3 bytes pad for loops and calls
0ef   	call,static  java.lang.Runtime::availableProcessors
        # org.openjdk.jcstress.Options::figureOutHotCPUs @ bci:75  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=rsp + #24 L[6]=rsp + #32 L[7]=_ L[8]=_
        # OopMap{[0]=Oop [24]=Oop off=244}
0f4
0f4   B12: #	B8 B13 &lt;- B11  Freq: 83561.7
        # Block is sole successor of call
0f4   	cmpl    RAX, [RSP + #32 (32-bit)]
0f8   	jle,s   B8  P=1.000000 C=52457.000000
0f8
0fa   B13: #	N231 &lt;- B12  Freq: 0.0398453
0fa   	movq    RBP, [rsp + #0]	# spill
0fe   	movl    R10, [rsp + #8]	# spill
103   	movl    [rsp + #0], R10	# spill
107   	movq    R10, [rsp + #16]	# spill
10c   	movq    [rsp + #8], R10	# spill
111   	movq    R10, [rsp + #24]	# spill
116   	movq    [rsp + #16], R10	# spill
11b   	movl    [rsp + #28], RAX	# spill
11f   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
127   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.Options::figureOutHotCPUs @ bci:84  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=_ L[5]=rsp + #16 L[6]=rsp + #32 L[7]=rsp + #28 L[8]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # OopMap{rbp=Oop [16]=Oop off=300}
12c   	int3	# ShouldNotReachHere
12c
131   B14: #	B3 B15 &lt;- B2  Freq: 0.16983
131   	movq    rdi, [RSI + in_bytes(Klass::secondary_supers_offset())]
	movl    rcx, [rdi + Array&lt;Klass*&gt;::length_offset_in_bytes()]	# length to scan
	addq    rdi, Array&lt;Klass*&gt;::base_offset_in_bytes()	# Skip to start of data; set NZ in case count is zero
	repne   scasq	# Scan *rdi++ for a match with rax while cx-- != 0
	jne,s   miss		# Missed: flags nz
	movq    [RSI + in_bytes(Klass::secondary_super_cache_offset())], RAX	# Hit: update cache
	miss:	
15c   	je     B3  P=0.999999 C=-1.000000
15c
162   B15: #	N231 &lt;- B14 B5  Freq: 1.16883e-06
162   	movl    RSI, #-99	# int
167   	movl    RBP, [rsp + #8]	# spill
16b   	movq    R11, [rsp + #16]	# spill
170   	movq    [rsp + #0], R11	# spill
174   	movq    [rsp + #8], RBX	# spill
179   	movq    [rsp + #24], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
17f   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.Options::figureOutHotCPUs @ bci:61  L[0]=_ L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #0 L[4]=_ L[5]=rsp + #8 L[6]=rsp + #32 L[7]=_ L[8]=_
        # OopMap{[8]=Oop [24]=Oop off=388}
184   	int3	# ShouldNotReachHere
184
189   B16: #	N231 &lt;- B10  Freq: 0.0846731
189   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
18f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.Options::figureOutHotCPUs @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # OopMap{off=404}
194   	int3	# ShouldNotReachHere
194
199   B17: #	N231 &lt;- B9  Freq: 0.0398462
199   	cmpq    RAX, RBP	# CmpL3
	movl    RBP, -1
	jl,s    done
	setne   RBP
	movzbl  RBP, RBP
	done:
1ab   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
1b3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.Options::figureOutHotCPUs @ bci:69  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=rsp + #24 L[6]=rsp + #32 L[7]=_ L[8]=_ STK[0]=RBP
        # OopMap{[0]=Oop [24]=Oop off=440}
1b8   	int3	# ShouldNotReachHere
1b8
1bd   B18: #	B4 &lt;- B1  Freq: 0.000999987
1bd   	xorl    R8, R8	# ptr
1c0   	movq    R10, RBP	# spill
1c3   	jmp     B4
1c3
1c8   B19: #	B7 &lt;- B4  Freq: 0.000999987
1c8   	xorl    RBX, RBX	# ptr
1ca   	jmp     B7
1ca
1cf   B20: #	N231 &lt;- B11  Freq: 0.835634
1cf   	# exception oop is in rax; no code emitted
1cf   	movq    RSI, RAX	# spill
1d2   	addq    rsp, 64	# Destroy frame
	popq   rbp

1d7   	jmp     rethrow_stub
1d7

</opto_assembly>
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='194'>
{method}
 - this oop:          0x00007f375586dc50
 - method holder:     &apos;java/util/concurrent/ConcurrentHashMap&apos;
 - constants:         0x00007f3755868870 constant pool [1215] {0x00007f3755868870} for &apos;java/util/concurrent/ConcurrentHashMap&apos; cache=0x00007f37558758f8
 - access:            0x81000018  static final 
 - name:              &apos;setTabAt&apos;
 - signature:         &apos;([Ljava/util/concurrent/ConcurrentHashMap$Node;ILjava/util/concurrent/ConcurrentHashMap$Node;)V&apos;
 - max stack:         7
 - max locals:        3
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680efef0: 0xbab00000 i2c: 0x00007f3758b1fb60 c2i: 0x00007f3758b1fca1 c2iUV: 0x00007f3758b1fc74
 - compiled entry     0x00007f3758c11140
 - code size:         19
 - code start:        0x00007f375586dc08
 - code end (excl):   0x00007f375586dc1b
 - method data:       0x00007f37559bd2b0
 - checked ex length: 0
 - linenumber start:  0x00007f375586dc1b
 - localvar length:   3
 - localvar start:    0x00007f375586dc28
 - compiled code: nmethod   1629   44       3       java.util.concurrent.ConcurrentHashMap::setTabAt (19 bytes)
#
#  void ( narrowoop: java/util/concurrent/ConcurrentHashMap$Node *[int:&gt;=0] *, int, java/util/concurrent/ConcurrentHashMap$Node * )
#
#r018 rsi:rsi   : parm 0: narrowoop: java/util/concurrent/ConcurrentHashMap$Node *[int:&gt;=0] *
#r016 rdx   : parm 1: int
#r010 rcx:rcx   : parm 2: java/util/concurrent/ConcurrentHashMap$Node *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B3  Freq: 1
abababab
000   B1: #	B4 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	MEMBAR-release ! (empty encoding)
00c   	
00c   	movslq  R10, RDX	# i2l
00f   	leaq    R10, [RSI + #16 + R10 &lt;&lt; #2]	# ptr idxscaleoff
014   	encode_heap_oop R11,RCX
09f   	testq   RSI, RSI	# ptr
0a2   	jne,s   B4  P=0.001000 C=-1.000000
0a2
0a4   B2: #	B3 &lt;- B1  Freq: 0.999
0a4   	movl    [R10], R11	# compressed ptr
0a4
0a7   B3: #	N1 &lt;- B2 B4  Freq: 1
0a7   	lock addl [rsp + #0], 0	! membar_volatile
0ac   	
0ac   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0b7   	ret
0b7
0b8   B4: #	B3 &lt;- B1  Freq: 0.000999987
0b8   	movl    [R10], R11	# compressed ptr
0bb   	movq    R10, R10	# ptr -&gt; long
0bb   	movq    R11, 0x00007f3757e0b000	# ptr
0c5   	shrq    R10, #9
0c9   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
0cd   	jmp,s   B3
0cd

</opto_assembly>
<writer thread='139875533833984'/>
<opto_assembly compile_id='182'>
{method}
 - this oop:          0x00007f375568a588
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f37556850e8 constant pool [680] {0x00007f37556850e8} for &apos;java/lang/String&apos; cache=0x00007f375574e5e0
 - access:            0xc1000001  public 
 - name:              &apos;lastIndexOf&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         4
 - max locals:        5
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef6c8: 0xbaa00000 i2c: 0x00007f3758b11ca0 c2i: 0x00007f3758b11de0 c2iUV: 0x00007f3758b11db3
 - compiled entry     0x00007f3758c02bc0
 - code size:         52
 - code start:        0x00007f375568a500
 - code end (excl):   0x00007f375568a534
 - method data:       0x00007f375592c228
 - checked ex length: 0
 - linenumber start:  0x00007f375568a534
 - localvar length:   5
 - localvar start:    0x00007f375568a54a
 - compiled code: nmethod   1651   26       3       java.lang.String::lastIndexOf (52 bytes)
#
#  int ( java/lang/String:NotNull:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N232: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B30 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (152 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movq    R10, RSI	# spill
02f   	cmpl    RDX, #65536
035   	jge     B30  P=0.000000 C=653.000000
035
03b   B2: #	B31 B3 &lt;- B1  Freq: 1
03b   	movl    RBX, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
03e   	movl    R11, [RBX + #12 (8-bit)]	# range
042   	NullCheck RBX
042
042   B3: #	B22 B4 &lt;- B2  Freq: 0.999999
042   	movl    RAX, R11	# spill
045   	decl    RAX	# int
047   	cmpl    RCX, RAX
049   	cmovll RAX, RCX	# signed, int
04c   	testl   RAX, RAX
04e   	jl     B22  P=0.002876 C=17038.000000
04e
054   B4: #	B28 B5 &lt;- B3  Freq: 0.997123
054   	movl    RSI, #-122	# int
059   	testl  R11, R11	# unsigned
05c   	jbe,u  B28  P=0.000001 C=-1.000000
05c
062   B5: #	B28 B6 &lt;- B4  Freq: 0.997122
062   	cmpl    RAX, R11	# unsigned
065   	jnb,u  B28  P=0.000001 C=-1.000000
065
06b   B6: #	B7 &lt;- B5  Freq: 0.997121
06b   	movl    R10, RAX	# spill
06e   	decl    R10	# int
071
071   B7: #	B26 B8 &lt;- B6 B9 	Loop: B7-B9 inner pre of N162 Freq: 1.92578
071   	movl    R11, RAX	# spill
074   	decl    R11	# int
077   	movzwl  R8, [RBX + #16 + RAX &lt;&lt; #1]	# ushort/char
07d   	cmpl    R8, RDX
080   	je     B26  P=0.035552 C=16989.000000
080
086   B8: #	B10 B9 &lt;- B7  Freq: 1.85731
086   	cmpl    R11, R10
089   	jle,s   B10	# loop end  P=0.500000 C=16385.000000
089
08b   B9: #	B7 &lt;- B8  Freq: 0.928655
08b   	movl    RAX, R11	# spill
08e   	jmp,s   B7
08e
090   B10: #	B29 B11 &lt;- B8  Freq: 0.928654
090   	cmpl    R11, #2
094   	jle     B29  P=0.000001 C=-1.000000
094
09a   B11: #	B13 &lt;- B10  Freq: 0.928654
09a   	# castII of R11
09a   	jmp,s   B13
      	nop 	# 4 bytes pad for loops and calls

0a0   B12: #	B13 &lt;- B17  top-of-loop Freq: 5.83541
0a0   	movl    R11, R9	# spill
0a0
0a3   B13: #	B25 B14 &lt;- B11 B12 	Loop: B13-B12 inner main of N97 Freq: 6.76406
0a3   	movzwl  R10, [RBX + #12 + R11 &lt;&lt; #1]	# ushort/char
0a9   	movl    R9, R11	# spill
0ac   	addl    R9, #-4	# int
0b0   	movzwl  RCX, [RBX + #16 + R11 &lt;&lt; #1]	# ushort/char
0b6   	cmpl    RCX, RDX
0b8   	je,s   B25  P=0.035552 C=16989.000000
0b8
0ba   B14: #	B23 B15 &lt;- B13  Freq: 6.52358
0ba   	movl    RAX, R11	# spill
0bd   	addl    RAX, #-2	# int
0c0   	movzwl  RCX, [RBX + #14 + R11 &lt;&lt; #1]	# ushort/char
0c6   	movzwl  R8, [RBX + #10 + R11 &lt;&lt; #1]	# ushort/char
0cc   	cmpl    RCX, RDX
0ce   	je,s   B23  P=0.035552 C=16989.000000
0ce
0d0   B15: #	B26 B16 &lt;- B14  Freq: 6.29165
0d0   	cmpl    R10, RDX
0d3   	je,s   B26  P=0.035552 C=16989.000000
0d3
0d5   B16: #	B24 B17 &lt;- B15  Freq: 6.06797
0d5   	cmpl    R8, RDX
0d8   	je,s   B24  P=0.035552 C=16989.000000
0d8
0da   B17: #	B12 B18 &lt;- B16  Freq: 5.85224
0da   	cmpl    R9, #2
0de   	jg,s   B12	# loop end  P=0.997124 C=16385.000000
0de
0e0   B18: #	B22 B19 &lt;- B29 B17  Freq: 0.0168315
0e0   	cmpl    R9, #-1
0e4   	jle,s   B22  P=0.500000 C=-1.000000
0e4
0e6   B19: #	B20 &lt;- B18  Freq: 0.00841577
0e6   	# castII of R9
      	nop 	# 2 bytes pad for loops and calls

0e8   B20: #	B27 B21 &lt;- B19 B21 	Loop: B20-B21 inner post of N162 Freq: 0.0162537
0e8   	movzwl  R11, [RBX + #16 + R9 &lt;&lt; #1]	# ushort/char
0ee   	cmpl    R11, RDX
0f1   	je,s   B27  P=0.035552 C=16989.000000
0f1
0f3   B21: #	B20 B22 &lt;- B20  Freq: 0.0156758
0f3   	decl    R9	# int
0f6   	cmpl    R9, #-1
0fa   	jg,s   B20	# loop end  P=0.500000 C=16385.000000
0fa
0fc   B22: #	B26 &lt;- B18 B3 B21  Freq: 0.0191296
0fc   	movl    RAX, #-1	# int
101   	jmp,s   B26
101
103   B23: #	B24 &lt;- B14  Freq: 0.231929
103   	movl    RAX, R11	# spill
103
106   B24: #	B26 &lt;- B23 B16  Freq: 0.44766
106   	decl    RAX	# int
108   	jmp,s   B26
108
10a   B25: #	B26 &lt;- B13  Freq: 0.240479
10a   	movl    RAX, R11	# spill
10a
10d   B26: #	N232 &lt;- B27 B7 B25 B15 B24 B22  Freq: 0.999996
10d   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

118   	ret
118
119   B27: #	B26 &lt;- B20  Freq: 0.000577858
119   	movl    RAX, R9	# spill
11c   	jmp,s   B26
11c
11e   B28: #	N232 &lt;- B5 B4  Freq: 2.00748e-06
11e   	movl    RBP, RDX	# spill
120   	movl    [rsp + #0], RBX	# spill
123   	movl    [rsp + #4], RAX	# spill
127   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::lastIndexOf @ bci:26  L[0]=_ L[1]=RBP L[2]=_ L[3]=rsp + #0 L[4]=rsp + #4
        # OopMap{[0]=NarrowOop off=300}
12c   	int3	# ShouldNotReachHere
12c
131   B29: #	B18 &lt;- B10  Freq: 9.40986e-07
131   	movl    R9, R11	# spill
134   	jmp,s   B18
134
136   B30: #	N232 &lt;- B1  Freq: 4.76837e-07
136   	movl    RSI, #-155	# int
13b   	movl    [rsp + #0], RDX	# spill
13e   	movq    [rsp + #8], R10	# spill
143   	movl    [rsp + #4], RCX	# spill
147   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::lastIndexOf @ bci:3  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ L[4]=_ STK[0]=rsp + #0 STK[1]=#65536
        # OopMap{[8]=Oop off=332}
14c   	int3	# ShouldNotReachHere
14c
151   B31: #	N232 &lt;- B2  Freq: 1.01328e-06
151   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
157   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::lastIndexOf @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=348}
15c   	int3	# ShouldNotReachHere
15c

</opto_assembly>
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
<opto_assembly compile_id='212'>
{method}
 - this oop:          0x00007f375579c9d8
 - method holder:     &apos;java/lang/Math&apos;
 - constants:         0x00007f37557997e0 constant pool [324] {0x00007f37557997e0} for &apos;java/lang/Math&apos; cache=0x00007f375579e240
 - access:            0x81000009  public static 
 - name:              &apos;min&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - intrinsic id:      14 _min
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680f0298: 0xaa000000 i2c: 0x00007f3758b22560 c2i: 0x00007f3758b2269c c2iUV: 0x00007f3758b2266f
 - compiled entry     0x00007f3758bfc740
 - code size:         11
 - code start:        0x00007f375579c9a8
 - code end (excl):   0x00007f375579c9b3
 - method data:       0x00007f37558f8d00
 - checked ex length: 0
 - linenumber start:  0x00007f375579c9b3
 - localvar length:   2
 - localvar start:    0x00007f375579c9be
 - compiled code: nmethod   1668    9       3       java.lang.Math::min (11 bytes)
#
#  int ( int, int )
#
#r018 rsi   : parm 0: int
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B1  Freq: 1
abababab
000   B1: #	N1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	cmpl    RSI, RDX
00e   	movl    RAX, RDX	# spill
010   	cmovlle RAX, RSI	# signed, int
013   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

01e   	ret
01e

</opto_assembly>
<writer thread='139875533833984'/>
<opto_assembly compile_id='227'>
{method}
 - this oop:          0x00007f3755a63cd0
 - method holder:     &apos;jdk/internal/org/objectweb/asm/ByteVector&apos;
 - constants:         0x00007f3755a62fc0 constant pool [90] {0x00007f3755a62fc0} for &apos;jdk/internal/org/objectweb/asm/ByteVector&apos; cache=0x00007f3755a641e0
 - access:            0xc1000001  public 
 - name:              &apos;putUTF8&apos;
 - signature:         &apos;(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/ByteVector;&apos;
 - max stack:         5
 - max locals:        7
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      7
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef710: 0xbb000000 i2c: 0x00007f3758b11fa0 c2i: 0x00007f3758b120de c2iUV: 0x00007f3758b120b1
 - compiled entry     0x00007f3758c3f820
 - code size:         142
 - code start:        0x00007f3755a63bd0
 - code end (excl):   0x00007f3755a63c5e
 - method data:       0x00007f3755a83888
 - checked ex length: 0
 - linenumber start:  0x00007f3755a63c5e
 - localvar length:   7
 - localvar start:    0x00007f3755a63c7a
 - compiled code: nmethod   1698  135       3       jdk.internal.org.objectweb.asm.ByteVector::putUTF8 (142 bytes)
#
#  jdk/internal/org/objectweb/asm/ByteVector * ( jdk/internal/org/objectweb/asm/ByteVector:NotNull *, java/lang/String:exact * )
#
#r018 rsi:rsi   : parm 0: jdk/internal/org/objectweb/asm/ByteVector:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/String:exact *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N813: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B74 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (264 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movq    RBX, RSI	# spill
02f   	movl    RSI, #-10	# int
034   	movq    RDI, RDX	# spill
037   	movl    R8, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
03b   	NullCheck RDX
03b
03b   B2: #	B75 B3 &lt;- B1  Freq: 0.999999
03b   	movl    R11, [RBX + #12 (8-bit)]	# int ! Field: jdk/internal/org/objectweb/asm/ByteVector.length
03f   	movslq  RSI, R11	# i2l
042   	movl    RCX, [R8 + #12 (8-bit)]	# range
046   	NullCheck R8
046
046   B3: #	B71 B4 &lt;- B2  Freq: 0.999998
046   	movl    R10, RCX	# spill
049   	addl    R10, R11	# int
04c   	movslq  RAX, R11	# i2l
04f   	movl    R9, [RBX + #16 (8-bit)]	# compressed ptr ! Field: jdk/internal/org/objectweb/asm/ByteVector.data
053   	movl    RBP, R11	# spill
056   	incl    RBP	# int
058   	movl    RDX, RCX	# spill
05a   	addl    RDX, #2	# int
05d   	cmpl    RCX, #65535
063   	jg     B71  P=0.000000 C=749.000000
063
069   B4: #	B76 B5 &lt;- B3  Freq: 0.999997
069   	movl    [rsp + #36], RBP	# spill
06d   	movq    [rsp + #40], RAX	# spill
072   	movl    [rsp + #0], R10	# spill
076   	movq    [rsp + #8], RSI	# spill
07b   	movq    [rsp + #24], RBX	# spill
080   	movq    [rsp + #16], RDI	# spill
085   	movl    [rsp + #4], R11	# spill
08a   	addl    R11, #2	# int
08e   	movl    [rsp + #48], R11	# spill
093   	movl    [rsp + #32], RCX	# spill
097   	shrl    RCX, #8
09a   	movl    [rsp + #52], RCX	# spill
09e   	movl    R10, #1	# int
0a4   	movl    RSI, #-10	# int
0a9   	movsbl  RCX, RCX	# i2b
0ac   	movl    [rsp + #56], RCX	# spill
0b0   	movl    RCX, [rsp + #32]	# spill
0b4   	cmpl    RCX, R10
0b7   	movl    R11, RCX	# spill
0ba   	cmovlgt R11, R10	# min
0be   	movl    [rsp + #60], R11	# spill
0c3   	movl    R11, [R9 + #12 (8-bit)]	# range
0c7   	NullCheck R9
0c7
0c7   B5: #	B9 B6 &lt;- B4  Freq: 0.999996
0c7   	movsbl  RBP, RCX	# i2b
0ca   	movl    R10, [rsp + #0]	# spill
0ce   	addl    R10, #2	# int
0d2   	cmpl    R10, R11
0d5   	jle,s   B9  P=0.794393 C=749.000000
0d5
0d7   B6: #	B73 B7 &lt;- B5  Freq: 0.205607
0d7   	movq    RSI, RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
0db   	call,static  jdk.internal.org.objectweb.asm.ByteVector::enlarge
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:41  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=rsp + #4 L[4]=_ L[5]=_ L[6]=_
        # OopMap{[16]=Oop [24]=Oop off=224}
0e0
0e0   B7: #	B72 B8 &lt;- B6  Freq: 0.205603
        # Block is sole successor of call
0e0   	movq    R10, [rsp + #24]	# spill
0e5   	movl    R9, [R10 + #16 (8-bit)]	# compressed ptr ! Field: jdk/internal/org/objectweb/asm/ByteVector.data
0e9   	movl    RSI, #-10	# int
0ee   	testl   R9, R9	# compressed ptr
0f1   	je     B72  P=0.000001 C=-1.000000
0f1
0f7   B8: #	B9 &lt;- B7  Freq: 0.205602
0f7   	movq    R10, [rsp + #16]	# spill
0fc   	movl    R8, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
0fc
100   B9: #	B60 B10 &lt;- B8 B5  Freq: 0.999992
100   	movl    RDI, [R9 + #12 (8-bit)]	# range
104   	movl    RSI, #-28	# int
109   	movl    R10, [rsp + #4]	# spill
10e   	cmpl    R10, RDI	# unsigned
111   	jnb,u  B60  P=0.000001 C=-1.000000
111
117   B10: #	B61 B11 &lt;- B9  Freq: 0.999991
117   	movq    R10, [rsp + #8]	# spill
11c   	movl    RCX, [rsp + #52]	# spill
120   	movb    [R9 + #16 + R10], RCX	# byte
125   	movl    R10, [rsp + #36]	# spill
12a   	cmpl    R10, RDI	# unsigned
12d   	jnb,u  B61  P=0.000001 C=-1.000000
12d
133   B11: #	B46 B12 &lt;- B10  Freq: 0.99999
133   	movq    R10, [rsp + #40]	# spill
138   	movl    R14, [rsp + #32]	# spill
13d   	movb    [R9 + #17 + R10], R14	# byte
142   	xorl    RSI, RSI	# int
144   	movl    RCX, R14	# spill
147   	decl    RCX	# int
149   	testl   R14, R14
14c   	jle     B46  P=0.028829 C=25981.000000
14c
152   B12: #	B62 B13 &lt;- B11  Freq: 0.971162
152   	movl    RAX, #-2147483648	# int
157   	movl    RBX, [rsp + #0]	# spill
15a   	incl    RBX	# int
15c   	movl    R10, [R8 + #12 (8-bit)]	# range
160   	NullCheck R8
160
160   B13: #	B62 B14 &lt;- B12  Freq: 0.971161
160   	testl  R10, R10	# unsigned
163   	jbe,u  B62  P=0.000001 C=-1.000000
163
169   B14: #	B62 B15 &lt;- B13  Freq: 0.97116
169   	cmpl    RCX, R10	# unsigned
16c   	jnb,u  B62  P=0.000001 C=-1.000000
16c
172   B15: #	B62 B16 &lt;- B14  Freq: 0.971159
172   	cmpl    R14, R10
175   	movl    R11, R14	# spill
178   	cmovlgt R11, R10	# min
17c   	movl    RDX, [rsp + #48]	# spill
180   	cmpl    RDX, RDI	# unsigned
182   	jnb,u  B62  P=0.000001 C=-1.000000
182
188   B16: #	B62 B17 &lt;- B15  Freq: 0.971158
188   	movl    RDX, R11	# spill
18b   	addl    RDX, #-3	# int
18e   	cmpl    RBX, RDI	# unsigned
190   	jnb,u  B62  P=0.000001 C=-1.000000
190
196   B17: #	B18 &lt;- B16  Freq: 0.971157
196   	cmpl    R11, RDX
199   	cmovll RDX, RAX	# signed, int
19c
19c   B18: #	B63 B19 &lt;- B17 B23 	Loop: B18-B23 inner pre of N412 Freq: 1.94231
19c   	movl    R11, RSI	# spill
19f   	addl    R11, [RSP + #4 (32-bit)]	# int
1a4   	movl    RDI, R11	# spill
1a7   	addl    RDI, #2	# int
1aa   	testl   RSI, RSI
1ac   	jl     B63  P=0.000000 C=7895.000000
1ac
1b2   B19: #	B67 B20 &lt;- B18  Freq: 1.94231
1b2   	movzwl  RBX, [R8 + #16 + RSI &lt;&lt; #1]	# ushort/char
1b8   	cmpl    RSI, R10
1bb   	jge     B67  P=0.000000 C=7895.000000
1bb
1c1   B20: #	B66 B21 &lt;- B19  Freq: 1.94231
1c1   	movl    RCX, RSI	# spill
1c3   	incl    RCX	# int
1c5   	movl    RAX, R11	# spill
1c8   	addl    RAX, #2	# int
1cb   	cmpl    RBX, #1
1ce   	jl     B66  P=0.000000 C=25232.000000
1ce
1d4   B21: #	B58 B22 &lt;- B20  Freq: 1.94231
1d4   	movslq  RDI, R11	# i2l
1d7   	movl    RAX, R11	# spill
1da   	addl    RAX, #2	# int
1dd   	cmpl    RBX, #127
1e0   	jg     B58  P=0.000000 C=25232.000000
1e0
1e6   B22: #	B24 B23 &lt;- B21  Freq: 1.94231
1e6   	movb    [R9 + #18 + RDI], RBX	# byte
1eb   	cmpl    RCX, [RSP + #60 (32-bit)]
1ef   	jge,s   B24	# loop end  P=0.500000 C=25232.000000
1ef
1f1   B23: #	B18 &lt;- B22  Freq: 0.971153
1f1   	movl    RSI, RCX	# spill
1f3   	jmp,s   B18
1f3
1f5   B24: #	B36 B25 &lt;- B22  Freq: 0.971153
1f5   	cmpl    RCX, RDX
1f7   	jge     B36  P=0.000001 C=-1.000000
1f7
1fd   B25: #	B26 &lt;- B24  Freq: 0.971152
1fd   	# castII of RCX
1fd   	movdl   XMM1, R10	# spill
      	nop 	# 14 bytes pad for loops and calls

210   B26: #	B48 B27 &lt;- B25 B34 	Loop: B26-B34 inner main of N245 Freq: 33.6825
210   	movslq  RDI, RCX	# i2l
213   	movzwl  R10, [R8 + #16 + RCX &lt;&lt; #1]	# ushort/char
219   	movzwl  RBX, [R8 + #18 + RDI &lt;&lt; #1]	# ushort/char
21f   	movl    R11, RCX	# spill
222   	addl    R11, [RSP + #4 (32-bit)]	# int
227   	movl    [rsp + #0], R11	# spill
22b   	movl    R13, R11	# spill
22e   	addl    R13, #2	# int
232   	movl    RAX, R11	# spill
235   	addl    RAX, #5	# int
238   	movslq  RBP, R11	# i2l
23b   	cmpl    R10, #1
23f   	jl     B48  P=0.000000 C=25232.000000
23f
245   B27: #	B54 B28 &lt;- B26  Freq: 33.6825
245   	movl    R13, R11	# spill
248   	addl    R13, #4	# int
24c   	movl    RSI, RCX	# spill
24e   	addl    RSI, #2	# int
251   	cmpl    R10, #127
255   	jg     B54  P=0.000000 C=25232.000000
255
25b   B28: #	B49 B29 &lt;- B27  Freq: 33.6825
25b   	movb    [R9 + #18 + RBP], R10	# byte
260   	addl    R11, #3	# int
264   	cmpl    RBX, #1
267   	jl     B49  P=0.000000 C=25232.000000
267
26d   B29: #	B56 B30 &lt;- B28  Freq: 33.6824
26d   	movl    R10, [rsp + #0]	# spill
271   	addl    R10, #3	# int
275   	cmpl    RBX, #127
278   	jg     B56  P=0.000000 C=25232.000000
278
27e   B30: #	B47 B31 &lt;- B29  Freq: 33.6824
27e   	movb    [R9 + #19 + RBP], RBX	# byte
283   	movl    R11, RCX	# spill
286   	addl    R11, #2	# int
28a   	movzwl  R10, [R8 + #20 + RDI &lt;&lt; #1]	# ushort/char
290   	cmpl    R10, #1
294   	jl     B47  P=0.000000 C=25232.000000
294
29a   B31: #	B55 B32 &lt;- B30  Freq: 33.6824
29a   	cmpl    R10, #127
29e   	jg     B55  P=0.000000 C=25232.000000
29e
2a4   B32: #	B50 B33 &lt;- B31  Freq: 33.6824
2a4   	movb    [R9 + #20 + RBP], R10	# byte
2a9   	movzwl  RBX, [R8 + #22 + RDI &lt;&lt; #1]	# ushort/char
2af   	cmpl    RBX, #1
2b2   	jl     B50  P=0.000000 C=25232.000000
2b2
2b8   B33: #	B57 B34 &lt;- B32  Freq: 33.6824
2b8   	addl    RCX, #4	# int
2bb   	cmpl    RBX, #127
2be   	jg     B57  P=0.000000 C=25232.000000
2be
2c4   B34: #	B26 B35 &lt;- B33  Freq: 33.6824
2c4   	movb    [R9 + #21 + RBP], RBX	# byte
2c9   	movl    R11, [rsp + #0]	# spill
2cd   	addl    R11, #3	# int
2d1   	cmpl    RCX, RDX
2d3   	jl     B26	# loop end  P=0.971171 C=25232.000000
2d3
2d9   B35: #	B36 &lt;- B34  Freq: 0.97102
2d9   	movdl   R10, XMM1	# spill
2d9
2de   B36: #	B44 B37 &lt;- B24 B35  Freq: 0.971021
2de   	cmpl    RCX, R14
2e1   	jge,s   B44  P=0.500000 C=-1.000000
2e1
2e3   B37: #	B38 &lt;- B36  Freq: 0.485511
2e3   	# castII of RCX
      	nop 	# 1 bytes pad for loops and calls

2e4   B38: #	B64 B39 &lt;- B37 B43 	Loop: B38-B43 inner post of N412 Freq: 0.971019
2e4   	movl    R11, RCX	# spill
2e7   	addl    R11, [RSP + #4 (32-bit)]	# int
2ec   	movzwl  RBX, [R8 + #16 + RCX &lt;&lt; #1]	# ushort/char
2f2   	testl   RCX, RCX
2f4   	jl     B64  P=0.000000 C=7895.000000
2f4
2fa   B39: #	B68 B40 &lt;- B38  Freq: 0.971019
2fa   	cmpl    RCX, R10
2fd   	jge     B68  P=0.000000 C=7895.000000
2fd
303   B40: #	B70 B41 &lt;- B39  Freq: 0.971018
303   	movl    RDX, RCX	# spill
305   	incl    RDX	# int
307   	movl    RAX, R11	# spill
30a   	addl    RAX, #2	# int
30d   	cmpl    RBX, #1
310   	jl     B70  P=0.000000 C=25232.000000
310
316   B41: #	B59 B42 &lt;- B40  Freq: 0.971018
316   	movslq  RDI, R11	# i2l
319   	cmpl    RBX, #127
31c   	jg     B59  P=0.000000 C=25232.000000
31c
322   B42: #	B44 B43 &lt;- B41  Freq: 0.971017
322   	movb    [R9 + #18 + RDI], RBX	# byte
327   	cmpl    RDX, R14
32a   	jge,s   B44	# loop end  P=0.500000 C=25232.000000
32a
32c   B43: #	B38 &lt;- B42  Freq: 0.485509
32c   	movl    RCX, RDX	# spill
32e   	jmp,s   B38
32e
330   B44: #	B45 &lt;- B42 B36  Freq: 0.971019
330   	addl    R11, #3	# int
334
334   B45: #	N813 &lt;- B44 B46  Freq: 0.999848
334   	movq    RAX, [rsp + #24]	# spill
339   	movl    [RAX + #12 (8-bit)], R11	# int ! Field: jdk/internal/org/objectweb/asm/ByteVector.length
33d   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

348   	ret
348
349   B46: #	B45 &lt;- B11  Freq: 0.0288285
349   	movl    R11, [rsp + #48]	# spill
34e   	jmp,s   B45
34e
350   B47: #	B48 &lt;- B30  Freq: 1.68412e-05
350   	addl    RCX, #2	# int
353
353   B48: #	B52 &lt;- B26 B47  Freq: 3.36825e-05
353   	movl    RBX, R10	# spill
356   	movl    RAX, R13	# spill
359   	jmp,s   B52
359
35b   B49: #	B51 &lt;- B28  Freq: 1.68412e-05
35b   	movl    RAX, R11	# spill
35e   	jmp,s   B51
35e
360   B50: #	B51 &lt;- B32  Freq: 1.68412e-05
360   	addl    RCX, #2	# int
363
363   B51: #	B52 &lt;- B49 B50  Freq: 3.36824e-05
363   	incl    RCX	# int
365
365   B52: #	B53 &lt;- B66 B48 B51  Freq: 6.8336e-05
365   	movl    R10, RAX	# spill
365
368   B53: #	N813 &lt;- B70 B52  Freq: 6.88216e-05
368   	movl    RBP, R10	# spill
36b   	movl    [rsp + #0], R9	# spill
36f   	movl    [rsp + #4], RCX	# spill
373   	movl    [rsp + #12], RBX	# spill
377   	movl    [rsp + #32], R14	# spill
37c   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
383   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:91  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #12 STK[0]=rsp + #12 STK[1]=#1
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=904}
388   	int3	# ShouldNotReachHere
388
38d   B54: #	B55 &lt;- B27  Freq: 1.60611e-05
38d   	movl    R13, R11	# spill
390   	addl    R13, #2	# int
394   	movl    R11, RCX	# spill
394
397   B55: #	B58 &lt;- B54 B31  Freq: 3.21221e-05
397   	movl    RBX, R10	# spill
39a   	movl    RSI, R11	# spill
39d   	movl    RAX, R13	# spill
3a0   	jmp,s   B58
3a0
3a2   B56: #	B57 &lt;- B29  Freq: 1.6061e-05
3a2   	movl    RSI, RCX	# spill
3a4   	movl    RAX, R10	# spill
3a4
3a7   B57: #	B58 &lt;- B56 B33  Freq: 3.21221e-05
3a7   	incl    RSI	# int
3a9
3a9   B58: #	B59 &lt;- B21 B55 B57  Freq: 6.51703e-05
3a9   	movl    RCX, RSI	# spill
3a9
3ab   B59: #	N813 &lt;- B41 B58  Freq: 6.56333e-05
3ab   	movl    RBP, RAX	# spill
3ad   	movl    [rsp + #0], R9	# spill
3b1   	movl    [rsp + #4], RCX	# spill
3b5   	movl    [rsp + #12], RBX	# spill
3b9   	movl    RSI, #-155	# int
3be   	movl    [rsp + #32], R14	# spill
3c3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:98  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #12 STK[0]=rsp + #12 STK[1]=#127
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=968}
3c8   	int3	# ShouldNotReachHere
3c8
3cd   B60: #	N813 &lt;- B9  Freq: 1.01327e-06
3cd   	movl    [rsp + #0], R9	# spill
3d1   	movq    R10, [rsp + #24]	# spill
3d6   	movq    [rsp + #8], R10	# spill
3db   	movl    R11, [rsp + #32]	# spill
3e0   	movl    [rsp + #24], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
3e7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:61  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #36 L[4]=rsp + #0 L[5]=_ L[6]=_ STK[0]=rsp + #0 STK[1]=rsp + #4 STK[2]=rsp + #56
        # OopMap{[0]=NarrowOop [8]=Oop [16]=Oop off=1004}
3ec   	int3	# ShouldNotReachHere
3ec
3f1   B61: #	N813 &lt;- B10  Freq: 1.01327e-06
3f1   	movl    [rsp + #8], R9	# spill
3f6   	movl    R10, [rsp + #32]	# spill
3fb   	movl    [rsp + #12], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
403   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:70  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #12 L[3]=rsp + #48 L[4]=rsp + #8 L[5]=_ L[6]=_ STK[0]=rsp + #8 STK[1]=rsp + #36 STK[2]=RBP
        # OopMap{[8]=NarrowOop [16]=Oop [24]=Oop off=1032}
408   	int3	# ShouldNotReachHere
408
40d   B62: #	N813 &lt;- B16 B12 B13 B14 B15  Freq: 4.90738e-06
40d   	movl    RBP, [rsp + #48]	# spill
411   	movl    [rsp + #0], R9	# spill
415   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
41b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:80  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=rsp + #0 L[5]=#0 L[6]=_
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=1056}
420   	int3	# ShouldNotReachHere
420
425   B63: #	B65 &lt;- B18  Freq: 9.71155e-07
425   	addl    R11, #2	# int
429   	movl    RCX, RSI	# spill
42b   	jmp,s   B65
42b
42d   B64: #	B65 &lt;- B38  Freq: 4.8551e-07
42d   	addl    R11, #2	# int
431
431   B65: #	N813 &lt;- B64 B63  Freq: 1.45666e-06
431   	movl    RBP, R11	# spill
434   	movl    [rsp + #0], R9	# spill
438   	movl    [rsp + #8], RCX	# spill
43c   	movl    [rsp + #12], RCX	# spill
440   	movl    [rsp + #32], R14	# spill
445   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
44b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #16 L[1]=rsp + #12 STK[0]=rsp + #8
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:83  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=rsp + #0 L[5]=rsp + #8 L[6]=_
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=1104}
450   	int3	# ShouldNotReachHere
450
455   B66: #	B52 &lt;- B20  Freq: 9.71154e-07
455   	movl    RCX, RSI	# spill
457   	jmp     B52
457
45c   B67: #	B69 &lt;- B19  Freq: 9.26165e-07
45c   	movl    RCX, RSI	# spill
45e   	movl    R11, RDI	# spill
461   	jmp,s   B69
461
463   B68: #	B69 &lt;- B39  Freq: 4.63018e-07
463   	addl    R11, #2	# int
467
467   B69: #	N813 &lt;- B68 B67  Freq: 1.38918e-06
467   	movl    RBP, R11	# spill
46a   	movl    [rsp + #0], R9	# spill
46e   	movl    [rsp + #8], RCX	# spill
472   	movl    [rsp + #12], RCX	# spill
476   	movl    [rsp + #32], R14	# spill
47b   	movl    RSI, #-155	# int
480   	movl    [rsp + #36], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
487   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #16 L[1]=rsp + #12 STK[0]=rsp + #8 STK[1]=rsp + #36
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:83  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=rsp + #0 L[5]=rsp + #8 L[6]=_
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=1164}
48c   	int3	# ShouldNotReachHere
48c
491   B70: #	B53 &lt;- B40  Freq: 4.85509e-07
491   	movl    R10, R11	# spill
494   	addl    R10, #2	# int
498   	jmp     B53
498
49d   B71: #	N813 &lt;- B3  Freq: 4.76836e-07
49d   	movq    RBP, RBX	# spill
4a0   	movq    [rsp + #0], RDI	# spill
4a4   	movl    [rsp + #12], RCX	# spill
4a8   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
4af   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:8  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #12 STK[1]=#65535
        # OopMap{rbp=Oop [0]=Oop off=1204}
4b4   	int3	# ShouldNotReachHere
4b4
4b9   B72: #	N813 &lt;- B7  Freq: 2.08333e-07
4b9   	movl    RBP, [rsp + #4]	# spill
      	nop 	# 2 bytes pad for loops and calls
4bf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:61  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #56
        # OopMap{off=1220}
4c4   	int3	# ShouldNotReachHere
4c4
4c9   B73: #	N813 &lt;- B6  Freq: 2.05607e-06
4c9   	# exception oop is in rax; no code emitted
4c9   	movq    RSI, RAX	# spill
4cc   	addq    rsp, 80	# Destroy frame
	popq   rbp

4d1   	jmp     rethrow_stub
4d1
4d6   B74: #	N813 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 1 bytes pad for loops and calls
4d7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=1244}
4dc   	int3	# ShouldNotReachHere
4dc
4e1   B75: #	N813 &lt;- B2  Freq: 1.01328e-06
4e1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
4e7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=1260}
4ec   	int3	# ShouldNotReachHere
4ec
4f1   B76: #	N813 &lt;- B4  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
4f3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:33  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1272}
4f8   	int3	# ShouldNotReachHere
4f8

</opto_assembly>
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='242'>
{method}
 - this oop:          0x00007f37556892e0
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f37556850e8 constant pool [680] {0x00007f37556850e8} for &apos;java/lang/String&apos; cache=0x00007f375574e5e0
 - access:            0xc1000001  public 
 - name:              &apos;equals&apos;
 - signature:         &apos;(Ljava/lang/Object;)Z&apos;
 - max stack:         4
 - max locals:        7
 - size of params:    2
 - method size:       12
 - intrinsic id:      67 _equals
 - highest level:     3
 - vtable index:      1
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef710: 0xbb000000 i2c: 0x00007f3758b11fa0 c2i: 0x00007f3758b120de c2iUV: 0x00007f3758b120b1
 - compiled entry     0x00007f3758bfb220
 - code size:         81
 - code start:        0x00007f3755689220
 - code end (excl):   0x00007f3755689271
 - method data:       0x00007f37558c0240
 - checked ex length: 0
 - linenumber start:  0x00007f3755689271
 - localvar length:   7
 - localvar start:    0x00007f375568928a
 - compiled code: nmethod   1740    3       3       java.lang.String::equals (81 bytes)
#
#  bool ( java/lang/String:NotNull:exact *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N374: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B5 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (168 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	cmpq    RSI, RDX	# ptr
02f   	jne,us  B5  P=0.645076 C=2640.000000
02f
031   B2: #	B4 &lt;- B1  Freq: 0.354924
031   	movl    RAX, #1	# int
036   	jmp,s   B4
036
038   B3: #	B4 &lt;- B9 B5  Freq: 0.291433
038   	xorl    RAX, RAX	# int
03a
03a   B4: #	N374 &lt;- B2 B32 B31 B3  Freq: 0.999997
03a   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

045   	ret
045
046   B5: #	B3 B6 &lt;- B1  Freq: 0.645076
046   	movl    R9, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
04a   	testq   RDX, RDX	# ptr
04d   	je,s   B3  P=0.001000 C=-1.000000
04d
04f   B6: #	B37 B7 &lt;- B5  Freq: 0.644431
04f   	movl    R10, [RDX + #8 (8-bit)]	# compressed klass ptr
053   	cmpl    R10, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
05a   	jne,u  B37  P=0.000000 C=-1.000000
05a
060   B7: #	B38 B8 &lt;- B6  Freq: 0.644431
060   	# checkcastPP of RDX
060   	movl    RDX, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
063   	movl    RSI, #-10	# int
068   	movl    RDI, [R9 + #12 (8-bit)]	# range
06c   	NullCheck R9
06c
06c   B8: #	B39 B9 &lt;- B7  Freq: 0.64443
06c   	movl    RAX, [RDX + #12 (8-bit)]	# range
06f   	NullCheck RDX
06f
06f   B9: #	B3 B10 &lt;- B8  Freq: 0.644429
06f   	movl    RBX, RDI	# spill
071   	addl    RBX, #-2	# int
074   	cmpl    RDI, RAX
076   	jne,s   B3  P=0.451234 C=1702.000000
076
078   B10: #	B31 B11 &lt;- B9  Freq: 0.353641
078   	movl    R11, RDI	# spill
07b   	decl    R11	# int
07e   	movl    R8, RDI	# spill
081   	subl    R8, RAX	# int
084   	testl   RDI, RDI
086   	je     B31  P=0.046906 C=19230.000000
086
08c   B11: #	B12 &lt;- B10  Freq: 0.337053
08c   	decl    R8	# int
08f   	movl    R14, #-1	# int
095   	movslq  RSI, RDI	# i2l
098   	cmpl    RBX, R14
09b   	cmovllt RBX, R14	# max
09f   	movl    R10, R11	# spill
0a2   	xorl    R13, R13	# int
0a5
0a5   B12: #	B33 B13 &lt;- B11 B16 	Loop: B12-B16 inner pre of N329 Freq: 0.67293
0a5   	movl    RCX, R11	# spill
0a8   	subl    RCX, R10	# int
0ab   	movslq  RBP, R10	# i2l
0ae   	cmpl    RCX, RDI	# unsigned
0b0   	jnb,u  B33  P=0.000001 C=-1.000000
0b0
0b6   B13: #	B35 B14 &lt;- B12  Freq: 0.672929
0b6   	movdl   XMM2, R11	# spill
0bb   	movl    [rsp + #4], RAX	# spill
0bf   	movl    [rsp + #0], RDI	# spill
0c2   	movdl   XMM1, R13	# spill
0c7   	movq    R11, RSI	# spill
0ca   	subq    R11, RBP	# long
0cd   	movl    R13, R10	# spill
0d0   	decl    R13	# int
0d3   	movzwl  RBP, [R9 + #14 + R11 &lt;&lt; #1]	# ushort/char
0d9   	cmpl    RCX, RAX	# unsigned
0db   	jnb,u  B35  P=0.000001 C=-1.000000
0db
0e1   B14: #	B32 B15 &lt;- B13  Freq: 0.672929
0e1   	movzwl  R10, [RDX + #14 + R11 &lt;&lt; #1]	# ushort/char
0e7   	cmpl    RBP, R10
0ea   	jne     B32  P=0.001746 C=18328.000000
0ea
0f0   B15: #	B17 B16 &lt;- B14  Freq: 0.671754
0f0   	cmpl    R13, RBX
0f3   	jle,s   B17	# loop end  P=0.500000 C=18296.000000
0f3
0f5   B16: #	B12 &lt;- B15  Freq: 0.335877
0f5   	movl    R10, R13	# spill
0f8   	movdl   R13, XMM1	# spill
0fd   	movdl   R11, XMM2	# spill
102   	jmp,s   B12
102
104   B17: #	B24 B18 &lt;- B15  Freq: 0.335877
104   	cmpl    R8, R14
107   	cmovllt R8, R14	# max
10b   	movl    RBP, R8	# spill
10e   	addl    RBP, #3	# int
111   	movl    R10, #2147483647	# int
117   	cmpl    R8, RBP
11a   	cmovlg RBP, R10	# signed, int
11e   	cmpl    R13, RBP
121   	jle,s   B24  P=0.000001 C=-1.000000
121
123   B18: #	B19 &lt;- B17  Freq: 0.335877
123   	# castII of R13
123
123   B19: #	B32 B20 &lt;- B18 B23 	Loop: B19-B23 inner main of N125 Freq: 6.27283
123   	movslq  R10, R13	# i2l
126   	movl    R8, R13	# spill
129   	addl    R8, #-2	# int
12d   	movq    RBX, RSI	# spill
130   	subq    RBX, R10	# long
133   	movzwl  R10, [R9 + #14 + RBX &lt;&lt; #1]	# ushort/char
139   	movslq  R11, R8	# i2l
13c   	movq    RAX, RSI	# spill
13f   	subq    RAX, R11	# long
142   	movzwl  R8, [RDX + #14 + RBX &lt;&lt; #1]	# ushort/char
148   	movzwl  R11, [RDX + #14 + RAX &lt;&lt; #1]	# ushort/char
14e   	movzwl  RCX, [RDX + #16 + RBX &lt;&lt; #1]	# ushort/char
153   	movzwl  RDI, [RDX + #16 + RAX &lt;&lt; #1]	# ushort/char
158   	movzwl  RBX, [R9 + #16 + RBX &lt;&lt; #1]	# ushort/char
15e   	cmpl    R10, R8
161   	jne,s   B32  P=0.001746 C=18328.000000
161
163   B20: #	B32 B21 &lt;- B19  Freq: 6.26188
163   	movzwl  R10, [R9 + #16 + RAX &lt;&lt; #1]	# ushort/char
169   	cmpl    RBX, RCX
16b   	jne,s   B32  P=0.001746 C=18328.000000
16b
16d   B21: #	B32 B22 &lt;- B20  Freq: 6.25095
16d   	movzwl  R8, [R9 + #14 + RAX &lt;&lt; #1]	# ushort/char
173   	cmpl    R8, R11
176   	jne,s   B32  P=0.001746 C=18328.000000
176
178   B22: #	B32 B23 &lt;- B21  Freq: 6.24003
178   	addl    R13, #-4	# int
17c   	cmpl    R10, RDI
17f   	jne,s   B32  P=0.001746 C=18328.000000
17f
181   B23: #	B19 B24 &lt;- B22  Freq: 6.22914
181   	cmpl    R13, RBP
184   	jg,s   B19	# loop end  P=0.953094 C=18296.000000
184
186   B24: #	B31 B25 &lt;- B17 B23  Freq: 0.292184
186   	cmpl    R13, #-1
18a   	je,s   B31  P=0.500000 C=-1.000000
18a
18c   B25: #	B26 &lt;- B24  Freq: 0.146092
18c   	# castII of R13
18c
18c   B26: #	B34 B27 &lt;- B25 B30 	Loop: B26-B30 inner post of N329 Freq: 0.291674
18c   	movdl   RCX, XMM2	# spill
190   	subl    RCX, R13	# int
193   	movl    R11, R13	# spill
196   	decl    R11	# int
199   	movslq  R10, R13	# i2l
19c   	movq    R8, RSI	# spill
19f   	subq    R8, R10	# long
1a2   	cmpl    RCX, [RSP + #0 (32-bit)]	# unsigned
1a5   	jnb,us  B34  P=0.000001 C=-1.000000
1a5
1a7   B27: #	B36 B28 &lt;- B26  Freq: 0.291673
1a7   	movzwl  RBP, [R9 + #14 + R8 &lt;&lt; #1]	# ushort/char
1ad   	cmpl    RCX, [RSP + #4 (32-bit)]	# unsigned
1b1   	jnb,us  B36  P=0.000001 C=-1.000000
1b1
1b3   B28: #	B32 B29 &lt;- B27  Freq: 0.291673
1b3   	movzwl  R10, [RDX + #14 + R8 &lt;&lt; #1]	# ushort/char
1b9   	cmpl    RBP, R10
1bc   	jne,s   B32  P=0.001746 C=18328.000000
1bc
1be   B29: #	B31 B30 &lt;- B28  Freq: 0.291164
1be   	cmpl    R11, #-1
1c2   	je,s   B31	# loop end  P=0.500000 C=18296.000000
1c2
1c4   B30: #	B26 &lt;- B29  Freq: 0.145582
1c4   	movl    R13, R11	# spill
1c7   	jmp,s   B26
1c7
1c9   B31: #	B4 &lt;- B24 B10 B29  Freq: 0.308262
1c9   	movl    RAX, #1	# int
1ce   	jmp     B4
1ce
1d3   B32: #	B4 &lt;- B28 B21 B14 B19 B20 B22  Freq: 0.0453775
1d3   	movdl   RAX, XMM1	# spill
1d7   	jmp     B4
1d7
1dc   B33: #	B34 &lt;- B12  Freq: 6.81866e-07
1dc   	movl    R13, R10	# spill
1dc
1df   B34: #	N374 &lt;- B26 B33  Freq: 9.77413e-07
1df   	movl    RBP, R13	# spill
1e2   	movl    [rsp + #4], RDX	# spill
1e6   	movl    [rsp + #12], R9	# spill
1eb   	movl    [rsp + #16], RCX	# spill
1ef   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
1f7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::equals @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=RBP L[4]=rsp + #12 L[5]=rsp + #4 L[6]=rsp + #16 STK[0]=rsp + #12 STK[1]=rsp + #16
        # OopMap{[4]=NarrowOop [12]=NarrowOop off=508}
1fc   	int3	# ShouldNotReachHere
1fc
201   B35: #	B36 &lt;- B13  Freq: 6.81865e-07
201   	movl    R13, R10	# spill
201
204   B36: #	N374 &lt;- B27 B35  Freq: 9.77412e-07
204   	movl    RSI, #-28	# int
209   	movl    [rsp + #0], R13	# spill
20d   	movl    [rsp + #4], R9	# spill
212   	movl    [rsp + #16], RDX	# spill
216   	movl    [rsp + #20], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
21b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::equals @ bci:65  L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #0 L[4]=rsp + #4 L[5]=rsp + #16 L[6]=rsp + #20 STK[0]=RBP STK[1]=rsp + #16 STK[2]=rsp + #20
        # OopMap{[4]=NarrowOop [16]=NarrowOop off=544}
220   	int3	# ShouldNotReachHere
220
225   B37: #	N374 &lt;- B6  Freq: 1e-35
225   	movq    RBP, RSI	# spill
228   	movq    [rsp + #8], RDX	# spill
22d   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
233   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::equals @ bci:8  L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=568}
238   	int3	# ShouldNotReachHere
238
23d   B38: #	N374 &lt;- B7  Freq: 6.52988e-07
      	nop 	# 2 bytes pad for loops and calls
23f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::equals @ bci:23  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=580}
244   	int3	# ShouldNotReachHere
244
249   B39: #	N374 &lt;- B8  Freq: 6.52987e-07
      	nop 	# 2 bytes pad for loops and calls
24b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::equals @ bci:30  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=592}
250   	int3	# ShouldNotReachHere
250

</opto_assembly>
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='267'>
{method}
 - this oop:          0x00007f37557c6f38
 - method holder:     &apos;java/util/Arrays&apos;
 - constants:         0x00007f37557bd0d8 constant pool [901]/operands[28] {0x00007f37557bd0d8} for &apos;java/util/Arrays&apos; cache=0x00007f37557ca7b0
 - access:            0x81000009  public static 
 - name:              &apos;copyOfRange&apos;
 - signature:         &apos;([CII)[C&apos;
 - max stack:         7
 - max locals:        5
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef6c8: 0xbaa00000 i2c: 0x00007f3758b11ca0 c2i: 0x00007f3758b11de0 c2iUV: 0x00007f3758b11db3
 - compiled entry     0x00007f3758c03500
 - code size:         63
 - code start:        0x00007f37557c6ea8
 - code end (excl):   0x00007f37557c6ee7
 - method data:       0x00007f375592a2d8
 - checked ex length: 0
 - linenumber start:  0x00007f37557c6ee7
 - localvar length:   5
 - localvar start:    0x00007f37557c6efa
 - compiled code: nmethod   1837   22       3       java.util.Arrays::copyOfRange (63 bytes)
#
#  char[int:&gt;=0]:exact * ( char[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: char[int:&gt;=0]:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B20 B21 B12 B24  Freq: 1
abababab
000   B1: #	B20 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (176 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

00c   	movq    [rsp + #8], RSI	# spill
011   	movl    [rsp + #0], RDX	# spill
014   	# TLS is in R15
014   	movl    R10, RCX	# spill
017   	subl    R10, RDX	# int
01a   	movl    [rsp + #16], R10	# spill
01f   	movslq  R10, R10	# i2l
022   	salq    R10, #1
025   	movl    R8, [rsp + #16]	# spill
02a   	testl   R8, R8
02d   	jl     B20  P=0.000000 C=5509.000000
02d
033   B2: #	B14 B3 &lt;- B1  Freq: 1
033   	movq    RBP, [R15 + #112 (8-bit)]	# ptr
037   	addq    R10, #23	# long
03b   	movq    R11, R10	# spill
03e   	shrq    R11, #3
042   	movq    [rsp + #24], R11	# spill
047   	addq    R11, #-2	# long
04b   	movq    [rsp + #32], R11	# spill
050   	cmpl    R8, #524288	# unsigned
057   	jnbe,u  B14  P=0.000001 C=-1.000000
057
05d   B3: #	B14 B4 &lt;- B2  Freq: 0.999999
05d   	andq    R10, #-8	# long
061   	movq    R11, RBP	# spill
064   	addq    R11, R10	# ptr
067   	cmpq    R11, [R15 + #128 (32-bit)]	# raw ptr
06e   	jnb,u  B14  P=0.000100 C=-1.000000
06e
074   B4: #	B5 &lt;- B3  Freq: 0.999898
074   	PREFETCHNTA [R11 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
07c   	PREFETCHNTA [R11 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
084   	PREFETCHNTA [R11 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
08c   	PREFETCHNTA [R11 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
094   	movq    [R15 + #112 (8-bit)], R11	# ptr
098   	movq    [RBP], 0x0000000000000001	# ptr
0a0   	movl    [RBP + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f37682141b0:Constant:exact *	# compressed klass ptr
0a7   	movl    [RBP + #12 (8-bit)], R8	# int
0a7
0ab   B5: #	B21 B6 &lt;- B15 B4  Freq: 1
0ab   	
0ab   	# checkcastPP of RBP
0ab   	movq    RBX, [rsp + #8]	# spill
0b0   	movl    RCX, [RBX + #12 (8-bit)]	# range
0b3   	NullCheck RBX
0b3
0b3   B6: #	B16 B7 &lt;- B5  Freq: 0.999999
0b3   	xorl    R8, R8	# int
0b6   	movl    R11, RCX	# spill
0b9   	subl    R11, [RSP + #0 (32-bit)]	# int
0bd   	movq    RSI, RBP	# spill
0c0   	addq    RSI, #16	# ptr
0c4   	cmpl    R11, [RSP + #16 (32-bit)]
0c9   	movl    R9, [rsp + #16]	# spill
0ce   	cmovll R9, R11	# signed, int
0d2   	movl    RDI, [rsp + #0]	# spill
0d5   	addl    RDI, R9	# int
0d8   	movslq  RDX, R9	# i2l
0db   	movq    R11, RDX	# spill
0de   	salq    R11, #1
0e1   	addq    R11, #16	# long
0e5   	movl    R10, [rsp + #0]	# spill
0e9   	testl   R10, R10
0ec   	jl     B16  P=0.000001 C=-1.000000
0ec
0f2   B7: #	B16 B8 &lt;- B6  Freq: 0.999997
0f2   	movq    RAX, R11	# spill
0f5   	andq    RAX, #-7	# long
0f9   	cmpl    RCX, RDI	# unsigned
0fb   	jb,us  B16  P=0.000001 C=-1.000000
0fb
0fd   B8: #	B16 B9 &lt;- B7  Freq: 0.999996
0fd   	movq    RDI, RBP	# spill
100   	addq    RDI, RAX	# ptr
103   	movl    RCX, [rsp + #16]	# spill
107   	cmpl    RCX, R9	# unsigned
10a   	jb,us  B16  P=0.000001 C=-1.000000
10a
10c   B9: #	B18 B10 &lt;- B8  Freq: 0.999995
10c   	leaq    R13, [RBX + #16 + R10 &lt;&lt; #1]	# ptr posidxscaleoff
111   	testl   R9, R9
114   	jle     B18  P=0.000001 C=-1.000000
114
11a   B10: #	B13 B11 &lt;- B9  Freq: 0.999994
11a   	cmpl    R9, RCX
11d   	jl,s   B13  P=0.001000 C=-1.000000
11d
11f   B11: #	B12 &lt;- B10 B13  Freq: 0.999994
11f   	movq    RDI, R13	# spill
122   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
12f
12f   B12: #	N1 &lt;- B11 B19 B17  Freq: 0.999998
12f   	MEMBAR-storestore (empty encoding)
12f   	movq    RAX, RBP	# spill
132   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

13d   	ret
13d
13e   B13: #	B11 &lt;- B10  Freq: 0.000999994
13e   	shrq    R11, #3
142   	movq    R10, [rsp + #24]	# spill
147   	subq    R10, R11	# long
14a   	movq    RCX, R10	# spill
14d   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
157   	jmp,s   B11
157
159   B14: #	B23 B15 &lt;- B2 B3  Freq: 0.00010103
159   	movq    RSI, precise klass [C: 0x00007f37682141b0:Constant:exact *	# ptr
163   	movl    RDX, R8	# spill
166   	movq    RBP, [rsp + #8]	# spill
16b   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOfRange @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #16 L[4]=_
        # OopMap{rbp=Oop [8]=Oop off=368}
170
170   B15: #	B5 &lt;- B14  Freq: 0.000101028
        # Block is sole successor of call
170   	movq    RBP, RAX	# spill
173   	jmp     B5
173
178   B16: #	B22 B17 &lt;- B6 B7 B8 B18  Freq: 2.99999e-06
178   	movq    RCX, [rsp + #32]	# spill
17d   	movq    RDI, RSI	# spill
180   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
18a   	movq    RSI, RBX	# spill
18d   	movl    RDX, R10	# spill
190   	movq    RCX, RBP	# spill
193   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOfRange @ bci:57  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=RBP
        # OopMap{rbp=Oop off=408}
198
198   B17: #	B12 &lt;- B16  Freq: 2.99993e-06
        # Block is sole successor of call
198   	jmp,s   B12
198
19a   B18: #	B16 B19 &lt;- B9  Freq: 9.99995e-07
19a   	testl   R9, R9
19d   	jl,s   B16  P=0.000001 C=-1.000000
19d
19f   B19: #	B12 &lt;- B18  Freq: 9.99994e-07
19f   	movq    RCX, [rsp + #32]	# spill
1a4   	movq    RDI, RSI	# spill
1a7   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
1b1   	
1b1   	jmp     B12
1b1
1b6   B20: #	N1 &lt;- B1  Freq: 4.76837e-07
1b6   	movl    RSI, #-155	# int
1bb   	movq    RBP, [rsp + #8]	# spill
1c0   	movl    [rsp + #4], RCX	# spill
1c4   	movl    [rsp + #12], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
1cb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.Arrays::copyOfRange @ bci:5  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #12 L[4]=_ STK[0]=rsp + #16
        # OopMap{rbp=Oop off=464}
1d0   	int3	# ShouldNotReachHere
1d0
1d5   B21: #	N1 &lt;- B5  Freq: 1.01328e-06
1d5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1db   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.Arrays::copyOfRange @ bci:50  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_ STK[4]=#NULL
        # OopMap{off=480}
1e0   	int3	# ShouldNotReachHere
1e0
1e5   B22: #	B24 &lt;- B16  Freq: 2.99999e-11
1e5   	# exception oop is in rax; no code emitted
1e5   	movq    RSI, RAX	# spill
1e8   	jmp,s   B24
1e8
1ea   B23: #	B24 &lt;- B14  Freq: 1.0103e-09
1ea   	# exception oop is in rax; no code emitted
1ea   	movq    RSI, RAX	# spill
1ea
1ed   B24: #	N1 &lt;- B23 B22  Freq: 1.0403e-09
1ed   	addq    rsp, 64	# Destroy frame
	popq   rbp

1f2   	jmp     rethrow_stub
1f2

</opto_assembly>
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
<opto_assembly compile_id='268'>
{method}
 - this oop:          0x00007f37556878c0
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f37556850e8 constant pool [680] {0x00007f37556850e8} for &apos;java/lang/String&apos; cache=0x00007f375574e5e0
 - access:            0x81000001  public 
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;([CII)V&apos;
 - max stack:         6
 - max locals:        4
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680efb00: 0xbbaa0000 i2c: 0x00007f3758b14ae0 c2i: 0x00007f3758b14c25 c2iUV: 0x00007f3758b14bf8
 - compiled entry     0x00007f3758c04580
 - code size:         82
 - code start:        0x00007f3755687828
 - code end (excl):   0x00007f375568787a
 - method data:       0x00007f375592a060
 - checked ex length: 0
 - linenumber start:  0x00007f375568787a
 - localvar length:   4
 - localvar start:    0x00007f375568788e
 - compiled code: nmethod   1870   24       3       java.lang.String::&lt;init&gt; (82 bytes)
#
#  void ( java/lang/String:NotNull:exact *, char[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx:rdx   : parm 1: char[int:&gt;=0]:exact *
#r010 rcx   : parm 2: int
#r004 r8   : parm 3: int
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N441: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B28 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (296 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movq    [rsp + #0], RSI	# spill
030   	movslq  R11, R8	# i2l
033   	salq    R11, #1
036   	addq    R11, #23	# long
03a   	movq    RAX, R11	# spill
03d   	shrq    RAX, #3
041   	movq    R13, RAX	# spill
044   	addq    R13, #-2	# long
048   	movl    R9, RCX	# spill
04b   	testl   RCX, RCX
04d   	jl     B28  P=0.000000 C=5644.000000
04d
053   B2: #	B17 B3 &lt;- B1  Freq: 1
053   	# TLS is in R15
053   	movl    RCX, R8	# spill
056   	testl   R8, R8
059   	jle     B17  P=0.004961 C=5644.000000
059
05f   B3: #	B4 &lt;- B2  Freq: 0.995039
05f   	movq    R8, RDX	# spill
05f
062   B4: #	B32 B5 &lt;- B19 B3  Freq: 0.997519
062   	movl    RSI, #-10	# int
067   	movl    RBX, [R8 + #12 (8-bit)]	# range
06b   	NullCheck R8
06b
06b   B5: #	B29 B6 &lt;- B4  Freq: 0.997518
06b   	movl    R10, RBX	# spill
06e   	subl    R10, R9	# int
071   	movl    RDX, R9	# spill
074   	addl    RDX, RCX	# int
076   	movl    RSI, #-155	# int
07b   	movl    RBP, RBX	# spill
07d   	subl    RBP, RCX	# int
07f   	cmpl    R10, RCX
082   	movl    RDI, RCX	# spill
084   	cmovll RDI, R10	# signed, int
088   	movl    R10, R9	# spill
08b   	addl    R10, RDI	# int
08e   	movl    [rsp + #44], R10	# spill
093   	cmpl    R9, RBP
096   	jg     B29  P=0.000000 C=5616.000000
096
09c   B6: #	B30 B7 &lt;- B5  Freq: 0.997518
09c   	leaq    R10, [R8 + #16 + R9 &lt;&lt; #1]	# ptr posidxscaleoff
0a1   	testl   RCX, RCX
0a3   	jl     B30  P=0.000000 C=6477.000000
0a3
0a9   B7: #	B22 B8 &lt;- B6  Freq: 0.997517
0a9   	movslq  RDX, RDI	# i2l
0ac   	andq    R11, #-8	# long
0b0   	cmpl    RCX, #524288	# unsigned
0b6   	jnbe,u  B22  P=0.000001 C=-1.000000
0b6
0bc   B8: #	B22 B9 &lt;- B7  Freq: 0.997516
0bc   	movq    RSI, [R15 + #112 (8-bit)]	# ptr
0c0   	movq    RBP, RSI	# spill
0c3   	addq    RBP, R11	# ptr
0c6   	cmpq    RBP, [R15 + #128 (32-bit)]	# raw ptr
0cd   	jnb,u  B22  P=0.000100 C=-1.000000
0cd
0d3   B9: #	B10 &lt;- B8  Freq: 0.997416
0d3   	movq    [R15 + #112 (8-bit)], RBP	# ptr
0d7   	PREFETCHNTA [RBP + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0de   	PREFETCHNTA [RBP + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0e5   	movq    [RSI], 0x0000000000000001	# ptr
0ec   	PREFETCHNTA [RBP + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0f3   	PREFETCHNTA [RBP + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0fa   	movl    [RSI + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f37682141b0:Constant:exact *	# compressed klass ptr
101   	movl    [RSI + #12 (8-bit)], RCX	# int
101
104   B10: #	B24 B11 &lt;- B23 B9  Freq: 0.997517
104   	
104   	# checkcastPP of RSI
104   	movq    R11, RSI	# spill
107   	addq    R11, #16	# ptr
10b   	encode_heap_oop_not_null RBP,RSI
216   	cmpl    RBX, [RSP + #44 (32-bit)]	# unsigned
21a   	jb,u  B24  P=0.000001 C=-1.000000
21a
220   B11: #	B24 B12 &lt;- B10  Freq: 0.997516
220   	movq    RBX, RDX	# spill
223   	salq    RBX, #1
226   	addq    RBX, #16	# long
22a   	movq    R14, RBX	# spill
22d   	shrq    R14, #3
231   	cmpl    RCX, RDI	# unsigned
233   	jb,u  B24  P=0.000001 C=-1.000000
233
239   B12: #	B26 B13 &lt;- B11  Freq: 0.997515
239   	subq    RAX, R14	# long
23c   	testl   RDI, RDI
23e   	jle     B26  P=0.000001 C=-1.000000
23e
244   B13: #	B21 B14 &lt;- B12  Freq: 0.997514
244   	andq    RBX, #-7	# long
248   	addq    RSI, RBX	# ptr
24b   	cmpl    RDI, RCX
24d   	jl,s   B21  P=0.001000 C=-1.000000
24d
24f   B14: #	B15 &lt;- B13 B21  Freq: 0.997514
24f   	movq    RDI, R10	# spill
252   	movq    RSI, R11	# spill
255   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
262
262   B15: #	B16 &lt;- B14 B27 B25  Freq: 0.997517
262   	MEMBAR-storestore (empty encoding)
262   	movq    R11, [rsp + #0]	# spill
266   	movq    R10, R11	# ptr -&gt; long
269   	movl    [R11 + #12 (8-bit)], RBP	# compressed ptr ! Field: java/lang/String.value
26d   	shrq    R10, #9
271   	movq    R11, 0x00007f3757e0b000	# ptr
27b   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
27b
27f   B16: #	N441 &lt;- B20 B15  Freq: 0.999998
27f   	MEMBAR-release ! (empty encoding)
27f   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

28a   	ret
28a
28b   B17: #	B31 B18 &lt;- B2  Freq: 0.00496101
28b   	movl    RSI, #6	# int
290   	testl   R8, R8
293   	jl     B31  P=0.000001 C=-1.000000
293
299   B18: #	B33 B19 &lt;- B17  Freq: 0.00496101
299   	movq    R8, RDX	# spill
29c   	movl    R10, [RDX + #12 (8-bit)]	# range
2a0   	NullCheck RDX
2a0
2a0   B19: #	B4 B20 &lt;- B18  Freq: 0.004961
2a0   	cmpl    R9, R10
2a3   	jg     B4  P=0.500000 C=-1.000000
2a3
2a9   B20: #	B16 &lt;- B19  Freq: 0.0024805
2a9   	movq    R10, [rsp + #0]	# spill
2ad   	movl    [R10 + #12 (8-bit)], narrowoop: char[int:0]&lt;ciTypeArray length=0 type=&lt;ciTypeArrayKlass name=[C ident=807 address=0x00007f37682141b0&gt; ident=826 SCAVENGABLE address=0x00007f37240ab470&gt; *	# compressed ptr ! Field: java/lang/String.value
2b5   	movq    R10, R10	# ptr -&gt; long
2b5   	shrq    R10, #9
2b9   	movq    R11, 0x00007f3757e0b000	# ptr
2c3   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
2c7   	jmp,s   B16
2c7
2c9   B21: #	B14 &lt;- B13  Freq: 0.000997514
2c9   	movq    RCX, RAX	# spill
2cc   	movq    RDI, RSI	# spill
2cf   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
2d9   	jmp     B14
2d9
2de   B22: #	B35 B23 &lt;- B7 B8  Freq: 0.000100779
2de   	movq    [rsp + #56], RDX	# spill
2e3   	movq    [rsp + #48], R10	# spill
2e8   	movl    [rsp + #40], RDI	# spill
2ec   	movl    [rsp + #20], RBX	# spill
2f0   	movq    [rsp + #32], R13	# spill
2f5   	movq    [rsp + #24], RAX	# spill
2fa   	movl    [rsp + #16], RCX	# spill
2fe   	movq    [rsp + #8], R8	# spill
303   	movl    RBP, R9	# spill
306   	movq    RSI, precise klass [C: 0x00007f37682141b0:Constant:exact *	# ptr
310   	movl    RDX, RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
313   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOfRange @ bci:40  L[0]=rsp + #8 L[1]=RBP L[2]=_ L[3]=rsp + #16 L[4]=_
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop [48]=Derived_oop_[8] off=792}
318
318   B23: #	B10 &lt;- B22  Freq: 0.000100777
        # Block is sole successor of call
318   	movq    R11, RAX	# spill
31b   	movl    R9, RBP	# spill
31e   	movq    R8, [rsp + #8]	# spill
323   	movl    RCX, [rsp + #16]	# spill
327   	movq    RAX, [rsp + #24]	# spill
32c   	movq    R13, [rsp + #32]	# spill
331   	movl    RBX, [rsp + #20]	# spill
335   	movl    RDI, [rsp + #40]	# spill
339   	movq    R10, [rsp + #48]	# spill
33e   	movq    RDX, [rsp + #56]	# spill
343   	movq    RSI, R11	# spill
346   	jmp     B10
346
34b   B24: #	B34 B25 &lt;- B26 B10 B11  Freq: 1.99503e-06
34b   	movq    RBX, RSI	# spill
34e   	movl    R14, RDI	# spill
351   	movq    R10, R8	# spill
354   	movq    RCX, R13	# spill
357   	movq    RDI, R11	# spill
35a   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
364   	movq    RSI, R10	# spill
367   	movl    RDX, R9	# spill
36a   	movq    RCX, RBX	# spill
36d   	xorl    R8, R8	# int
370   	movl    R9, R14	# spill
373   	movq    [rsp + #8], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
37b   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOfRange @ bci:57  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #8
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #0
        # OopMap{rbp=NarrowOop [0]=Oop [8]=Oop off=896}
380
380   B25: #	B15 &lt;- B24  Freq: 1.99499e-06
        # Block is sole successor of call
380   	jmp     B15
380
385   B26: #	B24 B27 &lt;- B12  Freq: 9.97515e-07
385   	testl   RDI, RDI
387   	jl,s   B24  P=0.000001 C=-1.000000
387
389   B27: #	B15 &lt;- B26  Freq: 9.97514e-07
389   	movq    RCX, R13	# spill
38c   	movq    RDI, R11	# spill
38f   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
399   	
399   	jmp     B15
399
39e   B28: #	N441 &lt;- B1  Freq: 4.76837e-07
39e   	movl    RSI, #-155	# int
3a3   	movq    RBP, [rsp + #0]	# spill
3a7   	movq    [rsp + #0], RDX	# spill
3ab   	movl    [rsp + #12], R8	# spill
3b0   	movl    [rsp + #16], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
3b7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:5  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #16 L[3]=rsp + #12 STK[0]=rsp + #16
        # OopMap{rbp=Oop [0]=Oop off=956}
3bc   	int3	# ShouldNotReachHere
3bc
3c1   B29: #	N441 &lt;- B5  Freq: 4.75654e-07
3c1   	movq    [rsp + #8], R8	# spill
3c6   	movl    [rsp + #20], RCX	# spill
3ca   	movl    [rsp + #24], R9	# spill
3cf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:55  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #24 L[3]=rsp + #20 STK[0]=rsp + #24 STK[1]=RBP
        # OopMap{[0]=Oop [8]=Oop off=980}
3d4   	int3	# ShouldNotReachHere
3d4
3d9   B30: #	N441 &lt;- B6  Freq: 4.75653e-07
3d9   	movq    RBP, [rsp + #0]	# spill
3dd   	movq    [rsp + #0], R8	# spill
3e1   	movl    [rsp + #8], R9	# spill
3e6   	movl    [rsp + #16], RCX	# spill
3ea   	movl    [rsp + #20], RDX	# spill
      	nop 	# 1 bytes pad for loops and calls
3ef   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.Arrays::copyOfRange @ bci:5  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #20 L[3]=rsp + #16 L[4]=_ STK[0]=rsp + #16
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [0]=Oop off=1012}
3f4   	int3	# ShouldNotReachHere
3f4
3f9   B31: #	N441 &lt;- B17  Freq: 4.96101e-09
3f9   	movl    RBP, R8	# spill
      	nop 	# 3 bytes pad for loops and calls
3ff   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;6&apos;)
        # java.lang.String::&lt;init&gt; @ bci:25  L[0]=_ L[1]=_ L[2]=_ L[3]=RBP
        # OopMap{off=1028}
404   	int3	# ShouldNotReachHere
404
409   B32: #	N441 &lt;- B4  Freq: 1.01077e-06
      	nop 	# 2 bytes pad for loops and calls
40b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:52  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1040}
410   	int3	# ShouldNotReachHere
410
415   B33: #	N441 &lt;- B18  Freq: 5.02688e-09
415   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
41b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1056}
420   	int3	# ShouldNotReachHere
420
425   B34: #	B36 &lt;- B24  Freq: 1.99503e-11
425   	# exception oop is in rax; no code emitted
425   	movq    RSI, RAX	# spill
428   	jmp,s   B36
428
42a   B35: #	B36 &lt;- B22  Freq: 1.00779e-09
42a   	# exception oop is in rax; no code emitted
42a   	movq    RSI, RAX	# spill
42a
42d   B36: #	N441 &lt;- B35 B34  Freq: 1.02774e-09
42d   	addq    rsp, 80	# Destroy frame
	popq   rbp

432   	jmp     rethrow_stub
432

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
<opto_assembly compile_id='269' compile_kind='osr'>
{method}
 - this oop:          0x00007f37559acf58
 - method holder:     &apos;java/util/regex/Matcher&apos;
 - constants:         0x00007f37559a98c8 constant pool [380] {0x00007f37559a98c8} for &apos;java/util/regex/Matcher&apos; cache=0x00007f37559ad488
 - access:            0xc1000000  
 - name:              &apos;search&apos;
 - signature:         &apos;(I)Z&apos;
 - max stack:         5
 - max locals:        3
 - size of params:    2
 - method size:       12
 - highest level:     2
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758c680c0
 - code size:         109
 - code start:        0x00007f37559acea0
 - code end (excl):   0x00007f37559acf0d
 - method data:       0x00007f3755b21358
 - checked ex length: 0
 - linenumber start:  0x00007f37559acf0d
 - localvar length:   4
 - localvar start:    0x00007f37559acf26
 - compiled code: nmethod   1972  249       2       java.util.regex.Matcher::search (109 bytes)
#
#  bool ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1068: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B73 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (400 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01c   	movl    R14, [RSI + #8 (8-bit)]	# int
020   	movq    R13, [RSI + #16 (8-bit)]	# ptr
024   	movl    RBX, [RSI]	# int
026   	movq    RDI, RSI	# spill
029   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
036   	movl    R10, [R13 + #8 (8-bit)]	# compressed klass ptr
03a   	NullCheck R13
03a
03a   B2: #	B67 B3 &lt;- B1  Freq: 0.999999
03a   	movl    RSI, #-99	# int
03f   	# MachConstantBaseNode (empty encoding)
03f   	movl    RDX, RBX	# spill
041   	incl    RDX	# int
043   	cmpl    R10, narrowklass: precise klass java/util/regex/Matcher: 0x00007f3724067e10:Constant:exact *	# compressed klass ptr
04a   	jne,u  B67  P=0.000001 C=-1.000000
04a
050   B3: #	B74 B4 &lt;- B2  Freq: 0.999998
050   	# checkcastPP of R13
050   	movl    R11, [R13 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
054   	xorl    RBP, RBP	# int
056   	movl    R9, [R13 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
05a   	movl    R10, #-2147483648	# int
060   	movl    RCX, [R13 + #56 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.text
064   	movl    R8, R11	# compressed ptr -&gt; int
067   	shrl    R8, #2
06b   	movl    RDI, [R11 + #12 (8-bit)]	# range
06f   	NullCheck R11
06f
06f   B4: #	B16 B5 &lt;- B3  Freq: 0.999997
06f   	movl    RAX, RDI	# spill
071   	addl    RAX, #-3	# int
074   	cmpl    RDX, RBP
076   	cmovllt RDX, RBP	# max
079   	andl    R8, #3	# int
07d   	movl    RSI, #-28	# int
082   	movq    XMM0,[constant table base + #0]	! replicate4I(#-1)
	punpcklqdq XMM0,XMM0
08e   	cmpl    RDX, RDI
090   	cmovlgt RDX, RDI	# min
093   	movl    RBP, [R13 + #48 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.parentPattern
097   	addl    R8, RDX	# int
09a   	negl    R8	# int
09d   	andl    R8, #3	# int
0a1   	cmpl    RBX, RDI
0a3   	jge,s   B16  P=0.047619 C=35847.000000
0a3
0a5   B5: #	B6 &lt;- B4  Freq: 0.952378
0a5   	addl    R8, RDX	# int
0a8   	cmpl    RDI, RAX
0aa   	cmovll RAX, R10	# signed, int
0ae   	cmpl    R8, RDI
0b1   	cmovlgt R8, RDI	# min
0b1
0b5   B6: #	B66 B7 &lt;- B5 B7 	Loop: B6-B7 inner pre of N1104 Freq: 1.90475
0b5   	cmpl    RBX, RDI	# unsigned
0b7   	jnb,u  B66  P=0.000001 C=-1.000000
0b7
0bd   B7: #	B6 B8 &lt;- B6  Freq: 1.90475
0bd   	movl    [R11 + #16 + RBX &lt;&lt; #2], #-1	# int
0c6   	incl    RBX	# int
0c8   	cmpl    RBX, R8
0cb   	jl,s   B6	# loop end  P=0.500000 C=35847.000000
0cb
0cd   B8: #	B11 B9 &lt;- B7  Freq: 0.952376
0cd   	cmpl    RBX, RAX
0cf   	jge,s   B11  P=0.000001 C=-1.000000
0cf
0d1   B9: #	B10 &lt;- B8  Freq: 0.952375
0d1   	# castII of RBX
0d1
0d1   B10: #	B10 B11 &lt;- B9 B10 	Loop: B10-B10 inner main of N218 Freq: 19.9999
0d1   	movdqu  [R11 + #16 + RBX &lt;&lt; #2],XMM0	! store vector (16 bytes)
0d8   	addl    RBX, #4	# int
0db   	cmpl    RBX, RAX
0dd   	jl,s   B10	# loop end  P=0.952381 C=35847.000000
0dd
0df   B11: #	B16 B12 &lt;- B8 B10  Freq: 0.952376
0df   	cmpl    RBX, RDI
0e1   	jge,s   B16  P=0.500000 C=-1.000000
0e1
0e3   B12: #	B13 &lt;- B11  Freq: 0.476188
0e3   	# castII of RBX
      	nop 	# 1 bytes pad for loops and calls

0e4   B13: #	B66 B14 &lt;- B12 B15 	Loop: B13-B15 inner post of N1104 Freq: 0.952375
0e4   	movl    R10, RBX	# spill
0e7   	incl    R10	# int
0ea   	cmpl    RBX, RDI	# unsigned
0ec   	jnb,u  B66  P=0.000001 C=-1.000000
0ec
0f2   B14: #	B16 B15 &lt;- B13  Freq: 0.952374
0f2   	movl    [R11 + #16 + RBX &lt;&lt; #2], #-1	# int
0fb   	cmpl    R10, RDI
0fe   	jge,s   B16	# loop end  P=0.500000 C=35847.000000
0fe
100   B15: #	B13 &lt;- B14  Freq: 0.476187
100   	movl    RBX, R10	# spill
103   	jmp,s   B13
103
105   B16: #	B75 B17 &lt;- B4 B14 B11  Freq: 0.999994
105   	movl    [R13 + #24 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/util/regex/Matcher.acceptMode
109   	movl    RSI, #-10	# int
10e   	movl    RBP, [RBP + #44 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern.root
111   	NullCheck RBP
111
111   B17: #	B76 B18 &lt;- B16  Freq: 0.999993
111   	decode_heap_oop_not_null R10,RBP
114   	movl    R8, [RBP + #8 (8-bit)]	# compressed klass ptr
118   	NullCheck RBP
118
118   B18: #	B68 B19 &lt;- B17  Freq: 0.999992
118   	decode_heap_oop_not_null RBX,RCX
11b   	cmpl    R8, narrowklass: precise klass java/util/regex/Pattern$BnM: 0x00007f3724068380:Constant:exact *	# compressed klass ptr
122   	jne,u  B68  P=0.000001 C=-1.000000
122
128   B19: #	B77 B20 &lt;- B18  Freq: 0.999991
128   	movdq   XMM5, RBX	# spill
12d   	movdl   XMM4, RDI	# spill
131   	movdl   XMM1, RCX	# spill
135   	movdl   XMM2, R11	# spill
13a   	movdq   XMM0, R13	# spill
13f   	# checkcastPP of R10
13f   	movl    R8, [R10 + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
143   	movdl   XMM6, R8	# spill
148   	movl    R11, [R10 + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.buffer
14c   	movdl   XMM8, R11	# spill
151   	movdq   XMM3, R10	# spill
156   	movl    R10, [R11 + #12 (8-bit)]	# range
15a   	NullCheck R11
15a
15a   B20: #	B28 &lt;- B19  Freq: 0.99999
15a   	movl    [rsp + #36], R10	# spill
15f   	movdq   R10, XMM3	# spill
164   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
168   	movdl   XMM7, R10	# spill
16d   	movl    R13, [rsp + #36]	# spill
172   	decl    R13	# int
175   	movl    R10, [rsp + #36]	# spill
17a   	addl    R10, #-2	# int
17e   	movdl   XMM10, R10	# spill
183   	subl    R9, [RSP + #36 (32-bit)]	# int
188   	movl    [rsp + #40], R9	# spill
18d   	movdq   R10, XMM3	# spill
192   	movl    R10, [R10 + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
196   	movdl   XMM9, R10	# spill
19b   	decode_heap_oop_not_null R10,R11
19e   	movdq   XMM11, R10	# spill
1a3   	movl    R10, #1	# int
1a9   	movdl   XMM13, R10	# spill
1ae   	jmp,s   B28
1ae
1b0   B21: #	B44 &lt;- B45  top-of-loop Freq: 6.14434
1b0   	movl    RBX, RDI	# spill
1b2   	jmp     B44
1b2
1b7   B22: #	B23 &lt;- B50  Freq: 0.222656
1b7   	movl    RBX, RDI	# spill
1b7
1b9   B23: #	B71 B24 &lt;- B22 B40 B44  Freq: 7.31581
1b9   	andl    RAX, #127	# int
1bc   	movdl   R10, XMM9	# spill
1c1   	movl    R8, [R10 + #12 (8-bit)]	# range
1c5   	NullCheck R10
1c5
1c5   B24: #	B59 B25 &lt;- B23  Freq: 7.31581
1c5   	cmpl    RAX, R8	# unsigned
1c8   	jnb,u  B59  P=0.000001 C=-1.000000
1c8
1ce   B25: #	B72 B26 &lt;- B24  Freq: 7.3158
1ce   	movl    R10, RBX	# spill
1d1   	movdl   R8, XMM9	# spill
1d6   	subl    R10, [R8 + #16 + RAX &lt;&lt; #2]	# int
1db   	incl    R10	# int
1de   	movdl   R8, XMM6	# spill
1e3   	movl    R8, [R8 + #12 (8-bit)]	# range
1e7   	NullCheck R8
1e7
1e7   B26: #	B60 B27 &lt;- B25  Freq: 7.31579
1e7   	cmpl    RBX, R8	# unsigned
1ea   	jnb,u  B60  P=0.000001 C=-1.000000
1ea
1f0   B27: #	B28 &lt;- B26  Freq: 7.31578
1f0   	movdl   R8, XMM6	# spill
1f5   	movl    R9, [R8 + #16 + RBP]	# int
1fa   	cmpl    R10, R9
1fd   	cmovll R10, R9	# signed, int
201   	addl    R14, R10	# int
204   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$BnM::match @ bci:87  L[0]=XMM3 L[1]=XMM0 L[2]=R14 L[3]=R11 L[4]=XMM11 L[5]=rsp + #36 L[6]=rsp + #40 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=XMM0 L[1]=_ L[2]=_
        # OopMap{r11=Oop xmm0=Oop xmm1=NarrowOop xmm2=NarrowOop xmm3=Oop xmm5=Oop xmm6=NarrowOop xmm7=NarrowOop xmm8=NarrowOop xmm9=NarrowOop xmm11=Oop off=516}
20a
20a   B28: #	B57 B29 &lt;- B20 B27 	Loop: B28-B27  Freq: 8.31578
20a   	movl    RDX, R14	# spill
20d   	addl    RDX, [RSP + #36 (32-bit)]	# int
211   	movl    R11, R14	# spill
214   	negl    R11	# int
217   	movl    RBX, R11	# spill
21a   	sarl    RBX, #31
21d   	cmpl    R14, [RSP + #40 (32-bit)]
222   	jg     B57  P=0.013752 C=8726.000000
222
228   B29: #	B52 B30 &lt;- B28  Freq: 8.20142
228   	movl    R10, #-1	# int
22e   	subl    R10, R14	# int
231   	movl    R9, R14	# spill
234   	incl    R9	# int
237   	movl    RCX, R9	# spill
23a   	sarl    RCX, #31
23d   	testl   R13, R13
240   	jl     B52  P=0.074668 C=22513.000000
240
246   B30: #	B58 B31 &lt;- B29  Freq: 7.58903
246   	movdl   R8, XMM1	# spill
24b   	movl    R8, [R8 + #8 (8-bit)]	# compressed klass ptr
24f   	NullCheck R8
24f
24f   B31: #	B58 B32 &lt;- B30  Freq: 7.58903
24f   	andl    RCX, R9	# int
252   	andl    RBX, R11	# int
255   	addl    RBX, #2147483647	# int
25b   	cmpl    R8, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
262   	jne,u  B58  P=0.000001 C=-1.000000
262
268   B32: #	B58 B33 &lt;- B31  Freq: 7.58902
268   	movdq   R11, XMM5	# spill
26d   	# checkcastPP of R11
26d   	movl    R8, #-2147483647	# int
273   	subl    R8, RCX	# int
276   	movl    RCX, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
27a   	movl    R9, [RCX + #12 (8-bit)]	# range
27e   	NullCheck RCX
27e
27e   B33: #	B58 B34 &lt;- B32  Freq: 7.58901
27e   	movl    RSI, R9	# spill
281   	subl    RSI, R14	# int
284   	cmpl    R8, R10
287   	cmovllt R8, R10	# max
28b   	decl    RSI	# int
28d   	movl    RDI, #-1	# int
292   	cmpl    R8, RDI
295   	movl    R10, #-1	# int
29b   	cmovllt R8, R10	# max
29f   	movl    R10, RDX	# spill
2a2   	decl    R10	# int
2a5   	cmpl    RBX, RSI
2a7   	cmovlgt RBX, RSI	# min
2aa   	movdl   RDI, XMM10	# spill
2ae   	cmpl    RDI, RBX
2b0   	cmovlgt RDI, RBX	# min
2b3   	cmpl    R14, R9	# unsigned
2b6   	jnb,u  B58  P=0.000001 C=-1.000000
2b6
2bc   B34: #	B58 B35 &lt;- B33  Freq: 7.589
2bc   	cmpl    R10, R9	# unsigned
2bf   	jnb,u  B58  P=0.000001 C=-1.000000
2bf
2c5   B35: #	B58 B36 &lt;- B34  Freq: 7.58899
2c5   	movl    R10, [rsp + #36]	# spill
2ca   	testl  R10, R10	# unsigned
2cd   	jbe,u  B58  P=0.000001 C=-1.000000
2cd
2d3   B36: #	B58 B37 &lt;- B35  Freq: 7.58899
2d3   	movl    R10, #-1	# int
2d9   	cmpl    RDI, R10
2dc   	movl    RBX, #-1	# int
2e1   	cmovllt RDI, RBX	# max
2e4   	cmpl    R13, [RSP + #36 (32-bit)]	# unsigned
2e9   	jnb,u  B58  P=0.000001 C=-1.000000
2e9
2ef   B37: #	B38 &lt;- B36  Freq: 7.58898
2ef   	movl    RBX, R13	# spill
2ef
2f2   B38: #	B61 B39 &lt;- B37 B41 	Loop: B38-B41 inner pre of N936 Freq: 11.3913
2f2   	movslq  RBP, RBX	# i2l
2f5   	movl    RSI, RBX	# spill
2f7   	addl    RSI, R14	# int
2fa   	movzwl  RAX, [RCX + #16 + RSI &lt;&lt; #1]	# ushort/char
2ff   	salq    RBP, #2
303   	movdl   R10, XMM8	# spill
308   	movl    R10, [R10 + #16 + RBP]	# int
30d   	testl   RSI, RSI
30f   	jl     B61  P=0.000000 C=7895.000000
30f
315   B39: #	B63 B40 &lt;- B38  Freq: 11.3912
315   	cmpl    RSI, R9
318   	jge     B63  P=0.000000 C=7895.000000
318
31e   B40: #	B23 B41 &lt;- B39  Freq: 11.3912
31e   	cmpl    RAX, R10
321   	jne     B23  P=0.332421 C=20832.000000
321
327   B41: #	B38 B42 &lt;- B40  Freq: 7.60455
327   	decl    RBX	# int
329   	cmpl    RBX, RDI
32b   	jg,s   B38	# loop end  P=0.500000 C=13907.000000
32b
32d   B42: #	B65 B43 &lt;- B41  Freq: 3.80228
32d   	cmpl    RBX, R8
330   	jle     B65  P=0.000001 C=-1.000000
330
336   B43: #	B44 &lt;- B42  Freq: 3.80227
336   	# castII of RBX
336
336   B44: #	B23 B45 &lt;- B43 B21 	Loop: B44-B21 inner main of N275 Freq: 9.94661
336   	movl    RSI, RBX	# spill
338   	addl    RSI, R14	# int
33b   	movslq  RBP, RBX	# i2l
33e   	movl    RDI, RBX	# spill
340   	decl    RDI	# int
342   	movzwl  RAX, [RCX + #16 + RSI &lt;&lt; #1]	# ushort/char
347   	salq    RBP, #2
34b   	movdl   RSI, XMM8	# spill
34f   	movl    RSI, [RSI + #16 + RBP]	# int
353   	cmpl    RAX, RSI
355   	jne     B23  P=0.332421 C=20832.000000
355
35b   B45: #	B21 B46 &lt;- B44  Freq: 6.64015
35b   	cmpl    RDI, R8
35e   	jg     B21	# loop end  P=0.925332 C=13907.000000
35e
364   B46: #	B52 B47 &lt;- B65 B45  Freq: 0.49581
364   	cmpl    RDI, #-1
367   	jle,s   B52  P=0.100000 C=-1.000000
367
369   B47: #	B48 &lt;- B46  Freq: 0.446229
369   	# castII of RDI
369
369   B48: #	B62 B49 &lt;- B47 B51 	Loop: B48-B51 inner post of N936 Freq: 0.669801
369   	movl    RSI, RDI	# spill
36b   	addl    RSI, R14	# int
36e   	movslq  RBP, RDI	# i2l
371   	salq    RBP, #2
375   	testl   RSI, RSI
377   	jl     B62  P=0.000000 C=7895.000000
377
37d   B49: #	B64 B50 &lt;- B48  Freq: 0.669801
37d   	movdl   R10, XMM8	# spill
382   	movl    R10, [R10 + #16 + RBP]	# int
387   	cmpl    RSI, R9
38a   	jge     B64  P=0.000000 C=7895.000000
38a
390   B50: #	B22 B51 &lt;- B49  Freq: 0.669801
390   	movzwl  RAX, [RCX + #16 + RSI &lt;&lt; #1]	# ushort/char
395   	cmpl    RAX, R10
398   	jne     B22  P=0.332421 C=20832.000000
398
39e   B51: #	B48 B52 &lt;- B50  Freq: 0.447145
39e   	decl    RDI	# int
3a0   	cmpl    RDI, #-1
3a3   	jg,s   B48	# loop end  P=0.500000 C=13907.000000
3a3
3a5   B52: #	B78 B53 &lt;- B46 B29 B51  Freq: 0.885537
3a5   	movdq   R10, XMM0	# spill
3aa   	movl    [R10 + #28 (8-bit)], R14	# int ! Field: java/util/regex/Matcher.first
3ae   	movdl   R10, XMM7	# spill
3b3   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
3b7   	NullCheck R10
3b7
3b7   B53: #	B69 B54 &lt;- B52  Freq: 0.885536
3b7   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f372410e040:Constant:exact *	# compressed klass ptr
3be   	jne,u  B69  P=0.000001 C=-1.000000
3be
3c4   B54: #	B70 B55 &lt;- B53  Freq: 0.885535
3c4   	movdq   R10, XMM0	# spill
3c9   	movl    [R10 + #32 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.last
3cd   	movdl   R11, XMM4	# spill
3d2   	cmpl    R11, #1	# unsigned
3d6   	jbe,u  B70  P=0.000001 C=-1.000000
3d6
3dc   B55: #	B56 &lt;- B54  Freq: 0.885534
3dc   	movdl   R8, XMM2	# spill
3e1   	movl    [R8 + #16 (8-bit)], R14	# int
3e5   	movl    [R8 + #20 (8-bit)], RDX	# int
3e9   	movl    [R8 + #16 (8-bit)], R14	# int
3ed   	movl    [R8 + #20 (8-bit)], RDX	# int
3f1   	movdl   R11, XMM13	# spill
3f1
3f6   B56: #	N1068 &lt;- B57 B55  Freq: 0.999892
3f6   	movl    [R10 + #36 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.oldLast
3fa   	movl    RAX, R11	# spill
3fd   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

408   	ret
408
409   B57: #	B56 &lt;- B28  Freq: 0.114358
409   	movdq   R10, XMM0	# spill
40e   	movl    [R10 + #28 (8-bit)], #-1	# int ! Field: java/util/regex/Matcher.first
416   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
41b   	movl    RDX, [R10 + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
41f   	xorl    R11, R11	# int
422   	jmp,s   B56
422
424   B58: #	N1068 &lt;- B36 B30 B31 B32 B33 B34 B35  Freq: 5.3627e-05
424   	movsd   [rsp + #0], XMM3	# spill
429   	movsd   [rsp + #8], XMM0	# spill
42f   	movl    [rsp + #16], R14	# spill
434   	movss   [rsp + #20], XMM1	# spill
43a   	movss   [rsp + #24], XMM8	# spill
440   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #28], rax
	movq    rax, [rsp - #8]
452   	movl    [rsp + #36], R13	# spill
457   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
45f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:37  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #20 L[4]=rsp + #24 L[5]=rsp + #28 L[6]=rsp + #40 L[7]=rsp + #36 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #8 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [8]=Oop [20]=NarrowOop [24]=NarrowOop off=1124}
464   	int3	# ShouldNotReachHere
464
469   B59: #	N1068 &lt;- B24  Freq: 7.41295e-06
469   	movl    RBP, RBX	# spill
46b   	incl    RBP	# int
46d   	movsd   [rsp + #8], XMM3	# spill
473   	movsd   [rsp + #16], XMM0	# spill
479   	movq    [rsp + #24], R11	# spill
47e   	movss   [rsp + #32], XMM8	# spill
484   	movl    [rsp + #44], RBX	# spill
488   	movl    [rsp + #48], R14	# spill
48d   	movss   [rsp + #52], XMM9	# spill
493   	movl    [rsp + #56], RAX	# spill
497   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
49f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #24 L[4]=rsp + #32 L[5]=rsp + #36 L[6]=rsp + #40 L[7]=rsp + #44 L[8]=_ STK[0]=rsp + #48 STK[1]=RBP STK[2]=rsp + #52 STK[3]=rsp + #56
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #16 L[1]=_ L[2]=_
        # OopMap{[8]=Oop [16]=Oop [24]=Oop [32]=NarrowOop [52]=NarrowOop off=1188}
4a4   	int3	# ShouldNotReachHere
4a4
4a9   B60: #	N1068 &lt;- B26  Freq: 7.41294e-06
4a9   	movsd   [rsp + #0], XMM3	# spill
4ae   	movsd   [rsp + #8], XMM0	# spill
4b4   	movq    [rsp + #16], R11	# spill
4b9   	movss   [rsp + #24], XMM8	# spill
4bf   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #28], rax
	movq    rax, [rsp - #8]
4d1   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
4e3   	movl    [rsp + #36], R14	# spill
4e8   	movl    [rsp + #40], R10	# spill
4ed   	movss   [rsp + #44], XMM6	# spill
4f3   	movl    [rsp + #48], RBX	# spill
4f7   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
4ff   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #16 L[4]=rsp + #24 L[5]=rsp + #28 L[6]=rsp + #32 L[7]=_ L[8]=_ STK[0]=rsp + #36 STK[1]=rsp + #40 STK[2]=rsp + #44 STK[3]=rsp + #48
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #8 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [8]=Oop [16]=Oop [24]=NarrowOop [44]=NarrowOop off=1284}
504   	int3	# ShouldNotReachHere
504
509   B61: #	B62 &lt;- B38  Freq: 5.69563e-06
509   	movl    RDI, RBX	# spill
509
50b   B62: #	N1068 &lt;- B48 B61  Freq: 6.03053e-06
50b   	movsd   [rsp + #0], XMM3	# spill
510   	movsd   [rsp + #8], XMM0	# spill
516   	movl    [rsp + #16], R14	# spill
51b   	movss   [rsp + #20], XMM8	# spill
521   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
533   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #36], rax
	movq    rax, [rsp - #8]
545   	movl    [rsp + #40], RDI	# spill
549   	movq    [rsp + #48], R11	# spill
54e   	movl    [rsp + #56], RSI	# spill
552   	movl    RSI, #-155	# int
557   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #48 L[1]=rsp + #56 STK[0]=rsp + #56
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #48 L[4]=rsp + #20 L[5]=rsp + #32 L[6]=rsp + #36 L[7]=rsp + #40 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #8 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [8]=Oop [20]=NarrowOop [48]=Oop off=1372}
55c   	int3	# ShouldNotReachHere
55c
561   B63: #	B64 &lt;- B39  Freq: 5.43177e-06
561   	movl    RDI, RBX	# spill
561
563   B64: #	N1068 &lt;- B49 B63  Freq: 5.75116e-06
563   	movsd   [rsp + #0], XMM3	# spill
568   	movsd   [rsp + #8], XMM0	# spill
56e   	movl    [rsp + #16], R14	# spill
573   	movss   [rsp + #20], XMM8	# spill
579   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
58b   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #36], rax
	movq    rax, [rsp - #8]
59d   	movl    [rsp + #40], RDI	# spill
5a1   	movq    [rsp + #48], R11	# spill
5a6   	movl    [rsp + #56], RSI	# spill
5aa   	movl    [rsp + #60], R9	# spill
5af   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
5b7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #48 L[1]=rsp + #56 STK[0]=rsp + #56 STK[1]=rsp + #60
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #48 L[4]=rsp + #20 L[5]=rsp + #32 L[6]=rsp + #36 L[7]=rsp + #40 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #8 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [8]=Oop [20]=NarrowOop [48]=Oop off=1468}
5bc   	int3	# ShouldNotReachHere
5bc
5c1   B65: #	B46 &lt;- B42  Freq: 3.85277e-06
5c1   	movl    RDI, RBX	# spill
5c3   	jmp     B46
5c3
5c8   B66: #	N1068 &lt;- B13 B6  Freq: 2.89507e-06
5c8   	movq    RBP, R13	# spill
5cb   	movl    [rsp + #0], R14	# spill
5cf   	movl    [rsp + #8], R11	# spill
5d4   	movl    [rsp + #12], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
5db   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Matcher::search @ bci:61  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 STK[0]=rsp + #8 STK[1]=rsp + #12 STK[2]=#-1
        # OopMap{rbp=Oop [8]=NarrowOop off=1504}
5e0   	int3	# ShouldNotReachHere
5e0
5e5   B67: #	N1068 &lt;- B2  Freq: 9.99999e-07
5e5   	movq    RBP, R13	# spill
5e8   	movl    [rsp + #0], R14	# spill
5ec   	movl    [rsp + #4], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
5f3   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::search @ bci:46  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4
        # OopMap{rbp=Oop off=1528}
5f8   	int3	# ShouldNotReachHere
5f8
5fd   B68: #	N1068 &lt;- B18  Freq: 9.99992e-07
5fd   	movl    RSI, #-34	# int
602   	movq    [rsp + #8], R13	# spill
607   	movl    [rsp + #16], R14	# spill
60c   	movl    [rsp + #20], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
613   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #8 L[1]=_ L[2]=_ STK[0]=RBP STK[1]=rsp + #8 STK[2]=rsp + #16 STK[3]=rsp + #20
        # OopMap{rbp=NarrowOop [8]=Oop [20]=NarrowOop off=1560}
618   	int3	# ShouldNotReachHere
618
61d   B69: #	N1068 &lt;- B53  Freq: 8.85536e-07
61d   	movl    RSI, #-34	# int
622   	movsd   [rsp + #0], XMM3	# spill
627   	movsd   [rsp + #8], XMM0	# spill
62d   	movl    [rsp + #16], R14	# spill
632   	movss   [rsp + #24], XMM8	# spill
638   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #28], rax
	movq    rax, [rsp - #8]
64a   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
65c   	movsd   [rsp + #40], XMM0	# spill
662   	movl    [rsp + #36], RDX	# spill
666   	movss   [rsp + #48], XMM1	# spill
66c   	movss   [rsp + #52], XMM7	# spill
      	nop 	# 1 bytes pad for loops and calls
673   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #0 L[1]=rsp + #40 L[2]=rsp + #16 L[3]=rsp + #48 L[4]=rsp + #24 L[5]=rsp + #28 L[6]=rsp + #32 L[7]=_ L[8]=_ STK[0]=rsp + #52 STK[1]=rsp + #8 STK[2]=rsp + #36 STK[3]=rsp + #48
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #8 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [8]=Oop [24]=NarrowOop [40]=Oop [48]=NarrowOop [52]=NarrowOop off=1656}
678   	int3	# ShouldNotReachHere
678
67d   B70: #	N1068 &lt;- B54  Freq: 8.85535e-07
67d   	movsd   [rsp + #0], XMM3	# spill
682   	movsd   [rsp + #8], XMM0	# spill
688   	movss   [rsp + #20], XMM1	# spill
68e   	movss   [rsp + #24], XMM8	# spill
694   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #28], rax
	movq    rax, [rsp - #8]
6a6   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
6b8   	movsd   [rsp + #40], XMM0	# spill
6be   	movss   [rsp + #36], XMM2	# spill
6c4   	movl    [rsp + #48], R14	# spill
6c9   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
6cf   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #8 L[2]=_ L[3]=_ STK[0]=rsp + #36 STK[1]=#0 STK[2]=rsp + #48
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #0 L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #20 L[4]=rsp + #24 L[5]=rsp + #28 L[6]=rsp + #32 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #8 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [8]=Oop [20]=NarrowOop [24]=NarrowOop [36]=NarrowOop [40]=Oop off=1748}
6d4   	int3	# ShouldNotReachHere
6d4
6d9   B71: #	N1068 &lt;- B23  Freq: 7.41296e-06
6d9   	movl    RBP, RAX	# spill
6db   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
6e3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1768}
6e8   	int3	# ShouldNotReachHere
6e8
6ed   B72: #	N1068 &lt;- B25  Freq: 7.41294e-06
6ed   	movl    RBP, RBX	# spill
6ef   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
6f7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1788}
6fc   	int3	# ShouldNotReachHere
6fc
701   B73: #	B74 &lt;- B1  Freq: 1.01328e-06
701   	xorl    R13, R13	# ptr
704
704   B74: #	N1068 &lt;- B3 B73  Freq: 2.02656e-06
704   	movq    RBP, R13	# spill
707   	movl    [rsp + #0], R14	# spill
70b   	movl    [rsp + #4], RBX	# spill
70f   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
717   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:46  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4
        # OopMap{rbp=Oop off=1820}
71c   	int3	# ShouldNotReachHere
71c
721   B75: #	N1068 &lt;- B16  Freq: 1.01327e-06
      	nop 	# 2 bytes pad for loops and calls
723   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:77  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap{off=1832}
728   	int3	# ShouldNotReachHere
728
72d   B76: #	N1068 &lt;- B17  Freq: 1.01327e-06
72d   	movq    RBP, R13	# spill
730   	movl    [rsp + #0], R14	# spill
734   	movl    [rsp + #4], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
73b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #4
        # OopMap{rbp=Oop [4]=NarrowOop off=1856}
740   	int3	# ShouldNotReachHere
740
745   B77: #	N1068 &lt;- B19  Freq: 1.01327e-06
      	nop 	# 2 bytes pad for loops and calls
747   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1868}
74c   	int3	# ShouldNotReachHere
74c
751   B78: #	N1068 &lt;- B52  Freq: 8.97296e-07
751   	movdq   RBP, XMM0	# spill
756   	movl    [rsp + #0], RDX	# spill
759   	movss   [rsp + #4], XMM1	# spill
75f   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
767   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #4
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=Oop [4]=NarrowOop off=1900}
76c   	int3	# ShouldNotReachHere
76c

</opto_assembly>
<writer thread='139875534886656'/>
<opto_assembly compile_id='278' compile_kind='osr'>
{method}
 - this oop:          0x00007f3755b1c378
 - method holder:     &apos;java/util/regex/Pattern$BnM&apos;
 - constants:         0x00007f3755b1bb08 constant pool [116] {0x00007f3755b1bb08} for &apos;java/util/regex/Pattern$BnM&apos; cache=0x00007f3755b1d140
 - access:            0xc1000000  
 - name:              &apos;match&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z&apos;
 - max stack:         6
 - max locals:        9
 - size of params:    4
 - method size:       12
 - highest level:     2
 - vtable index:      8
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37681c7d78: 0xbbab0000 i2c: 0x00007f3758b26ce0 c2i: 0x00007f3758b26e25 c2iUV: 0x00007f3758b26df8
 - compiled entry     0x00007f3758c6d2c0
 - code size:         161
 - code start:        0x00007f3755b1c240
 - code end (excl):   0x00007f3755b1c2e1
 - method data:       0x00007f3755b21750
 - checked ex length: 0
 - linenumber start:  0x00007f3755b1c2e1
 - localvar length:   10
 - localvar start:    0x00007f3755b1c2fe
 - compiled code: nmethod   2063  251       2       java.util.regex.Pattern$BnM::match (161 bytes)
#
#  bool ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1517: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B85 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (296 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01c   	movl    R14, [RSI + #24 (8-bit)]	# int
020   	movl    RBX, [RSI + #8 (8-bit)]	# int
023   	movq    R10, [RSI + #32 (8-bit)]	# ptr
027   	movq    [rsp + #8], R10	# spill
02c   	movl    R13, [RSI + #48 (8-bit)]	# int
030   	movq    R10, [RSI + #40 (8-bit)]	# ptr
034   	movq    [rsp + #16], R10	# spill
039   	movl    R11, [RSI + #16 (8-bit)]	# int
03d   	movl    [rsp + #24], R11	# spill
042   	movq    RBP, [RSI + #64 (8-bit)]	# ptr
046   	movq    R10, [RSI + #56 (8-bit)]	# ptr
04a   	movq    [rsp + #32], R10	# spill
04f   	movl    R10, R13	# spill
052   	addl    R10, RBX	# int
055   	movl    [rsp + #4], R10	# spill
05a   	movq    RDI, RSI	# spill
05d   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
06a   	movq    RAX, precise klass java/lang/CharSequence: 0x00007f37683f0960:Constant:exact *	# ptr
074   	testq   RBP, RBP	# ptr
077   	je     B85  P=0.001000 C=-1.000000
077
07d   B2: #	B103 B3 &lt;- B1  Freq: 0.999
07d   	movq    R10, RBP	# spill
080   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
084   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$BnM: 0x00007f37683f05c0:Constant:exact *	# compressed klass ptr
08b   	jne,u  B103  P=0.000001 C=-1.000000
08b
091   B3: #	B4 &lt;- B2  Freq: 0.998999
091   	movq    RDX, RBP	# spill
094   	# checkcastPP of RDX
094
094   B4: #	B86 B5 &lt;- B3 B85  Freq: 0.999999
094   	movq    R11, [rsp + #32]	# spill
099   	testq   R11, R11	# ptr
09c   	je     B86  P=0.001000 C=-1.000000
09c
0a2   B5: #	B101 B6 &lt;- B4  Freq: 0.998999
0a2   	movq    R8, R10	# spill
0a5   	movq    R10, R11	# spill
0a8   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
0ac   	cmpl    R11, narrowklass: precise klass java/util/regex/Matcher: 0x00007f37683f0890:Constant:exact *	# compressed klass ptr
0b3   	jne,u  B101  P=0.000001 C=-1.000000
0b3
0b9   B6: #	B7 &lt;- B5  Freq: 0.998998
0b9   	# checkcastPP of R10
0b9   	movdq   XMM0, R10	# spill
0b9
0be   B7: #	B87 B8 &lt;- B6 B86  Freq: 0.999998
0be   	movq    R10, [rsp + #16]	# spill
0c3   	testq   R10, R10	# ptr
0c6   	je     B87  P=0.001000 C=-1.000000
0c6
0cc   B8: #	B81 B9 &lt;- B7  Freq: 0.998998
0cc   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
0d0   	decode_klass_not_null RSI,R10
0de   	movq    R10, [RSI + #32 (8-bit)]	# class
0e2   	cmpq    R10, RAX	# ptr
0e5   	jne,u  B81  P=0.170000 C=-1.000000
0e5
0eb   B9: #	B10 &lt;- B8 B81  Freq: 0.998998
0eb   	movq    R10, [rsp + #16]	# spill
0f0   	# checkcastPP of R10
0f0   	movdq   XMM1, R10	# spill
0f0
0f5   B10: #	B88 B11 &lt;- B9 B87  Freq: 0.999998
0f5   	movq    R10, [rsp + #8]	# spill
0fa   	testq   R10, R10	# ptr
0fd   	je     B88  P=0.001000 C=-1.000000
0fd
103   B11: #	B102 B12 &lt;- B10  Freq: 0.998998
103   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
107   	cmpl    R10, narrowklass: precise klass [I: 0x00007f3768214380:Constant:exact *	# compressed klass ptr
10e   	jne,u  B102  P=0.000001 C=-1.000000
10e
114   B12: #	B13 &lt;- B11  Freq: 0.998997
114   	movq    R10, [rsp + #8]	# spill
119   	# checkcastPP of R10
119   	movdq   XMM6, R10	# spill
119
11e   B13: #	B72 B14 &lt;- B12 B88  Freq: 0.999997
11e   	testl   RBX, RBX
120   	jl     B72  P=0.074668 C=22513.000000
120
126   B14: #	B118 B15 &lt;- B13  Freq: 0.925329
126   	movl    RSI, #-10	# int
12b   	movdq   R10, XMM1	# spill
130   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
134   	NullCheck R10
134
134   B15: #	B106 B16 &lt;- B14  Freq: 0.925328
134   	cmpl    R10, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
13b   	jne,u  B106  P=0.000001 C=-1.000000
13b
141   B16: #	B94 B17 &lt;- B15  Freq: 0.925327
141   	movdq   R10, XMM1	# spill
146   	# checkcastPP of R10
146   	movdq   XMM2, R10	# spill
14b   	movl    R10, [rsp + #4]	# spill
150   	testl   R10, R10
153   	jl     B94  P=0.000000 C=7895.000000
153
159   B17: #	B119 B18 &lt;- B16  Freq: 0.925327
159   	movdq   R10, XMM2	# spill
15e   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
162   	movdl   XMM4, R10	# spill
167   	movl    R10, [R10 + #12 (8-bit)]	# range
16b   	NullCheck R10
16b
16b   B18: #	B96 B19 &lt;- B17  Freq: 0.925326
16b   	movl    [rsp + #8], R10	# spill
170   	movl    R11, [rsp + #4]	# spill
175   	cmpl    R11, R10
178   	jge     B96  P=0.000000 C=7895.000000
178
17e   B19: #	B90 B20 &lt;- B18  Freq: 0.925325
17e   	movl    R10, R11	# spill
181   	cmpl    R10, [RSP + #8 (32-bit)]	# unsigned
186   	jnb,u  B90  P=0.000001 C=-1.000000
186
18c   B20: #	B120 B21 &lt;- B19  Freq: 0.925324
18c   	movdl   R10, XMM4	# spill
191   	movzwl  R10, [R10 + #16 + R11 &lt;&lt; #1]	# ushort/char
197   	movl    RCX, RBX	# spill
199   	decl    RCX	# int
19b   	movl    R11, R10	# spill
19e   	andl    R11, #127	# int
1a2   	movdl   XMM5, R11	# spill
1a7   	movl    R9, R14	# spill
1aa   	decl    R9	# int
1ad   	movdq   R11, XMM6	# spill
1b2   	movl    RDI, [R11 + #12 (8-bit)]	# range
1b6   	NullCheck R11
1b6
1b6   B21: #	B91 B22 &lt;- B20  Freq: 0.925323
1b6   	cmpl    RBX, RDI	# unsigned
1b8   	jnb,u  B91  P=0.000001 C=-1.000000
1b8
1be   B22: #	B30 B23 &lt;- B21  Freq: 0.925322
1be   	movl    R11, [R11 + #16 + RBX &lt;&lt; #2]	# int
1c3   	cmpl    R10, R11
1c6   	je,s   B30  P=0.667579 C=20832.000000
1c6
1c8   B23: #	B112 B24 &lt;- B22  Freq: 0.307597
1c8   	movl    R8, [RDX + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
1cc   	NullCheck RDX
1cc
1cc   B24: #	B113 B25 &lt;- B23  Freq: 0.307597
1cc   	movl    RAX, [RDX + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
1cf   	movl    R10, [R8 + #12 (8-bit)]	# range
1d3   	NullCheck R8
1d3
1d3   B25: #	B109 B26 &lt;- B24  Freq: 0.307596
1d3   	decode_heap_oop_not_null R11,RAX
1d6   	movdq   XMM3, R11	# spill
1db   	movdl   R11, XMM5	# spill
1e0   	cmpl    R11, R10	# unsigned
1e3   	jnb,u  B109  P=0.000001 C=-1.000000
1e3
1e9   B26: #	B122 B27 &lt;- B25  Freq: 0.307596
1e9   	movl    R10, RBX	# spill
1ec   	subl    R10, [R8 + #16 + R11 &lt;&lt; #2]	# int
1f1   	incl    R10	# int
1f4   	movdl   XMM5, R10	# spill
1f9   	movl    R11, [RAX + #12 (8-bit)]	# range
1fd   	NullCheck RAX
1fd
1fd   B27: #	B100 B28 &lt;- B26  Freq: 0.307596
1fd   	cmpl    RBX, R11	# unsigned
200   	jnb,u  B100  P=0.000001 C=-1.000000
200
206   B28: #	B83 B29 &lt;- B27  Freq: 0.307595
206   	movl    R11, [RAX + #16 + RBX &lt;&lt; #2]	# int
20b   	cmpl    R10, R11
20e   	cmovll R10, R11	# signed, int
212   	addl    R10, R13	# int
215   	cmpl    R10, [RSP + #24 (32-bit)]
21a   	jg     B83  P=0.013752 C=8726.000000
21a
220   B29: #	B30 &lt;- B28  Freq: 0.303365
220   	movl    R13, R10	# spill
223   	movl    RCX, R9	# spill
223
226   B30: #	B72 B31 &lt;- B22 B29  Freq: 0.921091
226   	testl   RCX, RCX
228   	jl     B72  P=0.074668 C=22513.000000
228
22e   B31: #	B93 B32 &lt;- B30  Freq: 0.852315
22e   	movl    RBX, RCX	# spill
230   	addl    RBX, R13	# int
233   	movl    [rsp + #4], RBX	# spill
237   	testl   RBX, RBX
239   	jl     B93  P=0.000000 C=7895.000000
239
23f   B32: #	B95 B33 &lt;- B31  Freq: 0.852314
23f   	cmpl    RBX, [RSP + #8 (32-bit)]
243   	jge     B95  P=0.000000 C=7895.000000
243
249   B33: #	B89 B34 &lt;- B32  Freq: 0.852314
249   	cmpl    RBX, [RSP + #8 (32-bit)]	# unsigned
24d   	jnb,u  B89  P=0.000001 C=-1.000000
24d
253   B34: #	B107 B35 &lt;- B33  Freq: 0.852313
253   	movdl   R10, XMM4	# spill
258   	movzwl  R10, [R10 + #16 + RBX &lt;&lt; #1]	# ushort/char
25e   	movl    RAX, R10	# spill
261   	cmpl    RCX, RDI	# unsigned
263   	jnb,u  B107  P=0.000001 C=-1.000000
263
269   B35: #	B43 B36 &lt;- B34  Freq: 0.852312
269   	movdq   R10, XMM6	# spill
26e   	movl    R10, [R10 + #16 + RCX &lt;&lt; #2]	# int
273   	movl    RBX, RCX	# spill
275   	decl    RBX	# int
277   	cmpl    RAX, R10
27a   	je,s   B43  P=0.667579 C=20832.000000
27a
27c   B36: #	B112 B37 &lt;- B35  Freq: 0.283327
27c   	movl    R10, RAX	# spill
27f   	andl    R10, #127	# int
283   	movdl   XMM5, R10	# spill
288   	movl    R10, [RDX + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
28c   	NullCheck RDX
28c
28c   B37: #	B113 B38 &lt;- B36  Freq: 0.283327
28c   	decode_heap_oop_not_null RAX,R10
28f   	movl    R8, [R10 + #12 (8-bit)]	# range
293   	NullCheck R10
293
293   B38: #	B110 B39 &lt;- B37  Freq: 0.283326
293   	movdl   R11, XMM5	# spill
298   	cmpl    R11, R8	# unsigned
29b   	jnb,u  B110  P=0.000001 C=-1.000000
29b
2a1   B39: #	B121 B40 &lt;- B38  Freq: 0.283326
2a1   	movl    R11, RCX	# spill
2a4   	movdl   R8, XMM5	# spill
2a9   	subl    R11, [R10 + #16 + R8 &lt;&lt; #2]	# int
2ae   	movl    R8, [RDX + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
2b2   	incl    R11	# int
2b5   	movdl   XMM5, R11	# spill
2ba   	decode_heap_oop_not_null R10,R8
2bd   	movdq   XMM3, R10	# spill
2c2   	movl    R10, [R8 + #12 (8-bit)]	# range
2c6   	NullCheck R8
2c6
2c6   B40: #	B99 B41 &lt;- B39  Freq: 0.283326
2c6   	cmpl    RCX, R10	# unsigned
2c9   	jnb,u  B99  P=0.000001 C=-1.000000
2c9
2cf   B41: #	B83 B42 &lt;- B40  Freq: 0.283325
2cf   	movl    R8, [R8 + #16 + RCX &lt;&lt; #2]	# int
2d4   	cmpl    R11, R8
2d7   	movl    R10, R11	# spill
2da   	cmovll R10, R8	# signed, int
2de   	addl    R10, R13	# int
2e1   	cmpl    R10, [RSP + #24 (32-bit)]
2e6   	jg     B83  P=0.013752 C=8726.000000
2e6
2ec   B42: #	B43 &lt;- B41  Freq: 0.279429
2ec   	movl    R13, R10	# spill
2ef   	movl    RBX, R9	# spill
2ef
2f2   B43: #	B72 B44 &lt;- B35 B42  Freq: 0.848415
2f2   	testl   RBX, RBX
2f4   	jl     B72  P=0.074668 C=22513.000000
2f4
2fa   B44: #	B94 B45 &lt;- B43  Freq: 0.785065
2fa   	movl    RBP, RBX	# spill
2fc   	addl    RBP, R13	# int
2ff   	movl    [rsp + #4], RBP	# spill
303   	testl   RBP, RBP
305   	jl     B94  P=0.000000 C=7895.000000
305
30b   B45: #	B96 B46 &lt;- B44  Freq: 0.785065
30b   	cmpl    RBP, [RSP + #8 (32-bit)]
30f   	jge     B96  P=0.000000 C=7895.000000
30f
315   B46: #	B90 B47 &lt;- B45  Freq: 0.785064
315   	cmpl    RBP, [RSP + #8 (32-bit)]	# unsigned
319   	jnb,u  B90  P=0.000001 C=-1.000000
319
31f   B47: #	B92 B48 &lt;- B46  Freq: 0.785064
31f   	movdl   R10, XMM4	# spill
324   	movzwl  R10, [R10 + #16 + RBP &lt;&lt; #1]	# ushort/char
32a   	movl    RAX, R10	# spill
32d   	cmpl    RBX, RDI	# unsigned
32f   	jnb,u  B92  P=0.000001 C=-1.000000
32f
335   B48: #	B56 B49 &lt;- B47  Freq: 0.785063
335   	movdq   R10, XMM6	# spill
33a   	movl    R10, [R10 + #16 + RBX &lt;&lt; #2]	# int
33f   	cmpl    RAX, R10
342   	je,s   B56  P=0.667579 C=20832.000000
342
344   B49: #	B112 B50 &lt;- B48  Freq: 0.260972
344   	movl    R10, RAX	# spill
347   	andl    R10, #127	# int
34b   	movdl   XMM5, R10	# spill
350   	movl    RAX, [RDX + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
353   	NullCheck RDX
353
353   B50: #	B113 B51 &lt;- B49  Freq: 0.260971
353   	decode_heap_oop_not_null R8,RAX
356   	movl    R10, [RAX + #12 (8-bit)]	# range
35a   	NullCheck RAX
35a
35a   B51: #	B111 B52 &lt;- B50  Freq: 0.260971
35a   	movdl   R11, XMM5	# spill
35f   	cmpl    R11, R10	# unsigned
362   	jnb,u  B111  P=0.000001 C=-1.000000
362
368   B52: #	B122 B53 &lt;- B51  Freq: 0.260971
368   	movl    R10, [RDX + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
36c   	decode_heap_oop_not_null R11,R10
36f   	movdq   XMM3, R11	# spill
374   	movl    R11, [R10 + #12 (8-bit)]	# range
378   	NullCheck R10
378
378   B53: #	B100 B54 &lt;- B52  Freq: 0.260971
378   	movl    R8, RBX	# spill
37b   	movdl   RCX, XMM5	# spill
37f   	subl    R8, [RAX + #16 + RCX &lt;&lt; #2]	# int
384   	incl    R8	# int
387   	movdl   XMM5, R8	# spill
38c   	cmpl    RBX, R11	# unsigned
38f   	jnb,u  B100  P=0.000001 C=-1.000000
38f
395   B54: #	B83 B55 &lt;- B53  Freq: 0.26097
395   	movl    R8, [R10 + #16 + RBX &lt;&lt; #2]	# int
39a   	movdl   R10, XMM5	# spill
39f   	cmpl    R10, R8
3a2   	cmovll R10, R8	# signed, int
3a6   	addl    R10, R13	# int
3a9   	cmpl    R10, [RSP + #24 (32-bit)]
3ae   	jg     B83  P=0.013752 C=8726.000000
3ae
3b4   B55: #	B59 &lt;- B54  Freq: 0.257381
3b4   	movl    RBX, R9	# spill
3b7   	movl    R13, R10	# spill
3ba   	jmp,s   B59
3ba
3bc   B56: #	B59 &lt;- B48  Freq: 0.524091
3bc   	decl    RBX	# int
3be   	jmp,s   B59
3be
3c0   B57: #	B58 &lt;- B64  top-of-loop Freq: 6.11818
3c0   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$BnM::match @ bci:93  L[0]=RDX L[1]=XMM0 L[2]=R13 L[3]=XMM2 L[4]=XMM6 L[5]=R14 L[6]=rsp + #24 L[7]=R8 L[8]=_
        # OopMap{rdx=Oop xmm0=Oop xmm1=Oop xmm2=Oop xmm4=NarrowOop xmm6=Oop off=960}
3c6
3c6   B58: #	B59 &lt;- B57 B71  top-of-loop Freq: 9.12282
3c6   	movl    RBX, R8	# spill
3c6
3c9   B59: #	B72 B60 &lt;- B56 B55 B58 	Loop: B59-B58 inner  Freq: 9.9043
3c9   	testl   RBX, RBX
3cb   	jl     B72  P=0.074668 C=22513.000000
3cb
3d1   B60: #	B94 B61 &lt;- B59  Freq: 9.16476
3d1   	movl    RBP, R13	# spill
3d4   	addl    RBP, RBX	# int
3d6   	movl    [rsp + #4], RBP	# spill
3da   	testl   RBP, RBP
3dc   	jl     B94  P=0.000000 C=7895.000000
3dc
3e2   B61: #	B96 B62 &lt;- B60  Freq: 9.16476
3e2   	cmpl    RBP, [RSP + #8 (32-bit)]
3e6   	jge     B96  P=0.000000 C=7895.000000
3e6
3ec   B62: #	B90 B63 &lt;- B61  Freq: 9.16475
3ec   	cmpl    RBP, [RSP + #8 (32-bit)]	# unsigned
3f0   	jnb,u  B90  P=0.000001 C=-1.000000
3f0
3f6   B63: #	B92 B64 &lt;- B62  Freq: 9.16475
3f6   	movdl   R10, XMM4	# spill
3fb   	movzwl  R10, [R10 + #16 + RBP &lt;&lt; #1]	# ushort/char
401   	movl    RAX, R10	# spill
404   	cmpl    RBX, RDI	# unsigned
406   	jnb,u  B92  P=0.000001 C=-1.000000
406
40c   B64: #	B57 B65 &lt;- B63  Freq: 9.16474
40c   	movdq   R10, XMM6	# spill
411   	movl    R10, [R10 + #16 + RBX &lt;&lt; #2]	# int
416   	movl    R8, RBX	# spill
419   	decl    R8	# int
41c   	cmpl    RAX, R10
41f   	je,s   B57  P=0.667579 C=20832.000000
41f
421   B65: #	B112 B66 &lt;- B64  Freq: 3.04655
421   	movl    R10, RAX	# spill
424   	andl    R10, #127	# int
428   	movdl   XMM5, R10	# spill
42d   	movl    R8, [RDX + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
431   	NullCheck RDX
431
431   B66: #	B113 B67 &lt;- B65  Freq: 3.04655
431   	movl    RAX, [RDX + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
434   	movl    R11, [R8 + #12 (8-bit)]	# range
438   	NullCheck R8
438
438   B67: #	B97 B68 &lt;- B66  Freq: 3.04655
438   	cmpl    R10, R11	# unsigned
43b   	jnb,u  B97  P=0.000001 C=-1.000000
43b
441   B68: #	B122 B69 &lt;- B67  Freq: 3.04654
441   	movl    R10, RBX	# spill
444   	movdl   R11, XMM5	# spill
449   	subl    R10, [R8 + #16 + R11 &lt;&lt; #2]	# int
44e   	incl    R10	# int
451   	movdl   XMM5, R10	# spill
456   	movl    R10, [RAX + #12 (8-bit)]	# range
45a   	NullCheck RAX
45a
45a   B69: #	B100 B70 &lt;- B68  Freq: 3.04654
45a   	decode_heap_oop_not_null R11,RAX
45d   	movdq   XMM3, R11	# spill
462   	cmpl    RBX, R10	# unsigned
465   	jnb,u  B100  P=0.000001 C=-1.000000
465
46b   B70: #	B83 B71 &lt;- B69  Freq: 3.04654
46b   	movl    R8, [RAX + #16 + RBX &lt;&lt; #2]	# int
470   	movdl   R10, XMM5	# spill
475   	cmpl    R10, R8
478   	cmovll R10, R8	# signed, int
47c   	addl    R10, R13	# int
47f   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$BnM::match @ bci:87  L[0]=RDX L[1]=XMM0 L[2]=R10 L[3]=XMM2 L[4]=XMM6 L[5]=R14 L[6]=rsp + #24 L[7]=_ L[8]=_
        # OopMap{rdx=Oop xmm0=Oop xmm1=Oop xmm2=Oop xmm4=NarrowOop xmm6=Oop off=1151}
485   	cmpl    R10, [RSP + #24 (32-bit)]
48a   	jg     B83  P=0.013752 C=8726.000000
48a
490   B71: #	B58 &lt;- B70  Freq: 3.00464
490   	movl    R8, R9	# spill
493   	movl    R13, R10	# spill
496   	jmp     B58
496
49b   B72: #	B114 B73 &lt;- B13 B30 B43 B59  Freq: 0.946327
49b   	movl    RSI, #-10	# int
4a0   	movdq   R8, XMM0	# spill
4a5   	movl    [R8 + #28 (8-bit)], R13	# int ! Field: java/util/regex/Matcher.first
4a9   	NullCheck R8
4a9
4a9   B73: #	B115 B74 &lt;- B72  Freq: 0.946326
4a9   	movl    RCX, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
4ac   	NullCheck RDX
4ac
4ac   B74: #	B116 B75 &lt;- B73  Freq: 0.946325
4ac   	movl    R11, R13	# spill
4af   	addl    R11, R14	# int
4b2   	movl    R10, [RCX + #8 (8-bit)]	# compressed klass ptr
4b6   	NullCheck RCX
4b6
4b6   B75: #	B104 B76 &lt;- B74  Freq: 0.946324
4b6   	movl    R9, [R8 + #24 (8-bit)]	# int ! Field: java/util/regex/Matcher.acceptMode
4ba   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f37683f0d50:Constant:exact *	# compressed klass ptr
4c1   	jne,u  B104  P=0.000001 C=-1.000000
4c1
4c7   B76: #	B108 B77 &lt;- B75  Freq: 0.946323
4c7   	movl    RBP, [R8 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
4cb   	cmpl    R9, #1
4cf   	je     B108  P=0.000000 C=6394.000000
4cf
4d5   B77: #	B117 B78 &lt;- B76  Freq: 0.946323
4d5   	movl    [R8 + #32 (8-bit)], R11	# int ! Field: java/util/regex/Matcher.last
4d9   	movl    R9, [RBP + #12 (8-bit)]	# range
4dd   	NullCheck RBP
4dd
4dd   B78: #	B105 B79 &lt;- B77  Freq: 0.946322
4dd   	cmpl    R9, #1	# unsigned
4e1   	jbe,u  B105  P=0.000001 C=-1.000000
4e1
4e7   B79: #	B80 &lt;- B78  Freq: 0.946321
4e7   	movl    [RBP + #16 (8-bit)], R13	# int
4eb   	movl    [RBP + #20 (8-bit)], R11	# int
4ef   	movl    RAX, #1	# int
4f4   	movl    [RBP + #16 (8-bit)], R13	# int
4f8   	movl    [RBP + #20 (8-bit)], R11	# int
4f8
4fc   B80: #	N1517 &lt;- B79 B84  Freq: 0.999932
4fc   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

507   	ret
507
508   B81: #	B9 B82 &lt;- B8  Freq: 0.16983
508   	movq    rdi, [RSI + in_bytes(Klass::secondary_supers_offset())]
	movl    rcx, [rdi + Array&lt;Klass*&gt;::length_offset_in_bytes()]	# length to scan
	addq    rdi, Array&lt;Klass*&gt;::base_offset_in_bytes()	# Skip to start of data; set NZ in case count is zero
	repne   scasq	# Scan *rdi++ for a match with rax while cx-- != 0
	jne,s   miss		# Missed: flags nz
	movq    [RSI + in_bytes(Klass::secondary_super_cache_offset())], RAX	# Hit: update cache
	miss:	
533   	je     B9  P=0.999999 C=-1.000000
533
539   B82: #	B103 &lt;- B81  Freq: 1.6983e-07
539   	movq    R10, R8	# spill
53c   	jmp     B103
53c
541   B83: #	B123 B84 &lt;- B28 B70 B41 B54  Freq: 0.0536111
541   	movdq   R10, XMM0	# spill
546   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
54b   	NullCheck R10
54b
54b   B84: #	B80 &lt;- B83  Freq: 0.0536111
54b   	xorl    RAX, RAX	# int
54d   	jmp,s   B80
54d
54f   B85: #	B4 &lt;- B1  Freq: 0.000999987
54f   	xorl    RDX, RDX	# ptr
551   	movq    R10, RBP	# spill
554   	jmp     B4
554
559   B86: #	B7 &lt;- B4  Freq: 0.000999986
559   	movq    R8, R10	# spill
55c   	xorl    R10, R10	# ptr
55f   	movdq   XMM0, R10	# spill
564   	jmp     B7
564
569   B87: #	B10 &lt;- B7  Freq: 0.000999985
569   	xorl    R10, R10	# ptr
56c   	movdq   XMM1, R10	# spill
571   	jmp     B10
571
576   B88: #	B13 &lt;- B10  Freq: 0.000999985
576   	xorl    R10, R10	# ptr
579   	movdq   XMM6, R10	# spill
57e   	jmp     B13
57e
583   B89: #	B90 &lt;- B33  Freq: 8.63632e-07
583   	movl    RBX, RCX	# spill
583
585   B90: #	N1517 &lt;- B19 B89 B46 B62  Freq: 1.18832e-05
585   	movl    RBP, R13	# spill
588   	movl    [rsp + #0], RBX	# spill
58b   	movq    [rsp + #8], RDX	# spill
590   	movsd   [rsp + #16], XMM0	# spill
596   	movsd   [rsp + #32], XMM2	# spill
59c   	movsd   [rsp + #40], XMM6	# spill
5a2   	movl    [rsp + #28], R14	# spill
5a7   	movss   [rsp + #48], XMM4	# spill
5ad   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
5b3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #48 STK[1]=rsp + #4
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #40 L[5]=rsp + #28 L[6]=rsp + #24 L[7]=rsp + #0 L[8]=_
        # OopMap{[8]=Oop [16]=Oop [32]=Oop [40]=Oop [48]=NarrowOop off=1464}
5b8   	int3	# ShouldNotReachHere
5b8
5bd   B91: #	B92 &lt;- B21  Freq: 9.37611e-07
5bd   	movl    RAX, R10	# spill
5bd
5c0   B92: #	N1517 &lt;- B91 B107 B47 B63  Freq: 1.18832e-05
5c0   	movl    RBP, R13	# spill
5c3   	movl    [rsp + #4], RBX	# spill
5c7   	movq    [rsp + #8], RDX	# spill
5cc   	movsd   [rsp + #16], XMM0	# spill
5d2   	movsd   [rsp + #32], XMM2	# spill
5d8   	movl    [rsp + #28], R14	# spill
5dd   	movl    [rsp + #52], RAX	# spill
5e1   	movsd   [rsp + #56], XMM6	# spill
5e7   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
5ef   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:55  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #56 L[5]=rsp + #28 L[6]=rsp + #24 L[7]=rsp + #4 L[8]=rsp + #52 STK[0]=rsp + #52 STK[1]=rsp + #56 STK[2]=rsp + #4
        # OopMap{[8]=Oop [16]=Oop [32]=Oop [56]=Oop off=1524}
5f4   	int3	# ShouldNotReachHere
5f4
5f9   B93: #	B94 &lt;- B31  Freq: 4.26157e-07
5f9   	movl    RBX, RCX	# spill
5f9
5fb   B94: #	N1517 &lt;- B16 B93 B44 B60  Freq: 5.86374e-06
5fb   	movl    RBP, R13	# spill
5fe   	movl    [rsp + #0], RBX	# spill
601   	movq    [rsp + #8], RDX	# spill
606   	movsd   [rsp + #16], XMM0	# spill
60c   	movsd   [rsp + #40], XMM6	# spill
612   	movl    [rsp + #28], R14	# spill
617   	movsd   [rsp + #48], XMM2	# spill
61d   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
623   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #48 L[1]=rsp + #4 STK[0]=rsp + #4
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #48 L[4]=rsp + #40 L[5]=rsp + #28 L[6]=rsp + #24 L[7]=rsp + #0 L[8]=_
        # OopMap{[8]=Oop [16]=Oop [40]=Oop [48]=Oop off=1576}
628   	int3	# ShouldNotReachHere
628
62d   B95: #	B96 &lt;- B32  Freq: 4.06415e-07
62d   	movl    RBX, RCX	# spill
62d
62f   B96: #	N1517 &lt;- B18 B95 B45 B61  Freq: 5.59209e-06
62f   	movl    RBP, R13	# spill
632   	movl    [rsp + #0], RBX	# spill
635   	movq    [rsp + #16], RDX	# spill
63a   	movsd   [rsp + #32], XMM0	# spill
640   	movsd   [rsp + #48], XMM6	# spill
646   	movl    [rsp + #12], R14	# spill
64b   	movsd   [rsp + #56], XMM2	# spill
651   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
657   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #56 L[1]=rsp + #4 STK[0]=rsp + #4 STK[1]=rsp + #8
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #16 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #12 L[6]=rsp + #24 L[7]=rsp + #0 L[8]=_
        # OopMap{[16]=Oop [32]=Oop [48]=Oop [56]=Oop off=1628}
65c   	int3	# ShouldNotReachHere
65c
661   B97: #	B98 &lt;- B67  Freq: 3.087e-06
661   	decode_heap_oop_not_null R10,R8
664
664   B98: #	N1517 &lt;- B109 B110 B111 B97  Freq: 3.95021e-06
664   	movl    RBP, RBX	# spill
666   	incl    RBP	# int
668   	movl    [rsp + #0], RBX	# spill
66b   	movl    [rsp + #4], R13	# spill
670   	movq    [rsp + #8], RDX	# spill
675   	movsd   [rsp + #16], XMM0	# spill
67b   	movsd   [rsp + #32], XMM2	# spill
681   	movsd   [rsp + #40], XMM6	# spill
687   	movl    [rsp + #28], R14	# spill
68c   	movq    [rsp + #48], R10	# spill
691   	movss   [rsp + #56], XMM5	# spill
697   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
69f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #40 L[5]=rsp + #28 L[6]=rsp + #24 L[7]=rsp + #0 L[8]=_ STK[0]=rsp + #4 STK[1]=RBP STK[2]=rsp + #48 STK[3]=rsp + #56
        # OopMap{[8]=Oop [16]=Oop [32]=Oop [40]=Oop [48]=Oop off=1700}
6a4   	int3	# ShouldNotReachHere
6a4
6a9   B99: #	B100 &lt;- B40  Freq: 2.87088e-07
6a9   	movl    RBX, RCX	# spill
6a9
6ab   B100: #	N1517 &lt;- B27 B99 B53 B69  Freq: 3.9502e-06
6ab   	movl    RBP, R13	# spill
6ae   	movl    [rsp + #0], RBX	# spill
6b1   	movq    [rsp + #8], RDX	# spill
6b6   	movsd   [rsp + #16], XMM0	# spill
6bc   	movsd   [rsp + #32], XMM2	# spill
6c2   	movsd   [rsp + #40], XMM6	# spill
6c8   	movl    [rsp + #4], R14	# spill
6cd   	movss   [rsp + #28], XMM5	# spill
6d3   	movsd   [rsp + #48], XMM3	# spill
6d9   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
6df   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #40 L[5]=rsp + #4 L[6]=rsp + #24 L[7]=_ L[8]=_ STK[0]=RBP STK[1]=rsp + #28 STK[2]=rsp + #48 STK[3]=rsp + #0
        # OopMap{[8]=Oop [16]=Oop [32]=Oop [40]=Oop [48]=Oop off=1764}
6e4   	int3	# ShouldNotReachHere
6e4
6e9   B101: #	B103 &lt;- B5  Freq: 9.98999e-07
6e9   	movq    R10, R8	# spill
6ec   	jmp,s   B103
6ec
6ee   B102: #	B103 &lt;- B11  Freq: 9.98998e-07
6ee   	movq    R10, R8	# spill
6ee
6f1   B103: #	N1517 &lt;- B2 B101 B82 B102  Freq: 3.16683e-06
6f1   	movl    RBP, R13	# spill
6f4   	movl    [rsp + #0], RBX	# spill
6f7   	movl    RSI, #-99	# int
6fc   	movq    [rsp + #40], R10	# spill
701   	movl    [rsp + #4], R14	# spill
      	nop 	# 1 bytes pad for loops and calls
707   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:32  L[0]=rsp + #40 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #16 L[4]=rsp + #8 L[5]=rsp + #4 L[6]=rsp + #24 L[7]=rsp + #0 L[8]=_
        # OopMap{[8]=Oop [16]=Oop [32]=Oop [40]=Oop off=1804}
70c   	int3	# ShouldNotReachHere
70c
711   B104: #	N1517 &lt;- B75  Freq: 9.46324e-07
711   	movl    RBP, R13	# spill
714   	movq    [rsp + #0], RDX	# spill
718   	movsd   [rsp + #32], XMM6	# spill
71e   	movl    [rsp + #28], R14	# spill
723   	movl    [rsp + #40], RCX	# spill
727   	movsd   [rsp + #48], XMM0	# spill
72d   	movl    [rsp + #44], R11	# spill
732   	movsd   [rsp + #56], XMM1	# spill
738   	movl    RSI, #-34	# int
      	nop 	# 2 bytes pad for loops and calls
73f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #0 L[1]=rsp + #48 L[2]=RBP L[3]=rsp + #56 L[4]=rsp + #32 L[5]=rsp + #28 L[6]=rsp + #24 L[7]=_ L[8]=_ STK[0]=rsp + #40 STK[1]=rsp + #48 STK[2]=rsp + #44 STK[3]=rsp + #56
        # OopMap{[0]=Oop [32]=Oop [40]=NarrowOop [48]=Oop [56]=Oop off=1860}
744   	int3	# ShouldNotReachHere
744
749   B105: #	N1517 &lt;- B78  Freq: 9.46322e-07
749   	movl    [rsp + #4], R13	# spill
74e   	movq    [rsp + #8], RDX	# spill
753   	movsd   [rsp + #32], XMM1	# spill
759   	movsd   [rsp + #40], XMM6	# spill
75f   	movl    [rsp + #28], R14	# spill
764   	movsd   [rsp + #48], XMM0	# spill
76a   	movl    RSI, #-28	# int
76f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #48 L[2]=_ L[3]=_ STK[0]=RBP STK[1]=#0 STK[2]=rsp + #4
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #4 L[3]=rsp + #32 L[4]=rsp + #40 L[5]=rsp + #28 L[6]=rsp + #24 L[7]=_ L[8]=_
        # OopMap{rbp=NarrowOop [8]=Oop [32]=Oop [40]=Oop [48]=Oop off=1908}
774   	int3	# ShouldNotReachHere
774
779   B106: #	N1517 &lt;- B15  Freq: 9.25328e-07
779   	movl    RBP, R13	# spill
77c   	movl    [rsp + #0], RBX	# spill
77f   	movl    RSI, #-34	# int
784   	movq    [rsp + #8], RDX	# spill
789   	movsd   [rsp + #16], XMM0	# spill
78f   	movsd   [rsp + #40], XMM6	# spill
795   	movl    [rsp + #28], R14	# spill
79a   	movsd   [rsp + #48], XMM1	# spill
      	nop 	# 3 bytes pad for loops and calls
7a3   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #48 L[4]=rsp + #40 L[5]=rsp + #28 L[6]=rsp + #24 L[7]=rsp + #0 L[8]=_ STK[0]=rsp + #48 STK[1]=rsp + #4
        # OopMap{[8]=Oop [16]=Oop [40]=Oop [48]=Oop off=1960}
7a8   	int3	# ShouldNotReachHere
7a8
7ad   B107: #	B92 &lt;- B34  Freq: 8.63631e-07
7ad   	movl    RBX, RCX	# spill
7af   	jmp     B92
7af
7b4   B108: #	N1517 &lt;- B76  Freq: 4.51242e-07
7b4   	movl    RBP, R13	# spill
7b7   	movq    [rsp + #0], RDX	# spill
7bb   	movsd   [rsp + #16], XMM1	# spill
7c1   	movsd   [rsp + #32], XMM6	# spill
7c7   	movl    [rsp + #28], R14	# spill
7cc   	movsd   [rsp + #40], XMM0	# spill
7d2   	movl    [rsp + #48], R11	# spill
7d7   	movl    [rsp + #52], R9	# spill
7dc   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
7e3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:5  L[0]=_ L[1]=rsp + #40 L[2]=rsp + #48 L[3]=_ STK[0]=rsp + #52 STK[1]=#1
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #0 L[1]=rsp + #40 L[2]=RBP L[3]=rsp + #16 L[4]=rsp + #32 L[5]=rsp + #28 L[6]=rsp + #24 L[7]=_ L[8]=_
        # OopMap{[0]=Oop [16]=Oop [32]=Oop [40]=Oop off=2024}
7e8   	int3	# ShouldNotReachHere
7e8
7ed   B109: #	B98 &lt;- B25  Freq: 3.11681e-07
7ed   	decode_heap_oop_not_null R10,R8
7f0   	jmp     B98
7f0
7f5   B110: #	B98 &lt;- B38  Freq: 2.87088e-07
7f5   	movl    RBX, RCX	# spill
7f7   	movq    R10, RAX	# spill
7fa   	jmp     B98
7fa
7ff   B111: #	B98 &lt;- B51  Freq: 2.64437e-07
7ff   	movq    R10, R8	# spill
802   	jmp     B98
802
807   B112: #	N1517 &lt;- B23 B65 B36 B49  Freq: 3.95022e-06
807   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
80f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:65  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # OopMap{off=2068}
814   	int3	# ShouldNotReachHere
814
819   B113: #	N1517 &lt;- B24 B37 B50 B66  Freq: 3.95021e-06
819   	movdl   RBP, XMM5	# spill
81d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
823   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # OopMap{off=2088}
828   	int3	# ShouldNotReachHere
828
82d   B114: #	N1517 &lt;- B72  Freq: 9.58893e-07
82d   	movl    RBP, R13	# spill
      	nop 	# 3 bytes pad for loops and calls
833   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:98  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=2104}
838   	int3	# ShouldNotReachHere
838
83d   B115: #	N1517 &lt;- B73  Freq: 9.58892e-07
      	nop 	# 2 bytes pad for loops and calls
83f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:102  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # OopMap{off=2116}
844   	int3	# ShouldNotReachHere
844
849   B116: #	N1517 &lt;- B74  Freq: 9.58891e-07
849   	movdq   RBP, XMM0	# spill
84e   	movl    [rsp + #0], R11	# spill
852   	movsd   [rsp + #8], XMM1	# spill
      	nop 	# 3 bytes pad for loops and calls
85b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=2144}
860   	int3	# ShouldNotReachHere
860
865   B117: #	N1517 &lt;- B77  Freq: 9.58889e-07
865   	movl    RBP, R13	# spill
      	nop 	# 3 bytes pad for loops and calls
86b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap{off=2160}
870   	int3	# ShouldNotReachHere
870
875   B118: #	N1517 &lt;- B14  Freq: 9.37616e-07
875   	movl    RBP, [rsp + #4]	# spill
      	nop 	# 2 bytes pad for loops and calls
87b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=2176}
880   	int3	# ShouldNotReachHere
880
885   B119: #	N1517 &lt;- B17  Freq: 9.37614e-07
      	nop 	# 2 bytes pad for loops and calls
887   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap{off=2188}
88c   	int3	# ShouldNotReachHere
88c
891   B120: #	N1517 &lt;- B20  Freq: 9.37612e-07
891   	movl    RBP, RBX	# spill
893   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:55  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=#NULL STK[2]=RBP
        # OopMap{off=2200}
898   	int3	# ShouldNotReachHere
898
89d   B121: #	B122 &lt;- B39  Freq: 2.87088e-07
89d   	movl    RBX, RCX	# spill
89d
89f   B122: #	N1517 &lt;- B26 B121 B52 B68  Freq: 3.9502e-06
89f   	movl    RBP, RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
8a3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # OopMap{off=2216}
8a8   	int3	# ShouldNotReachHere
8a8
8ad   B123: #	N1517 &lt;- B83  Freq: 5.4323e-08
8ad   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
8b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:156  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=#1
        # OopMap{off=2232}
8b8   	int3	# ShouldNotReachHere
8b8

</opto_assembly>
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
<opto_assembly compile_id='305'>
{method}
 - this oop:          0x00007f3755772080
 - method holder:     &apos;java/util/ArrayList&apos;
 - constants:         0x00007f375576ffb0 constant pool [411] {0x00007f375576ffb0} for &apos;java/util/ArrayList&apos; cache=0x00007f3755773e70
 - access:            0x81000001  public 
 - name:              &apos;add&apos;
 - signature:         &apos;(Ljava/lang/Object;)Z&apos;
 - max stack:         6
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef710: 0xbb000000 i2c: 0x00007f3758b11fa0 c2i: 0x00007f3758b120de c2iUV: 0x00007f3758b120b1
 - compiled entry     0x00007f3758c4c940
 - code size:         29
 - code start:        0x00007f3755772040
 - code end (excl):   0x00007f375577205d
 - method data:       0x00007f37559cff50
 - checked ex length: 0
 - linenumber start:  0x00007f375577205d
 - localvar length:   2
 - localvar start:    0x00007f3755772064
 - compiled code: nmethod   2169  147       3       java.util.ArrayList::add (29 bytes)
#
#  bool ( java/util/ArrayList:NotNull *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/util/ArrayList:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 128 --
#r191 rsp+124: in_preserve
#r190 rsp+120: return address
#r189 rsp+116: in_preserve
#r188 rsp+112: saved fp register
#r187 rsp+108: pad2, stack alignment
#r186 rsp+104: pad2, stack alignment
#r185 rsp+100: Fixed slot 1
#r184 rsp+96: Fixed slot 0
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N398: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (536 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

02c   	movq    [rsp + #8], RDX	# spill
031   	movq    RCX, RSI	# spill
034   	movl    R8, #10	# int
03a   	movl    RDI, [RSI + #16 (8-bit)]	# int ! Field: java/util/ArrayList.size
03d   	movl    R10, [RSI + #20 (8-bit)]	# compressed ptr ! Field: java/util/ArrayList.elementData
041   	movl    RDX, RDI	# spill
043   	incl    RDX	# int
045   	cmpl    RDX, #10
048   	movl    R11, RDX	# spill
04b   	cmovlle R11, R8	# signed, int
04f   	cmpl    R10, narrowoop: narrowoop: java/lang/Object *[int:0]&lt;ciObjArray length=0 type=&lt;ciObjArrayKlass name=[Ljava/lang/Object; ident=824 address=0x00007f372008cfb0&gt; ident=827 SCAVENGABLE address=0x00007f372008e4f0&gt; *	# compressed ptr
056   	je,us  B3  P=0.125589 C=15057.000000
056
058   B2: #	B3 &lt;- B1  Freq: 0.874411
058   	movl    R11, RDX	# spill
058
05b   B3: #	B28 B4 &lt;- B1 B2  Freq: 1
05b   	movl    RSI, #-10	# int
060   	incl    [RCX + #12 (8-bit)]	# int ! Field: java/util/AbstractList.modCount
063   	movl    RBX, [R10 + #12 (8-bit)]	# range
067   	NullCheck R10
067
067   B4: #	B9 B5 &lt;- B3  Freq: 0.999999
067   	movl    R9, R11	# spill
06a   	subl    R9, RBX	# int
06d   	movl    R13, RBX	# spill
070   	sarl    R13, #1
073   	addl    R13, RBX	# int
076   	movl    R8, R13	# spill
079   	subl    R8, R11	# int
07c   	testl   R9, R9
07f   	jg     B9  P=0.197450 C=15057.000000
07f
085   B5: #	B6 &lt;- B4  Freq: 0.802549
085   	movl    [RCX + #16 (8-bit)], RDX	# int ! Field: java/util/ArrayList.size
088   	decode_heap_oop RBP,R10
113
113   B6: #	B23 B7 &lt;- B19 B5  Freq: 0.999999
113   	movl    R10, [RBP + #12 (8-bit)]	# range
117   	movl    RSI, #-42	# int
11c   	cmpl    RDI, R10	# unsigned
11f   	jnb,u  B23  P=0.000001 C=-1.000000
11f
125   B7: #	B24 B8 &lt;- B6  Freq: 0.999998
125   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
129   	cmpl    R10, narrowklass: precise klass [Ljava/lang/Object;: 0x00007f372008cfb0:Constant:exact *	# compressed klass ptr
130   	jne,u  B24  P=0.000001 C=-1.000000
130
136   B8: #	N398 &lt;- B7  Freq: 0.999997
136   	leaq    R10, [RBP + #16 + RDI &lt;&lt; #2]	# ptr posidxscaleoff
13b   	movl    RAX, #1	# int
140   	movq    R11, R10	# ptr -&gt; long
143   	shrq    R11, #9
147   	movq    R8, [rsp + #8]	# spill
14c   	encode_heap_oop R8,R8
1d4   	movq    R9, 0x00007f3757e0b000	# ptr
1de   	movb    [R9 + R11], R12	# short/char (R12_heapbase==0)
1e2   	movl    [R10], R8	# compressed ptr
1e5   	addq    rsp, 112	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

1f0   	ret
1f0
1f1   B9: #	B11 B10 &lt;- B4  Freq: 0.197449
1f1   	testl   R8, R8
1f4   	jge,s   B11  P=0.359867 C=3015.000000
1f4
1f6   B10: #	B11 &lt;- B9  Freq: 0.126394
1f6   	movl    R13, R11	# spill
1f6
1f9   B11: #	B27 B12 &lt;- B10 B9  Freq: 0.197449
1f9   	movq    [rsp + #16], RCX	# spill
1fe   	movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
202   	decode_klass_not_null RSI,R8
210   	movq    RAX, [RSI + #112 (8-bit)]	# ptr
214   	# TLS is in R15
214   	decode_heap_oop_not_null RCX,R10
217   	movslq  RDI, R13	# i2l
21a   	cmpl    RBX, R13
21d   	movl    R9, R13	# spill
220   	cmovll R9, RBX	# signed, int
224   	salq    RDI, #2
228   	movslq  RBX, R9	# i2l
22b   	movq    [rsp + #24], RBX	# spill
230   	salq    RBX, #2
234   	addq    RDI, #23	# long
238   	addq    RBX, #16	# long
23c   	leaq    RDX, [R10 + #16 (8-bit)]	# ptr off8narrow
240   	movq    [rsp + #32], RDX	# spill
245   	movq    [rsp + #0], RCX	# spill
249   	movl    RBP, R13	# spill
24c   	addl    RBP, #-2147483639	# int
252   	movq    RCX, RBX	# spill
255   	shrq    RCX, #3
259   	movq    RDX, RDI	# spill
25c   	shrq    RDX, #3
260   	movq    [rsp + #40], RDX	# spill
265   	testl   RBP, RBP
267   	jg     B27  P=0.000000 C=3015.000000
267
26d   B12: #	B26 B13 &lt;- B11  Freq: 0.197449
26d   	andq    RDI, #-8	# long
271   	movq    R11, RDX	# spill
274   	addq    R11, #-2	# long
278   	movq    [rsp + #48], R11	# spill
27d   	testl   R13, R13
280   	jl     B26  P=0.000001 C=-1.000000
280
286   B13: #	B21 B14 &lt;- B12  Freq: 0.197449
286   	movq    RBP, [R15 + #112 (8-bit)]	# ptr
28a   	andq    RBX, #-5	# long
28e   	movq    R11, RBP	# spill
291   	addq    R11, RDI	# ptr
294   	movl    R10, R13	# spill
297   	cmpl    R13, #262144	# unsigned
29e   	jnbe,u  B21  P=0.000001 C=-1.000000
29e
2a4   B14: #	B21 B15 &lt;- B13  Freq: 0.197449
2a4   	cmpq    R11, [R15 + #128 (32-bit)]	# raw ptr
2ab   	jnb,u  B21  P=0.000100 C=-1.000000
2ab
2b1   B15: #	B16 &lt;- B14  Freq: 0.197429
2b1   	movq    [R15 + #112 (8-bit)], R11	# ptr
2b5   	PREFETCHNTA [R11 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
2bd   	PREFETCHNTA [R11 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
2c5   	PREFETCHNTA [R11 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
2cd   	movq    [RBP], 0x0000000000000001	# ptr
2d5   	PREFETCHNTA [R11 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
2dd   	movl    [RBP + #8 (8-bit)], R8	# compressed klass ptr
2e1   	movl    [RBP + #12 (8-bit)], R13	# int
2e1
2e5   B16: #	B25 B17 &lt;- B22 B15  Freq: 0.197449
2e5   	
2e5   	# checkcastPP of RBP
2e5   	movq    RDI, RBP	# spill
2e8   	addq    RDI, RBX	# ptr
2eb   	encode_heap_oop_not_null RBX,RBP
3f6   	movq    RSI, RBP	# spill
3f9   	addq    RSI, #16	# ptr
3fd   	testl   R9, R9
400   	je     B25  P=0.000001 C=-1.000000
400
406   B17: #	B20 B18 &lt;- B16  Freq: 0.197449
406   	cmpl    R9, R10
409   	jl,s   B20  P=0.001000 C=-1.000000
409
40b   B18: #	B19 &lt;- B17 B20  Freq: 0.197449
40b   	movq    RDI, [rsp + #32]	# spill
410   	movq    RDX, [rsp + #24]	# spill
415   	call_leaf_nofp,runtime  arrayof_jint_disjoint_arraycopy
        No JVM State Info
        # 
422
422   B19: #	B6 &lt;- B18 B25  Freq: 0.197449
422   	MEMBAR-storestore (empty encoding)
422   	movq    R8, [rsp + #16]	# spill
427   	movq    R10, R8	# ptr -&gt; long
42a   	movl    [R8 + #20 (8-bit)], RBX	# compressed ptr ! Field: java/util/ArrayList.elementData
42e   	shrq    R10, #9
432   	movl    RDI, [R8 + #16 (8-bit)]	# int ! Field: java/util/ArrayList.size
436   	movl    R11, RDI	# spill
439   	incl    R11	# int
43c   	movq    R9, 0x00007f3757e0b000	# ptr
446   	movb    [R9 + R10], R12	# short/char (R12_heapbase==0)
44a   	movl    [R8 + #16 (8-bit)], R11	# int ! Field: java/util/ArrayList.size
44e   	jmp     B6
44e
453   B20: #	B18 &lt;- B17  Freq: 0.000197449
453   	movq    R11, [rsp + #40]	# spill
458   	subq    R11, RCX	# long
45b   	movq    RCX, R11	# spill
45e   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
468   	jmp,s   B18
468
46a   B21: #	B29 B22 &lt;- B13 B14  Freq: 1.99482e-05
46a   	movq    [rsp + #88], RCX	# spill
46f   	movq    [rsp + #80], RBX	# spill
474   	movl    [rsp + #72], R9	# spill
479   	movl    RBP, R13	# spill
47c   	movl    RDX, R13	# spill
47f   	movq    [rsp + #64], RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
487   	call,static  wrapper for: _new_array_Java
        # java.util.Arrays::copyOf @ bci:6  L[0]=_ L[1]=_ STK[0]=rsp + #0 STK[1]=RBP STK[2]=rsp + #64
        # java.util.ArrayList::grow @ bci:38  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #16
        # java.util.ArrayList::ensureExplicitCapacity @ bci:22  L[0]=_ L[1]=_
        # java.util.ArrayList::ensureCapacityInternal @ bci:19  L[0]=_ L[1]=_
        # java.util.ArrayList::add @ bci:7  L[0]=rsp + #16 L[1]=rsp + #8
        # OopMap{[0]=Oop [8]=Oop [16]=Oop [32]=Derived_oop_[0] [64]=Oop off=1164}
48c
48c   B22: #	B16 &lt;- B21  Freq: 1.99478e-05
        # Block is sole successor of call
48c   	movl    R10, RBP	# spill
48f   	movq    RBP, RAX	# spill
492   	movl    R9, [rsp + #72]	# spill
497   	movq    RBX, [rsp + #80]	# spill
49c   	movq    RCX, [rsp + #88]	# spill
4a1   	jmp     B16
4a1
4a6   B23: #	N398 &lt;- B6  Freq: 1.01328e-06
4a6   	movl    RSI, #-28	# int
4ab   	movl    [rsp + #0], RDI	# spill
      	nop 	# 1 bytes pad for loops and calls
4af   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.ArrayList::add @ bci:26  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=1204}
4b4   	int3	# ShouldNotReachHere
4b4
4b9   B24: #	N398 &lt;- B7  Freq: 9.99998e-07
4b9   	movl    [rsp + #0], RDI	# spill
      	nop 	# 3 bytes pad for loops and calls
4bf   	call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.ArrayList::add @ bci:26  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=1220}
4c4   	int3	# ShouldNotReachHere
4c4
4c9   B25: #	B19 &lt;- B16  Freq: 2.00071e-07
4c9   	movq    RCX, [rsp + #48]	# spill
4ce   	movq    RDI, RSI	# spill
4d1   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
4db   	
4db   	jmp     B19
4db
4e0   B26: #	N398 &lt;- B12  Freq: 1.97449e-07
4e0   	movq    RBP, [rsp + #16]	# spill
4e5   	movq    R11, [rsp + #8]	# spill
4ea   	movq    [rsp + #0], R11	# spill
4ee   	movl    [rsp + #16], R10	# spill
4f3   	movl    RSI, #-50	# int
4f8   	movl    [rsp + #20], R13	# spill
4fd   	movq    [rsp + #24], RAX	# spill
      	nop 	# 1 bytes pad for loops and calls
503   	call,static  wrapper for: uncommon_trap(reason=&apos;intrinsic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.Arrays::copyOf @ bci:6  L[0]=_ L[1]=_ STK[0]=rsp + #16 STK[1]=rsp + #20 STK[2]=rsp + #24
        # java.util.ArrayList::grow @ bci:38  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP
        # java.util.ArrayList::ensureExplicitCapacity @ bci:22  L[0]=_ L[1]=_
        # java.util.ArrayList::ensureCapacityInternal @ bci:19  L[0]=_ L[1]=_
        # java.util.ArrayList::add @ bci:7  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [24]=Oop off=1288}
508   	int3	# ShouldNotReachHere
508
50d   B27: #	N398 &lt;- B11  Freq: 9.41513e-08
50d   	movl    [rsp + #24], R11	# spill
512   	movl    RSI, #-155	# int
517   	movl    [rsp + #28], R13	# spill
      	nop 	# 3 bytes pad for loops and calls
51f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.ArrayList::grow @ bci:24  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=_ L[3]=rsp + #28 STK[0]=RBP
        # java.util.ArrayList::ensureExplicitCapacity @ bci:22  L[0]=_ L[1]=_
        # java.util.ArrayList::ensureCapacityInternal @ bci:19  L[0]=_ L[1]=_
        # java.util.ArrayList::add @ bci:7  L[0]=rsp + #16 L[1]=rsp + #8
        # OopMap{[8]=Oop [16]=Oop off=1316}
524   	int3	# ShouldNotReachHere
524
529   B28: #	N398 &lt;- B3  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
52b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.ArrayList::ensureExplicitCapacity @ bci:15  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.ArrayList::ensureCapacityInternal @ bci:19  L[0]=_ L[1]=_
        # java.util.ArrayList::add @ bci:7  L[0]=_ L[1]=_
        # OopMap{off=1328}
530   	int3	# ShouldNotReachHere
530
535   B29: #	N398 &lt;- B21  Freq: 1.99482e-10
535   	# exception oop is in rax; no code emitted
535   	movq    RSI, RAX	# spill
538   	addq    rsp, 112	# Destroy frame
	popq   rbp

53d   	jmp     rethrow_stub
53d

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='329'>
{method}
 - this oop:          0x00007f3755735cf8
 - method holder:     &apos;java/lang/Character&apos;
 - constants:         0x00007f3755733b58 constant pool [502] {0x00007f3755733b58} for &apos;java/lang/Character&apos; cache=0x00007f375583cce8
 - access:            0x81000009  public static 
 - name:              &apos;charCount&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef998: 0xa0000000 i2c: 0x00007f3758b13ba0 c2i: 0x00007f3758b13cd9 c2iUV: 0x00007f3758b13cac
 - compiled entry     0x00007f3758c7c500
 - code size:         12
 - code start:        0x00007f3755735cd8
 - code end (excl):   0x00007f3755735ce4
 - method data:       0x00007f3755b22aa0
 - checked ex length: 0
 - linenumber start:  0x00007f3755735ce4
 - localvar length:   1
 - localvar start:    0x00007f3755735cea
 - compiled code: nmethod   2192  272       3       java.lang.Character::charCount (12 bytes)
#
#  int ( int )
#
#r018 rsi   : parm 0: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B3 B2  Freq: 1
abababab
000   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (112 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	cmpl    RSI, #65536
012   	jge,s   B3  P=0.000000 C=512038.000000
012
014   B2: #	N1 &lt;- B1  Freq: 1
014   	movl    RAX, #1	# int
019   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

024   	ret
024
025   B3: #	N1 &lt;- B1  Freq: 4.76837e-07
025   	movl    RBP, RSI	# spill
027   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
02f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::charCount @ bci:3  L[0]=_ STK[0]=RBP STK[1]=#65536
        # OopMap{off=52}
034   	int3	# ShouldNotReachHere
034

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='330'>
{method}
 - this oop:          0x00007f3755735a10
 - method holder:     &apos;java/lang/Character&apos;
 - constants:         0x00007f3755733b58 constant pool [502] {0x00007f3755733b58} for &apos;java/lang/Character&apos; cache=0x00007f375583cce8
 - access:            0x81000009  public static 
 - name:              &apos;isHighSurrogate&apos;
 - signature:         &apos;(C)Z&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef998: 0xa0000000 i2c: 0x00007f3758b13ba0 c2i: 0x00007f3758b13cd9 c2iUV: 0x00007f3758b13cac
 - compiled entry     0x00007f3758c7c900
 - code size:         18
 - code start:        0x00007f37557359e8
 - code end (excl):   0x00007f37557359fa
 - method data:       0x00007f3755b22d78
 - checked ex length: 0
 - linenumber start:  0x00007f37557359fa
 - localvar length:   1
 - localvar start:    0x00007f3755735a02
 - compiled code: nmethod   2199  273       3       java.lang.Character::isHighSurrogate (18 bytes)
#
#  bool ( char )
#
#r018 rsi   : parm 0: char
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B3 B2  Freq: 1
abababab
000   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (112 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c   	xorl    RAX, RAX	# int
00e   	cmpl    RSI, #55296
014   	jge,s   B3  P=0.000000 C=562652.000000
014
016   B2: #	N1 &lt;- B1  Freq: 1
016   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

021   	ret
021
022   B3: #	N1 &lt;- B1  Freq: 4.76837e-07
022   	movl    [rsp + #0], RSI	# spill
025   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
02b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #0 STK[0]=rsp + #0 STK[1]=#55296
        # OopMap{off=48}
030   	int3	# ShouldNotReachHere
030

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
<opto_assembly compile_id='341' compile_kind='osr'>
{method}
 - this oop:          0x00007f3755948ca8
 - method holder:     &apos;java/util/regex/Pattern$Curly&apos;
 - constants:         0x00007f3755948538 constant pool [101] {0x00007f3755948538} for &apos;java/util/regex/Pattern$Curly&apos; cache=0x00007f3755949100
 - access:            0xc1000000  
 - name:              &apos;match0&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)Z&apos;
 - max stack:         6
 - max locals:        7
 - size of params:    5
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680efb48: 0xbbaab000 i2c: 0x00007f3758b14de0 c2i: 0x00007f3758b14f29 c2iUV: 0x00007f3758b14efc
 - compiled entry     0x00007f3758cab8a0
 - code size:         174
 - code start:        0x00007f3755948b88
 - code end (excl):   0x00007f3755948c36
 - method data:       0x00007f3755b43058
 - checked ex length: 0
 - linenumber start:  0x00007f3755948c36
 - localvar length:   7
 - localvar start:    0x00007f3755948c52
 - compiled code: nmethod   2225  340       3       java.util.regex.Pattern$Curly::match0 (174 bytes)
#
#  bool ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 144 --
#r191 rsp+140: in_preserve
#r190 rsp+136: return address
#r189 rsp+132: in_preserve
#r188 rsp+128: saved fp register
#r187 rsp+124: pad2, stack alignment
#r186 rsp+120: pad2, stack alignment
#r185 rsp+116: Fixed slot 1
#r184 rsp+112: Fixed slot 0
#r219 rsp+108: spill
#r218 rsp+104: spill
#r217 rsp+100: spill
#r216 rsp+96: spill
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1383: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B51 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (408 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #128	# Create frame

01f   	movl    R11, [RSI]	# int
022   	movl    [rsp + #12], R11	# spill
027   	movl    R13, [RSI + #8 (8-bit)]	# int
02b   	movq    RBP, [RSI + #48 (8-bit)]	# ptr
02f   	movq    R10, [RSI + #40 (8-bit)]	# ptr
033   	movq    [rsp + #0], R10	# spill
037   	movq    R10, [RSI + #16 (8-bit)]	# ptr
03b   	movq    [rsp + #16], R10	# spill
040   	movl    RBX, [RSI + #32 (8-bit)]	# int
043   	movl    R14, [RSI + #24 (8-bit)]	# int
047   	movq    RDI, RSI	# spill
04a   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
057   	testq   RBP, RBP	# ptr
05a   	je     B51  P=0.001000 C=-1.000000
05a
060   B2: #	B66 B3 &lt;- B1  Freq: 0.999
060   	movq    R10, RBP	# spill
063   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
067   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$Curly: 0x00007f37242b8b00:Constant:exact *	# compressed klass ptr
06e   	jne,u  B66  P=0.000001 C=-1.000000
06e
074   B3: #	B4 &lt;- B2  Freq: 0.998999
074   	movq    R9, RBP	# spill
077   	# checkcastPP of R9
077
077   B4: #	B52 B5 &lt;- B3 B51  Freq: 0.999999
077   	movq    RAX, precise klass java/lang/CharSequence: 0x00007f37242b8ea0:Constant:exact *	# ptr
081   	movq    R11, [rsp + #0]	# spill
085   	testq   R11, R11	# ptr
088   	je     B52  P=0.001000 C=-1.000000
088
08e   B5: #	B67 B6 &lt;- B4  Freq: 0.998999
08e   	movl    R8, [R11 + #8 (8-bit)]	# compressed klass ptr
092   	cmpl    R8, narrowklass: precise klass java/util/regex/Matcher: 0x00007f37242b8dd0:Constant:exact *	# compressed klass ptr
099   	jne,u  B67  P=0.000001 C=-1.000000
099
09f   B6: #	B7 &lt;- B5  Freq: 0.998998
09f   	movq    RCX, R11	# spill
0a2   	# checkcastPP of RCX
0a2
0a2   B7: #	B53 B8 &lt;- B6 B52  Freq: 0.999998
0a2   	movq    R8, [rsp + #16]	# spill
0a7   	testq   R8, R8	# ptr
0aa   	je     B53  P=0.001000 C=-1.000000
0aa
0b0   B8: #	B49 B9 &lt;- B7  Freq: 0.998998
0b0   	movdq   XMM1, RCX	# spill
0b5   	movdq   XMM0, R9	# spill
0ba   	movl    R8, [R8 + #8 (8-bit)]	# compressed klass ptr
0be   	decode_klass_not_null RSI,R8
0cc   	movq    R8, [RSI + #32 (8-bit)]	# class
0d0   	cmpq    R8, RAX	# ptr
0d3   	jne,u  B49  P=0.170000 C=-1.000000
0d3
0d9   B9: #	B10 &lt;- B8 B50  Freq: 0.998998
0d9   	movq    R10, [rsp + #16]	# spill
0de   	# checkcastPP of R10
0de   	movq    R11, R10	# spill
0e1   	addq    R11, #8	# ptr
0e5   	movdq   XMM7, R10	# spill
0ea   	movdq   XMM9, R11	# spill
0ea
0ef   B10: #	B13 &lt;- B9 B53  Freq: 0.999998
0ef   	movdl   XMM10, R14	# spill
0f4   	movl    [rsp + #4], R13	# spill
0f9   	jmp,s   B13
0f9
0fb   B11: #	B12 &lt;- B77 B21  Freq: 1.01032
0fb   	movdq   R10, XMM1	# spill
100   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
100
105   B12: #	B13 &lt;- B11 B82 B45 B29 B35 B73 B40  top-of-loop Freq: 53.3577
105   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$Curly::match0 @ bci:157  L[0]=XMM0 L[1]=XMM1 L[2]=RDI L[3]=R8 L[4]=XMM7 L[5]=rsp + #4 L[6]=rsp + #12
        # OopMap{xmm0=Oop xmm1=Oop xmm7=Oop xmm9=Derived_oop_xmm7 off=261}
10b   	movdl   XMM10, R8	# spill
110   	movl    RBX, RDI	# spill
110
112   B13: #	B48 B14 &lt;- B10 B12 	Loop: B13-B12  Freq: 54.3577
112   	movdl   R11, XMM10	# spill
117   	cmpl    R11, [RSP + #4 (32-bit)]
11c   	jl     B48  P=0.018385 C=191675.000000
11c
122   B14: #	B87 B15 &lt;- B13  Freq: 53.3583
122   	movdq   R10, XMM0	# spill
127   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
12b   	NullCheck R10
12b
12b   B15: #	B88 B16 &lt;- B14  Freq: 53.3583
12b   	decode_heap_oop_not_null R9,R10
12e   	movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
132   	NullCheck R10
132
132   B16: #	B59 B17 &lt;- B15  Freq: 53.3582
132   	movl    R11, RBX	# spill
135   	negl    R11	# int
138   	movl    [rsp + #0], R11	# spill
13c   	cmpl    R8, narrowklass: precise klass java/util/regex/Pattern$Slice: 0x00007f37242b94d0:Constant:exact *	# compressed klass ptr
143   	jne,u  B59  P=0.000001 C=-1.000000
143
149   B17: #	B89 B18 &lt;- B16  Freq: 53.3582
149   	# checkcastPP of R9
149   	movdq   XMM2, R9	# spill
14e   	movl    R11, [R9 + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$SliceNode.buffer
152   	movdl   XMM3, R11	# spill
157   	movl    R10, [R11 + #12 (8-bit)]	# range
15b   	NullCheck R11
15b
15b   B18: #	B61 B19 &lt;- B17  Freq: 53.3581
15b   	movl    [rsp + #16], R10	# spill
160   	movl    R11, RBX	# spill
163   	sarl    R11, #31
167   	movl    RDI, RBX	# spill
169   	subl    RDI, [RSP + #12 (32-bit)]	# int
16d   	testl   R10, R10
170   	jle     B61  P=0.000000 C=378555.000000
170
176   B19: #	B90 B20 &lt;- B18  Freq: 53.3581
176   	andl    R11, RBX	# int
179   	movl    R8, #1	# int
17f   	subl    R8, RBX	# int
182   	movdq   R10, XMM1	# spill
187   	movl    R9, [R10 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
18b   	NullCheck R10
18b
18b   B20: #	B21 &lt;- B19  Freq: 53.358
18b   	movl    RAX, R8	# spill
18e   	sarl    RAX, #31
191   	andl    RAX, R8	# int
194   	movdl   R8, XMM10	# spill
199   	decl    R8	# int
19c   	xorl    RDX, RDX	# int
19e
19e   B21: #	B11 B22 &lt;- B20 B31 	Loop: B21-B31 inner pre of N560 Freq: 53.8147
19e   	movl    R10, RDX	# spill
1a1   	addl    R10, RBX	# int
1a4   	movdl   XMM4, R10	# spill
1a9   	cmpl    R10, R9
1ac   	jge     B11  P=0.018774 C=378555.000000
1ac
1b2   B22: #	B54 B23 &lt;- B21  Freq: 52.8044
1b2   	movl    RSI, R9	# spill
1b5   	subl    RSI, RBX	# int
1b7   	movl    R13, RAX	# spill
1ba   	addl    R13, #2147483647	# int
1c1   	cmpl    RSI, R13
1c4   	movl    RCX, RSI	# spill
1c6   	cmovlgt RCX, R13	# min
1ca   	cmpl    RDX, [RSP + #16 (32-bit)]	# unsigned
1ce   	jnb,u  B54  P=0.000001 C=-1.000000
1ce
1d4   B23: #	B56 B24 &lt;- B22  Freq: 52.8044
1d4   	movdl   R10, XMM3	# spill
1d9   	movl    R10, [R10 + #16 + RDX &lt;&lt; #2]	# int
1de   	movdl   XMM6, R10	# spill
1e3   	movdq   R10, XMM7	# spill
1e8   	testq   R10, R10	# ptr
1eb   	je     B56  P=0.000001 C=-1.000000
1eb
1f1   B24: #	B60 B25 &lt;- B23  Freq: 52.8043
1f1   	movdq   R10, XMM9	# spill
1f6   	movl    RBP, [R10]	# compressed klass ptr
1f9   	movl    R10, RDX	# spill
1fc   	incl    R10	# int
1ff   	movl    [rsp + #20], R10	# spill
204   	movl    R14, #-2147483647	# int
20a   	subl    R14, R11	# int
20d   	cmpl    RCX, [RSP + #16 (32-bit)]
211   	movl    R10, [rsp + #16]	# spill
216   	cmovlgt RCX, R10	# min
21a   	cmpl    RBP, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
220   	jne,u  B60  P=0.000001 C=-1.000000
220
226   B25: #	B62 B26 &lt;- B24  Freq: 52.8042
226   	movdq   R10, XMM7	# spill
22b   	# checkcastPP of R10
22b   	movdq   XMM5, R10	# spill
230   	cmpl    R14, [RSP + #0 (32-bit)]
234   	movl    R10, R14	# spill
237   	movl    RBP, [rsp + #0]	# spill
23a   	cmovllt R10, RBP	# max
23e   	movdl   RBP, XMM4	# spill
242   	testl   RBP, RBP
244   	jl     B62  P=0.000000 C=7895.000000
244
24a   B26: #	B91 B27 &lt;- B25  Freq: 52.8042
24a   	movdq   RBP, XMM5	# spill
24f   	movl    RBP, [RBP + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
252   	movdl   XMM8, RBP	# spill
256   	movl    RBP, [RBP + #12 (8-bit)]	# range
259   	NullCheck RBP
259
259   B27: #	B64 B28 &lt;- B26  Freq: 52.8042
259   	movl    [rsp + #24], RBP	# spill
25d   	movl    RBP, #1	# int
262   	cmpl    R10, RBP
265   	cmovllt R10, RBP	# max
269   	cmpl    R10, [RSP + #16 (32-bit)]
26e   	movl    RBP, [rsp + #16]	# spill
272   	cmovlgt R10, RBP	# min
276   	movdl   RBP, XMM4	# spill
27a   	cmpl    RBP, [RSP + #24 (32-bit)]
27e   	jge     B64  P=0.000000 C=7895.000000
27e
284   B28: #	B57 B29 &lt;- B27  Freq: 52.8041
284   	cmpl    RBP, [RSP + #24 (32-bit)]	# unsigned
288   	jnb,u  B57  P=0.000001 C=-1.000000
288
28e   B29: #	B12 B30 &lt;- B28  Freq: 52.8041
28e   	movdl   RDX, XMM8	# spill
292   	movzwl  RBP, [RDX + #16 + RBP &lt;&lt; #1]	# ushort/char
297   	movdl   RDX, XMM6	# spill
29b   	cmpl    RDX, RBP
29d   	jne     B12  P=0.982703 C=371448.000000
29d
2a3   B30: #	B32 B31 &lt;- B29  Freq: 0.91336
2a3   	movl    RDX, [rsp + #24]	# spill
2a7   	subl    RDX, RBX	# int
2a9   	movl    RBP, [rsp + #20]	# spill
2ad   	cmpl    RBP, R10
2b0   	jge,s   B32	# loop end  P=0.500000 C=6425.000000
2b0
2b2   B31: #	B21 &lt;- B30  Freq: 0.45668
2b2   	movl    RDX, RBP	# spill
2b4   	jmp     B21
2b4
2b9   B32: #	B75 B33 &lt;- B30  Freq: 0.45668
2b9   	cmpl    RDX, R13
2bc   	cmovlgt RDX, R13	# min
2c0   	movl    R10, RBP	# spill
2c3   	cmpl    R10, RCX
2c6   	jge     B75  P=0.000001 C=-1.000000
2c6
2cc   B33: #	B65 B34 &lt;- B32  Freq: 0.45668
2cc   	# castII of R10
2cc   	movl    [rsp + #20], R10	# spill
2d1   	movdl   R10, XMM3	# spill
2d6   	movl    R11, [rsp + #20]	# spill
2db   	movl    R10, [R10 + #16 + R11 &lt;&lt; #2]	# int
2e0   	movdl   XMM6, R10	# spill
2e5   	movl    R10, RBX	# spill
2e8   	addl    R10, R11	# int
2eb   	movdl   XMM4, R10	# spill
2f0   	movl    RBP, R11	# spill
2f3   	addl    RBP, #2	# int
2f6   	cmpl    RBP, R14
2f9   	cmovllt RBP, R14	# max
2fd   	cmpl    RBP, [RSP + #0 (32-bit)]
300   	movl    R10, [rsp + #0]	# spill
304   	cmovllt RBP, R10	# max
308   	cmpl    RBP, R13
30b   	cmovlgt RBP, R13	# min
30f   	cmpl    RBP, RSI
311   	cmovlgt RBP, RSI	# min
314   	movdl   R10, XMM4	# spill
319   	cmpl    R10, [RSP + #24 (32-bit)]
31e   	jge     B65  P=0.000000 C=7895.000000
31e
324   B34: #	B58 B35 &lt;- B33  Freq: 0.456679
324   	cmpl    R10, [RSP + #24 (32-bit)]	# unsigned
329   	jnb,u  B58  P=0.000001 C=-1.000000
329
32f   B35: #	B12 B36 &lt;- B34  Freq: 0.456679
32f   	movl    R10, R11	# spill
332   	incl    R10	# int
335   	movl    [rsp + #20], R10	# spill
33a   	movdl   R10, XMM8	# spill
33f   	movdl   R11, XMM4	# spill
344   	movzwl  R10, [R10 + #16 + R11 &lt;&lt; #1]	# ushort/char
34a   	movdl   R11, XMM6	# spill
34f   	cmpl    R11, R10
352   	jne     B12  P=0.982703 C=371448.000000
352
358   B36: #	B75 B37 &lt;- B35  Freq: 0.00789924
358   	movl    R11, [rsp + #20]	# spill
35d   	cmpl    R11, RCX
360   	jge     B75	# loop end  P=0.000000 C=6425.000000
360
366   B37: #	B38 &lt;- B36  Freq: 0.00789924
366   	cmpl    RBP, [RSP + #16 (32-bit)]
36a   	movl    R10, [rsp + #16]	# spill
36f   	cmovlgt RBP, R10	# min
373   	cmpl    RDX, RSI
375   	cmovlgt RDX, RSI	# min
375
378   B38: #	B65 B39 &lt;- B37 B42 	Loop: B38-B42 inner pre of N560 Freq: 0.00796815
378   	movl    R11, [rsp + #20]	# spill
37d   	addl    R11, RBX	# int
380   	movdl   XMM4, R11	# spill
385   	movdl   R10, XMM3	# spill
38a   	movl    R11, [rsp + #20]	# spill
38f   	movl    R10, [R10 + #16 + R11 &lt;&lt; #2]	# int
394   	movdl   XMM6, R10	# spill
399   	movdl   R10, XMM4	# spill
39e   	cmpl    R10, [RSP + #24 (32-bit)]
3a3   	jge     B65  P=0.000000 C=7895.000000
3a3
3a9   B39: #	B58 B40 &lt;- B38  Freq: 0.00796815
3a9   	movl    RSI, [rsp + #20]	# spill
3ad   	incl    RSI	# int
3af   	movl    R11, R10	# spill
3b2   	cmpl    R11, [RSP + #24 (32-bit)]	# unsigned
3b7   	jnb,u  B58  P=0.000001 C=-1.000000
3b7
3bd   B40: #	B12 B41 &lt;- B39  Freq: 0.00796814
3bd   	movdl   R11, XMM8	# spill
3c2   	movzwl  R11, [R11 + #16 + R10 &lt;&lt; #1]	# ushort/char
3c8   	movdl   RAX, XMM6	# spill
3cc   	cmpl    RAX, R11
3cf   	jne     B12  P=0.982703 C=371448.000000
3cf
3d5   B41: #	B43 B42 &lt;- B40  Freq: 0.000137826
3d5   	cmpl    RSI, RBP
3d7   	jge,s   B43	# loop end  P=0.500000 C=6425.000000
3d7
3d9   B42: #	B38 &lt;- B41  Freq: 6.89131e-05
3d9   	movl    [rsp + #20], RSI	# spill
3dd   	jmp,s   B38
3dd
3df   B43: #	B68 B44 &lt;- B41  Freq: 6.89131e-05
3df   	cmpl    RDX, [RSP + #16 (32-bit)]
3e3   	movl    R11, [rsp + #16]	# spill
3e8   	cmovlgt RDX, R11	# min
3ec   	cmpl    RSI, RDX
3ee   	jge     B68  P=0.000001 C=-1.000000
3ee
3f4   B44: #	B45 &lt;- B43  Freq: 6.8913e-05
3f4   	# castII of RSI
3f4
3f4   B45: #	B12 B46 &lt;- B44 B47 	Loop: B45-B47 inner main of N329 Freq: 7.0126e-05
3f4   	movl    RAX, RSI	# spill
3f6   	addl    RAX, RBX	# int
3f8   	movl    R10, RSI	# spill
3fb   	incl    R10	# int
3fe   	movl    [rsp + #20], R10	# spill
403   	movdl   R11, XMM8	# spill
408   	movzwl  R10, [R11 + #16 + RAX &lt;&lt; #1]	# ushort/char
40e   	movdl   R11, XMM3	# spill
413   	movl    RSI, [R11 + #16 + RSI &lt;&lt; #2]	# int
418   	cmpl    RSI, R10
41b   	jne     B12  P=0.982703 C=371448.000000
41b
421   B46: #	B69 B47 &lt;- B45  Freq: 1.21298e-06
421   	movl    R11, [rsp + #20]	# spill
426   	cmpl    R11, RDX
429   	jge     B69	# loop end  P=0.000000 C=6425.000000
429
42f   B47: #	B45 &lt;- B46  Freq: 1.21298e-06
42f   	movl    RSI, R11	# spill
432   	jmp,s   B45
432
434   B48: #	N1383 &lt;- B13  Freq: 0.999382
434   	xorl    RAX, RAX	# int
436   	addq    rsp, 128	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

444   	ret
444
445   B49: #	B67 B50 &lt;- B8  Freq: 0.16983
445   	movq    rdi, [RSI + in_bytes(Klass::secondary_supers_offset())]
	movl    rcx, [rdi + Array&lt;Klass*&gt;::length_offset_in_bytes()]	# length to scan
	addq    rdi, Array&lt;Klass*&gt;::base_offset_in_bytes()	# Skip to start of data; set NZ in case count is zero
	repne   scasq	# Scan *rdi++ for a match with rax while cx-- != 0
	jne,s   miss		# Missed: flags nz
	movq    [RSI + in_bytes(Klass::secondary_super_cache_offset())], RAX	# Hit: update cache
	miss:	
470   	jne     B67  P=0.000001 C=-1.000000
470
476   B50: #	B9 &lt;- B49  Freq: 0.16983
476   	jmp     B9
476
47b   B51: #	B4 &lt;- B1  Freq: 0.000999987
47b   	xorl    R9, R9	# ptr
47e   	movq    R10, RBP	# spill
481   	jmp     B4
481
486   B52: #	B7 &lt;- B4  Freq: 0.000999986
486   	xorl    RCX, RCX	# ptr
488   	jmp     B7
488
48d   B53: #	B10 &lt;- B7  Freq: 0.000999985
48d   	xorl    R10, R10	# ptr
490   	movdq   XMM7, R10	# spill
495   	movdq   XMM0, R9	# spill
49a   	movdq   XMM1, RCX	# spill
49f   	movl    R10, NULL+8	# ptr (positive 32-bit)
4a5   	movdq   XMM9, R10	# spill
4aa   	jmp     B10
4aa
4af   B54: #	B55 &lt;- B22  Freq: 5.35056e-05
4af   	movl    [rsp + #20], RDX	# spill
4af
4b3   B55: #	N1383 &lt;- B78 B54  Freq: 5.35056e-05
4b3   	movl    RSI, #-28	# int
4b8   	movss   [rsp + #0], XMM10	# spill
4bd   	movl    [rsp + #8], RBX	# spill
4c1   	movsd   [rsp + #24], XMM0	# spill
4c7   	movsd   [rsp + #48], XMM2	# spill
4cd   	movsd   [rsp + #56], XMM1	# spill
4d3   	movsd   [rsp + #64], XMM7	# spill
4d9   	movss   [rsp + #76], XMM3	# spill
4df   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:43  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #64 L[4]=rsp + #76 L[5]=rsp + #16 L[6]=rsp + #20 STK[0]=rsp + #76 STK[1]=rsp + #20
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #24 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #0 L[4]=rsp + #64 L[5]=rsp + #4 L[6]=rsp + #12
        # OopMap{[24]=Oop [48]=Oop [56]=Oop [64]=Oop [76]=NarrowOop off=1252}
4e4   	int3	# ShouldNotReachHere
4e4
4e9   B56: #	N1383 &lt;- B23  Freq: 5.35055e-05
4e9   	movl    RSI, #-10	# int
4ee   	movdl   RBP, XMM4	# spill
      	nop 	# 1 bytes pad for loops and calls
4f3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL STK[2]=RBP
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=1272}
4f8   	int3	# ShouldNotReachHere
4f8
4fd   B57: #	B58 &lt;- B28  Freq: 5.35053e-05
4fd   	movl    [rsp + #20], RDX	# spill
4fd
501   B58: #	N1383 &lt;- B81 B57 B34 B72 B39  Freq: 5.39761e-05
501   	movss   [rsp + #0], XMM10	# spill
506   	movl    [rsp + #8], RBX	# spill
50a   	movsd   [rsp + #24], XMM0	# spill
510   	movsd   [rsp + #40], XMM7	# spill
516   	movsd   [rsp + #48], XMM2	# spill
51c   	movsd   [rsp + #56], XMM1	# spill
522   	movsd   [rsp + #64], XMM5	# spill
528   	movss   [rsp + #72], XMM3	# spill
52e   	movss   [rsp + #76], XMM6	# spill
534   	movss   [rsp + #80], XMM8	# spill
53a   	movss   [rsp + #84], XMM4	# spill
540   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
547   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #80 STK[1]=rsp + #84
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #64 L[4]=rsp + #72 L[5]=rsp + #16 L[6]=rsp + #20 STK[0]=rsp + #76
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #24 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #0 L[4]=rsp + #40 L[5]=rsp + #4 L[6]=rsp + #12
        # OopMap{[24]=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop [72]=NarrowOop [80]=NarrowOop off=1356}
54c   	int3	# ShouldNotReachHere
54c
551   B59: #	N1383 &lt;- B16  Freq: 5.33582e-05
551   	movl    RSI, #-34	# int
556   	movss   [rsp + #0], XMM10	# spill
55b   	movl    [rsp + #8], RBX	# spill
55f   	movsd   [rsp + #16], XMM0	# spill
565   	movl    [rsp + #40], R10	# spill
56a   	movsd   [rsp + #48], XMM1	# spill
570   	movsd   [rsp + #56], XMM7	# spill
      	nop 	# 1 bytes pad for loops and calls
577   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #8 L[3]=rsp + #0 L[4]=rsp + #56 L[5]=rsp + #4 L[6]=rsp + #12 STK[0]=rsp + #40 STK[1]=rsp + #48 STK[2]=rsp + #8 STK[3]=rsp + #56
        # OopMap{[16]=Oop [40]=NarrowOop [48]=Oop [56]=Oop off=1404}
57c   	int3	# ShouldNotReachHere
57c
581   B60: #	N1383 &lt;- B24  Freq: 5.28043e-05
581   	movss   [rsp + #0], XMM10	# spill
586   	movl    [rsp + #8], RBX	# spill
58a   	movsd   [rsp + #24], XMM0	# spill
590   	movsd   [rsp + #48], XMM2	# spill
596   	movsd   [rsp + #56], XMM1	# spill
59c   	movsd   [rsp + #64], XMM7	# spill
5a2   	movss   [rsp + #20], XMM3	# spill
5a8   	movl    [rsp + #72], RDX	# spill
5ac   	movss   [rsp + #76], XMM6	# spill
5b2   	movsd   [rsp + #80], XMM7	# spill
5b8   	movss   [rsp + #88], XMM4	# spill
5be   	movl    RSI, #-34	# int
5c3   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #80 L[4]=rsp + #20 L[5]=rsp + #16 L[6]=rsp + #72 STK[0]=rsp + #76 STK[1]=rsp + #64 STK[2]=rsp + #88
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #24 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #0 L[4]=rsp + #64 L[5]=rsp + #4 L[6]=rsp + #12
        # OopMap{[20]=NarrowOop [24]=Oop [48]=Oop [56]=Oop [64]=Oop [80]=Oop off=1480}
5c8   	int3	# ShouldNotReachHere
5c8
5cd   B61: #	N1383 &lt;- B18  Freq: 2.66791e-05
5cd   	movss   [rsp + #0], XMM10	# spill
5d2   	movl    [rsp + #8], RBX	# spill
5d6   	movsd   [rsp + #24], XMM0	# spill
5dc   	movq    [rsp + #48], R9	# spill
5e1   	movsd   [rsp + #56], XMM1	# spill
5e7   	movsd   [rsp + #64], XMM7	# spill
5ed   	movss   [rsp + #20], XMM3	# spill
5f3   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
5fb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:18  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #64 L[4]=rsp + #20 L[5]=rsp + #16 L[6]=#0 STK[0]=#0 STK[1]=rsp + #16
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #24 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #0 L[4]=rsp + #64 L[5]=rsp + #4 L[6]=rsp + #12
        # OopMap{[20]=NarrowOop [24]=Oop [48]=Oop [56]=Oop [64]=Oop off=1536}
600   	int3	# ShouldNotReachHere
600
605   B62: #	B63 &lt;- B25  Freq: 2.64021e-05
605   	movl    [rsp + #20], RDX	# spill
605
609   B63: #	N1383 &lt;- B79 B62  Freq: 2.64021e-05
609   	movss   [rsp + #0], XMM10	# spill
60e   	movl    [rsp + #8], RBX	# spill
612   	movsd   [rsp + #24], XMM0	# spill
618   	movsd   [rsp + #40], XMM7	# spill
61e   	movsd   [rsp + #48], XMM2	# spill
624   	movsd   [rsp + #56], XMM1	# spill
62a   	movss   [rsp + #72], XMM3	# spill
630   	movss   [rsp + #76], XMM6	# spill
636   	movsd   [rsp + #80], XMM5	# spill
63c   	movss   [rsp + #92], XMM4	# spill
642   	movl    RSI, #-155	# int
647   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #80 L[1]=rsp + #92 STK[0]=rsp + #92
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #80 L[4]=rsp + #72 L[5]=rsp + #16 L[6]=rsp + #20 STK[0]=rsp + #76
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #24 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #0 L[4]=rsp + #40 L[5]=rsp + #4 L[6]=rsp + #12
        # OopMap{[24]=Oop [40]=Oop [48]=Oop [56]=Oop [72]=NarrowOop [80]=Oop off=1612}
64c   	int3	# ShouldNotReachHere
64c
651   B64: #	B65 &lt;- B27  Freq: 2.5179e-05
651   	movl    [rsp + #20], RDX	# spill
651
655   B65: #	N1383 &lt;- B80 B64 B33 B71 B38  Freq: 2.54006e-05
655   	movss   [rsp + #0], XMM10	# spill
65a   	movl    [rsp + #8], RBX	# spill
65e   	movsd   [rsp + #32], XMM0	# spill
664   	movsd   [rsp + #48], XMM7	# spill
66a   	movsd   [rsp + #56], XMM2	# spill
670   	movsd   [rsp + #64], XMM1	# spill
676   	movss   [rsp + #28], XMM3	# spill
67c   	movss   [rsp + #80], XMM6	# spill
682   	movsd   [rsp + #88], XMM5	# spill
688   	movss   [rsp + #96], XMM4	# spill
68e   	movl    RSI, #-155	# int
693   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #88 L[1]=rsp + #96 STK[0]=rsp + #96 STK[1]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #56 L[1]=rsp + #64 L[2]=rsp + #8 L[3]=rsp + #88 L[4]=rsp + #28 L[5]=rsp + #16 L[6]=rsp + #20 STK[0]=rsp + #80
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #32 L[1]=rsp + #64 L[2]=rsp + #8 L[3]=rsp + #0 L[4]=rsp + #48 L[5]=rsp + #4 L[6]=rsp + #12
        # OopMap{[28]=NarrowOop [32]=Oop [48]=Oop [56]=Oop [64]=Oop [88]=Oop off=1688}
698   	int3	# ShouldNotReachHere
698
69d   B66: #	B67 &lt;- B2  Freq: 9.99e-07
69d   	movq    R11, [rsp + #0]	# spill
69d
6a1   B67: #	N1383 &lt;- B66 B5 B49  Freq: 2.16783e-06
6a1   	movl    RBP, RBX	# spill
6a3   	movl    [rsp + #0], R14	# spill
6a7   	movl    [rsp + #4], R13	# spill
6ac   	movl    RSI, #-99	# int
6b1   	movq    [rsp + #24], R10	# spill
6b6   	movq    [rsp + #32], R11	# spill
6bb   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:127  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #16 L[5]=rsp + #4 L[6]=rsp + #12
        # OopMap{[16]=Oop [24]=Oop [32]=Oop off=1728}
6c0   	int3	# ShouldNotReachHere
6c0
6c5   B68: #	B69 &lt;- B43  Freq: 6.98282e-11
6c5   	movl    [rsp + #20], RSI	# spill
6c5
6c9   B69: #	B75 B70 &lt;- B68 B46  Freq: 7.04066e-11
6c9   	movl    R11, [rsp + #20]	# spill
6ce   	cmpl    R11, RCX
6d1   	jge,s   B75  P=0.500000 C=-1.000000
6d1
6d3   B70: #	B71 &lt;- B69  Freq: 3.52033e-11
6d3   	movl    R10, [rsp + #20]	# spill
6d8   	# castII of R10
6d8   	movl    [rsp + #20], R10	# spill
      	nop 	# 3 bytes pad for loops and calls

6e0   B71: #	B65 B72 &lt;- B70 B74 	Loop: B71-B74 inner post of N560 Freq: 3.55104e-11
6e0   	movl    R11, [rsp + #20]	# spill
6e5   	addl    R11, RBX	# int
6e8   	movdl   XMM4, R11	# spill
6ed   	movdl   R10, XMM3	# spill
6f2   	movl    R11, [rsp + #20]	# spill
6f7   	movl    R11, [R10 + #16 + R11 &lt;&lt; #2]	# int
6fc   	movdl   XMM6, R11	# spill
701   	movdl   R10, XMM4	# spill
706   	cmpl    R10, [RSP + #24 (32-bit)]
70b   	jge     B65  P=0.000000 C=7895.000000
70b
711   B72: #	B58 B73 &lt;- B71  Freq: 3.55104e-11
711   	movl    R11, R10	# spill
714   	cmpl    R11, [RSP + #24 (32-bit)]	# unsigned
719   	jnb,u  B58  P=0.000001 C=-1.000000
719
71f   B73: #	B12 B74 &lt;- B72  Freq: 3.55103e-11
71f   	movdl   R10, XMM8	# spill
724   	movzwl  R10, [R10 + #16 + R11 &lt;&lt; #1]	# ushort/char
72a   	movdl   R11, XMM6	# spill
72f   	cmpl    R11, R10
732   	jne     B12  P=0.982703 C=371448.000000
732
738   B74: #	B71 B75 &lt;- B73  Freq: 6.14228e-13
738   	movl    R10, [rsp + #20]	# spill
73d   	incl    R10	# int
740   	movl    [rsp + #20], R10	# spill
745   	cmpl    R10, RCX
748   	jl,s   B71	# loop end  P=0.500000 C=6425.000000
748
74a   B75: #	B85 B76 &lt;- B32 B36 B74 B69  Freq: 4.66546e-07
74a   	movl    R11, [rsp + #20]	# spill
74f   	cmpl    R11, [RSP + #16 (32-bit)]
754   	jge     B85  P=0.000001 C=-1.000000
754
75a   B76: #	B77 &lt;- B75  Freq: 4.66546e-07
75a   	movl    R10, [rsp + #20]	# spill
75f   	# castII of R10
75f   	movl    [rsp + #20], R10	# spill
75f
764   B77: #	B11 B78 &lt;- B76 B84 	Loop: B77-B84 inner post of N560 Freq: 4.74601e-07
764   	movl    R11, [rsp + #20]	# spill
769   	addl    R11, RBX	# int
76c   	movdl   XMM4, R11	# spill
771   	cmpl    R11, R9
774   	jge     B11  P=0.018774 C=378555.000000
774
77a   B78: #	B55 B79 &lt;- B77  Freq: 4.65691e-07
77a   	movl    R11, [rsp + #20]	# spill
77f   	incl    R11	# int
782   	movl    RSI, R11	# spill
785   	movl    R10, [rsp + #20]	# spill
78a   	cmpl    R10, [RSP + #16 (32-bit)]	# unsigned
78f   	jnb,u  B55  P=0.000001 C=-1.000000
78f
795   B79: #	B63 B80 &lt;- B78  Freq: 4.6569e-07
795   	movdl   R10, XMM3	# spill
79a   	movl    R11, [rsp + #20]	# spill
79f   	movl    R11, [R10 + #16 + R11 &lt;&lt; #2]	# int
7a4   	movdl   XMM6, R11	# spill
7a9   	movdl   R11, XMM4	# spill
7ae   	testl   R11, R11
7b1   	jl     B63  P=0.000000 C=7895.000000
7b1
7b7   B80: #	B65 B81 &lt;- B79  Freq: 4.6569e-07
7b7   	cmpl    R11, [RSP + #24 (32-bit)]
7bc   	jge     B65  P=0.000000 C=7895.000000
7bc
7c2   B81: #	B58 B82 &lt;- B80  Freq: 4.6569e-07
7c2   	cmpl    R11, [RSP + #24 (32-bit)]	# unsigned
7c7   	jnb,u  B58  P=0.000001 C=-1.000000
7c7
7cd   B82: #	B12 B83 &lt;- B81  Freq: 4.6569e-07
7cd   	movdl   R10, XMM8	# spill
7d2   	movzwl  R10, [R10 + #16 + R11 &lt;&lt; #1]	# ushort/char
7d8   	movdl   R11, XMM6	# spill
7dd   	cmpl    R11, R10
7e0   	jne     B12  P=0.982703 C=371448.000000
7e0
7e6   B83: #	B86 B84 &lt;- B82  Freq: 8.0551e-09
7e6   	cmpl    RSI, [RSP + #16 (32-bit)]
7ea   	jge,s   B86	# loop end  P=0.000001 C=6425.000000
7ea
7ec   B84: #	B77 &lt;- B83  Freq: 8.05509e-09
7ec   	movl    [rsp + #20], RSI	# spill
7f0   	jmp     B77
7f0
7f5   B85: #	B86 &lt;- B75  Freq: 4.72742e-13
7f5   	movl    RSI, [rsp + #20]	# spill
7f5
7f9   B86: #	N1383 &lt;- B83 B85  Freq: 4.80904e-13
7f9   	movss   [rsp + #0], XMM10	# spill
7fe   	movl    [rsp + #8], RBX	# spill
802   	movsd   [rsp + #24], XMM0	# spill
808   	movsd   [rsp + #40], XMM7	# spill
80e   	movsd   [rsp + #48], XMM2	# spill
814   	movsd   [rsp + #56], XMM1	# spill
81a   	movsd   [rsp + #64], XMM5	# spill
820   	movss   [rsp + #20], XMM3	# spill
826   	movl    [rsp + #76], RSI	# spill
82a   	movl    RSI, #-155	# int
82f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:18  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #64 L[4]=rsp + #20 L[5]=rsp + #16 L[6]=rsp + #76 STK[0]=rsp + #76 STK[1]=rsp + #16
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #24 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #0 L[4]=rsp + #40 L[5]=rsp + #4 L[6]=rsp + #12
        # OopMap{[20]=NarrowOop [24]=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop off=2100}
834   	int3	# ShouldNotReachHere
834
839   B87: #	N1383 &lt;- B14  Freq: 5.40669e-05
839   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
83f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:134  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=2116}
844   	int3	# ShouldNotReachHere
844
849   B88: #	N1383 &lt;- B15  Freq: 5.40668e-05
849   	movl    RBP, RBX	# spill
84b   	movl    RSI, #-10	# int
850   	movsd   [rsp + #0], XMM1	# spill
855   	movsd   [rsp + #8], XMM7	# spill
85b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=rsp + #0 STK[2]=RBP STK[3]=rsp + #8
        # OopMap{[0]=Oop [8]=Oop off=2144}
860   	int3	# ShouldNotReachHere
860
865   B89: #	N1383 &lt;- B17  Freq: 5.40667e-05
865   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
86b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=2160}
870   	int3	# ShouldNotReachHere
870
875   B90: #	N1383 &lt;- B19  Freq: 5.40666e-05
875   	movss   [rsp + #0], XMM10	# spill
87a   	movl    [rsp + #8], RBX	# spill
87e   	movsd   [rsp + #24], XMM0	# spill
884   	movsd   [rsp + #48], XMM2	# spill
88a   	movsd   [rsp + #56], XMM1	# spill
890   	movsd   [rsp + #64], XMM7	# spill
896   	movss   [rsp + #20], XMM3	# spill
89c   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
8a3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:21  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #64 L[4]=rsp + #20 L[5]=rsp + #16 L[6]=#0
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #24 L[1]=rsp + #56 L[2]=rsp + #8 L[3]=rsp + #0 L[4]=rsp + #64 L[5]=rsp + #4 L[6]=rsp + #12
        # OopMap{[20]=NarrowOop [24]=Oop [48]=Oop [56]=Oop [64]=Oop off=2216}
8a8   	int3	# ShouldNotReachHere
8a8
8ad   B91: #	N1383 &lt;- B26  Freq: 5.35054e-05
8ad   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
8b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=2232}
8b8   	int3	# ShouldNotReachHere
8b8

</opto_assembly>
<writer thread='139875533833984'/>
<opto_assembly compile_id='331'>
{method}
 - this oop:          0x00007f375594c2f0
 - method holder:     &apos;java/util/regex/Pattern$Slice&apos;
 - constants:         0x00007f375594bed8 constant pool [62] {0x00007f375594bed8} for &apos;java/util/regex/Pattern$Slice&apos; cache=0x00007f3755b1b878
 - access:            0xc1000000  
 - name:              &apos;match&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z&apos;
 - max stack:         5
 - max locals:        7
 - size of params:    4
 - method size:       12
 - highest level:     2
 - vtable index:      6
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37681c7d78: 0xbbab0000 i2c: 0x00007f3758b26ce0 c2i: 0x00007f3758b26e25 c2iUV: 0x00007f3758b26df8
 - compiled entry     0x00007f3758ca1d20
 - code size:         79
 - code start:        0x00007f375594c238
 - code end (excl):   0x00007f375594c287
 - method data:       0x00007f3755b42478
 - checked ex length: 0
 - linenumber start:  0x00007f375594c287
 - localvar length:   7
 - localvar start:    0x00007f375594c29a
 - compiled code: nmethod   2266  325       2       java.util.regex.Pattern$Slice::match (79 bytes)
#
#  bool ( java/util/regex/Pattern$Slice:NotNull:exact *, java/util/regex/Matcher:exact *, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$Slice:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/CharSequence *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N863: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B66 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (272 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movdq   XMM0, R8	# spill
031   	movq    RAX, RSI	# spill
034   	movl    R11, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$SliceNode.buffer
038   	movl    R13, #1	# int
03e   	movl    RSI, #-10	# int
043   	movl    R8, #1	# int
049   	subl    R8, RCX	# int
04c   	movl    RBP, R8	# spill
04f   	sarl    RBP, #31
052   	andl    RBP, R8	# int
055   	addl    RBP, #2147483647	# int
05b   	movl    R8, [R11 + #12 (8-bit)]	# range
05f   	NullCheck R11
05f
05f   B2: #	B38 B3 &lt;- B1  Freq: 0.999999
05f   	movl    RSI, #-155	# int
064   	testl   R8, R8
067   	jle     B38  P=0.000000 C=629560.000000
067
06d   B3: #	B67 B4 &lt;- B2  Freq: 0.999999
06d   	movl    RDI, RCX	# spill
06f   	sarl    RDI, #31
072   	movl    RBX, #-2147483647	# int
077   	andl    RDI, RCX	# int
079   	movq    R14, RDX	# spill
07c   	movl    R10, [RDX + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
080   	NullCheck RDX
080
080   B4: #	B5 &lt;- B3  Freq: 0.999997
080   	subl    RBX, RDI	# int
082   	movl    R9, R10	# spill
085   	subl    R9, RCX	# int
088   	cmpl    RBP, R9
08b   	movl    RDX, RBP	# spill
08d   	cmovlgt RDX, R9	# min
091   	cmpl    RDX, R8
094   	cmovlgt RDX, R8	# min
098   	xorl    RDI, RDI	# int
09a   	movdq   XMM4, RAX	# spill
09f   	movdq   XMM5, R14	# spill
0a4   	movdl   XMM7, R11	# spill
0a9   	movl    [rsp + #44], R8	# spill
0a9
0ae   B5: #	B15 B6 &lt;- B4 B17 	Loop: B5-B17 inner pre of N297 Freq: 1.00856
0ae   	movl    R8, RDI	# spill
0b1   	addl    R8, RCX	# int
0b4   	cmpl    R8, R10
0b7   	jge     B15  P=0.018775 C=629561.000000
0b7
0bd   B6: #	B33 B7 &lt;- B5  Freq: 0.989621
0bd   	cmpl    RDI, [RSP + #44 (32-bit)]	# unsigned
0c1   	jnb,u  B33  P=0.000001 C=-1.000000
0c1
0c7   B7: #	B68 B8 &lt;- B6  Freq: 0.98962
0c7   	movl    R11, RDI	# spill
0ca   	incl    R11	# int
0cd   	movdq   RSI, XMM0	# spill
0d2   	movl    R14, [RSI + #8 (8-bit)]	# compressed klass ptr
0d6   	NullCheck RSI
0d6
0d6   B8: #	B37 B9 &lt;- B7  Freq: 0.989619
0d6   	movdl   RSI, XMM7	# spill
0da   	movl    RSI, [RSI + #16 + RDI &lt;&lt; #2]	# int
0de   	movdl   XMM2, RSI	# spill
0e2   	movl    RSI, #-34	# int
0e7   	cmpl    R14, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
0ee   	jne,u  B37  P=0.000001 C=-1.000000
0ee
0f4   B9: #	B39 B10 &lt;- B8  Freq: 0.989618
0f4   	movdq   RSI, XMM0	# spill
0f9   	# checkcastPP of RSI
0f9   	movdq   XMM1, RSI	# spill
0fe   	movl    RSI, #-10	# int
103   	movdq   RAX, XMM1	# spill
108   	movl    RAX, [RAX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
10b   	movdl   XMM3, RAX	# spill
10f   	testl   R8, R8
112   	jl     B39  P=0.000000 C=7895.000000
112
118   B10: #	B69 B11 &lt;- B9  Freq: 0.989617
118   	movl    RAX, [RAX + #12 (8-bit)]	# range
11b   	NullCheck RAX
11b
11b   B11: #	B41 B12 &lt;- B10  Freq: 0.989616
11b   	movl    [rsp + #12], RAX	# spill
11f   	movl    RAX, RCX	# spill
121   	negl    RAX	# int
123   	cmpl    RBX, RAX
125   	movl    R14, RBX	# spill
128   	cmovllt R14, RAX	# max
12c   	cmpl    R8, [RSP + #12 (32-bit)]
131   	jge     B41  P=0.000000 C=7895.000000
131
137   B12: #	B35 B13 &lt;- B11  Freq: 0.989616
137   	cmpl    R14, R13
13a   	cmovllt R14, R13	# max
13e   	cmpl    R8, [RSP + #12 (32-bit)]	# unsigned
143   	jnb,u  B35  P=0.000001 C=-1.000000
143
149   B13: #	B16 B14 &lt;- B12  Freq: 0.989615
149   	movdl   RDI, XMM3	# spill
14d   	movzwl  RSI, [RDI + #16 + R8 &lt;&lt; #1]	# ushort/char
153   	movl    RDI, [rsp + #12]	# spill
157   	subl    RDI, RCX	# int
159   	cmpl    R14, [RSP + #44 (32-bit)]
15e   	movl    R8, [rsp + #44]	# spill
163   	cmovlgt R14, R8	# min
167   	cmpl    RDI, R9
16a   	cmovlgt RDI, R9	# min
16e   	movdl   R8, XMM2	# spill
173   	cmpl    R8, RSI
176   	je,s   B16  P=0.017297 C=617740.000000
176
178   B14: #	N863 &lt;- B15 B51 B30 B13 B21 B61 B26  Freq: 0.999992
178   	xorl    RAX, RAX	# int
17a   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

185   	ret
185
186   B15: #	B14 &lt;- B46 B5  Freq: 0.0189356
186   	movdq   R10, XMM5	# spill
18b   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
190   	jmp,s   B14
190
192   B16: #	B18 B17 &lt;- B13  Freq: 0.0171173
192   	cmpl    R11, R14
195   	jge,s   B18	# loop end  P=0.500000 C=10685.000000
195
197   B17: #	B5 &lt;- B16  Freq: 0.00855864
197   	movl    RDI, R11	# spill
19a   	jmp     B5
19a
19f   B18: #	B44 B19 &lt;- B16  Freq: 0.00855864
19f   	cmpl    R11, RDX
1a2   	jge     B44  P=0.000001 C=-1.000000
1a2
1a8   B19: #	B42 B20 &lt;- B18  Freq: 0.00855863
1a8   	# castII of R11
1a8   	cmpl    RDI, RBP
1aa   	cmovlgt RDI, RBP	# min
1ad   	movl    RSI, R11	# spill
1b0   	addl    RSI, #2	# int
1b3   	movdl   R13, XMM7	# spill
1b8   	movl    R8, [R13 + #16 + R11 &lt;&lt; #2]	# int
1bd   	movdl   XMM2, R8	# spill
1c2   	movl    R8, RCX	# spill
1c5   	addl    R8, R11	# int
1c8   	cmpl    RSI, RBX
1ca   	cmovllt RSI, RBX	# max
1cd   	cmpl    RDI, [RSP + #44 (32-bit)]
1d1   	movl    RBX, [rsp + #44]	# spill
1d5   	cmovlgt RDI, RBX	# min
1d8   	cmpl    R8, [RSP + #12 (32-bit)]
1dd   	jge     B42  P=0.000000 C=7895.000000
1dd
1e3   B20: #	B36 B21 &lt;- B19  Freq: 0.00855863
1e3   	cmpl    RSI, RAX
1e5   	cmovllt RSI, RAX	# max
1e8   	cmpl    RSI, R9
1eb   	cmovlgt RSI, R9	# min
1ef   	movl    RBX, R11	# spill
1f2   	incl    RBX	# int
1f4   	cmpl    R8, [RSP + #12 (32-bit)]	# unsigned
1f9   	jnb,u  B36  P=0.000001 C=-1.000000
1f9
1ff   B21: #	B14 B22 &lt;- B20  Freq: 0.00855862
1ff   	movdl   R9, XMM3	# spill
204   	movzwl  R8, [R9 + #16 + R8 &lt;&lt; #1]	# ushort/char
20a   	cmpl    RSI, RBP
20c   	cmovlgt RSI, RBP	# min
20f   	movdl   R11, XMM2	# spill
214   	cmpl    R11, R8
217   	jne     B14  P=0.982703 C=617740.000000
217
21d   B22: #	B43 B23 &lt;- B21  Freq: 0.000148038
21d   	cmpl    RBX, RDX
21f   	jge     B43	# loop end  P=0.000000 C=10685.000000
21f
225   B23: #	B24 &lt;- B22  Freq: 0.000148038
225   	cmpl    RSI, [RSP + #44 (32-bit)]
229   	movl    R8, [rsp + #44]	# spill
22e   	cmovlgt RSI, R8	# min
22e
232   B24: #	B55 B25 &lt;- B23 B27 	Loop: B24-B27 inner pre of N297 Freq: 0.000149329
232   	movl    R8, RBX	# spill
235   	addl    R8, RCX	# int
238   	movdl   R9, XMM7	# spill
23d   	movl    R11, [R9 + #16 + RBX &lt;&lt; #2]	# int
242   	movdl   XMM2, R11	# spill
247   	cmpl    R8, [RSP + #12 (32-bit)]
24c   	jge     B55  P=0.000000 C=7895.000000
24c
252   B25: #	B54 B26 &lt;- B24  Freq: 0.000149329
252   	cmpl    R8, [RSP + #12 (32-bit)]	# unsigned
257   	jnb,u  B54  P=0.000001 C=-1.000000
257
25d   B26: #	B14 B27 &lt;- B25  Freq: 0.000149329
25d   	movdl   R11, XMM3	# spill
262   	movzwl  R8, [R11 + #16 + R8 &lt;&lt; #1]	# ushort/char
268   	movdl   R11, XMM2	# spill
26d   	cmpl    R11, R8
270   	jne     B14  P=0.982703 C=617740.000000
270
276   B27: #	B24 B28 &lt;- B26  Freq: 2.58293e-06
276   	incl    RBX	# int
278   	cmpl    RBX, RSI
27a   	jl,s   B24	# loop end  P=0.500000 C=10685.000000
27a
27c   B28: #	B56 B29 &lt;- B27  Freq: 1.29146e-06
27c   	cmpl    RBX, RDI
27e   	jge     B56  P=0.000001 C=-1.000000
27e
284   B29: #	B30 &lt;- B28  Freq: 1.29146e-06
284   	# castII of RBX
284
284   B30: #	B14 B31 &lt;- B29 B32 	Loop: B30-B32 inner main of N260 Freq: 1.31419e-06
284   	movl    R8, RBX	# spill
287   	addl    R8, RCX	# int
28a   	movl    R11, RBX	# spill
28d   	incl    R11	# int
290   	movdl   RSI, XMM3	# spill
294   	movzwl  R9, [RSI + #16 + R8 &lt;&lt; #1]	# ushort/char
29a   	movdl   RSI, XMM7	# spill
29e   	movl    RBX, [RSI + #16 + RBX &lt;&lt; #2]	# int
2a2   	cmpl    RBX, R9
2a5   	jne     B14  P=0.982703 C=617740.000000
2a5
2ab   B31: #	B57 B32 &lt;- B30  Freq: 2.27315e-08
2ab   	cmpl    R11, RDI
2ae   	jge     B57	# loop end  P=0.000000 C=10685.000000
2ae
2b4   B32: #	B30 &lt;- B31  Freq: 2.27315e-08
2b4   	movl    RBX, R11	# spill
2b7   	jmp,s   B30
2b7
2b9   B33: #	B34 &lt;- B6  Freq: 1.00276e-06
2b9   	movl    R11, RDI	# spill
2b9
2bc   B34: #	N863 &lt;- B47 B33  Freq: 1.00276e-06
2bc   	movl    RBP, RCX	# spill
2be   	movl    [rsp + #4], R11	# spill
2c3   	movsd   [rsp + #8], XMM4	# spill
2c9   	movsd   [rsp + #16], XMM5	# spill
2cf   	movsd   [rsp + #24], XMM0	# spill
2d5   	movss   [rsp + #40], XMM7	# spill
2db   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
2e3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:43  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #24 L[4]=rsp + #40 L[5]=rsp + #44 L[6]=rsp + #4 STK[0]=rsp + #40 STK[1]=rsp + #4
        # OopMap{[8]=Oop [16]=Oop [24]=Oop [40]=NarrowOop off=744}
2e8   	int3	# ShouldNotReachHere
2e8
2ed   B35: #	B36 &lt;- B12  Freq: 1.00276e-06
2ed   	movl    R11, RDI	# spill
2ed
2f0   B36: #	N863 &lt;- B50 B35 B20 B60 B54  Freq: 1.01158e-06
2f0   	movl    RBP, RCX	# spill
2f2   	movl    [rsp + #0], R11	# spill
2f6   	movl    [rsp + #4], R8	# spill
2fb   	movsd   [rsp + #8], XMM4	# spill
301   	movsd   [rsp + #16], XMM5	# spill
307   	movsd   [rsp + #24], XMM1	# spill
30d   	movss   [rsp + #32], XMM7	# spill
313   	movl    R10, [rsp + #44]	# spill
318   	movl    [rsp + #36], R10	# spill
31d   	movss   [rsp + #40], XMM2	# spill
323   	movss   [rsp + #44], XMM3	# spill
329   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
32f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #44 STK[1]=rsp + #4
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #24 L[4]=rsp + #32 L[5]=rsp + #36 L[6]=rsp + #0 STK[0]=rsp + #40
        # OopMap{[8]=Oop [16]=Oop [24]=Oop [32]=NarrowOop [44]=NarrowOop off=820}
334   	int3	# ShouldNotReachHere
334
339   B37: #	N863 &lt;- B8  Freq: 9.89619e-07
339   	movl    RBP, RCX	# spill
33b   	movl    [rsp + #0], RDI	# spill
33e   	movl    [rsp + #4], R8	# spill
343   	movsd   [rsp + #8], XMM4	# spill
349   	movsd   [rsp + #16], XMM5	# spill
34f   	movss   [rsp + #32], XMM7	# spill
355   	movss   [rsp + #40], XMM2	# spill
35b   	movsd   [rsp + #48], XMM0	# spill
      	nop 	# 2 bytes pad for loops and calls
363   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #48 L[4]=rsp + #32 L[5]=rsp + #44 L[6]=rsp + #0 STK[0]=rsp + #40 STK[1]=rsp + #48 STK[2]=rsp + #4
        # OopMap{[8]=Oop [16]=Oop [32]=NarrowOop [48]=Oop off=872}
368   	int3	# ShouldNotReachHere
368
36d   B38: #	N863 &lt;- B2  Freq: 4.99999e-07
36d   	movl    RBP, RCX	# spill
36f   	movq    [rsp + #0], RAX	# spill
373   	movq    [rsp + #8], RDX	# spill
378   	movsd   [rsp + #16], XMM0	# spill
37e   	movl    [rsp + #24], R11	# spill
383   	movl    [rsp + #32], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
38b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:18  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=rsp + #16 L[4]=rsp + #24 L[5]=rsp + #32 L[6]=#0 STK[0]=#0 STK[1]=rsp + #32
        # OopMap{[0]=Oop [8]=Oop [16]=Oop [24]=NarrowOop off=912}
390   	int3	# ShouldNotReachHere
390
395   B39: #	B40 &lt;- B9  Freq: 4.94809e-07
395   	movl    R11, RDI	# spill
395
398   B40: #	N863 &lt;- B48 B39  Freq: 4.94809e-07
398   	movl    RBP, RCX	# spill
39a   	movl    [rsp + #0], R11	# spill
39e   	movl    [rsp + #8], R8	# spill
3a3   	movsd   [rsp + #16], XMM4	# spill
3a9   	movsd   [rsp + #24], XMM5	# spill
3af   	movss   [rsp + #12], XMM7	# spill
3b5   	movl    R11, [rsp + #44]	# spill
3ba   	movl    [rsp + #40], R11	# spill
3bf   	movss   [rsp + #44], XMM2	# spill
3c5   	movsd   [rsp + #48], XMM1	# spill
3cb   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
3d3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #48 L[1]=rsp + #8 STK[0]=rsp + #8
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #48 L[4]=rsp + #12 L[5]=rsp + #40 L[6]=rsp + #0 STK[0]=rsp + #44
        # OopMap{[12]=NarrowOop [16]=Oop [24]=Oop [48]=Oop off=984}
3d8   	int3	# ShouldNotReachHere
3d8
3dd   B41: #	B42 &lt;- B11  Freq: 4.71886e-07
3dd   	movl    R11, RDI	# spill
3dd
3e0   B42: #	N863 &lt;- B49 B41 B19 B59 B55  Freq: 4.76038e-07
3e0   	movl    RBP, RCX	# spill
3e2   	movl    [rsp + #0], R11	# spill
3e6   	movl    [rsp + #8], R8	# spill
3eb   	movsd   [rsp + #16], XMM4	# spill
3f1   	movsd   [rsp + #24], XMM5	# spill
3f7   	movss   [rsp + #40], XMM7	# spill
3fd   	movss   [rsp + #48], XMM2	# spill
403   	movsd   [rsp + #56], XMM1	# spill
409   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
40f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #56 L[1]=rsp + #8 STK[0]=rsp + #8 STK[1]=rsp + #12
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #56 L[4]=rsp + #40 L[5]=rsp + #44 L[6]=rsp + #0 STK[0]=rsp + #48
        # OopMap{[16]=Oop [24]=Oop [40]=NarrowOop [56]=Oop off=1044}
414   	int3	# ShouldNotReachHere
414
419   B43: #	B44 &lt;- B22  Freq: 7.05898e-11
419   	movl    R11, RBX	# spill
419
41c   B44: #	B64 B45 &lt;- B18 B43 B63 B57  Freq: 8.74354e-09
41c   	cmpl    R11, [RSP + #44 (32-bit)]
421   	jge     B64  P=0.000001 C=-1.000000
421
427   B45: #	B46 &lt;- B44  Freq: 8.74353e-09
427   	# castII of R11
      	nop 	# 1 bytes pad for loops and calls

428   B46: #	B15 B47 &lt;- B45 B53 	Loop: B46-B53 inner post of N297 Freq: 8.89449e-09
428   	movl    R8, R11	# spill
42b   	addl    R8, RCX	# int
42e   	cmpl    R8, R10
431   	jge     B15  P=0.018775 C=629561.000000
431
437   B47: #	B34 B48 &lt;- B46  Freq: 8.7275e-09
437   	cmpl    R11, [RSP + #44 (32-bit)]	# unsigned
43c   	jnb,u  B34  P=0.000001 C=-1.000000
43c
442   B48: #	B40 B49 &lt;- B47  Freq: 8.72749e-09
442   	movdl   R9, XMM7	# spill
447   	movl    R9, [R9 + #16 + R11 &lt;&lt; #2]	# int
44c   	movdl   XMM2, R9	# spill
451   	testl   R8, R8
454   	jl     B40  P=0.000000 C=7895.000000
454
45a   B49: #	B42 B50 &lt;- B48  Freq: 8.72749e-09
45a   	movl    RBP, R11	# spill
45d   	incl    RBP	# int
45f   	cmpl    R8, [RSP + #12 (32-bit)]
464   	jge     B42  P=0.000000 C=7895.000000
464
46a   B50: #	B36 B51 &lt;- B49  Freq: 8.72748e-09
46a   	cmpl    R8, [RSP + #12 (32-bit)]	# unsigned
46f   	jnb,u  B36  P=0.000001 C=-1.000000
46f
475   B51: #	B14 B52 &lt;- B50  Freq: 8.72747e-09
475   	movdl   R9, XMM3	# spill
47a   	movzwl  R11, [R9 + #16 + R8 &lt;&lt; #1]	# ushort/char
480   	movdl   R9, XMM2	# spill
485   	cmpl    R9, R11
488   	jne     B14  P=0.982703 C=617740.000000
488
48e   B52: #	B65 B53 &lt;- B51  Freq: 1.50958e-10
48e   	cmpl    RBP, [RSP + #44 (32-bit)]
492   	jge,s   B65	# loop end  P=0.000001 C=10685.000000
492
494   B53: #	B46 &lt;- B52  Freq: 1.50958e-10
494   	movl    R11, RBP	# spill
497   	jmp,s   B46
497
499   B54: #	B36 &lt;- B25  Freq: 1.51312e-10
499   	movl    R11, RBX	# spill
49c   	jmp     B36
49c
4a1   B55: #	B42 &lt;- B24  Freq: 7.12056e-11
4a1   	movl    R11, RBX	# spill
4a4   	jmp     B42
4a4
4a9   B56: #	B57 &lt;- B28  Freq: 1.30861e-12
4a9   	movl    R11, RBX	# spill
4a9
4ac   B57: #	B44 B58 &lt;- B56 B31  Freq: 1.31945e-12
4ac   	cmpl    R11, RDX
4af   	jge     B44  P=0.500000 C=-1.000000
4af
4b5   B58: #	B59 &lt;- B57  Freq: 6.59726e-13
4b5   	# castII of R11
      	nop 	# 3 bytes pad for loops and calls

4b8   B59: #	B42 B60 &lt;- B58 B62 	Loop: B59-B62 inner post of N297 Freq: 6.65481e-13
4b8   	movl    R8, R11	# spill
4bb   	addl    R8, RCX	# int
4be   	movdl   R9, XMM7	# spill
4c3   	movl    R9, [R9 + #16 + R11 &lt;&lt; #2]	# int
4c8   	movdl   XMM2, R9	# spill
4cd   	cmpl    R8, [RSP + #12 (32-bit)]
4d2   	jge     B42  P=0.000000 C=7895.000000
4d2
4d8   B60: #	B36 B61 &lt;- B59  Freq: 6.65481e-13
4d8   	cmpl    R8, [RSP + #12 (32-bit)]	# unsigned
4dd   	jnb,u  B36  P=0.000001 C=-1.000000
4dd
4e3   B61: #	B14 B62 &lt;- B60  Freq: 6.6548e-13
4e3   	movdl   RBX, XMM3	# spill
4e7   	movzwl  R9, [RBX + #16 + R8 &lt;&lt; #1]	# ushort/char
4ed   	incl    R11	# int
4f0   	movdl   R8, XMM2	# spill
4f5   	cmpl    R8, R9
4f8   	jne     B14  P=0.982703 C=617740.000000
4f8
4fe   B62: #	B59 B63 &lt;- B61  Freq: 1.15108e-14
4fe   	cmpl    R11, RDX
501   	jl,s   B59	# loop end  P=0.500000 C=10685.000000
501
503   B63: #	B44 &lt;- B62  Freq: 5.75538e-15
503   	jmp     B44
503
508   B64: #	B65 &lt;- B44  Freq: 8.85965e-15
508   	movl    RBP, R11	# spill
508
50b   B65: #	N863 &lt;- B52 B64  Freq: 9.01261e-15
50b   	movl    [rsp + #0], RCX	# spill
50e   	movsd   [rsp + #8], XMM4	# spill
514   	movsd   [rsp + #16], XMM5	# spill
51a   	movsd   [rsp + #24], XMM1	# spill
520   	movss   [rsp + #4], XMM7	# spill
526   	movl    R11, [rsp + #44]	# spill
52b   	movl    [rsp + #36], R11	# spill
530   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
537   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:18  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #0 L[3]=rsp + #24 L[4]=rsp + #4 L[5]=rsp + #36 L[6]=RBP STK[0]=RBP STK[1]=rsp + #44
        # OopMap{[4]=NarrowOop [8]=Oop [16]=Oop [24]=Oop off=1340}
53c   	int3	# ShouldNotReachHere
53c
541   B66: #	N863 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
543   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=1352}
548   	int3	# ShouldNotReachHere
548
54d   B67: #	N863 &lt;- B3  Freq: 1.01328e-06
54d   	movl    RSI, #-122	# int
552   	movl    RBP, RCX	# spill
554   	movq    [rsp + #0], RAX	# spill
558   	movq    [rsp + #8], RDX	# spill
55d   	movsd   [rsp + #16], XMM0	# spill
563   	movl    [rsp + #24], R11	# spill
568   	movl    [rsp + #28], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
56f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:21  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=rsp + #16 L[4]=rsp + #24 L[5]=rsp + #28 L[6]=#0
        # OopMap{[0]=Oop [8]=Oop [16]=Oop [24]=NarrowOop off=1396}
574   	int3	# ShouldNotReachHere
574
579   B68: #	N863 &lt;- B7  Freq: 1.00276e-06
579   	movl    RSI, #-10	# int
57e   	movl    RBP, R8	# spill
      	nop 	# 2 bytes pad for loops and calls
583   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL STK[2]=RBP
        # OopMap{off=1416}
588   	int3	# ShouldNotReachHere
588
58d   B69: #	N863 &lt;- B10  Freq: 1.00276e-06
      	nop 	# 2 bytes pad for loops and calls
58f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_
        # OopMap{off=1428}
594   	int3	# ShouldNotReachHere
594

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='346'>
{method}
 - this oop:          0x00007f37559abd18
 - method holder:     &apos;java/util/regex/Matcher&apos;
 - constants:         0x00007f37559a98c8 constant pool [380] {0x00007f37559a98c8} for &apos;java/util/regex/Matcher&apos; cache=0x00007f37559ad488
 - access:            0xc1000001  public 
 - name:              &apos;find&apos;
 - signature:         &apos;()Z&apos;
 - max stack:         4
 - max locals:        3
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef680: 0xb0000000 i2c: 0x00007f3758b11620 c2i: 0x00007f3758b1175a c2iUV: 0x00007f3758b1172d
 - compiled entry     0x00007f3758c779e0
 - code size:         69
 - code start:        0x00007f37559abc98
 - code end (excl):   0x00007f37559abcdd
 - method data:       0x00007f3755b221d8
 - checked ex length: 0
 - linenumber start:  0x00007f37559abcdd
 - localvar length:   3
 - localvar start:    0x00007f37559abcf2
 - compiled code: nmethod   2384  259       3       java.util.regex.Matcher::find (69 bytes)
#
#  bool ( java/util/regex/Matcher:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Matcher:NotNull:exact *
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1021: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B68 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (504 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movq    R11, RSI	# spill
02f   	movl    R13, [RSI + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
033   	movl    RBX, [RSI + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
036   	movl    R10, [RSI + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
03a   	movl    RBP, [RSI + #12 (8-bit)]	# int ! Field: java/util/regex/Matcher.from
03d   	cmpl    RBX, R10
040   	je     B68  P=0.000000 C=12891.000000
040
046   B2: #	B69 B3 &lt;- B1  Freq: 1
046   	movl    RSI, #-155	# int
04b   	movl    R8, [R11 + #36 (8-bit)]	# int ! Field: java/util/regex/Matcher.oldLast
04f   	cmpl    RBX, RBP
051   	jl     B69  P=0.000000 C=12891.000000
051
057   B3: #	B70 B4 &lt;- B2  Freq: 0.999999
057   	movl    R10, [R11 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
05b   	decode_heap_oop_not_null R14,R10
05e   	cmpl    RBX, R13
061   	jg     B70  P=0.000000 C=12891.000000
061
067   B4: #	B71 B5 &lt;- B3  Freq: 0.999999
067   	movb    [R11 + #45 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/util/regex/Matcher.requireEnd
06b   	movb    [R11 + #44 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/util/regex/Matcher.hitEnd
06f   	testl   RBX, RBX
071   	jl     B71  P=0.000000 C=1707.000000
071
077   B5: #	B54 B6 &lt;- B4  Freq: 0.999998
077   	movl    [R11 + #28 (8-bit)], RBX	# int ! Field: java/util/regex/Matcher.first
07b   	leaq    R9, [R10 + #16 (8-bit)]	# ptr off8narrow
07f   	testl   R8, R8
082   	jl     B54  P=0.065612 C=1707.000000
082
088   B6: #	B74 B7 &lt;- B5 B54  Freq: 0.999998
088   	movl    RSI, #-122	# int
08d   	movl    [R11 + #36 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.oldLast
091   	movl    RBP, [R10 + #12 (8-bit)]	# range
095   	NullCheck R10
095
095   B7: #	B55 B8 &lt;- B6  Freq: 0.999997
095   	testl   RBP, RBP
097   	jle     B55  P=0.047619 C=35847.000000
097
09d   B8: #	B65 B9 &lt;- B7  Freq: 0.952378
09d   	movl    R8, RBP	# spill
0a0   	decl    R8	# int
0a3   	testl  RBP, RBP	# unsigned
0a5   	jbe,u  B65  P=0.000001 C=-1.000000
0a5
0ab   B9: #	B65 B10 &lt;- B8  Freq: 0.952377
0ab   	cmpl    R8, RBP	# unsigned
0ae   	jnb,u  B65  P=0.000001 C=-1.000000
0ae
0b4   B10: #	B11 &lt;- B9  Freq: 0.952376
0b4   	movq    [rsp + #0], R9	# spill
0b8   	movl    [rsp + #12], R10	# spill
0bd   	movq    [rsp + #24], R11	# spill
0c2   	movslq  RDX, RBP	# i2l
0c5   	movq    RDI, R9	# spill
0c8   	movl    RSI, #-1	# int
0cd   	call_leaf_nofp,runtime  arrayof_jint_fill
        No JVM State Info
        # 
0da
0da   B11: #	B75 B12 &lt;- B10 B55  Freq: 0.999995
0da   	movq    R11, [rsp + #24]	# spill
0df   	movl    R10, [R11 + #48 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.parentPattern
0e3   	movl    [R11 + #24 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/util/regex/Matcher.acceptMode
0e7   	movl    R10, [R10 + #44 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern.root
0eb   	NullCheck R10
0eb
0eb   B12: #	B76 B13 &lt;- B11  Freq: 0.999994
0eb   	movl    R8, [R11 + #56 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.text
0ef   	movdl   XMM1, R8	# spill
0f4   	decode_heap_oop_not_null R8,R10
0f7   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
0fb   	NullCheck R10
0fb
0fb   B13: #	B64 B14 &lt;- B12  Freq: 0.999993
0fb   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$BnM: 0x00007f3724198d80:Constant:exact *	# compressed klass ptr
102   	jne,u  B64  P=0.000001 C=-1.000000
102
108   B14: #	B77 B15 &lt;- B13  Freq: 0.999992
108   	# checkcastPP of R8
108   	movdq   XMM0, R8	# spill
10d   	movl    RDI, [R8 + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.buffer
111   	movl    R10, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
115   	movdl   XMM2, R10	# spill
11a   	movl    R10, [RDI + #12 (8-bit)]	# range
11e   	NullCheck RDI
11e
11e   B15: #	B23 &lt;- B14  Freq: 0.999991
11e   	movdl   XMM10, RBP	# spill
122   	movdq   XMM7, R14	# spill
127   	movdl   XMM9, RBX	# spill
12b   	movl    [rsp + #32], R10	# spill
130   	subl    R13, R10	# int
133   	movl    [rsp + #8], R13	# spill
138   	movl    RSI, R10	# spill
13b   	decl    RSI	# int
13d   	movl    R11, [R8 + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
141   	movdl   XMM3, R11	# spill
146   	movl    R10, [R8 + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
14a   	movdl   XMM5, R10	# spill
14f   	movl    RAX, [rsp + #32]	# spill
153   	addl    RAX, #-2	# int
156   	decode_heap_oop_not_null R10,RDI
159   	movdq   XMM11, R10	# spill
15e   	movdl   R11, XMM1	# spill
163   	decode_heap_oop_not_null R14,R11
166   	movl    RDX, RBX	# spill
168   	movl    R10, #1	# int
16e   	movdl   XMM8, R10	# spill
173   	jmp,s   B23
      	nop 	# 11 bytes pad for loops and calls

180   B16: #	B39 &lt;- B40  top-of-loop Freq: 6.14435
180   	movl    RCX, R13	# spill
183   	jmp     B39
183
188   B17: #	B18 &lt;- B45  Freq: 0.222656
188   	movl    RCX, R13	# spill
188
18b   B18: #	B72 B19 &lt;- B17 B35 B39  Freq: 7.31582
18b   	andl    RBX, #127	# int
18e   	movdl   R10, XMM5	# spill
193   	movl    R10, [R10 + #12 (8-bit)]	# range
197   	NullCheck R10
197
197   B19: #	B57 B20 &lt;- B18  Freq: 7.31581
197   	movl    RBP, RCX	# spill
199   	incl    RBP	# int
19b   	cmpl    RBX, R10	# unsigned
19e   	jnb,u  B57  P=0.000001 C=-1.000000
19e
1a4   B20: #	B73 B21 &lt;- B19  Freq: 7.31581
1a4   	movl    RBP, RCX	# spill
1a6   	movdl   R10, XMM5	# spill
1ab   	subl    RBP, [R10 + #16 + RBX &lt;&lt; #2]	# int
1b0   	incl    RBP	# int
1b2   	movdl   R10, XMM3	# spill
1b7   	movl    R11, [R10 + #12 (8-bit)]	# range
1bb   	NullCheck R10
1bb
1bb   B21: #	B58 B22 &lt;- B20  Freq: 7.3158
1bb   	cmpl    RCX, R11	# unsigned
1be   	jnb,u  B58  P=0.000001 C=-1.000000
1be
1c4   B22: #	B23 &lt;- B21  Freq: 7.31579
1c4   	movl    R11, [R10 + #16 + R9]	# int
1c9   	cmpl    RBP, R11
1cc   	cmovll RBP, R11	# signed, int
1d0   	addl    RDX, RBP	# int
1d2   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$BnM::match @ bci:87  L[0]=XMM0 L[1]=rsp + #24 L[2]=RDX L[3]=XMM4 L[4]=XMM11 L[5]=rsp + #32 L[6]=rsp + #8 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rdi=NarrowOop r14=Oop xmm0=Oop xmm1=NarrowOop xmm2=NarrowOop xmm3=NarrowOop xmm4=Oop xmm5=NarrowOop xmm7=Oop xmm11=Oop [0]=Derived_oop_xmm7 [12]=NarrowOop [24]=Oop off=466}
1d8
1d8   B23: #	B53 B24 &lt;- B15 B22 	Loop: B23-B22  Freq: 8.31579
1d8   	movl    R11, #-1	# int
1de   	subl    R11, RDX	# int
1e1   	cmpl    RDX, [RSP + #8 (32-bit)]
1e5   	jg     B53  P=0.013752 C=8726.000000
1e5
1eb   B24: #	B48 B25 &lt;- B23  Freq: 8.20143
1eb   	movl    R10, RDX	# spill
1ee   	addl    R10, [RSP + #32 (32-bit)]	# int
1f3   	movdl   XMM6, R10	# spill
1f8   	movl    R10, RDX	# spill
1fb   	negl    R10	# int
1fe   	movl    R9, RDX	# spill
201   	incl    R9	# int
204   	movl    RCX, R10	# spill
207   	sarl    RCX, #31
20a   	andl    RCX, R10	# int
20d   	movl    R10, R9	# spill
210   	sarl    R10, #31
214   	testl   RSI, RSI
216   	jl     B48  P=0.074668 C=22513.000000
216
21c   B25: #	B56 B26 &lt;- B24  Freq: 7.58904
21c   	andl    R10, R9	# int
21f   	movl    RBP, #-2147483647	# int
224   	subl    RBP, R10	# int
227   	movdl   R10, XMM1	# spill
22c   	movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
230   	NullCheck R10
230
230   B26: #	B56 B27 &lt;- B25  Freq: 7.58903
230   	addl    RCX, #2147483647	# int
236   	cmpl    R8, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
23d   	jne,u  B56  P=0.000001 C=-1.000000
23d
243   B27: #	B56 B28 &lt;- B26  Freq: 7.58903
243   	movq    R10, R14	# spill
246   	# checkcastPP of R10
246   	movdq   XMM4, R10	# spill
24b   	cmpl    RBP, R11
24e   	cmovllt RBP, R11	# max
252   	movl    R8, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
256   	movdl   R10, XMM6	# spill
25b   	decl    R10	# int
25e   	movl    R11, [R8 + #12 (8-bit)]	# range
262   	NullCheck R8
262
262   B28: #	B56 B29 &lt;- B27  Freq: 7.58902
262   	movl    R9, R11	# spill
265   	subl    R9, RDX	# int
268   	cmpl    RDX, R11	# unsigned
26b   	jnb,u  B56  P=0.000001 C=-1.000000
26b
271   B29: #	B56 B30 &lt;- B28  Freq: 7.58901
271   	decl    R9	# int
274   	cmpl    RCX, R9
277   	cmovlgt RCX, R9	# min
27b   	cmpl    RAX, RCX
27d   	movl    R13, RAX	# spill
280   	cmovlgt R13, RCX	# min
284   	cmpl    R10, R11	# unsigned
287   	jnb,u  B56  P=0.000001 C=-1.000000
287
28d   B30: #	B56 B31 &lt;- B29  Freq: 7.589
28d   	movl    R10, [rsp + #32]	# spill
292   	testl  R10, R10	# unsigned
295   	jbe,u  B56  P=0.000001 C=-1.000000
295
29b   B31: #	B56 B32 &lt;- B30  Freq: 7.58899
29b   	cmpl    RSI, R10	# unsigned
29e   	jnb,u  B56  P=0.000001 C=-1.000000
29e
2a4   B32: #	B33 &lt;- B31  Freq: 7.58899
2a4   	movl    R10, #-1	# int
2aa   	cmpl    R13, R10
2ad   	movl    R9, #-1	# int
2b3   	cmovllt R13, R9	# max
2b7   	cmpl    RBP, R10
2ba   	cmovllt RBP, R9	# max
2be   	movl    RCX, RSI	# spill
2be
2c0   B33: #	B59 B34 &lt;- B32 B36 	Loop: B33-B36 inner pre of N1051 Freq: 11.3913
2c0   	movl    R10, RCX	# spill
2c3   	addl    R10, RDX	# int
2c6   	movslq  R9, RCX	# i2l
2c9   	testl   R10, R10
2cc   	jl     B59  P=0.000000 C=7895.000000
2cc
2d2   B34: #	B61 B35 &lt;- B33  Freq: 11.3913
2d2   	salq    R9, #2
2d6   	movzwl  RBX, [R8 + #16 + R10 &lt;&lt; #1]	# ushort/char
2dc   	cmpl    R10, R11
2df   	jge     B61  P=0.000000 C=7895.000000
2df
2e5   B35: #	B18 B36 &lt;- B34  Freq: 11.3913
2e5   	movl    R10, [RDI + #16 + R9]	# int
2ea   	cmpl    RBX, R10
2ed   	jne     B18  P=0.332421 C=20832.000000
2ed
2f3   B36: #	B33 B37 &lt;- B35  Freq: 7.60456
2f3   	decl    RCX	# int
2f5   	cmpl    RCX, R13
2f8   	jg,s   B33	# loop end  P=0.500000 C=13907.000000
2f8
2fa   B37: #	B63 B38 &lt;- B36  Freq: 3.80228
2fa   	cmpl    RCX, RBP
2fc   	jle     B63  P=0.000001 C=-1.000000
2fc
302   B38: #	B39 &lt;- B37  Freq: 3.80228
302   	# castII of RCX
302
302   B39: #	B18 B40 &lt;- B38 B16 	Loop: B39-B16 inner main of N255 Freq: 9.94662
302   	movl    R13, RCX	# spill
305   	decl    R13	# int
308   	movl    R10, RCX	# spill
30b   	addl    R10, RDX	# int
30e   	movslq  R9, RCX	# i2l
311   	movzwl  RBX, [R8 + #16 + R10 &lt;&lt; #1]	# ushort/char
317   	salq    R9, #2
31b   	movl    R10, [RDI + #16 + R9]	# int
320   	cmpl    RBX, R10
323   	jne     B18  P=0.332421 C=20832.000000
323
329   B40: #	B16 B41 &lt;- B39  Freq: 6.64015
329   	cmpl    R13, RBP
32c   	jg     B16	# loop end  P=0.925332 C=13907.000000
32c
332   B41: #	B48 B42 &lt;- B63 B40  Freq: 0.495811
332   	cmpl    R13, #-1
336   	jle,s   B48  P=0.100000 C=-1.000000
336
338   B42: #	B43 &lt;- B41  Freq: 0.44623
338   	# castII of R13
338
338   B43: #	B60 B44 &lt;- B42 B47 	Loop: B43-B47 inner post of N1051 Freq: 0.669802
338   	movslq  R9, R13	# i2l
33b   	movl    R10, R13	# spill
33e   	addl    R10, RDX	# int
341   	movzwl  RBX, [R8 + #16 + R10 &lt;&lt; #1]	# ushort/char
347   	testl   R10, R10
34a   	jl     B60  P=0.000000 C=7895.000000
34a
350   B44: #	B62 B45 &lt;- B43  Freq: 0.669802
350   	salq    R9, #2
354   	movl    RBP, [RDI + #16 + R9]	# int
359   	cmpl    R10, R11
35c   	jge     B62  P=0.000000 C=7895.000000
35c
362   B45: #	B17 B46 &lt;- B44  Freq: 0.669802
362   	movl    R10, R13	# spill
365   	decl    R10	# int
368   	cmpl    RBX, RBP
36a   	jne     B17  P=0.332421 C=20832.000000
36a
370   B46: #	B48 B47 &lt;- B45  Freq: 0.447145
370   	cmpl    R10, #-1
374   	jle,s   B48	# loop end  P=0.500000 C=13907.000000
374
376   B47: #	B43 &lt;- B46  Freq: 0.223573
376   	movl    R13, R10	# spill
379   	jmp,s   B43
379
37b   B48: #	B78 B49 &lt;- B41 B24 B46  Freq: 0.885538
37b   	movl    RSI, #-28	# int
380   	movq    R10, [rsp + #24]	# spill
385   	movl    [R10 + #28 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.first
389   	movdl   R10, XMM2	# spill
38e   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
392   	NullCheck R10
392
392   B49: #	B66 B50 &lt;- B48  Freq: 0.885537
392   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f3724298b10:Constant:exact *	# compressed klass ptr
399   	jne,u  B66  P=0.000001 C=-1.000000
399
39f   B50: #	B67 B51 &lt;- B49  Freq: 0.885536
39f   	movq    R11, [rsp + #24]	# spill
3a4   	movdl   R10, XMM6	# spill
3a9   	movl    [R11 + #32 (8-bit)], R10	# int ! Field: java/util/regex/Matcher.last
3ad   	movdl   R8, XMM10	# spill
3b2   	cmpl    R8, #1	# unsigned
3b6   	jbe,u  B67  P=0.000001 C=-1.000000
3b6
3bc   B51: #	B52 &lt;- B50  Freq: 0.885535
3bc   	movq    R8, [rsp + #0]	# spill
3c0   	movl    [R8], RDX	# int
3c3   	movl    RCX, [rsp + #12]	# spill
3c7   	movl    [RCX + #20 (8-bit)], R10	# int
3cb   	movl    [R8], RDX	# int
3ce   	movl    [RCX + #20 (8-bit)], R10	# int
3d2   	movdl   R8, XMM8	# spill
3d2
3d7   B52: #	N1021 &lt;- B53 B51  Freq: 0.999893
3d7   	movl    [R11 + #36 (8-bit)], R10	# int ! Field: java/util/regex/Matcher.oldLast
3db   	movl    RAX, R8	# spill
3de   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

3e9   	ret
3e9
3ea   B53: #	B52 &lt;- B23  Freq: 0.114359
3ea   	movq    R11, [rsp + #24]	# spill
3ef   	movb    [R11 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
3f4   	movl    [R11 + #28 (8-bit)], #-1	# int ! Field: java/util/regex/Matcher.first
3fc   	movdl   R10, XMM9	# spill
401   	xorl    R8, R8	# int
404   	jmp,s   B52
404
406   B54: #	B6 &lt;- B5  Freq: 0.0656121
406   	movl    R8, RBX	# spill
409   	jmp     B6
409
40e   B55: #	B11 &lt;- B7  Freq: 0.0476189
40e   	movq    [rsp + #24], R11	# spill
413   	movl    [rsp + #12], R10	# spill
418   	movq    [rsp + #0], R9	# spill
41c   	jmp     B11
41c
421   B56: #	N1021 &lt;- B31 B25 B26 B27 B28 B29 B30  Freq: 5.3627e-05
421   	movl    RBP, RDX	# spill
423   	movl    [rsp + #0], RDI	# spill
426   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
438   	movl    [rsp + #8], RSI	# spill
43c   	movsd   [rsp + #40], XMM0	# spill
442   	movss   [rsp + #12], XMM1	# spill
448   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
44f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:37  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #12 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [12]=NarrowOop [24]=Oop [40]=Oop off=1108}
454   	int3	# ShouldNotReachHere
454
459   B57: #	N1021 &lt;- B19  Freq: 7.41296e-06
459   	movl    [rsp + #0], RDI	# spill
45c   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
46e   	movl    [rsp + #8], RCX	# spill
472   	movl    [rsp + #12], RDX	# spill
476   	movl    [rsp + #16], RBX	# spill
47a   	movsd   [rsp + #40], XMM0	# spill
480   	movsd   [rsp + #56], XMM4	# spill
486   	movl    R10, [rsp + #32]	# spill
48b   	movl    [rsp + #20], R10	# spill
490   	movss   [rsp + #32], XMM5	# spill
496   	movl    RSI, #-28	# int
49b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=rsp + #56 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_ STK[0]=rsp + #12 STK[1]=RBP STK[2]=rsp + #32 STK[3]=rsp + #16
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=NarrowOop [40]=Oop [56]=Oop off=1184}
4a0   	int3	# ShouldNotReachHere
4a0
4a5   B58: #	N1021 &lt;- B21  Freq: 7.41294e-06
4a5   	movl    [rsp + #0], RDI	# spill
4a8   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
4ba   	movl    [rsp + #8], RDX	# spill
4be   	movl    [rsp + #12], RCX	# spill
4c2   	movsd   [rsp + #40], XMM0	# spill
4c8   	movsd   [rsp + #48], XMM4	# spill
4ce   	movss   [rsp + #36], XMM3	# spill
4d4   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
4db   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=_ L[8]=_ STK[0]=rsp + #8 STK[1]=RBP STK[2]=rsp + #36 STK[3]=rsp + #12
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [36]=NarrowOop [40]=Oop [48]=Oop off=1248}
4e0   	int3	# ShouldNotReachHere
4e0
4e5   B59: #	B60 &lt;- B33  Freq: 5.69563e-06
4e5   	movl    R13, RCX	# spill
4e5
4e8   B60: #	N1021 &lt;- B43 B59  Freq: 6.03053e-06
4e8   	movl    RBP, RDX	# spill
4ea   	movl    [rsp + #0], RDI	# spill
4ed   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
4ff   	movl    [rsp + #8], R13	# spill
504   	movl    [rsp + #16], R10	# spill
509   	movsd   [rsp + #40], XMM0	# spill
50f   	movl    R11, [rsp + #32]	# spill
514   	movl    [rsp + #20], R11	# spill
519   	movsd   [rsp + #32], XMM4	# spill
51f   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
527   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #32 L[1]=rsp + #16 STK[0]=rsp + #16
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=1324}
52c   	int3	# ShouldNotReachHere
52c
531   B61: #	B62 &lt;- B34  Freq: 5.43178e-06
531   	movl    R13, RCX	# spill
531
534   B62: #	N1021 &lt;- B44 B61  Freq: 5.75116e-06
534   	movl    RBP, RDX	# spill
536   	movl    [rsp + #0], RDI	# spill
539   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
54b   	movl    [rsp + #8], R13	# spill
550   	movl    [rsp + #16], R10	# spill
555   	movl    [rsp + #20], R11	# spill
55a   	movsd   [rsp + #40], XMM0	# spill
560   	movsd   [rsp + #64], XMM4	# spill
566   	movl    RSI, #-155	# int
56b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #64 L[1]=rsp + #16 STK[0]=rsp + #16 STK[1]=rsp + #20
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #64 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [40]=Oop [64]=Oop off=1392}
570   	int3	# ShouldNotReachHere
570
575   B63: #	B41 &lt;- B37  Freq: 3.85277e-06
575   	movl    R13, RCX	# spill
578   	jmp     B41
578
57d   B64: #	N1021 &lt;- B13  Freq: 9.99993e-07
57d   	movl    RBP, RBX	# spill
57f   	movl    RSI, #-34	# int
584   	movl    [rsp + #8], R10	# spill
589   	movss   [rsp + #12], XMM1	# spill
58f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_ STK[0]=rsp + #8 STK[1]=rsp + #24 STK[2]=RBP STK[3]=rsp + #12
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[8]=NarrowOop [12]=NarrowOop [24]=Oop off=1428}
594   	int3	# ShouldNotReachHere
594
599   B65: #	N1021 &lt;- B9 B8  Freq: 1.9174e-06
599   	movl    RBP, RBX	# spill
59b   	movq    [rsp + #0], R11	# spill
59f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:55  L[0]=rsp + #0 L[1]=RBP L[2]=#0
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=Oop off=1444}
5a4   	int3	# ShouldNotReachHere
5a4
5a9   B66: #	N1021 &lt;- B49  Freq: 8.85537e-07
5a9   	movl    RBP, RDX	# spill
5ab   	movl    [rsp + #0], RDI	# spill
5ae   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
5c0   	movsd   [rsp + #16], XMM0	# spill
5c6   	movss   [rsp + #40], XMM2	# spill
5cc   	movss   [rsp + #44], XMM6	# spill
5d2   	movss   [rsp + #56], XMM1	# spill
5d8   	movl    RSI, #-34	# int
      	nop 	# 2 bytes pad for loops and calls
5df   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #56 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=_ L[8]=_ STK[0]=rsp + #40 STK[1]=rsp + #24 STK[2]=rsp + #44 STK[3]=rsp + #56
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop [40]=NarrowOop [56]=NarrowOop off=1508}
5e4   	int3	# ShouldNotReachHere
5e4
5e9   B67: #	N1021 &lt;- B50  Freq: 8.85536e-07
5e9   	movl    [rsp + #0], RDI	# spill
5ec   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
5fe   	movl    [rsp + #8], RDX	# spill
602   	movsd   [rsp + #24], XMM0	# spill
608   	movq    [rsp + #40], R11	# spill
60d   	movss   [rsp + #36], XMM1	# spill
613   	movq    [rsp + #48], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
61b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #40 L[2]=_ L[3]=_ STK[0]=rsp + #12 STK[1]=#0 STK[2]=rsp + #8
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #24 L[1]=rsp + #48 L[2]=rsp + #8 L[3]=rsp + #36 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #40 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [12]=NarrowOop [24]=Oop [36]=NarrowOop [40]=Oop [48]=Oop off=1568}
620   	int3	# ShouldNotReachHere
620
625   B68: #	N1021 &lt;- B1  Freq: 4.76837e-07
625   	movl    RSI, #-155	# int
62a   	movl    [rsp + #0], RBX	# spill
62d   	movq    [rsp + #8], R11	# spill
632   	movl    [rsp + #4], R10	# spill
637   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::find @ bci:10  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #0 STK[1]=rsp + #4
        # OopMap{[8]=Oop off=1596}
63c   	int3	# ShouldNotReachHere
63c
641   B69: #	N1021 &lt;- B2  Freq: 4.76837e-07
641   	movl    [rsp + #4], RBX	# spill
645   	movq    [rsp + #8], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
64b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::find @ bci:21  L[0]=rsp + #8 L[1]=rsp + #4 L[2]=_ STK[0]=rsp + #4 STK[1]=RBP
        # OopMap{[8]=Oop off=1616}
650   	int3	# ShouldNotReachHere
650
655   B70: #	N1021 &lt;- B3  Freq: 4.76837e-07
655   	movl    [rsp + #0], RBX	# spill
658   	movl    [rsp + #4], R13	# spill
65d   	movq    [rsp + #8], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
663   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::find @ bci:34  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #0 STK[1]=rsp + #4
        # OopMap{[8]=Oop off=1640}
668   	int3	# ShouldNotReachHere
668
66d   B71: #	N1021 &lt;- B4  Freq: 4.76836e-07
66d   	movl    [rsp + #0], RBX	# spill
670   	movq    [rsp + #8], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
677   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::search @ bci:11  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #0
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[8]=Oop off=1660}
67c   	int3	# ShouldNotReachHere
67c
681   B72: #	N1021 &lt;- B18  Freq: 7.41297e-06
681   	movl    RBP, RBX	# spill
683   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
68b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1680}
690   	int3	# ShouldNotReachHere
690
695   B73: #	N1021 &lt;- B20  Freq: 7.41295e-06
695   	movl    RBP, RCX	# spill
697   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
69f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1700}
6a4   	int3	# ShouldNotReachHere
6a4
6a9   B74: #	N1021 &lt;- B6  Freq: 1.01328e-06
6a9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
6af   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:51  L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1716}
6b4   	int3	# ShouldNotReachHere
6b4
6b9   B75: #	N1021 &lt;- B11  Freq: 1.01327e-06
6b9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
6bf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:77  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1732}
6c4   	int3	# ShouldNotReachHere
6c4
6c9   B76: #	N1021 &lt;- B12  Freq: 1.01327e-06
6c9   	movl    RSI, #-10	# int
6ce   	movl    RBP, RBX	# spill
6d0   	movss   [rsp + #8], XMM1	# spill
      	nop 	# 1 bytes pad for loops and calls
6d7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL STK[1]=rsp + #24 STK[2]=RBP STK[3]=rsp + #8
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[8]=NarrowOop [24]=Oop off=1756}
6dc   	int3	# ShouldNotReachHere
6dc
6e1   B77: #	N1021 &lt;- B14  Freq: 1.01327e-06
6e1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
6e7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1772}
6ec   	int3	# ShouldNotReachHere
6ec
6f1   B78: #	N1021 &lt;- B48  Freq: 8.97297e-07
6f1   	movss   [rsp + #0], XMM6	# spill
6f6   	movss   [rsp + #4], XMM1	# spill
6fc   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
703   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=rsp + #24 STK[2]=rsp + #0 STK[3]=rsp + #4
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [24]=Oop off=1800}
708   	int3	# ShouldNotReachHere
708

</opto_assembly>
<writer thread='139875533833984'/>
<opto_assembly compile_id='350' compile_kind='osr'>
{method}
 - this oop:          0x00007f3755948ca8
 - method holder:     &apos;java/util/regex/Pattern$Curly&apos;
 - constants:         0x00007f3755948538 constant pool [101] {0x00007f3755948538} for &apos;java/util/regex/Pattern$Curly&apos; cache=0x00007f3755949100
 - access:            0xc1000000  
 - name:              &apos;match0&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)Z&apos;
 - max stack:         6
 - max locals:        7
 - size of params:    5
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680efb48: 0xbbaab000 i2c: 0x00007f3758b14de0 c2i: 0x00007f3758b14f29 c2iUV: 0x00007f3758b14efc
 - compiled entry     0x00007f3758cab8a0
 - code size:         174
 - code start:        0x00007f3755948b88
 - code end (excl):   0x00007f3755948c36
 - method data:       0x00007f3755b43058
 - checked ex length: 0
 - linenumber start:  0x00007f3755948c36
 - localvar length:   7
 - localvar start:    0x00007f3755948c52
 - compiled code: nmethod   2427  340       3       java.util.regex.Pattern$Curly::match0 (174 bytes)
#
#  bool ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 144 --
#r191 rsp+140: in_preserve
#r190 rsp+136: return address
#r189 rsp+132: in_preserve
#r188 rsp+128: saved fp register
#r187 rsp+124: pad2, stack alignment
#r186 rsp+120: pad2, stack alignment
#r185 rsp+116: Fixed slot 1
#r184 rsp+112: Fixed slot 0
#r219 rsp+108: spill
#r218 rsp+104: spill
#r217 rsp+100: spill
#r216 rsp+96: spill
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1838: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B88 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (496 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #128	# Create frame

01f   	movl    RBX, [RSI + #24 (8-bit)]	# int
022   	movl    R13, [RSI]	# int
025   	movq    R14, [RSI + #16 (8-bit)]	# ptr
029   	movq    R10, [RSI + #40 (8-bit)]	# ptr
02d   	movq    [rsp + #0], R10	# spill
031   	movq    R10, [RSI + #48 (8-bit)]	# ptr
035   	movq    [rsp + #8], R10	# spill
03a   	movl    RBP, [RSI + #32 (8-bit)]	# int
03d   	movl    R11, [RSI + #8 (8-bit)]	# int
041   	movl    [rsp + #64], R11	# spill
046   	movq    RDI, RSI	# spill
049   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
056   	movq    R10, [rsp + #8]	# spill
05b   	testq   R10, R10	# ptr
05e   	je     B88  P=0.001000 C=-1.000000
05e
064   B2: #	B122 B3 &lt;- B1  Freq: 0.999
064   	movq    R11, R10	# spill
067   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
06b   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Curly: 0x00007f372410e810:Constant:exact *	# compressed klass ptr
072   	jne,u  B122  P=0.000001 C=-1.000000
072
078   B3: #	B4 &lt;- B2  Freq: 0.998999
078   	movq    R10, R11	# spill
07b   	# checkcastPP of R10
07b
07b   B4: #	B89 B5 &lt;- B3 B88  Freq: 0.999999
07b   	movq    R8, [rsp + #0]	# spill
07f   	testq   R8, R8	# ptr
082   	je     B89  P=0.001000 C=-1.000000
082
088   B5: #	B123 B6 &lt;- B4  Freq: 0.998999
088   	movl    RCX, [R8 + #8 (8-bit)]	# compressed klass ptr
08c   	cmpl    RCX, narrowklass: precise klass java/util/regex/Matcher: 0x00007f372410eae0:Constant:exact *	# compressed klass ptr
092   	jne,u  B123  P=0.000001 C=-1.000000
092
098   B6: #	B7 &lt;- B5  Freq: 0.998998
098   	movq    R9, R8	# spill
09b   	# checkcastPP of R9
09b
09b   B7: #	B90 B8 &lt;- B6 B89  Freq: 0.999998
09b   	movq    RAX, precise klass java/lang/CharSequence: 0x00007f372410ebb0:Constant:exact *	# ptr
0a5   	testq   R14, R14	# ptr
0a8   	je     B90  P=0.001000 C=-1.000000
0a8
0ae   B8: #	B86 B9 &lt;- B7  Freq: 0.998998
0ae   	movq    RDX, R9	# spill
0b1   	movl    R9, [R14 + #8 (8-bit)]	# compressed klass ptr
0b5   	decode_klass_not_null RSI,R9
0c3   	movq    R9, [RSI + #32 (8-bit)]	# class
0c7   	cmpq    R9, RAX	# ptr
0ca   	jne,u  B86  P=0.170000 C=-1.000000
0ca
0d0   B9: #	B10 &lt;- B8 B87  Freq: 0.998998
0d0   	# checkcastPP of R14
0d0   	movq    R9, RDX	# spill
0d0
0d3   B10: #	B121 B11 &lt;- B9 B90  Freq: 0.999998
0d3   	movl    R11, [R10 + #28 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Curly.atom
0d7   	NullCheck R10
0d7
0d7   B11: #	B118 B12 &lt;- B10  Freq: 0.999997
0d7   	movq    RCX, R9	# spill
0da   	movq    R9, R10	# spill
0dd   	movl    RDX, RBP	# spill
0df   	incl    RDX	# int
0e1   	decode_heap_oop_not_null R8,R11
0e4   	movl    R11, [R11 + #8 (8-bit)]	# compressed klass ptr
0e8   	NullCheck R11
0e8
0e8   B12: #	B120 B13 &lt;- B11  Freq: 0.999996
0e8   	movl    R10, [R10 + #24 (8-bit)]	# int ! Field: java/util/regex/Pattern$Curly.cmax
0ec   	movl    RAX, R10	# spill
0ef   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$Dot: 0x00007f372410f110:Constant:exact *	# compressed klass ptr
0f6   	jne,u  B120  P=0.000001 C=-1.000000
0f6
0fc   B13: #	B119 B14 &lt;- B12  Freq: 0.999995
0fc   	movl    R10, [RCX + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
100   	NullCheck RCX
100
100   B14: #	B47 B15 &lt;- B13  Freq: 0.999994
100   	cmpl    RBX, RAX
102   	jge     B47  P=0.000000 C=937830.000000
102
108   B15: #	B48 B16 &lt;- B14  Freq: 0.999993
108   	movl    [rsp + #0], R10	# spill
10c   	movdq   XMM3, R14	# spill
111   	movl    [rsp + #16], R13	# spill
116   	# checkcastPP of R8
116   	movq    R13, R8	# spill
119   	cmpl    RBP, R10
11c   	jge     B48  P=0.018921 C=1143812.000000
11c
122   B16: #	B133 B17 &lt;- B15  Freq: 0.981072
122   	movl    R10, [R14 + #8 (8-bit)]	# compressed klass ptr
126   	NullCheck R14
126
126   B17: #	B126 B18 &lt;- B16  Freq: 0.981071
126   	movl    RSI, #-10	# int
12b   	cmpl    R10, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
132   	jne,u  B126  P=0.000001 C=-1.000000
132
138   B18: #	B100 B19 &lt;- B17  Freq: 0.98107
138   	# checkcastPP of R14
138   	movl    R10, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
13c   	movdl   XMM0, R10	# spill
141   	movl    R10, [R14 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
145   	movdl   XMM2, R10	# spill
14a   	testl   RBP, RBP
14c   	jl     B100  P=0.000000 C=7895.000000
14c
152   B19: #	B134 B20 &lt;- B18  Freq: 0.98107
152   	movl    R10, [R10 + #12 (8-bit)]	# range
156   	NullCheck R10
156
156   B20: #	B104 B21 &lt;- B19  Freq: 0.981069
156   	movl    [rsp + #40], R10	# spill
15b   	cmpl    RBP, R10
15e   	jge     B104  P=0.000000 C=7895.000000
15e
164   B21: #	B96 B22 &lt;- B20  Freq: 0.981068
164   	cmpl    RBP, R10	# unsigned
167   	jnb,u  B96  P=0.000001 C=-1.000000
167
16d   B22: #	B106 B23 &lt;- B21  Freq: 0.981067
16d   	movdl   R10, XMM2	# spill
172   	movzwl  R10, [R10 + #16 + RBP &lt;&lt; #1]	# ushort/char
178   	movdl   XMM1, R10	# spill
17d   	cmpl    R10, #55296
184   	jge     B106  P=0.000000 C=613346.000000
184
18a   B23: #	B108 B24 &lt;- B22  Freq: 0.981067
18a   	movl    R10, [RCX + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
18e   	movdl   XMM4, R10	# spill
193   	movdl   R10, XMM1	# spill
198   	cmpl    R10, #10
19c   	je     B108  P=0.000000 C=1127240.000000
19c
1a2   B24: #	B110 B25 &lt;- B23  Freq: 0.981066
1a2   	cmpl    R10, #13
1a6   	je     B110  P=0.000000 C=1127240.000000
1a6
1ac   B25: #	B112 B26 &lt;- B24  Freq: 0.981066
1ac   	movl    R8, R10	# spill
1af   	orl     R8, #1	# int
1b3   	cmpl    R8, #8233
1ba   	je     B112  P=0.000000 C=1127240.000000
1ba
1c0   B26: #	B114 B27 &lt;- B25  Freq: 0.981066
1c0   	movl    RDI, RBP	# spill
1c2   	addl    RDI, [RSP + #16 (32-bit)]	# int
1c6   	movl    RSI, #-28	# int
1cb   	cmpl    R10, #133
1d2   	je     B114  P=0.000000 C=1127240.000000
1d2
1d8   B27: #	B135 B28 &lt;- B26  Freq: 0.981065
1d8   	movdl   R10, XMM0	# spill
1dd   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
1e1   	NullCheck R10
1e1
1e1   B28: #	B127 B29 &lt;- B27  Freq: 0.981064
1e1   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Node: 0x00007f3724111cf0:Constant:exact *	# compressed klass ptr
1e8   	jne,u  B127  P=0.000001 C=-1.000000
1e8
1ee   B29: #	B136 B30 &lt;- B28  Freq: 0.981063
1ee   	movl    R10, [RCX + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
1f2   	movdl   XMM0, R10	# spill
1f7   	movl    [RCX + #32 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.last
1fa   	movl    R11, [R10 + #12 (8-bit)]	# range
1fe   	NullCheck R10
1fe
1fe   B30: #	B128 B31 &lt;- B29  Freq: 0.981062
1fe   	movl    R10, RBX	# spill
201   	incl    R10	# int
204   	movdl   XMM6, R10	# spill
209   	cmpl    R11, #1	# unsigned
20d   	jbe,u  B128  P=0.000001 C=-1.000000
20d
213   B31: #	B116 B32 &lt;- B30  Freq: 0.981061
213   	movdl   R10, XMM0	# spill
218   	movdl   R11, XMM4	# spill
21d   	movl    [R10 + #16 (8-bit)], R11	# int
221   	movl    [R10 + #20 (8-bit)], RDX	# int
225   	cmpl    RDI, RDX
227   	jne     B116  P=0.000000 C=920021.000000
227
22d   B32: #	B35 B33 &lt;- B31  Freq: 0.981061
22d   	movdl   R10, XMM6	# spill
232   	cmpl    R10, RAX
235   	jl,s   B35	# loop end  P=1.000000 C=937830.000000
235
237   B33: #	B46 &lt;- B32  Freq: 4.67806e-07
237   	movl    RBX, R10	# spill
23a   	movl    RBP, RDI	# spill
23c   	jmp     B46
23c
241   B34: #	B35 &lt;- B45  top-of-loop Freq: 50.8551
241   	movdl   XMM6, RBX	# spill
245   	movl    RDI, RBP	# spill
245
247   B35: #	B49 B36 &lt;- B32 B34 	Loop: B35-B34 inner  Freq: 51.8361
247   	cmpl    RDI, [RSP + #0 (32-bit)]
24a   	jge     B49  P=0.018921 C=1143812.000000
24a
250   B36: #	B101 B37 &lt;- B35  Freq: 50.8553
250   	testl   RDI, RDI
252   	jl     B101  P=0.000000 C=7895.000000
252
258   B37: #	B105 B38 &lt;- B36  Freq: 50.8553
258   	cmpl    RDI, [RSP + #40 (32-bit)]
25c   	jge     B105  P=0.000000 C=7895.000000
25c
262   B38: #	B97 B39 &lt;- B37  Freq: 50.8553
262   	cmpl    RDI, [RSP + #40 (32-bit)]	# unsigned
266   	jnb,u  B97  P=0.000001 C=-1.000000
266
26c   B39: #	B107 B40 &lt;- B38  Freq: 50.8552
26c   	movdl   R11, XMM2	# spill
271   	movzwl  R10, [R11 + #16 + RDI &lt;&lt; #1]	# ushort/char
277   	movdl   XMM1, R10	# spill
27c   	movl    R8, R10	# spill
27f   	orl     R8, #1	# int
283   	movl    RDX, RDI	# spill
285   	incl    RDX	# int
287   	cmpl    R10, #55296
28e   	jge     B107  P=0.000000 C=613346.000000
28e
294   B40: #	B109 B41 &lt;- B39  Freq: 50.8552
294   	cmpl    R10, #10
298   	je     B109  P=0.000000 C=1127240.000000
298
29e   B41: #	B111 B42 &lt;- B40  Freq: 50.8552
29e   	cmpl    R10, #13
2a2   	je     B111  P=0.000000 C=1127240.000000
2a2
2a8   B42: #	B113 B43 &lt;- B41  Freq: 50.8552
2a8   	cmpl    R8, #8233
2af   	je     B113  P=0.000000 C=1127240.000000
2af
2b5   B43: #	B115 B44 &lt;- B42  Freq: 50.8551
2b5   	movdl   RBX, XMM6	# spill
2b9   	incl    RBX	# int
2bb   	cmpl    R10, #133
2c2   	je     B115  P=0.000000 C=1127240.000000
2c2
2c8   B44: #	B117 B45 &lt;- B43  Freq: 50.8551
2c8   	movl    [RCX + #32 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.last
2cb   	movdl   R10, XMM0	# spill
2d0   	movdl   R11, XMM4	# spill
2d5   	movl    [R10 + #16 (8-bit)], R11	# int
2d9   	movl    RBP, RDI	# spill
2db   	addl    RBP, [RSP + #16 (32-bit)]	# int
2df   	movl    [R10 + #20 (8-bit)], RDX	# int
2e3   	cmpl    RBP, RDX
2e5   	jne     B117  P=0.000000 C=920021.000000
2e5
2eb   B45: #	B34 B46 &lt;- B44  Freq: 50.8551
2eb   	cmpl    RBX, RAX
2ed   	jl     B34	# loop end  P=1.000000 C=937830.000000
2ed
2f3   B46: #	B47 &lt;- B33 B45  Freq: 2.47174e-05
2f3   	movl    R13, [rsp + #16]	# spill
2f8   	movdq   R14, XMM3	# spill
2f8
2fd   B47: #	N1838 &lt;- B14 B46  Freq: 2.51942e-05
2fd   	movq    [rsp + #8], R14	# spill
302   	movl    [rsp + #4], R13	# spill
307   	movl    [rsp + #16], RBX	# spill
30b   	movq    [rsp + #24], R9	# spill
310   	movq    [rsp + #32], RCX	# spill
315   	movl    [rsp + #40], RAX	# spill
319   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
31f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:66  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #16 L[4]=rsp + #8 L[5]=rsp + #64 L[6]=rsp + #4 STK[0]=rsp + #16 STK[1]=rsp + #40
        # OopMap{[8]=Oop [24]=Oop [32]=Oop off=804}
324   	int3	# ShouldNotReachHere
324
329   B48: #	B49 &lt;- B15  Freq: 0.0189208
329   	movl    RDI, RBP	# spill
32b   	movdl   XMM6, RBX	# spill
32b
32f   B49: #	B85 B50 &lt;- B48 B35  Freq: 0.99971
32f   	movl    R8, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
333   	movb    [RCX + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
337   	movdl   R11, XMM6	# spill
33c   	cmpl    R11, [RSP + #64 (32-bit)]
341   	jl     B85  P=0.018295 C=973601.000000
341
347   B50: #	B124 B51 &lt;- B49  Freq: 0.98142
347   	movdq   XMM1, RCX	# spill
34c   	movdq   XMM0, R9	# spill
351   	decode_heap_oop_not_null RCX,R8
354   	movl    R9, [R8 + #8 (8-bit)]	# compressed klass ptr
358   	NullCheck R8
358
358   B51: #	B124 B52 &lt;- B50  Freq: 0.981419
358   	movl    R10, [rsp + #64]	# spill
35d   	decl    R10	# int
360   	cmpl    R9, narrowklass: precise klass java/util/regex/Pattern$Slice: 0x00007f372410f1e0:Constant:exact *	# compressed klass ptr
367   	jne,u  B124  P=0.000001 C=-1.000000
367
36d   B52: #	B124 B53 &lt;- B51  Freq: 0.981418
36d   	# checkcastPP of RCX
36d   	movdq   XMM2, RCX	# spill
372   	movl    R8, [RCX + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$SliceNode.buffer
376   	movl    R9, [R8 + #12 (8-bit)]	# range
37a   	NullCheck R8
37a
37a   B53: #	B124 B54 &lt;- B52  Freq: 0.981417
37a   	testl   R9, R9
37d   	jle     B124  P=0.000001 C=-1.000000
37d
383   B54: #	B125 B55 &lt;- B53  Freq: 0.981416
383   	movl    RSI, #-130	# int
388   	movl    RBX, [rsp + #64]	# spill
38c   	cmpl    RBX, #-2147483647
392   	jl     B125  P=0.000001 C=-1.000000
392
398   B55: #	B59 &lt;- B54  Freq: 0.981415
398   	movl    [rsp + #36], R9	# spill
39d   	movdl   XMM5, R8	# spill
3a2   	movl    [rsp + #4], R10	# spill
3a7   	movaps  XMM4, XMM6	# spill
3ab   	jmp,s   B59
3ab
3ad   B56: #	B57 &lt;- B76 B60  Freq: 1.01542
3ad   	movdq   R10, XMM1	# spill
3b2   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
3b2
3b7   B57: #	B85 B58 &lt;- B56 B81 B72 B68  top-of-loop Freq: 53.6264
3b7   	movdl   R10, XMM8	# spill
3bc   	cmpl    R10, [RSP + #4 (32-bit)]
3c1   	jle     B85	# loop end  P=0.018295 C=955793.000000
3c1
3c7   B58: #	B59 &lt;- B57  Freq: 52.6454
3c7   	movdl   XMM4, R10	# spill
3cc   	movdl   RDI, XMM6	# spill
3cc
3d0   B59: #	B60 &lt;- B55 B58 	Loop: B59-B58  Freq: 53.6268
3d0   	movl    R10, RDI	# spill
3d3   	sarl    R10, #31
3d7   	movl    R8, #1	# int
3dd   	subl    R8, RDI	# int
3e0   	movl    R11, RDI	# spill
3e3   	subl    R11, [RSP + #16 (32-bit)]	# int
3e8   	movdl   XMM6, R11	# spill
3ed   	movdl   R11, XMM4	# spill
3f2   	decl    R11	# int
3f5   	movdl   XMM8, R11	# spill
3fa   	andl    R10, RDI	# int
3fd   	movl    RBP, RDI	# spill
3ff   	negl    RBP	# int
401   	movl    R11, #-2147483647	# int
407   	subl    R11, R10	# int
40a   	movl    [rsp + #8], R11	# spill
40f   	movl    R10, R8	# spill
412   	sarl    R10, #31
416   	andl    R10, R8	# int
419   	movdl   XMM9, R10	# spill
41e   	cmpl    R11, RBP
421   	movl    R10, R11	# spill
424   	cmovllt R10, RBP	# max
428   	movl    R11, #1	# int
42e   	cmpl    R10, R11
431   	movl    R8, #1	# int
437   	cmovllt R10, R8	# max
43b   	cmpl    R10, [RSP + #36 (32-bit)]
440   	movl    R11, [rsp + #36]	# spill
445   	cmovlgt R10, R11	# min
449   	xorl    R11, R11	# int
44c
44c   B60: #	B56 B61 &lt;- B59 B84 	Loop: B60-B84 inner pre of N1154 Freq: 54.0858
44c   	movl    RBX, R11	# spill
44f   	addl    RBX, RDI	# int
451   	cmpl    RBX, [RSP + #0 (32-bit)]
454   	jge     B56  P=0.018774 C=1158499.000000
454
45a   B61: #	B91 B62 &lt;- B60  Freq: 53.0703
45a   	cmpl    R10, [RSP + #8 (32-bit)]
45f   	movl    R9, R10	# spill
462   	movl    R8, [rsp + #8]	# spill
467   	cmovllt R9, R8	# max
46b   	cmpl    R11, [RSP + #36 (32-bit)]	# unsigned
470   	jnb,u  B91  P=0.000001 C=-1.000000
470
476   B62: #	B131 B63 &lt;- B61  Freq: 53.0703
476   	movdl   R8, XMM5	# spill
47b   	movl    R8, [R8 + #16 + R11 &lt;&lt; #2]	# int
480   	movdl   XMM7, R8	# spill
485   	cmpl    R9, RBP
488   	cmovllt R9, RBP	# max
48c   	movdq   R8, XMM3	# spill
491   	movl    R8, [R8 + #8 (8-bit)]	# compressed klass ptr
495   	NullCheck R8
495
495   B63: #	B95 B64 &lt;- B62  Freq: 53.0702
495   	cmpl    R8, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
49c   	jne,u  B95  P=0.000001 C=-1.000000
49c
4a2   B64: #	B98 B65 &lt;- B63  Freq: 53.0702
4a2   	movdq   RCX, XMM3	# spill
4a7   	# checkcastPP of RCX
4a7   	cmpl    R9, [RSP + #36 (32-bit)]
4ac   	movl    R8, [rsp + #36]	# spill
4b1   	cmovlgt R9, R8	# min
4b5   	movl    RDX, [RCX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
4b8   	testl   RBX, RBX
4ba   	jl     B98  P=0.000000 C=7895.000000
4ba
4c0   B65: #	B132 B66 &lt;- B64  Freq: 53.0701
4c0   	movl    R13, [RDX + #12 (8-bit)]	# range
4c4   	NullCheck RDX
4c4
4c4   B66: #	B102 B67 &lt;- B65  Freq: 53.0701
4c4   	movl    R14, [rsp + #0]	# spill
4c8   	subl    R14, RDI	# int
4cb   	movl    R8, R13	# spill
4ce   	subl    R8, RDI	# int
4d1   	movdl   RSI, XMM9	# spill
4d5   	addl    RSI, #2147483647	# int
4db   	movl    RAX, R11	# spill
4de   	incl    RAX	# int
4e0   	cmpl    RSI, R8
4e3   	cmovlgt RSI, R8	# min
4e7   	cmpl    R14, RSI
4ea   	cmovlgt R14, RSI	# min
4ee   	cmpl    RBX, R13
4f1   	jge     B102  P=0.000000 C=7895.000000
4f1
4f7   B67: #	B93 B68 &lt;- B66  Freq: 53.0701
4f7   	cmpl    RBX, R13	# unsigned
4fa   	jnb,u  B93  P=0.000001 C=-1.000000
4fa
500   B68: #	B57 B69 &lt;- B67  Freq: 53.07
500   	movzwl  R8, [RDX + #16 + RBX &lt;&lt; #1]	# ushort/char
506   	movdl   R11, XMM7	# spill
50b   	cmpl    R11, R8
50e   	jne     B57  P=0.982702 C=1136750.000000
50e
514   B69: #	B84 B70 &lt;- B68  Freq: 0.917982
514   	cmpl    R14, [RSP + #36 (32-bit)]
519   	movl    R11, [rsp + #36]	# spill
51e   	cmovlgt R14, R11	# min
522   	cmpl    RAX, R9
525   	jl     B84	# loop end  P=0.500000 C=19663.000000
525
52b   B70: #	B74 B71 &lt;- B69  Freq: 0.458991
52b   	movl    RSI, #-155	# int
530   	cmpl    RAX, R14
533   	jge,s   B74  P=0.000001 C=-1.000000
533
535   B71: #	B72 &lt;- B70  Freq: 0.458991
535   	# castII of RAX
      	nop 	# 11 bytes pad for loops and calls

540   B72: #	B57 B73 &lt;- B71 B73 	Loop: B72-B73 inner main of N389 Freq: 0.46707
540   	movdl   R9, XMM5	# spill
545   	movl    R8, [R9 + #16 + RAX &lt;&lt; #2]	# int
54a   	movl    R11, RAX	# spill
54d   	addl    R11, RDI	# int
550   	movzwl  R10, [RDX + #16 + R11 &lt;&lt; #1]	# ushort/char
556   	cmpl    R8, R10
559   	jne     B57  P=0.982702 C=1136750.000000
559
55f   B73: #	B72 B74 &lt;- B72  Freq: 0.00807917
55f   	incl    RAX	# int
561   	cmpl    RAX, R14
564   	jl,s   B72	# loop end  P=1.000000 C=19663.000000
564
566   B74: #	B129 B75 &lt;- B70 B73  Freq: 4.68938e-07
566   	cmpl    RAX, [RSP + #36 (32-bit)]
56a   	jge     B129  P=0.000001 C=-1.000000
56a
570   B75: #	B76 &lt;- B74  Freq: 4.68938e-07
570   	# castII of RAX
570
570   B76: #	B56 B77 &lt;- B75 B83 	Loop: B76-B83 inner post of N1154 Freq: 4.77035e-07
570   	movl    RBX, RAX	# spill
572   	addl    RBX, RDI	# int
574   	movl    RBP, RAX	# spill
576   	incl    RBP	# int
578   	cmpl    RBX, [RSP + #0 (32-bit)]
57b   	jge     B56  P=0.018774 C=1158499.000000
57b
581   B77: #	B92 B78 &lt;- B76  Freq: 4.68079e-07
581   	cmpl    RAX, [RSP + #36 (32-bit)]	# unsigned
585   	jnb,u  B92  P=0.000001 C=-1.000000
585
58b   B78: #	B99 B79 &lt;- B77  Freq: 4.68078e-07
58b   	movdl   R11, XMM5	# spill
590   	movl    R10, [R11 + #16 + RAX &lt;&lt; #2]	# int
595   	movdl   XMM7, R10	# spill
59a   	testl   RBX, RBX
59c   	jl     B99  P=0.000000 C=7895.000000
59c
5a2   B79: #	B103 B80 &lt;- B78  Freq: 4.68078e-07
5a2   	cmpl    RBX, R13
5a5   	jge     B103  P=0.000000 C=7895.000000
5a5
5ab   B80: #	B94 B81 &lt;- B79  Freq: 4.68078e-07
5ab   	cmpl    RBX, R13	# unsigned
5ae   	jnb,u  B94  P=0.000001 C=-1.000000
5ae
5b4   B81: #	B57 B82 &lt;- B80  Freq: 4.68077e-07
5b4   	movzwl  R10, [RDX + #16 + RBX &lt;&lt; #1]	# ushort/char
5ba   	movdl   R8, XMM7	# spill
5bf   	cmpl    R8, R10
5c2   	jne     B57  P=0.982702 C=1136750.000000
5c2
5c8   B82: #	B130 B83 &lt;- B81  Freq: 8.0966e-09
5c8   	cmpl    RBP, [RSP + #36 (32-bit)]
5cc   	jge     B130	# loop end  P=0.000001 C=19663.000000
5cc
5d2   B83: #	B76 &lt;- B82  Freq: 8.09659e-09
5d2   	movl    RAX, RBP	# spill
5d4   	jmp,s   B76
5d4
5d6   B84: #	B60 &lt;- B69  Freq: 0.458991
5d6   	movl    R11, RAX	# spill
5d9   	jmp     B60
5d9
5de   B85: #	N1838 &lt;- B57 B49  Freq: 0.999385
5de   	xorl    RAX, RAX	# int
5e0   	addq    rsp, 128	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

5ee   	ret
5ee
5ef   B86: #	B123 B87 &lt;- B8  Freq: 0.16983
5ef   	movq    rdi, [RSI + in_bytes(Klass::secondary_supers_offset())]
	movl    rcx, [rdi + Array&lt;Klass*&gt;::length_offset_in_bytes()]	# length to scan
	addq    rdi, Array&lt;Klass*&gt;::base_offset_in_bytes()	# Skip to start of data; set NZ in case count is zero
	repne   scasq	# Scan *rdi++ for a match with rax while cx-- != 0
	jne,s   miss		# Missed: flags nz
	movq    [RSI + in_bytes(Klass::secondary_super_cache_offset())], RAX	# Hit: update cache
	miss:	
61a   	jne     B123  P=0.000001 C=-1.000000
61a
620   B87: #	B9 &lt;- B86  Freq: 0.16983
620   	jmp     B9
620
625   B88: #	B4 &lt;- B1  Freq: 0.000999987
625   	xorl    R10, R10	# ptr
628   	movq    R11, [rsp + #8]	# spill
62d   	jmp     B4
62d
632   B89: #	B7 &lt;- B4  Freq: 0.000999986
632   	xorl    R9, R9	# ptr
635   	jmp     B7
635
63a   B90: #	B10 &lt;- B7  Freq: 0.000999985
63a   	xorl    R14, R14	# ptr
63d   	jmp     B10
63d
642   B91: #	B92 &lt;- B61  Freq: 5.37751e-05
642   	movl    RAX, R11	# spill
642
645   B92: #	N1838 &lt;- B77 B91  Freq: 5.37751e-05
645   	movss   [rsp + #0], XMM4	# spill
64a   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
65c   	movl    [rsp + #16], RDI	# spill
660   	movsd   [rsp + #24], XMM3	# spill
666   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
678   	movss   [rsp + #40], XMM5	# spill
67e   	movl    [rsp + #44], RAX	# spill
682   	movsd   [rsp + #48], XMM0	# spill
688   	movsd   [rsp + #72], XMM2	# spill
68e   	movsd   [rsp + #80], XMM1	# spill
694   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
69b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:43  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=rsp + #16 L[3]=rsp + #24 L[4]=rsp + #40 L[5]=rsp + #32 L[6]=rsp + #44 STK[0]=rsp + #40 STK[1]=rsp + #44
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #48 L[1]=rsp + #80 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #24 L[5]=rsp + #64 L[6]=rsp + #4
        # OopMap{[24]=Oop [40]=NarrowOop [48]=Oop [72]=Oop [80]=Oop off=1696}
6a0   	int3	# ShouldNotReachHere
6a0
6a5   B93: #	B94 &lt;- B67  Freq: 5.37748e-05
6a5   	movl    RAX, R11	# spill
6a5
6a8   B94: #	N1838 &lt;- B80 B93  Freq: 5.37748e-05
6a8   	movss   [rsp + #0], XMM4	# spill
6ad   	movsd   [rsp + #8], XMM3	# spill
6b3   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
6c5   	movl    [rsp + #16], RDI	# spill
6c9   	movq    [rsp + #24], RCX	# spill
6ce   	movss   [rsp + #20], XMM5	# spill
6d4   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
6e6   	movl    [rsp + #36], RAX	# spill
6ea   	movss   [rsp + #40], XMM7	# spill
6f0   	movl    [rsp + #44], RDX	# spill
6f4   	movl    [rsp + #48], RBX	# spill
6f8   	movsd   [rsp + #56], XMM0	# spill
6fe   	movl    R11, [rsp + #64]	# spill
703   	movl    [rsp + #52], R11	# spill
708   	movsd   [rsp + #64], XMM2	# spill
70e   	movsd   [rsp + #80], XMM1	# spill
714   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
71b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #44 STK[1]=rsp + #48
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #64 L[1]=rsp + #80 L[2]=rsp + #16 L[3]=rsp + #24 L[4]=rsp + #20 L[5]=rsp + #32 L[6]=rsp + #36 STK[0]=rsp + #40
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #56 L[1]=rsp + #80 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #52 L[6]=rsp + #4
        # OopMap{[8]=Oop [20]=NarrowOop [24]=Oop [44]=NarrowOop [56]=Oop [64]=Oop [80]=Oop off=1824}
720   	int3	# ShouldNotReachHere
720
725   B95: #	N1838 &lt;- B63  Freq: 5.30702e-05
725   	movss   [rsp + #0], XMM4	# spill
72a   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
73c   	movl    [rsp + #16], RDI	# spill
740   	movsd   [rsp + #24], XMM3	# spill
746   	movss   [rsp + #20], XMM5	# spill
74c   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
75e   	movl    [rsp + #36], R11	# spill
763   	movss   [rsp + #40], XMM7	# spill
769   	movsd   [rsp + #48], XMM3	# spill
76f   	movl    [rsp + #44], RBX	# spill
773   	movsd   [rsp + #56], XMM0	# spill
779   	movsd   [rsp + #80], XMM2	# spill
77f   	movsd   [rsp + #88], XMM1	# spill
785   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
78b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #80 L[1]=rsp + #88 L[2]=rsp + #16 L[3]=rsp + #48 L[4]=rsp + #20 L[5]=rsp + #32 L[6]=rsp + #36 STK[0]=rsp + #40 STK[1]=rsp + #24 STK[2]=rsp + #44
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #56 L[1]=rsp + #88 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #24 L[5]=rsp + #64 L[6]=rsp + #4
        # OopMap{[20]=NarrowOop [24]=Oop [48]=Oop [56]=Oop [80]=Oop [88]=Oop off=1936}
790   	int3	# ShouldNotReachHere
790
795   B96: #	B97 &lt;- B21  Freq: 9.94096e-07
795   	movdl   XMM6, RBX	# spill
799   	movl    RDI, RBP	# spill
799
79b   B97: #	N1838 &lt;- B96 B38  Freq: 5.25247e-05
79b   	movss   [rsp + #0], XMM6	# spill
7a0   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
7b2   	movl    [rsp + #16], RDI	# spill
7b6   	movsd   [rsp + #24], XMM3	# spill
7bc   	movl    [rsp + #20], RDI	# spill
7c0   	movq    [rsp + #40], R9	# spill
7c5   	movl    R10, [rsp + #64]	# spill
7ca   	movl    [rsp + #36], R10	# spill
7cf   	movq    [rsp + #56], R13	# spill
7d4   	movq    [rsp + #64], RCX	# spill
7d9   	movq    [rsp + #72], R14	# spill
7de   	movss   [rsp + #80], XMM2	# spill
7e4   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
7eb   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #80 STK[1]=rsp + #16
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #72 L[1]=rsp + #16 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #56 L[1]=rsp + #64 L[2]=rsp + #20 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #40 L[1]=rsp + #64 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #24 L[5]=rsp + #36 L[6]=rsp + #4
        # OopMap{[24]=Oop [40]=Oop [56]=Oop [64]=Oop [72]=Oop [80]=NarrowOop off=2032}
7f0   	int3	# ShouldNotReachHere
7f0
7f5   B98: #	B99 &lt;- B64  Freq: 2.65351e-05
7f5   	movl    RAX, R11	# spill
7f5
7f8   B99: #	N1838 &lt;- B78 B98  Freq: 2.65351e-05
7f8   	movss   [rsp + #0], XMM4	# spill
7fd   	movsd   [rsp + #8], XMM3	# spill
803   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
815   	movl    [rsp + #16], RDI	# spill
819   	movss   [rsp + #20], XMM5	# spill
81f   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
831   	movl    [rsp + #36], RAX	# spill
835   	movss   [rsp + #40], XMM7	# spill
83b   	movq    [rsp + #48], RCX	# spill
840   	movl    [rsp + #56], RBX	# spill
844   	movsd   [rsp + #72], XMM0	# spill
84a   	movl    R11, [rsp + #64]	# spill
84f   	movl    [rsp + #60], R11	# spill
854   	movsd   [rsp + #64], XMM2	# spill
85a   	movsd   [rsp + #88], XMM1	# spill
860   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
867   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #48 L[1]=rsp + #56 STK[0]=rsp + #56
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #64 L[1]=rsp + #88 L[2]=rsp + #16 L[3]=rsp + #48 L[4]=rsp + #20 L[5]=rsp + #32 L[6]=rsp + #36 STK[0]=rsp + #40
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #72 L[1]=rsp + #88 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #60 L[6]=rsp + #4
        # OopMap{[8]=Oop [20]=NarrowOop [48]=Oop [64]=Oop [72]=Oop [88]=Oop off=2156}
86c   	int3	# ShouldNotReachHere
86c
871   B100: #	B101 &lt;- B18  Freq: 4.90535e-07
871   	movdl   XMM6, RBX	# spill
875   	movl    RDI, RBP	# spill
875
877   B101: #	N1838 &lt;- B100 B36  Freq: 2.59182e-05
877   	movss   [rsp + #0], XMM6	# spill
87c   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
88e   	movl    [rsp + #16], RDI	# spill
892   	movsd   [rsp + #24], XMM3	# spill
898   	movl    [rsp + #20], RDI	# spill
89c   	movq    [rsp + #40], R9	# spill
8a1   	movl    R10, [rsp + #64]	# spill
8a6   	movl    [rsp + #56], R10	# spill
8ab   	movq    [rsp + #64], R13	# spill
8b0   	movq    [rsp + #72], RCX	# spill
8b5   	movq    [rsp + #88], R14	# spill
8ba   	movl    RSI, #-155	# int
8bf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #88 L[1]=rsp + #16 STK[0]=rsp + #16
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #88 L[1]=rsp + #16 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #64 L[1]=rsp + #72 L[2]=rsp + #20 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #40 L[1]=rsp + #72 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #24 L[5]=rsp + #56 L[6]=rsp + #4
        # OopMap{[24]=Oop [40]=Oop [64]=Oop [72]=Oop [88]=Oop off=2244}
8c4   	int3	# ShouldNotReachHere
8c4
8c9   B102: #	B103 &lt;- B66  Freq: 2.53058e-05
8c9   	movl    RAX, R11	# spill
8c9
8cc   B103: #	N1838 &lt;- B79 B102  Freq: 2.53058e-05
8cc   	movss   [rsp + #0], XMM4	# spill
8d1   	movsd   [rsp + #8], XMM3	# spill
8d7   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
8e9   	movl    [rsp + #16], RDI	# spill
8ed   	movss   [rsp + #20], XMM5	# spill
8f3   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
905   	movl    [rsp + #36], RAX	# spill
909   	movss   [rsp + #40], XMM7	# spill
90f   	movq    [rsp + #48], RCX	# spill
914   	movl    [rsp + #56], RBX	# spill
918   	movl    [rsp + #60], R13	# spill
91d   	movsd   [rsp + #72], XMM0	# spill
923   	movsd   [rsp + #88], XMM2	# spill
929   	movsd   [rsp + #96], XMM1	# spill
92f   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
937   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #48 L[1]=rsp + #56 STK[0]=rsp + #56 STK[1]=rsp + #60
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #88 L[1]=rsp + #96 L[2]=rsp + #16 L[3]=rsp + #48 L[4]=rsp + #20 L[5]=rsp + #32 L[6]=rsp + #36 STK[0]=rsp + #40
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #72 L[1]=rsp + #96 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #64 L[6]=rsp + #4
        # OopMap{[8]=Oop [20]=NarrowOop [48]=Oop [72]=Oop [88]=Oop [96]=Oop off=2364}
93c   	int3	# ShouldNotReachHere
93c
941   B104: #	B105 &lt;- B20  Freq: 4.6781e-07
941   	movdl   XMM6, RBX	# spill
945   	movl    RDI, RBP	# spill
945
947   B105: #	N1838 &lt;- B104 B37  Freq: 2.47175e-05
947   	movss   [rsp + #0], XMM6	# spill
94c   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
95e   	movl    [rsp + #16], RDI	# spill
962   	movsd   [rsp + #24], XMM3	# spill
968   	movl    [rsp + #20], RDI	# spill
96c   	movq    [rsp + #48], R9	# spill
971   	movl    R11, [rsp + #64]	# spill
976   	movl    [rsp + #44], R11	# spill
97b   	movq    [rsp + #64], R13	# spill
980   	movq    [rsp + #72], RCX	# spill
985   	movq    [rsp + #88], R14	# spill
98a   	movl    RSI, #-155	# int
98f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #88 L[1]=rsp + #16 STK[0]=rsp + #16 STK[1]=rsp + #40
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #88 L[1]=rsp + #16 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #64 L[1]=rsp + #72 L[2]=rsp + #20 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #48 L[1]=rsp + #72 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #24 L[5]=rsp + #44 L[6]=rsp + #4
        # OopMap{[24]=Oop [48]=Oop [64]=Oop [72]=Oop [88]=Oop off=2452}
994   	int3	# ShouldNotReachHere
994
999   B106: #	B107 &lt;- B22  Freq: 4.67809e-07
999   	movdl   XMM6, RBX	# spill
99d   	movl    RDI, RBP	# spill
99d
99f   B107: #	N1838 &lt;- B106 B39  Freq: 2.47175e-05
99f   	movss   [rsp + #0], XMM6	# spill
9a4   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
9b6   	movl    [rsp + #16], RDI	# spill
9ba   	movsd   [rsp + #24], XMM3	# spill
9c0   	movl    [rsp + #20], RDI	# spill
9c4   	movq    [rsp + #32], R9	# spill
9c9   	movl    R10, [rsp + #64]	# spill
9ce   	movl    [rsp + #48], R10	# spill
9d3   	movq    [rsp + #56], R13	# spill
9d8   	movq    [rsp + #64], RCX	# spill
9dd   	movq    [rsp + #72], R14	# spill
9e2   	movss   [rsp + #80], XMM1	# spill
9e8   	movss   [rsp + #84], XMM1	# spill
9ee   	movl    RSI, #-155	# int
9f3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #84 STK[0]=rsp + #80 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #72 L[1]=rsp + #16 L[2]=rsp + #80 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #56 L[1]=rsp + #64 L[2]=rsp + #20 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #32 L[1]=rsp + #64 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #24 L[5]=rsp + #48 L[6]=rsp + #4
        # OopMap{[24]=Oop [32]=Oop [56]=Oop [64]=Oop [72]=Oop off=2552}
9f8   	int3	# ShouldNotReachHere
9f8
9fd   B108: #	B109 &lt;- B23  Freq: 4.67809e-07
9fd   	movdl   XMM6, RBX	# spill
a01   	movl    RDI, RBP	# spill
a01
a03   B109: #	N1838 &lt;- B108 B40  Freq: 2.47175e-05
a03   	movss   [rsp + #0], XMM6	# spill
a08   	movsd   [rsp + #8], XMM3	# spill
a0e   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
a20   	movl    [rsp + #16], RDI	# spill
a24   	movq    [rsp + #24], R9	# spill
a29   	movl    R11, [rsp + #64]	# spill
a2e   	movl    [rsp + #20], R11	# spill
a33   	movq    [rsp + #40], R13	# spill
a38   	movq    [rsp + #48], RCX	# spill
a3d   	movq    [rsp + #56], R14	# spill
a42   	movss   [rsp + #68], XMM1	# spill
a48   	movss   [rsp + #72], XMM1	# spill
a4e   	movl    RSI, #-155	# int
a53   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #72 STK[0]=rsp + #68 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #16 L[3]=rsp + #56 L[4]=rsp + #68
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #24 L[1]=rsp + #48 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #20 L[6]=rsp + #4
        # OopMap{[8]=Oop [24]=Oop [40]=Oop [48]=Oop [56]=Oop off=2648}
a58   	int3	# ShouldNotReachHere
a58
a5d   B110: #	B111 &lt;- B24  Freq: 4.67809e-07
a5d   	movdl   XMM6, RBX	# spill
a61   	movl    RDI, RBP	# spill
a61
a63   B111: #	N1838 &lt;- B110 B41  Freq: 2.47175e-05
a63   	movss   [rsp + #0], XMM6	# spill
a68   	movsd   [rsp + #8], XMM3	# spill
a6e   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
a80   	movl    [rsp + #16], RDI	# spill
a84   	movq    [rsp + #24], R9	# spill
a89   	movl    R10, [rsp + #64]	# spill
a8e   	movl    [rsp + #20], R10	# spill
a93   	movq    [rsp + #40], R13	# spill
a98   	movq    [rsp + #48], RCX	# spill
a9d   	movq    [rsp + #56], R14	# spill
aa2   	movss   [rsp + #68], XMM1	# spill
aa8   	movss   [rsp + #72], XMM1	# spill
aae   	movl    RSI, #-155	# int
ab3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #72 STK[0]=rsp + #68 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #16 L[3]=rsp + #56 L[4]=rsp + #68
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #24 L[1]=rsp + #48 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #20 L[6]=rsp + #4
        # OopMap{[8]=Oop [24]=Oop [40]=Oop [48]=Oop [56]=Oop off=2744}
ab8   	int3	# ShouldNotReachHere
ab8
abd   B112: #	B113 &lt;- B25  Freq: 4.67809e-07
abd   	movdl   XMM6, RBX	# spill
ac1   	movl    RDI, RBP	# spill
ac1
ac3   B113: #	N1838 &lt;- B112 B42  Freq: 2.47174e-05
ac3   	movl    RSI, #-155	# int
ac8   	movss   [rsp + #0], XMM6	# spill
acd   	movsd   [rsp + #8], XMM3	# spill
ad3   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
ae5   	movl    [rsp + #16], RDI	# spill
ae9   	movq    [rsp + #24], R9	# spill
aee   	movl    R11, [rsp + #64]	# spill
af3   	movl    [rsp + #20], R11	# spill
af8   	movq    [rsp + #40], R13	# spill
afd   	movq    [rsp + #48], RCX	# spill
b02   	movq    [rsp + #56], R14	# spill
b07   	movss   [rsp + #68], XMM1	# spill
b0d   	movl    [rsp + #72], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
b13   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #68 STK[0]=rsp + #72 STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #16 L[3]=rsp + #56 L[4]=rsp + #68
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #24 L[1]=rsp + #48 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #20 L[6]=rsp + #4
        # OopMap{[8]=Oop [24]=Oop [40]=Oop [48]=Oop [56]=Oop off=2840}
b18   	int3	# ShouldNotReachHere
b18
b1d   B114: #	B115 &lt;- B26  Freq: 4.67808e-07
b1d   	movdl   XMM6, RBX	# spill
b21   	movl    RDI, RBP	# spill
b21
b23   B115: #	N1838 &lt;- B114 B43  Freq: 2.47174e-05
b23   	movss   [rsp + #0], XMM6	# spill
b28   	movsd   [rsp + #8], XMM3	# spill
b2e   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
b40   	movl    [rsp + #16], RDI	# spill
b44   	movq    [rsp + #24], R9	# spill
b49   	movl    R11, [rsp + #64]	# spill
b4e   	movl    [rsp + #20], R11	# spill
b53   	movq    [rsp + #40], R13	# spill
b58   	movq    [rsp + #48], RCX	# spill
b5d   	movq    [rsp + #56], R14	# spill
b62   	movss   [rsp + #68], XMM1	# spill
b68   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
b6f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #68 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #16 L[3]=rsp + #56 L[4]=rsp + #68
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #24 L[1]=rsp + #48 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #20 L[6]=rsp + #4
        # OopMap{[8]=Oop [24]=Oop [40]=Oop [48]=Oop [56]=Oop off=2932}
b74   	int3	# ShouldNotReachHere
b74
b79   B116: #	B117 &lt;- B31  Freq: 4.67806e-07
b79   	movdl   XMM6, RBX	# spill
b7d   	movl    R11, RDI	# spill
b80   	movl    RDI, RBP	# spill
b82   	movl    RBP, R11	# spill
b82
b85   B117: #	N1838 &lt;- B116 B44  Freq: 2.47174e-05
b85   	movl    [rsp + #0], RDI	# spill
b88   	movss   [rsp + #4], XMM6	# spill
b8e   	movsd   [rsp + #8], XMM3	# spill
b94   	movq    [rsp + #24], R9	# spill
b99   	movq    [rsp + #32], RCX	# spill
b9e   	movl    [rsp + #40], RDX	# spill
ba2   	movl    RSI, #-155	# int
ba7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:94  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #0 L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #64 L[6]=rsp + #16 STK[0]=RBP STK[1]=rsp + #40
        # OopMap{[8]=Oop [24]=Oop [32]=Oop off=2988}
bac   	int3	# ShouldNotReachHere
bac
bb1   B118: #	B121 &lt;- B11  Freq: 1.01328e-06
bb1   	movq    R9, RCX	# spill
bb4   	jmp,s   B121
bb4
bb6   B119: #	B121 &lt;- B13  Freq: 1.01327e-06
bb6   	movq    R10, R9	# spill
bb9   	movq    R9, RCX	# spill
bbc   	jmp,s   B121
bbc
bbe   B120: #	B121 &lt;- B12  Freq: 9.99996e-07
bbe   	movq    R10, R9	# spill
bc1   	movq    R9, RCX	# spill
bc1
bc4   B121: #	N1838 &lt;- B119 B10 B118 B120  Freq: 4.03982e-06
bc4   	movl    [rsp + #0], RBX	# spill
bc7   	movq    [rsp + #8], R14	# spill
bcc   	movl    [rsp + #4], R13	# spill
bd1   	movl    RSI, #-122	# int
bd6   	movq    [rsp + #16], R10	# spill
bdb   	movq    [rsp + #24], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
be3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:61  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #64 L[6]=rsp + #4
        # OopMap{[8]=Oop [16]=Oop [24]=Oop off=3048}
be8   	int3	# ShouldNotReachHere
be8
bed   B122: #	B123 &lt;- B2  Freq: 9.99e-07
bed   	movq    R8, [rsp + #0]	# spill
bed
bf1   B123: #	N1838 &lt;- B122 B5 B86  Freq: 2.16783e-06
bf1   	movl    RSI, #-99	# int
bf6   	movl    [rsp + #0], RBX	# spill
bf9   	movq    [rsp + #8], R14	# spill
bfe   	movl    [rsp + #4], R13	# spill
c03   	movq    [rsp + #16], R11	# spill
c08   	movq    [rsp + #24], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
c0f   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:61  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #64 L[6]=rsp + #4
        # OopMap{[8]=Oop [16]=Oop [24]=Oop off=3092}
c14   	int3	# ShouldNotReachHere
c14
c19   B124: #	N1838 &lt;- B53 B50 B51 B52  Freq: 3.95174e-06
c19   	movl    RBP, RDI	# spill
c1b   	movss   [rsp + #0], XMM6	# spill
c20   	movsd   [rsp + #8], XMM3	# spill
c26   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
c38   	movsd   [rsp + #16], XMM0	# spill
c3e   	movsd   [rsp + #24], XMM1	# spill
c44   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
c4b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:133  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #64 L[6]=rsp + #4
        # OopMap{[8]=Oop [16]=Oop [24]=Oop off=3152}
c50   	int3	# ShouldNotReachHere
c50
c55   B125: #	N1838 &lt;- B54  Freq: 9.81416e-07
c55   	movl    RBP, RDI	# spill
c57   	movss   [rsp + #0], XMM6	# spill
c5c   	movsd   [rsp + #8], XMM3	# spill
c62   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
c74   	movsd   [rsp + #16], XMM0	# spill
c7a   	movsd   [rsp + #24], XMM1	# spill
      	nop 	# 3 bytes pad for loops and calls
c83   	call,static  wrapper for: uncommon_trap(reason=&apos;loop_limit_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:133  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #64 L[6]=rsp + #4
        # OopMap{[8]=Oop [16]=Oop [24]=Oop off=3208}
c88   	int3	# ShouldNotReachHere
c88
c8d   B126: #	N1838 &lt;- B17  Freq: 9.81071e-07
c8d   	movl    RSI, #-34	# int
c92   	movl    [rsp + #0], RBX	# spill
c95   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
ca7   	movq    [rsp + #24], R14	# spill
cac   	movq    [rsp + #32], R14	# spill
cb1   	movq    [rsp + #56], R9	# spill
cb6   	movl    R10, [rsp + #64]	# spill
cbb   	movl    [rsp + #52], R10	# spill
cc0   	movq    [rsp + #64], R8	# spill
cc5   	movq    [rsp + #80], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
ccb   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #24 L[1]=RBP L[2]=_ L[3]=_ STK[0]=rsp + #24 STK[1]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #64 L[1]=rsp + #80 L[2]=RBP L[3]=rsp + #32 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #56 L[1]=rsp + #80 L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #24 L[5]=rsp + #52 L[6]=rsp + #4
        # OopMap{[24]=Oop [32]=Oop [56]=Oop [64]=Oop [80]=Oop off=3280}
cd0   	int3	# ShouldNotReachHere
cd0
cd5   B127: #	N1838 &lt;- B28  Freq: 9.81064e-07
cd5   	movl    [rsp + #0], RBX	# spill
cd8   	movsd   [rsp + #8], XMM3	# spill
cde   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
cf0   	movq    [rsp + #16], R9	# spill
cf5   	movss   [rsp + #36], XMM0	# spill
cfb   	movq    [rsp + #40], RCX	# spill
d00   	movl    [rsp + #48], RDX	# spill
d04   	movq    [rsp + #56], R14	# spill
d09   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
d0f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #36 STK[1]=rsp + #40 STK[2]=rsp + #48 STK[3]=rsp + #56
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #16 L[1]=rsp + #40 L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #64 L[6]=rsp + #4
        # OopMap{[8]=Oop [16]=Oop [36]=NarrowOop [40]=Oop [56]=Oop off=3348}
d14   	int3	# ShouldNotReachHere
d14
d19   B128: #	N1838 &lt;- B30  Freq: 9.81062e-07
d19   	movl    [rsp + #0], RBX	# spill
d1c   	movsd   [rsp + #8], XMM3	# spill
d22   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
d34   	movq    [rsp + #16], R9	# spill
d39   	movq    [rsp + #40], RCX	# spill
d3e   	movss   [rsp + #36], XMM0	# spill
d44   	movss   [rsp + #48], XMM4	# spill
      	nop 	# 1 bytes pad for loops and calls
d4b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=rsp + #40 L[2]=_ L[3]=_ STK[0]=rsp + #36 STK[1]=#0 STK[2]=rsp + #48
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #16 L[1]=rsp + #40 L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #64 L[6]=rsp + #4
        # OopMap{[8]=Oop [16]=Oop [36]=NarrowOop [40]=Oop off=3408}
d50   	int3	# ShouldNotReachHere
d50
d55   B129: #	B130 &lt;- B74  Freq: 4.75165e-13
d55   	movl    RBP, RAX	# spill
d55
d57   B130: #	N1838 &lt;- B82 B129  Freq: 4.8337e-13
d57   	movss   [rsp + #4], XMM4	# spill
d5d   	movsd   [rsp + #8], XMM3	# spill
d63   	movl    [rsp + #20], RDI	# spill
d67   	movq    [rsp + #24], RCX	# spill
d6c   	movss   [rsp + #32], XMM5	# spill
d72   	movsd   [rsp + #48], XMM0	# spill
d78   	movl    R11, [rsp + #64]	# spill
d7d   	movl    [rsp + #44], R11	# spill
d82   	movsd   [rsp + #64], XMM2	# spill
d88   	movsd   [rsp + #72], XMM1	# spill
      	nop 	# 1 bytes pad for loops and calls
d8f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:18  L[0]=rsp + #64 L[1]=rsp + #72 L[2]=rsp + #20 L[3]=rsp + #24 L[4]=rsp + #32 L[5]=rsp + #36 L[6]=RBP STK[0]=RBP STK[1]=rsp + #36
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #48 L[1]=rsp + #72 L[2]=rsp + #20 L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #44 L[6]=rsp + #16
        # OopMap{[8]=Oop [24]=Oop [32]=NarrowOop [48]=Oop [64]=Oop [72]=Oop off=3476}
d94   	int3	# ShouldNotReachHere
d94
d99   B131: #	N1838 &lt;- B62  Freq: 5.3775e-05
d99   	movl    RBP, RBX	# spill
d9b   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
da3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL STK[2]=RBP
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3496}
da8   	int3	# ShouldNotReachHere
da8
dad   B132: #	N1838 &lt;- B65  Freq: 5.37749e-05
dad   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
db3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3512}
db8   	int3	# ShouldNotReachHere
db8
dbd   B133: #	N1838 &lt;- B16  Freq: 9.941e-07
dbd   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
dc3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3528}
dc8   	int3	# ShouldNotReachHere
dc8
dcd   B134: #	N1838 &lt;- B19  Freq: 9.94097e-07
      	nop 	# 2 bytes pad for loops and calls
dcf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3540}
dd4   	int3	# ShouldNotReachHere
dd4
dd9   B135: #	N1838 &lt;- B27  Freq: 9.94093e-07
dd9   	movq    RBP, RCX	# spill
ddc   	movl    [rsp + #0], RDX	# spill
ddf   	movq    [rsp + #8], R14	# spill
de4   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
deb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop off=3568}
df0   	int3	# ShouldNotReachHere
df0
df5   B136: #	N1838 &lt;- B29  Freq: 9.94091e-07
df5   	movl    RSI, #-10	# int
dfa   	movdl   RBP, XMM4	# spill
      	nop 	# 1 bytes pad for loops and calls
dff   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3588}
e04   	int3	# ShouldNotReachHere
e04

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='352'>
{method}
 - this oop:          0x00007f375594c2f0
 - method holder:     &apos;java/util/regex/Pattern$Slice&apos;
 - constants:         0x00007f375594bed8 constant pool [62] {0x00007f375594bed8} for &apos;java/util/regex/Pattern$Slice&apos; cache=0x00007f3755b1b878
 - access:            0xc1000000  
 - name:              &apos;match&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z&apos;
 - max stack:         5
 - max locals:        7
 - size of params:    4
 - method size:       12
 - highest level:     4
 - vtable index:      6
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37681c7d78: 0xbbab0000 i2c: 0x00007f3758b26ce0 c2i: 0x00007f3758b26e25 c2iUV: 0x00007f3758b26df8
 - compiled entry     0x00007f3758cb5540
 - code size:         79
 - code start:        0x00007f375594c238
 - code end (excl):   0x00007f375594c287
 - method data:       0x00007f3755b42478
 - checked ex length: 0
 - linenumber start:  0x00007f375594c287
 - localvar length:   7
 - localvar start:    0x00007f375594c29a
 - compiled code: nmethod   2587  351       3       java.util.regex.Pattern$Slice::match (79 bytes)
#
#  bool ( java/util/regex/Pattern$Slice:NotNull:exact *, java/util/regex/Matcher:exact *, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$Slice:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/CharSequence *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N931: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B66 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (272 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movdq   XMM1, R8	# spill
031   	movdq   XMM0, RDX	# spill
036   	movq    RAX, RSI	# spill
039   	movl    R9, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
03d   	movl    R8, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$SliceNode.buffer
041   	movl    RSI, #-10	# int
046   	movl    R11, #1	# int
04c   	subl    R11, RCX	# int
04f   	movl    RBX, R11	# spill
052   	sarl    RBX, #31
055   	movl    RDI, [R8 + #12 (8-bit)]	# range
059   	NullCheck R8
059
059   B2: #	B52 B3 &lt;- B1  Freq: 0.999999
059   	movl    R10, RCX	# spill
05c   	negl    R10	# int
05f   	testl   RDI, RDI
061   	jle     B52  P=0.000001 C=1565764.000000
061
067   B3: #	B67 B4 &lt;- B2  Freq: 0.999998
067   	movl    RDX, [RDX + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
06a   	NullCheck RDX
06a
06a   B4: #	B5 &lt;- B3  Freq: 0.999997
06a   	movl    [rsp + #12], RDI	# spill
06e   	movdl   XMM5, R8	# spill
073   	movdl   XMM4, R9	# spill
078   	movdq   XMM2, RAX	# spill
07d   	andl    RBX, R11	# int
080   	movl    R9, RDX	# spill
083   	subl    R9, RCX	# int
086   	addl    RBX, #2147483647	# int
08c   	cmpl    RBX, R9
08f   	movl    R8, RBX	# spill
092   	cmovlgt R8, R9	# min
096   	xorl    RDI, RDI	# int
098   	xorl    RAX, RAX	# int
09a
09a   B5: #	B17 B6 &lt;- B4 B19 	Loop: B5-B19 inner pre of N351 Freq: 1.00317
09a   	movl    R11, RDI	# spill
09d   	addl    R11, RCX	# int
0a0   	cmpl    R11, RDX
0a3   	jge     B17  P=0.018388 C=1565762.000000
0a3
0a9   B6: #	B56 B7 &lt;- B5  Freq: 0.98472
0a9   	movdl   XMM9, RAX	# spill
0ad   	movl    [rsp + #0], R10	# spill
0b1   	movl    RSI, RCX	# spill
0b3   	sarl    RSI, #31
0b6   	cmpl    RDI, [RSP + #12 (32-bit)]	# unsigned
0ba   	jnb,u  B56  P=0.000001 C=-1.000000
0ba
0c0   B7: #	B68 B8 &lt;- B6  Freq: 0.984719
0c0   	movdl   R10, XMM5	# spill
0c5   	movl    R10, [R10 + #16 + RDI &lt;&lt; #2]	# int
0ca   	movdl   XMM3, R10	# spill
0cf   	cmpl    R8, [RSP + #12 (32-bit)]
0d4   	movl    RBP, R8	# spill
0d7   	movl    R10, [rsp + #12]	# spill
0dc   	cmovlgt RBP, R10	# min
0e0   	movdq   R10, XMM1	# spill
0e5   	movl    R13, [R10 + #8 (8-bit)]	# compressed klass ptr
0e9   	NullCheck R10
0e9
0e9   B8: #	B60 B9 &lt;- B7  Freq: 0.984718
0e9   	andl    RSI, RCX	# int
0eb   	movl    R10, #-2147483647	# int
0f1   	subl    R10, RSI	# int
0f4   	cmpl    R13, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
0fb   	jne,u  B60  P=0.000001 C=-1.000000
0fb
101   B9: #	B61 B10 &lt;- B8  Freq: 0.984717
101   	movdq   RSI, XMM1	# spill
106   	# checkcastPP of RSI
106   	movdq   XMM6, RSI	# spill
10b   	cmpl    R10, [RSP + #0 (32-bit)]
10f   	movl    R13, R10	# spill
112   	movl    RSI, [rsp + #0]	# spill
115   	cmovllt R13, RSI	# max
119   	movl    RSI, #1	# int
11e   	cmpl    R13, RSI
121   	movl    RAX, #1	# int
126   	cmovllt R13, RAX	# max
12a   	testl   R11, R11
12d   	jl     B61  P=0.000000 C=7895.000000
12d
133   B10: #	B69 B11 &lt;- B9  Freq: 0.984716
133   	movdq   RSI, XMM6	# spill
138   	movl    RSI, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
13b   	movdl   XMM8, RSI	# spill
13f   	movl    RSI, #-155	# int
144   	movdl   RAX, XMM8	# spill
148   	movl    RAX, [RAX + #12 (8-bit)]	# range
14b   	NullCheck RAX
14b
14b   B11: #	B63 B12 &lt;- B10  Freq: 0.984715
14b   	movl    [rsp + #16], RAX	# spill
14f   	movl    RAX, RDI	# spill
151   	incl    RAX	# int
153   	cmpl    R11, [RSP + #16 (32-bit)]
158   	jge     B63  P=0.000000 C=7895.000000
158
15e   B12: #	B58 B13 &lt;- B11  Freq: 0.984715
15e   	movl    R14, [rsp + #16]	# spill
163   	subl    R14, RCX	# int
166   	cmpl    R11, [RSP + #16 (32-bit)]	# unsigned
16b   	jnb,u  B58  P=0.000001 C=-1.000000
16b
171   B13: #	B18 B14 &lt;- B12  Freq: 0.984714
171   	movdl   RDI, XMM8	# spill
175   	movzwl  RDI, [RDI + #16 + R11 &lt;&lt; #1]	# ushort/char
17b   	cmpl    R13, [RSP + #12 (32-bit)]
180   	movl    R11, [rsp + #12]	# spill
185   	cmovlgt R13, R11	# min
189   	movdl   R11, XMM3	# spill
18e   	cmpl    R11, RDI
191   	je,s   B18  P=0.006437 C=1536971.000000
191
193   B14: #	B15 &lt;- B47 B32 B13 B23 B38 B28  Freq: 0.981545
193   	movdl   RAX, XMM9	# spill
193
197   B15: #	N931 &lt;- B17 B14 B55  Freq: 0.999992
197   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

1a2   	ret
1a2
1a3   B16: #	B17 &lt;- B42  Freq: 2.98533e-11
1a3   	movdl   RAX, XMM9	# spill
1a3
1a7   B17: #	B15 &lt;- B16 B5  Freq: 0.0184461
1a7   	movdq   R10, XMM0	# spill
1ac   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
1b1   	jmp,s   B15
1b1
1b3   B18: #	B20 B19 &lt;- B13  Freq: 0.00633831
1b3   	cmpl    RAX, R13
1b6   	jge,s   B20	# loop end  P=0.500000 C=9893.000000
1b6
1b8   B19: #	B5 &lt;- B18  Freq: 0.00316916
1b8   	movl    RDI, RAX	# spill
1ba   	movl    R10, [rsp + #0]	# spill
1be   	movdl   RAX, XMM9	# spill
1c2   	jmp     B5
1c2
1c7   B20: #	B40 B21 &lt;- B18  Freq: 0.00316916
1c7   	cmpl    RAX, RBP
1c9   	jge     B40  P=0.000001 C=-1.000000
1c9
1cf   B21: #	B64 B22 &lt;- B20  Freq: 0.00316915
1cf   	# castII of RAX
1cf   	movl    RDI, RAX	# spill
1d1   	addl    RDI, #2	# int
1d4   	movl    R11, RCX	# spill
1d7   	addl    R11, RAX	# int
1da   	cmpl    RDI, R10
1dd   	cmovllt RDI, R10	# max
1e1   	cmpl    RDI, [RSP + #0 (32-bit)]
1e4   	movl    R10, [rsp + #0]	# spill
1e8   	cmovllt RDI, R10	# max
1ec   	cmpl    RDI, R9
1ef   	cmovlgt RDI, R9	# min
1f3   	movdl   R10, XMM5	# spill
1f8   	movl    R8, [R10 + #16 + RAX &lt;&lt; #2]	# int
1fd   	movdl   XMM3, R8	# spill
202   	cmpl    RDI, RBX
204   	cmovlgt RDI, RBX	# min
207   	cmpl    R11, [RSP + #16 (32-bit)]
20c   	jge     B64  P=0.000000 C=7895.000000
20c
212   B22: #	B59 B23 &lt;- B21  Freq: 0.00316915
212   	cmpl    R11, [RSP + #16 (32-bit)]	# unsigned
217   	jnb,u  B59  P=0.000001 C=-1.000000
217
21d   B23: #	B14 B24 &lt;- B22  Freq: 0.00316915
21d   	movdl   R8, XMM8	# spill
222   	movzwl  R10, [R8 + #16 + R11 &lt;&lt; #1]	# ushort/char
228   	incl    RAX	# int
22a   	movdl   R11, XMM3	# spill
22f   	cmpl    R11, R10
232   	jne     B14  P=0.993563 C=1536971.000000
232
238   B24: #	B40 B25 &lt;- B23  Freq: 2.03989e-05
238   	cmpl    RAX, RBP
23a   	jge     B40	# loop end  P=0.000001 C=9893.000000
23a
240   B25: #	B26 &lt;- B24  Freq: 2.03989e-05
240   	cmpl    RDI, [RSP + #12 (32-bit)]
244   	movl    R10, [rsp + #12]	# spill
249   	cmovlgt RDI, R10	# min
24d   	cmpl    R14, R9
250   	cmovlgt R14, R9	# min
250
254   B26: #	B64 B27 &lt;- B25 B29 	Loop: B26-B29 inner pre of N351 Freq: 2.04647e-05
254   	movl    R11, RAX	# spill
257   	addl    R11, RCX	# int
25a   	movdl   R8, XMM5	# spill
25f   	movl    R10, [R8 + #16 + RAX &lt;&lt; #2]	# int
264   	movdl   XMM3, R10	# spill
269   	cmpl    R11, [RSP + #16 (32-bit)]
26e   	jge     B64  P=0.000000 C=7895.000000
26e
274   B27: #	B59 B28 &lt;- B26  Freq: 2.04647e-05
274   	cmpl    R11, [RSP + #16 (32-bit)]	# unsigned
279   	jnb,u  B59  P=0.000001 C=-1.000000
279
27f   B28: #	B14 B29 &lt;- B27  Freq: 2.04647e-05
27f   	movdl   R10, XMM8	# spill
284   	movzwl  R10, [R10 + #16 + R11 &lt;&lt; #1]	# ushort/char
28a   	movdl   R8, XMM3	# spill
28f   	cmpl    R8, R10
292   	jne     B14  P=0.993563 C=1536971.000000
292
298   B29: #	B26 B30 &lt;- B28  Freq: 1.31725e-07
298   	cmpl    R14, RBX
29b   	movl    R10, R14	# spill
29e   	cmovlgt R10, RBX	# min
2a2   	cmpl    R10, [RSP + #12 (32-bit)]
2a7   	movl    R11, [rsp + #12]	# spill
2ac   	cmovlgt R10, R11	# min
2b0   	incl    RAX	# int
2b2   	cmpl    RAX, RDI
2b4   	jl,s   B26	# loop end  P=0.500000 C=9893.000000
2b4
2b6   B30: #	B34 B31 &lt;- B29  Freq: 6.58626e-08
2b6   	cmpl    RAX, R10
2b9   	jge,s   B34  P=0.000001 C=-1.000000
2b9
2bb   B31: #	B32 &lt;- B30  Freq: 6.58625e-08
2bb   	# castII of RAX
      	nop 	# 5 bytes pad for loops and calls

2c0   B32: #	B14 B33 &lt;- B31 B33 	Loop: B32-B33 inner main of N231 Freq: 6.62892e-08
2c0   	movl    R9, RAX	# spill
2c3   	addl    R9, RCX	# int
2c6   	movdl   R8, XMM5	# spill
2cb   	movl    R11, [R8 + #16 + RAX &lt;&lt; #2]	# int
2d0   	movdl   RBX, XMM8	# spill
2d4   	movzwl  R8, [RBX + #16 + R9 &lt;&lt; #1]	# ushort/char
2da   	cmpl    R11, R8
2dd   	jne     B14  P=0.993563 C=1536971.000000
2dd
2e3   B33: #	B32 B34 &lt;- B32  Freq: 4.26684e-10
2e3   	incl    RAX	# int
2e5   	cmpl    RAX, R10
2e8   	jl,s   B32	# loop end  P=0.999999 C=9893.000000
2e8
2ea   B34: #	B40 B35 &lt;- B30 B33  Freq: 6.72712e-14
2ea   	cmpl    RAX, RBP
2ec   	jge,s   B40  P=0.500000 C=-1.000000
2ec
2ee   B35: #	B36 &lt;- B34  Freq: 3.36356e-14
2ee   	# castII of RAX
      	nop 	# 2 bytes pad for loops and calls

2f0   B36: #	B64 B37 &lt;- B35 B39 	Loop: B36-B39 inner post of N351 Freq: 3.37442e-14
2f0   	movl    R11, RAX	# spill
2f3   	addl    R11, RCX	# int
2f6   	movdl   R8, XMM5	# spill
2fb   	movl    R10, [R8 + #16 + RAX &lt;&lt; #2]	# int
300   	movdl   XMM3, R10	# spill
305   	cmpl    R11, [RSP + #16 (32-bit)]
30a   	jge     B64  P=0.000000 C=7895.000000
30a
310   B37: #	B59 B38 &lt;- B36  Freq: 3.37442e-14
310   	cmpl    R11, [RSP + #16 (32-bit)]	# unsigned
315   	jnb,u  B59  P=0.000001 C=-1.000000
315
31b   B38: #	B14 B39 &lt;- B37  Freq: 3.37442e-14
31b   	incl    RAX	# int
31d   	movdl   R10, XMM8	# spill
322   	movzwl  R10, [R10 + #16 + R11 &lt;&lt; #1]	# ushort/char
328   	movdl   R8, XMM3	# spill
32d   	cmpl    R8, R10
330   	jne     B14  P=0.993563 C=1536971.000000
330
336   B39: #	B36 B40 &lt;- B38  Freq: 2.17201e-16
336   	cmpl    RAX, RBP
338   	jl,s   B36	# loop end  P=0.500000 C=9893.000000
338
33a   B40: #	B51 B41 &lt;- B20 B24 B39 B34  Freq: 3.23681e-09
33a   	cmpl    RAX, [RSP + #12 (32-bit)]
33e   	jge,s   B51  P=0.500000 C=-1.000000
33e
340   B41: #	B42 &lt;- B40  Freq: 1.6184e-09
340   	# castII of RAX
340
340   B42: #	B16 B43 &lt;- B41 B49 	Loop: B42-B49 inner post of N351 Freq: 1.62353e-09
340   	movl    R11, RAX	# spill
343   	addl    R11, RCX	# int
346   	cmpl    R11, RDX
349   	jge     B16  P=0.018388 C=1565762.000000
349
34f   B43: #	B57 B44 &lt;- B42  Freq: 1.59368e-09
34f   	cmpl    RAX, [RSP + #12 (32-bit)]	# unsigned
353   	jnb,u  B57  P=0.000001 C=-1.000000
353
359   B44: #	B62 B45 &lt;- B43  Freq: 1.59368e-09
359   	movdl   R10, XMM5	# spill
35e   	movl    R10, [R10 + #16 + RAX &lt;&lt; #2]	# int
363   	movdl   XMM3, R10	# spill
368   	testl   R11, R11
36b   	jl     B62  P=0.000000 C=7895.000000
36b
371   B45: #	B64 B46 &lt;- B44  Freq: 1.59368e-09
371   	cmpl    R11, [RSP + #16 (32-bit)]
376   	jge     B64  P=0.000000 C=7895.000000
376
37c   B46: #	B59 B47 &lt;- B45  Freq: 1.59368e-09
37c   	movl    R10, RAX	# spill
37f   	incl    R10	# int
382   	cmpl    R11, [RSP + #16 (32-bit)]	# unsigned
387   	jnb,u  B59  P=0.000001 C=-1.000000
387
38d   B47: #	B14 B48 &lt;- B46  Freq: 1.59367e-09
38d   	movdl   R8, XMM8	# spill
392   	movzwl  R8, [R8 + #16 + R11 &lt;&lt; #1]	# ushort/char
398   	movdl   R9, XMM3	# spill
39d   	cmpl    R9, R8
3a0   	jne     B14  P=0.993563 C=1536971.000000
3a0
3a6   B48: #	B50 B49 &lt;- B47  Freq: 1.0258e-11
3a6   	cmpl    R10, [RSP + #12 (32-bit)]
3ab   	jge,s   B50	# loop end  P=0.500000 C=9893.000000
3ab
3ad   B49: #	B42 &lt;- B48  Freq: 5.12901e-12
3ad   	movl    RAX, R10	# spill
3b0   	jmp,s   B42
3b0
3b2   B50: #	B52 &lt;- B48  Freq: 5.12901e-12
3b2   	movdl   R9, XMM4	# spill
3b7   	movl    RDI, [rsp + #12]	# spill
3bb   	jmp,s   B52
3bb
3bd   B51: #	B52 &lt;- B40  Freq: 1.6184e-09
3bd   	movdl   R9, XMM4	# spill
3c2   	movl    RDI, [rsp + #12]	# spill
3c2
3c6   B52: #	B71 B53 &lt;- B51 B2 B50  Freq: 1.27895e-06
3c6   	addl    RCX, RDI	# int
3c8   	decode_heap_oop_not_null RSI,R9
3cb   	movl    R10, [R9 + #8 (8-bit)]	# compressed klass ptr
3cf   	NullCheck R9
3cf
3cf   B53: #	B65 B54 &lt;- B52  Freq: 1.27895e-06
3cf   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Curly: 0x00007f3724090f30:Constant:exact *	# compressed klass ptr
3d6   	jne,u  B65  P=0.000001 C=-1.000000
3d6
3dc   B54: #	B70 B55 &lt;- B53  Freq: 1.27895e-06
3dc   	# checkcastPP of RSI
3dc   	movdq   RDX, XMM0	# spill
3e1   	movdq   R8, XMM1	# spill
      	nop 	# 1 bytes pad for loops and calls
3e7   	call,static  java.util.regex.Pattern$Curly::match
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=1004}
3ec
3ec   B55: #	B15 &lt;- B54  Freq: 1.27893e-06
        # Block is sole successor of call
3ec   	jmp     B15
3ec
3f1   B56: #	B57 &lt;- B6  Freq: 9.97796e-07
3f1   	movl    RAX, RDI	# spill
3f1
3f3   B57: #	N931 &lt;- B43 B56  Freq: 9.97796e-07
3f3   	movl    RBP, RCX	# spill
3f5   	movl    [rsp + #4], RAX	# spill
3f9   	movsd   [rsp + #16], XMM2	# spill
3ff   	movsd   [rsp + #24], XMM0	# spill
405   	movsd   [rsp + #32], XMM1	# spill
40b   	movss   [rsp + #40], XMM5	# spill
411   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
417   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:43  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #40 L[5]=rsp + #12 L[6]=rsp + #4 STK[0]=rsp + #40 STK[1]=rsp + #4
        # OopMap{[16]=Oop [24]=Oop [32]=Oop [40]=NarrowOop off=1052}
41c   	int3	# ShouldNotReachHere
41c
421   B58: #	B59 &lt;- B12  Freq: 9.97791e-07
421   	movl    RAX, RDI	# spill
421
423   B59: #	N931 &lt;- B46 B58 B22 B37 B27  Freq: 1.00102e-06
423   	movl    RBP, RCX	# spill
425   	movl    [rsp + #0], RAX	# spill
428   	movl    [rsp + #4], R11	# spill
42d   	movsd   [rsp + #16], XMM2	# spill
433   	movsd   [rsp + #24], XMM0	# spill
439   	movsd   [rsp + #32], XMM6	# spill
43f   	movss   [rsp + #8], XMM5	# spill
445   	movss   [rsp + #40], XMM3	# spill
44b   	movss   [rsp + #44], XMM8	# spill
451   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
457   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #44 STK[1]=rsp + #4
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #0 STK[0]=rsp + #40
        # OopMap{[8]=NarrowOop [16]=Oop [24]=Oop [32]=Oop [44]=NarrowOop off=1116}
45c   	int3	# ShouldNotReachHere
45c
461   B60: #	N931 &lt;- B8  Freq: 9.84718e-07
461   	movl    RBP, RCX	# spill
463   	movl    [rsp + #0], RDI	# spill
466   	movl    [rsp + #4], R11	# spill
46b   	movsd   [rsp + #16], XMM2	# spill
471   	movsd   [rsp + #24], XMM0	# spill
477   	movss   [rsp + #8], XMM5	# spill
47d   	movss   [rsp + #40], XMM3	# spill
483   	movsd   [rsp + #48], XMM1	# spill
489   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
48f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #0 STK[0]=rsp + #40 STK[1]=rsp + #48 STK[2]=rsp + #4
        # OopMap{[8]=NarrowOop [16]=Oop [24]=Oop [48]=Oop off=1172}
494   	int3	# ShouldNotReachHere
494
499   B61: #	B62 &lt;- B9  Freq: 4.92358e-07
499   	movl    RAX, RDI	# spill
499
49b   B62: #	N931 &lt;- B44 B61  Freq: 4.92358e-07
49b   	movl    RBP, RCX	# spill
49d   	movl    [rsp + #0], RAX	# spill
4a0   	movl    [rsp + #8], R11	# spill
4a5   	movsd   [rsp + #16], XMM2	# spill
4ab   	movsd   [rsp + #24], XMM0	# spill
4b1   	movss   [rsp + #40], XMM5	# spill
4b7   	movss   [rsp + #44], XMM3	# spill
4bd   	movsd   [rsp + #48], XMM6	# spill
4c3   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
4cb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #48 L[1]=rsp + #8 STK[0]=rsp + #8
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #48 L[4]=rsp + #40 L[5]=rsp + #12 L[6]=rsp + #0 STK[0]=rsp + #44
        # OopMap{[16]=Oop [24]=Oop [40]=NarrowOop [48]=Oop off=1232}
4d0   	int3	# ShouldNotReachHere
4d0
4d5   B63: #	B64 &lt;- B11  Freq: 4.69549e-07
4d5   	movl    RAX, RDI	# spill
4d5
4d7   B64: #	N931 &lt;- B45 B63 B21 B36 B26  Freq: 4.7107e-07
4d7   	movl    RBP, RCX	# spill
4d9   	movl    [rsp + #0], RAX	# spill
4dc   	movl    [rsp + #8], R11	# spill
4e1   	movsd   [rsp + #24], XMM2	# spill
4e7   	movsd   [rsp + #32], XMM0	# spill
4ed   	movss   [rsp + #20], XMM5	# spill
4f3   	movss   [rsp + #48], XMM3	# spill
4f9   	movsd   [rsp + #56], XMM6	# spill
4ff   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #56 L[1]=rsp + #8 STK[0]=rsp + #8 STK[1]=rsp + #16
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #56 L[4]=rsp + #20 L[5]=rsp + #12 L[6]=rsp + #0 STK[0]=rsp + #48
        # OopMap{[20]=NarrowOop [24]=Oop [32]=Oop [56]=Oop off=1284}
504   	int3	# ShouldNotReachHere
504
509   B65: #	N931 &lt;- B53  Freq: 1.27895e-12
509   	movl    RBP, RCX	# spill
50b   	movl    [rsp + #0], R9	# spill
50f   	movsd   [rsp + #8], XMM0	# spill
515   	movsd   [rsp + #16], XMM1	# spill
51b   	movl    RSI, #-34	# int
      	nop 	# 3 bytes pad for loops and calls
523   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #0 STK[1]=rsp + #8 STK[2]=RBP STK[3]=rsp + #16
        # OopMap{[0]=NarrowOop [8]=Oop [16]=Oop off=1320}
528   	int3	# ShouldNotReachHere
528
52d   B66: #	N931 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
52f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=1332}
534   	int3	# ShouldNotReachHere
534
539   B67: #	N931 &lt;- B3  Freq: 1.01328e-06
539   	movl    RSI, #-122	# int
53e   	movl    RBP, RCX	# spill
540   	movq    [rsp + #0], RAX	# spill
544   	movsd   [rsp + #8], XMM0	# spill
54a   	movsd   [rsp + #16], XMM1	# spill
550   	movl    [rsp + #24], R8	# spill
555   	movl    [rsp + #28], RDI	# spill
      	nop 	# 2 bytes pad for loops and calls
55b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:21  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=rsp + #16 L[4]=rsp + #24 L[5]=rsp + #28 L[6]=#0
        # OopMap{[0]=Oop [8]=Oop [16]=Oop [24]=NarrowOop off=1376}
560   	int3	# ShouldNotReachHere
560
565   B68: #	N931 &lt;- B7  Freq: 9.97795e-07
565   	movl    RBP, R11	# spill
568   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
56f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL STK[2]=RBP
        # OopMap{off=1396}
574   	int3	# ShouldNotReachHere
574
579   B69: #	N931 &lt;- B10  Freq: 9.97792e-07
579   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
57f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_
        # OopMap{off=1412}
584   	int3	# ShouldNotReachHere
584
589   B70: #	N931 &lt;- B54  Freq: 1.27895e-11
589   	# exception oop is in rax; no code emitted
589   	movq    RSI, RAX	# spill
58c   	addq    rsp, 80	# Destroy frame
	popq   rbp

591   	jmp     rethrow_stub
591
596   B71: #	N931 &lt;- B52  Freq: 1.29594e-12
596   	movl    RBP, RCX	# spill
598   	movl    RSI, #-10	# int
59d   	movsd   [rsp + #0], XMM0	# spill
5a2   	movsd   [rsp + #8], XMM1	# spill
      	nop 	# 3 bytes pad for loops and calls
5ab   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=rsp + #0 STK[2]=RBP STK[3]=rsp + #8
        # OopMap{[0]=Oop [8]=Oop off=1456}
5b0   	int3	# ShouldNotReachHere
5b0

</opto_assembly>
<writer thread='139875533833984'/>
<opto_assembly compile_id='355'>
{method}
 - this oop:          0x00007f37559abd18
 - method holder:     &apos;java/util/regex/Matcher&apos;
 - constants:         0x00007f37559a98c8 constant pool [380] {0x00007f37559a98c8} for &apos;java/util/regex/Matcher&apos; cache=0x00007f37559ad488
 - access:            0xc1000001  public 
 - name:              &apos;find&apos;
 - signature:         &apos;()Z&apos;
 - max stack:         4
 - max locals:        3
 - size of params:    1
 - method size:       12
 - highest level:     4
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef680: 0xb0000000 i2c: 0x00007f3758b11620 c2i: 0x00007f3758b1175a c2iUV: 0x00007f3758b1172d
 - compiled entry     0x00007f3758b1175a
 - code size:         69
 - code start:        0x00007f37559abc98
 - code end (excl):   0x00007f37559abcdd
 - method data:       0x00007f3755b221d8
 - checked ex length: 0
 - linenumber start:  0x00007f37559abcdd
 - localvar length:   3
 - localvar start:    0x00007f37559abcf2
#
#  bool ( java/util/regex/Matcher:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Matcher:NotNull:exact *
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1274: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B81 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (504 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movq    R10, RSI	# spill
02f   	movl    RBP, [RSI + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
032   	movl    R13, [RSI + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
036   	movl    RSI, #-155	# int
03b   	cmpl    R13, RBP
03e   	je     B81  P=0.000000 C=13235.000000
03e
044   B2: #	B82 B3 &lt;- B1  Freq: 1
044   	movl    R11, [R10 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
048   	movl    R8, [R10 + #12 (8-bit)]	# int ! Field: java/util/regex/Matcher.from
04c   	movl    R14, [R10 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
050   	cmpl    R13, R8
053   	jl     B82  P=0.000000 C=13235.000000
053
059   B3: #	B83 B4 &lt;- B2  Freq: 0.999999
059   	cmpl    R13, R14
05c   	jg     B83  P=0.000000 C=13235.000000
05c
062   B4: #	B84 B5 &lt;- B3  Freq: 0.999999
062   	movl    [rsp + #16], R11	# spill
067   	movq    [rsp + #32], R10	# spill
06c   	movl    R11, [R10 + #36 (8-bit)]	# int ! Field: java/util/regex/Matcher.oldLast
070   	movb    [R10 + #44 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/util/regex/Matcher.hitEnd
074   	movl    R8, [rsp + #16]	# spill
079   	decode_heap_oop_not_null RBX,R8
07c   	movb    [R10 + #45 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/util/regex/Matcher.requireEnd
080   	leaq    R10, [R8 + #16 (8-bit)]	# ptr off8narrow
084   	movq    [rsp + #0], R10	# spill
088   	testl   R13, R13
08b   	jl     B84  P=0.000000 C=1707.000000
08b
091   B5: #	B56 B6 &lt;- B4  Freq: 0.999998
091   	movq    R10, [rsp + #32]	# spill
096   	movl    [R10 + #28 (8-bit)], R13	# int ! Field: java/util/regex/Matcher.first
09a   	testl   R11, R11
09d   	jl     B56  P=0.065612 C=1707.000000
09d
0a3   B6: #	B90 B7 &lt;- B5 B56  Freq: 0.999998
0a3   	movl    [R10 + #36 (8-bit)], R11	# int ! Field: java/util/regex/Matcher.oldLast
0a7   	movl    R11, R8	# spill
0aa   	movl    RBP, [R11 + #12 (8-bit)]	# range
0ae   	NullCheck R11
0ae
0ae   B7: #	B11 B8 &lt;- B6  Freq: 0.999997
0ae   	movl    R10, RBP	# spill
0b1   	decl    R10	# int
0b4   	testl   RBP, RBP
0b6   	jle,s   B11  P=0.047646 C=35848.000000
0b6
0b8   B8: #	B78 B9 &lt;- B7  Freq: 0.952352
0b8   	testl  RBP, RBP	# unsigned
0ba   	jbe,u  B78  P=0.000001 C=-1.000000
0ba
0c0   B9: #	B78 B10 &lt;- B8  Freq: 0.952351
0c0   	movslq  RDX, RBP	# i2l
0c3   	cmpl    R10, RBP	# unsigned
0c6   	jnb,u  B78  P=0.000001 C=-1.000000
0c6
0cc   B10: #	B11 &lt;- B9  Freq: 0.95235
0cc   	movq    RDI, [rsp + #0]	# spill
0d0   	movl    RSI, #-1	# int
0d5   	call_leaf_nofp,runtime  arrayof_jint_fill
        No JVM State Info
        # 
0e2
0e2   B11: #	B91 B12 &lt;- B10 B7  Freq: 0.999995
0e2   	movq    R10, [rsp + #32]	# spill
0e7   	movl    R10, [R10 + #48 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.parentPattern
0eb   	movq    R11, [rsp + #32]	# spill
0f0   	movl    [R11 + #24 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/util/regex/Matcher.acceptMode
0f4   	movl    R8, [R11 + #56 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.text
0f8   	movdl   XMM1, R8	# spill
0fd   	movl    R11, [R10 + #44 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern.root
101   	NullCheck R10
101
101   B12: #	B92 B13 &lt;- B11  Freq: 0.999994
101   	movl    RSI, #-10	# int
106   	movl    R8, [R11 + #8 (8-bit)]	# compressed klass ptr
10a   	NullCheck R11
10a
10a   B13: #	B57 B14 &lt;- B12  Freq: 0.999993
10a   	decode_heap_oop_not_null R10,R11
10d   	cmpl    R8, narrowklass: precise klass java/util/regex/Pattern$BnM: 0x00007f3724188d20:Constant:exact *	# compressed klass ptr
114   	jne,u  B57  P=0.002921 C=-1.000000
114
11a   B14: #	B93 B15 &lt;- B13  Freq: 0.997073
11a   	# checkcastPP of R10
11a   	movdq   XMM0, R10	# spill
11f   	movl    R10, [R10 + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.buffer
123   	movl    R11, [R10 + #12 (8-bit)]	# range
127   	NullCheck R10
127
127   B15: #	B23 &lt;- B14  Freq: 0.997072
127   	movl    [rsp + #8], R11	# spill
12c   	movdl   XMM8, RBP	# spill
130   	movdq   XMM6, RBX	# spill
135   	decode_heap_oop_not_null R11,R10
138   	movdq   XMM10, R11	# spill
13d   	movdl   XMM9, R10	# spill
142   	movl    R10, [rsp + #8]	# spill
147   	addl    R10, #-2	# int
14b   	movdl   XMM12, R10	# spill
150   	movl    R9, [rsp + #8]	# spill
155   	decl    R9	# int
158   	movdl   R11, XMM1	# spill
15d   	decode_heap_oop_not_null R10,R11
160   	movdq   XMM5, R10	# spill
165   	movdq   R10, XMM0	# spill
16a   	movl    R10, [R10 + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
16e   	movdl   XMM2, R10	# spill
173   	movl    RBX, R14	# spill
176   	subl    RBX, [RSP + #8 (32-bit)]	# int
17a   	movl    [rsp + #12], RBX	# spill
17e   	movdq   R10, XMM0	# spill
183   	movl    R10, [R10 + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
187   	movdl   XMM4, R10	# spill
18c   	movl    R10, #1	# int
192   	movdl   XMM7, R10	# spill
197   	jmp,s   B23
      	nop 	# 7 bytes pad for loops and calls

1a0   B16: #	B39 &lt;- B40  top-of-loop Freq: 6.12641
1a0   	movl    RDX, RAX	# spill
1a2   	jmp     B39
1a2
1a7   B17: #	B18 &lt;- B45  Freq: 0.222006
1a7   	movl    RDX, RAX	# spill
1a7
1a9   B18: #	B88 B19 &lt;- B17 B35 B39  Freq: 7.29446
1a9   	andl    RDI, #127	# int
1ac   	movdl   R10, XMM4	# spill
1b1   	movl    R10, [R10 + #12 (8-bit)]	# range
1b5   	NullCheck R10
1b5
1b5   B19: #	B71 B20 &lt;- B18  Freq: 7.29445
1b5   	cmpl    RDI, R10	# unsigned
1b8   	jnb,u  B71  P=0.000001 C=-1.000000
1b8
1be   B20: #	B89 B21 &lt;- B19  Freq: 7.29445
1be   	movdl   R10, XMM2	# spill
1c3   	movl    R10, [R10 + #12 (8-bit)]	# range
1c7   	NullCheck R10
1c7
1c7   B21: #	B72 B22 &lt;- B20  Freq: 7.29444
1c7   	movl    RBP, RDX	# spill
1c9   	movdl   R11, XMM4	# spill
1ce   	subl    RBP, [R11 + #16 + RDI &lt;&lt; #2]	# int
1d3   	incl    RBP	# int
1d5   	cmpl    RDX, R10	# unsigned
1d8   	jnb,u  B72  P=0.000001 C=-1.000000
1d8
1de   B22: #	B23 &lt;- B21  Freq: 7.29443
1de   	movdl   R10, XMM2	# spill
1e3   	movl    R11, [R10 + #16 + RSI]	# int
1e8   	cmpl    RBP, R11
1eb   	cmovll RBP, R11	# signed, int
1ef   	addl    R13, RBP	# int
1f2   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$BnM::match @ bci:87  L[0]=XMM0 L[1]=rsp + #32 L[2]=R13 L[3]=XMM3 L[4]=XMM10 L[5]=rsp + #8 L[6]=rsp + #12 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #32 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{xmm0=Oop xmm1=NarrowOop xmm2=NarrowOop xmm3=Oop xmm4=NarrowOop xmm5=Oop xmm6=Oop xmm9=NarrowOop xmm10=Oop [0]=Derived_oop_xmm6 [16]=NarrowOop [32]=Oop off=498}
1f8
1f8   B23: #	B54 B24 &lt;- B15 B22 	Loop: B23-B22  Freq: 8.29151
1f8   	movl    R10, R13	# spill
1fb   	addl    R10, [RSP + #8 (32-bit)]	# int
200   	movl    RSI, R13	# spill
203   	incl    RSI	# int
205   	cmpl    R13, [RSP + #12 (32-bit)]
20a   	jg     B54  P=0.013752 C=8726.000000
20a
210   B24: #	B48 B25 &lt;- B23  Freq: 8.17748
210   	movl    R8, RSI	# spill
213   	sarl    R8, #31
217   	movl    RDX, R10	# spill
21a   	decl    RDX	# int
21c   	testl   R9, R9
21f   	jl     B48  P=0.074668 C=22513.000000
21f
225   B25: #	B70 B26 &lt;- B24  Freq: 7.56688
225   	movdl   R11, XMM1	# spill
22a   	movl    R11, [R11 + #8 (8-bit)]	# compressed klass ptr
22e   	NullCheck R11
22e
22e   B26: #	B70 B27 &lt;- B25  Freq: 7.56688
22e   	movl    RAX, #-1	# int
233   	subl    RAX, R13	# int
236   	movl    RBX, R13	# spill
239   	negl    RBX	# int
23b   	movl    RDI, RBX	# spill
23d   	sarl    RDI, #31
240   	andl    RDI, RBX	# int
242   	cmpl    R11, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
249   	jne,u  B70  P=0.000001 C=-1.000000
249
24f   B27: #	B70 B28 &lt;- B26  Freq: 7.56687
24f   	movdq   R11, XMM5	# spill
254   	# checkcastPP of R11
254   	movdq   XMM3, R11	# spill
259   	addl    RDI, #2147483647	# int
25f   	movl    RBX, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
263   	movl    RCX, [RBX + #12 (8-bit)]	# range
266   	NullCheck RBX
266
266   B28: #	B70 B29 &lt;- B27  Freq: 7.56686
266   	andl    R8, RSI	# int
269   	movl    R11, RCX	# spill
26c   	subl    R11, R13	# int
26f   	movl    RBP, #-2147483647	# int
274   	subl    RBP, R8	# int
277   	decl    R11	# int
27a   	cmpl    RBP, RAX
27c   	cmovllt RBP, RAX	# max
27f   	cmpl    RDI, R11
282   	cmovlgt RDI, R11	# min
286   	cmpl    R13, RCX	# unsigned
289   	jnb,u  B70  P=0.000001 C=-1.000000
289
28f   B29: #	B70 B30 &lt;- B28  Freq: 7.56685
28f   	movl    R11, #-1	# int
295   	cmpl    RBP, R11
298   	movl    R8, #-1	# int
29e   	cmovllt RBP, R8	# max
2a2   	cmpl    RDX, RCX	# unsigned
2a4   	jnb,u  B70  P=0.000001 C=-1.000000
2a4
2aa   B30: #	B70 B31 &lt;- B29  Freq: 7.56685
2aa   	movdl   R11, XMM12	# spill
2af   	cmpl    R11, RDI
2b2   	movl    R14, R11	# spill
2b5   	cmovlgt R14, RDI	# min
2b9   	movl    R11, #-1	# int
2bf   	cmpl    R14, R11
2c2   	cmovllt R14, R8	# max
2c6   	movl    R11, [rsp + #8]	# spill
2cb   	testl  R11, R11	# unsigned
2ce   	jbe,u  B70  P=0.000001 C=-1.000000
2ce
2d4   B31: #	B70 B32 &lt;- B30  Freq: 7.56684
2d4   	cmpl    R9, [RSP + #8 (32-bit)]	# unsigned
2d9   	jnb,u  B70  P=0.000001 C=-1.000000
2d9
2df   B32: #	B33 &lt;- B31  Freq: 7.56683
2df   	movl    RDX, R9	# spill
2df
2e2   B33: #	B73 B34 &lt;- B32 B36 	Loop: B33-B36 inner pre of N1307 Freq: 11.358
2e2   	movl    R11, RDX	# spill
2e5   	addl    R11, R13	# int
2e8   	testl   R11, R11
2eb   	jl     B73  P=0.000000 C=7895.000000
2eb
2f1   B34: #	B75 B35 &lt;- B33  Freq: 11.358
2f1   	movzwl  RDI, [RBX + #16 + R11 &lt;&lt; #1]	# ushort/char
2f7   	movslq  RSI, RDX	# i2l
2fa   	cmpl    R11, RCX
2fd   	jge     B75  P=0.000000 C=7895.000000
2fd
303   B35: #	B18 B36 &lt;- B34  Freq: 11.358
303   	salq    RSI, #2
307   	movdl   R11, XMM9	# spill
30c   	movl    R8, [R11 + #16 + RSI]	# int
311   	cmpl    RDI, R8
314   	jne     B18  P=0.332421 C=20832.000000
314
31a   B36: #	B33 B37 &lt;- B35  Freq: 7.58236
31a   	decl    RDX	# int
31c   	cmpl    RDX, R14
31f   	jg,s   B33	# loop end  P=0.500000 C=13907.000000
31f
321   B37: #	B77 B38 &lt;- B36  Freq: 3.79118
321   	cmpl    RDX, RBP
323   	jle     B77  P=0.000001 C=-1.000000
323
329   B38: #	B39 &lt;- B37  Freq: 3.79117
329   	# castII of RDX
329
329   B39: #	B18 B40 &lt;- B38 B16 	Loop: B39-B16 inner main of N245 Freq: 9.91758
329   	movslq  RSI, RDX	# i2l
32c   	movl    R11, RDX	# spill
32f   	addl    R11, R13	# int
332   	salq    RSI, #2
336   	movzwl  RDI, [RBX + #16 + R11 &lt;&lt; #1]	# ushort/char
33c   	movdl   R8, XMM9	# spill
341   	movl    R11, [R8 + #16 + RSI]	# int
346   	movl    RAX, RDX	# spill
348   	decl    RAX	# int
34a   	cmpl    RDI, R11
34d   	jne     B18  P=0.332421 C=20832.000000
34d
353   B40: #	B16 B41 &lt;- B39  Freq: 6.62077
353   	cmpl    RAX, RBP
355   	jg     B16	# loop end  P=0.925332 C=13907.000000
355
35b   B41: #	B48 B42 &lt;- B77 B40  Freq: 0.494363
35b   	cmpl    RAX, #-1
35e   	jle,s   B48  P=0.100000 C=-1.000000
35e
360   B42: #	B43 &lt;- B41  Freq: 0.444927
360   	# castII of RAX
360
360   B43: #	B74 B44 &lt;- B42 B47 	Loop: B43-B47 inner post of N1307 Freq: 0.667847
360   	movl    R11, RAX	# spill
363   	addl    R11, R13	# int
366   	movslq  RSI, RAX	# i2l
369   	movzwl  RDI, [RBX + #16 + R11 &lt;&lt; #1]	# ushort/char
36f   	testl   R11, R11
372   	jl     B74  P=0.000000 C=7895.000000
372
378   B44: #	B76 B45 &lt;- B43  Freq: 0.667846
378   	salq    RSI, #2
37c   	movdl   R8, XMM9	# spill
381   	movl    RDX, [R8 + #16 + RSI]	# int
386   	cmpl    R11, RCX
389   	jge     B76  P=0.000000 C=7895.000000
389
38f   B45: #	B17 B46 &lt;- B44  Freq: 0.667846
38f   	movl    R11, RAX	# spill
392   	decl    R11	# int
395   	cmpl    RDI, RDX
397   	jne     B17  P=0.332421 C=20832.000000
397
39d   B46: #	B48 B47 &lt;- B45  Freq: 0.44584
39d   	cmpl    R11, #-1
3a1   	jle,s   B48	# loop end  P=0.500000 C=13907.000000
3a1
3a3   B47: #	B43 &lt;- B46  Freq: 0.22292
3a3   	movl    RAX, R11	# spill
3a6   	jmp,s   B43
3a6
3a8   B48: #	B94 B49 &lt;- B41 B24 B46  Freq: 0.882952
3a8   	movq    R11, [rsp + #32]	# spill
3ad   	movl    [R11 + #28 (8-bit)], R13	# int ! Field: java/util/regex/Matcher.first
3b1   	movdq   R11, XMM0	# spill
3b6   	movl    RBP, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
3ba   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
3be   	NullCheck RBP
3be
3be   B49: #	B79 B50 &lt;- B48  Freq: 0.882951
3be   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f372c107600:Constant:exact *	# compressed klass ptr
3c5   	jne,u  B79  P=0.000001 C=-1.000000
3c5
3cb   B50: #	B80 B51 &lt;- B49  Freq: 0.88295
3cb   	movq    R11, [rsp + #32]	# spill
3d0   	movl    [R11 + #32 (8-bit)], R10	# int ! Field: java/util/regex/Matcher.last
3d4   	movdl   R9, XMM8	# spill
3d9   	cmpl    R9, #1	# unsigned
3dd   	jbe,u  B80  P=0.000001 C=-1.000000
3dd
3e3   B51: #	B52 &lt;- B50  Freq: 0.882949
3e3   	movq    R8, [rsp + #0]	# spill
3e7   	movl    [R8], R13	# int
3ea   	movl    RCX, [rsp + #16]	# spill
3ee   	movl    [RCX + #20 (8-bit)], R10	# int
3f2   	movl    [R8], R13	# int
3f5   	movl    [RCX + #20 (8-bit)], R10	# int
3f9   	movdl   R8, XMM7	# spill
3f9
3fe   B52: #	B55 B53 &lt;- B51 B54 B61 B69 B66  Freq: 0.999894
3fe   	movl    R10, [R11 + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
402   	testl   R8, R8
405   	je,s   B55  P=0.068341 C=1712.000000
405
407   B53: #	N1274 &lt;- B55 B52  Freq: 0.999894
407   	movl    [R11 + #36 (8-bit)], R10	# int ! Field: java/util/regex/Matcher.oldLast
40b   	movl    RAX, R8	# spill
40e   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

419   	ret
419
41a   B54: #	B52 &lt;- B23  Freq: 0.114025
41a   	movq    R11, [rsp + #32]	# spill
41f   	movb    [R11 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
424   	xorl    R8, R8	# int
427   	jmp,s   B52
427
429   B55: #	B53 &lt;- B52  Freq: 0.0683339
429   	movl    [R11 + #28 (8-bit)], #-1	# int ! Field: java/util/regex/Matcher.first
431   	jmp,s   B53
431
433   B56: #	B6 &lt;- B5  Freq: 0.0656121
433   	movl    R11, R13	# spill
436   	jmp     B6
436
43b   B57: #	B85 B58 &lt;- B13  Freq: 0.00292055
43b   	cmpl    R8, narrowklass: precise klass java/util/regex/Pattern$Start: 0x00007f3724188df0:Constant:exact *	# compressed klass ptr
442   	jne,u  B85  P=0.000001 C=-1.000000
442
448   B58: #	B61 B59 &lt;- B57  Freq: 0.00292054
448   	movq    R8, R10	# spill
44b   	# checkcastPP of R8
44b   	movl    R10, [R8 + #16 (8-bit)]	# int ! Field: java/util/regex/Pattern$Start.minLength
44f   	movl    R11, R14	# spill
452   	subl    R11, R10	# int
455   	cmpl    R13, R11
458   	jg     B61  P=0.500000 C=-1.000000
458
45e   B59: #	B86 B60 &lt;- B58  Freq: 0.00146027
45e   	cmpl    R11, #2147483646
465   	jg     B86  P=0.000001 C=-1.000000
465
46b   B60: #	B63 &lt;- B59  Freq: 0.00146027
46b   	movl    RBP, R11	# spill
46e   	incl    RBP	# int
470   	movdl   R10, XMM1	# spill
475   	decode_heap_oop R9,R10
500   	movl    [rsp + #24], R13	# spill
505   	movl    RCX, #1	# int
50a   	movl    [rsp + #40], R11	# spill
50f   	movl    [rsp + #28], R10	# spill
514   	movl    [rsp + #44], RCX	# spill
518   	movq    [rsp + #48], R9	# spill
51d   	jmp,s   B63
51d
51f   B61: #	B52 &lt;- B58  Freq: 0.00146027
51f   	movq    R11, [rsp + #32]	# spill
524   	movb    [R11 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
529   	xorl    R8, R8	# int
52c   	jmp     B52
52c
531   B62: #	B63 &lt;- B65  top-of-loop Freq: 0.00622504
531   	movl    [rsp + #24], R11	# spill
536   	movq    R8, [rsp + #0]	# spill
536
53a   B63: #	B95 B64 &lt;- B60 B62 	Loop: B63-B62 inner  Freq: 0.00768538
53a   	movl    R10, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
53e   	movq    [rsp + #0], R8	# spill
542   	decode_heap_oop RSI,R10
5cd   	movq    RDX, [rsp + #32]	# spill
5d2   	movl    RCX, [rsp + #24]	# spill
5d6   	movq    R8, [rsp + #48]	# spill
5db   	movq    [rsp + #16], RDX	# spill
      	nop 	# 1 bytes pad for loops and calls
5e1   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$Node::match
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=rsp + #32 L[2]=rsp + #24 L[3]=rsp + #28 L[4]=rsp + #40
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #16 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=Oop [16]=Oop [28]=NarrowOop [32]=Oop [48]=Oop off=1520}
5f0
5f0   B64: #	B67 B65 &lt;- B63  Freq: 0.00768523
        # Block is sole successor of call
5f0   	movl    R11, [rsp + #24]	# spill
5f5   	incl    R11	# int
5f8   	testl   RAX, RAX
5fa   	jne,s   B67  P=0.100000 C=-1.000000
5fa
5fc   B65: #	B62 B66 &lt;- B64  Freq: 0.00691671
5fc   	cmpl    R11, RBP
5ff   	jl     B62	# loop end  P=0.900000 C=-1.000000
5ff
605   B66: #	B52 &lt;- B65  Freq: 0.000691671
605   	movq    R11, [rsp + #16]	# spill
60a   	movb    [R11 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
60f   	xorl    R8, R8	# int
612   	jmp     B52
612
617   B67: #	B96 B68 &lt;- B64  Freq: 0.000768523
617   	movq    R11, [rsp + #16]	# spill
61c   	movl    R9, [rsp + #24]	# spill
621   	movl    [R11 + #28 (8-bit)], R9	# int ! Field: java/util/regex/Matcher.first
625   	movl    RBP, [R11 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
629   	movl    R8, [RBP + #12 (8-bit)]	# range
62d   	NullCheck RBP
62d
62d   B68: #	B87 B69 &lt;- B67  Freq: 0.000768522
62d   	movl    R10, [R11 + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
631   	cmpl    R8, #1	# unsigned
635   	jbe,u  B87  P=0.000001 C=-1.000000
635
63b   B69: #	B52 &lt;- B68  Freq: 0.000768522
63b   	movl    [RBP + #16 (8-bit)], R9	# int
63f   	movl    [RBP + #20 (8-bit)], R10	# int
643   	movl    R8, [rsp + #44]	# spill
648   	jmp     B52
648
64d   B70: #	N1274 &lt;- B31 B25 B26 B27 B28 B29 B30  Freq: 5.34704e-05
64d   	movl    RBP, R13	# spill
650   	movss   [rsp + #0], XMM9	# spill
655   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
667   	movl    R10, [rsp + #12]	# spill
66c   	movl    [rsp + #8], R10	# spill
671   	movl    [rsp + #12], R9	# spill
676   	movl    RSI, #-122	# int
67b   	movsd   [rsp + #24], XMM0	# spill
681   	movss   [rsp + #40], XMM1	# spill
687   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:37  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #40 L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=rsp + #12 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #32 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop off=1676}
68c   	int3	# ShouldNotReachHere
68c
691   B71: #	N1274 &lt;- B19  Freq: 7.39132e-06
691   	movl    RBP, RDX	# spill
693   	incl    RBP	# int
695   	movss   [rsp + #0], XMM9	# spill
69a   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
6ac   	movl    R11, [rsp + #12]	# spill
6b1   	movl    [rsp + #8], R11	# spill
6b6   	movl    [rsp + #12], RDX	# spill
6ba   	movl    [rsp + #16], R13	# spill
6bf   	movl    [rsp + #20], RDI	# spill
6c3   	movl    RSI, #-28	# int
6c8   	movsd   [rsp + #40], XMM0	# spill
6ce   	movsd   [rsp + #48], XMM3	# spill
6d4   	movss   [rsp + #56], XMM4	# spill
      	nop 	# 1 bytes pad for loops and calls
6db   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=rsp + #40 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=rsp + #12 L[8]=_ STK[0]=rsp + #16 STK[1]=RBP STK[2]=rsp + #56 STK[3]=rsp + #20
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #32 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [32]=Oop [40]=Oop [48]=Oop [56]=NarrowOop off=1760}
6e0   	int3	# ShouldNotReachHere
6e0
6e5   B72: #	N1274 &lt;- B21  Freq: 7.3913e-06
6e5   	movss   [rsp + #0], XMM9	# spill
6ea   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
6fc   	movl    R10, [rsp + #12]	# spill
701   	movl    [rsp + #8], R10	# spill
706   	movl    [rsp + #12], R13	# spill
70b   	movl    [rsp + #16], RDX	# spill
70f   	movsd   [rsp + #40], XMM0	# spill
715   	movsd   [rsp + #48], XMM3	# spill
71b   	movss   [rsp + #20], XMM2	# spill
721   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
727   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=rsp + #40 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=_ L[8]=_ STK[0]=rsp + #12 STK[1]=RBP STK[2]=rsp + #20 STK[3]=rsp + #16
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #32 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [20]=NarrowOop [32]=Oop [40]=Oop [48]=Oop off=1836}
72c   	int3	# ShouldNotReachHere
72c
731   B73: #	B74 &lt;- B33  Freq: 5.679e-06
731   	movl    RAX, RDX	# spill
731
733   B74: #	N1274 &lt;- B43 B73  Freq: 6.01293e-06
733   	movl    RBP, R13	# spill
736   	movss   [rsp + #0], XMM9	# spill
73b   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
74d   	movl    R10, [rsp + #12]	# spill
752   	movl    [rsp + #8], R10	# spill
757   	movl    [rsp + #12], RAX	# spill
75b   	movl    [rsp + #20], R11	# spill
760   	movsd   [rsp + #40], XMM0	# spill
766   	movsd   [rsp + #56], XMM3	# spill
76c   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
773   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #56 L[1]=rsp + #20 STK[0]=rsp + #20
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #40 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #56 L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=rsp + #12 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #32 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [32]=Oop [40]=Oop [56]=Oop off=1912}
778   	int3	# ShouldNotReachHere
778
77d   B75: #	B76 &lt;- B34  Freq: 5.41592e-06
77d   	movl    RAX, RDX	# spill
77d
77f   B76: #	N1274 &lt;- B44 B75  Freq: 5.73437e-06
77f   	movl    RBP, R13	# spill
782   	movss   [rsp + #0], XMM9	# spill
787   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
799   	movl    R10, [rsp + #12]	# spill
79e   	movl    [rsp + #8], R10	# spill
7a3   	movl    [rsp + #12], RAX	# spill
7a7   	movl    [rsp + #20], R11	# spill
7ac   	movl    [rsp + #24], RCX	# spill
7b0   	movsd   [rsp + #40], XMM0	# spill
7b6   	movsd   [rsp + #64], XMM3	# spill
7bc   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
7c3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #64 L[1]=rsp + #20 STK[0]=rsp + #20 STK[1]=rsp + #24
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #40 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #64 L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=rsp + #12 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #32 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [32]=Oop [40]=Oop [64]=Oop off=1992}
7c8   	int3	# ShouldNotReachHere
7c8
7cd   B77: #	B41 &lt;- B37  Freq: 3.84152e-06
7cd   	movl    RAX, RDX	# spill
7cf   	jmp     B41
7cf
7d4   B78: #	N1274 &lt;- B9 B8  Freq: 1.91735e-06
7d4   	movl    RBP, R13	# spill
7d7   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
7df   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:55  L[0]=rsp + #32 L[1]=RBP L[2]=#0
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[32]=Oop off=2020}
7e4   	int3	# ShouldNotReachHere
7e4
7e9   B79: #	N1274 &lt;- B49  Freq: 8.82951e-07
7e9   	movl    [rsp + #0], R13	# spill
7ed   	movss   [rsp + #4], XMM9	# spill
7f3   	movl    [rsp + #16], R10	# spill
7f8   	movl    RSI, #-34	# int
7fd   	movsd   [rsp + #40], XMM0	# spill
803   	movss   [rsp + #56], XMM1	# spill
      	nop 	# 2 bytes pad for loops and calls
80b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #40 L[1]=rsp + #32 L[2]=rsp + #0 L[3]=rsp + #56 L[4]=rsp + #4 L[5]=rsp + #8 L[6]=rsp + #12 L[7]=_ L[8]=_ STK[0]=RBP STK[1]=rsp + #32 STK[2]=rsp + #16 STK[3]=rsp + #56
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #32 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=NarrowOop [4]=NarrowOop [32]=Oop [40]=Oop [56]=NarrowOop off=2064}
810   	int3	# ShouldNotReachHere
810
815   B80: #	N1274 &lt;- B50  Freq: 8.8295e-07
815   	movl    RSI, #-28	# int
81a   	movss   [rsp + #0], XMM9	# spill
81f   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
831   	movl    R8, [rsp + #12]	# spill
836   	movl    [rsp + #8], R8	# spill
83b   	movl    [rsp + #12], R13	# spill
840   	movsd   [rsp + #32], XMM0	# spill
846   	movq    [rsp + #40], R11	# spill
84b   	movss   [rsp + #20], XMM1	# spill
851   	movq    [rsp + #48], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
857   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #40 L[2]=_ L[3]=_ STK[0]=rsp + #16 STK[1]=#0 STK[2]=rsp + #12
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #32 L[1]=rsp + #48 L[2]=rsp + #12 L[3]=rsp + #20 L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #40 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [16]=NarrowOop [20]=NarrowOop [32]=Oop [40]=Oop [48]=Oop off=2140}
85c   	int3	# ShouldNotReachHere
85c
861   B81: #	N1274 &lt;- B1  Freq: 4.76837e-07
861   	movl    [rsp + #4], R13	# spill
866   	movq    [rsp + #8], R10	# spill
86b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::find @ bci:10  L[0]=rsp + #8 L[1]=rsp + #4 L[2]=_ STK[0]=rsp + #4 STK[1]=RBP
        # OopMap{[8]=Oop off=2160}
870   	int3	# ShouldNotReachHere
870
875   B82: #	N1274 &lt;- B2  Freq: 4.76837e-07
875   	movl    [rsp + #0], R13	# spill
879   	movq    [rsp + #8], R10	# spill
87e   	movl    [rsp + #4], R8	# spill
883   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::find @ bci:21  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #0 STK[1]=rsp + #4
        # OopMap{[8]=Oop off=2184}
888   	int3	# ShouldNotReachHere
888
88d   B83: #	N1274 &lt;- B3  Freq: 4.76837e-07
88d   	movl    [rsp + #0], R13	# spill
891   	movl    [rsp + #4], R14	# spill
896   	movq    [rsp + #8], R10	# spill
89b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::find @ bci:34  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #0 STK[1]=rsp + #4
        # OopMap{[8]=Oop off=2208}
8a0   	int3	# ShouldNotReachHere
8a0
8a5   B84: #	N1274 &lt;- B4  Freq: 4.76836e-07
8a5   	movl    [rsp + #0], R13	# spill
      	nop 	# 2 bytes pad for loops and calls
8ab   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::search @ bci:11  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #0
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[32]=Oop off=2224}
8b0   	int3	# ShouldNotReachHere
8b0
8b5   B85: #	N1274 &lt;- B57  Freq: 2.92055e-09
8b5   	movl    RBP, R13	# spill
8b8   	movl    RSI, #-58	# int
8bd   	movq    R10, [rsp + #32]	# spill
8c2   	movl    [rsp + #8], R11	# spill
8c7   	movq    [rsp + #16], R10	# spill
8cc   	movss   [rsp + #12], XMM1	# spill
      	nop 	# 1 bytes pad for loops and calls
8d3   	call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #16 L[1]=_ L[2]=_ STK[0]=rsp + #8 STK[1]=rsp + #32 STK[2]=RBP STK[3]=rsp + #12
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[8]=NarrowOop [12]=NarrowOop [16]=Oop [32]=Oop off=2264}
8d8   	int3	# ShouldNotReachHere
8d8
8dd   B86: #	N1274 &lt;- B59  Freq: 1.47966e-09
8dd   	movl    RBP, R13	# spill
8e0   	movl    [rsp + #0], R11	# spill
8e4   	movl    RSI, #-130	# int
8e9   	movq    R10, [rsp + #32]	# spill
8ee   	movq    [rsp + #16], R8	# spill
8f3   	movq    [rsp + #24], R10	# spill
8f8   	movss   [rsp + #4], XMM1	# spill
      	nop 	# 1 bytes pad for loops and calls
8ff   	call,static  wrapper for: uncommon_trap(reason=&apos;loop_limit_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Start::match @ bci:37  L[0]=rsp + #16 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #4 L[4]=rsp + #0
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [16]=Oop [24]=Oop [32]=Oop off=2308}
904   	int3	# ShouldNotReachHere
904
909   B87: #	N1274 &lt;- B68  Freq: 7.68522e-10
909   	movl    RSI, #-28	# int
90e   	movq    [rsp + #8], R11	# spill
913   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Start::match @ bci:64  L[0]=_ L[1]=rsp + #32 L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP STK[1]=#0 STK[2]=rsp + #24
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #8 L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=NarrowOop [8]=Oop [32]=Oop off=2328}
918   	int3	# ShouldNotReachHere
918
91d   B88: #	N1274 &lt;- B18  Freq: 7.39132e-06
91d   	movl    RBP, RDI	# spill
91f   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
927   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=2348}
92c   	int3	# ShouldNotReachHere
92c
931   B89: #	N1274 &lt;- B20  Freq: 7.39131e-06
931   	movl    RBP, RDX	# spill
933   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
93b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=2368}
940   	int3	# ShouldNotReachHere
940
945   B90: #	N1274 &lt;- B6  Freq: 1.01328e-06
945   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
94b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:51  L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=2384}
950   	int3	# ShouldNotReachHere
950
955   B91: #	N1274 &lt;- B11  Freq: 1.01327e-06
955   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
95b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:77  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=2400}
960   	int3	# ShouldNotReachHere
960
965   B92: #	N1274 &lt;- B12  Freq: 1.01327e-06
965   	movl    RBP, R13	# spill
968   	movss   [rsp + #8], XMM1	# spill
      	nop 	# 1 bytes pad for loops and calls
96f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL STK[1]=rsp + #32 STK[2]=RBP STK[3]=rsp + #8
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[8]=NarrowOop [32]=Oop off=2420}
974   	int3	# ShouldNotReachHere
974
979   B93: #	N1274 &lt;- B14  Freq: 1.01031e-06
      	nop 	# 2 bytes pad for loops and calls
97b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=2432}
980   	int3	# ShouldNotReachHere
980
985   B94: #	N1274 &lt;- B48  Freq: 8.94677e-07
985   	movl    RBP, R10	# spill
988   	movss   [rsp + #8], XMM1	# spill
98e   	movl    RSI, #-10	# int
993   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=rsp + #32 STK[2]=RBP STK[3]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[8]=NarrowOop [32]=Oop off=2456}
998   	int3	# ShouldNotReachHere
998
99d   B95: #	N1274 &lt;- B63  Freq: 7.68538e-08
99d   	# exception oop is in rax; no code emitted
99d   	movq    RSI, RAX	# spill
9a0   	addq    rsp, 96	# Destroy frame
	popq   rbp

9a5   	jmp     rethrow_stub
9a5
9aa   B96: #	N1274 &lt;- B67  Freq: 7.78728e-10
9aa   	movl    RSI, #-10	# int
9af   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Start::match @ bci:64  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=#0 STK[2]=rsp + #24
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # java.util.regex.Matcher::find @ bci:65  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=2484}
9b4   	int3	# ShouldNotReachHere
9b4

</opto_assembly>
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='332'>
{method}
 - this oop:          0x00007f37559472e0
 - method holder:     &apos;java/util/regex/Pattern$CharProperty&apos;
 - constants:         0x00007f3755946cd8 constant pool [88] {0x00007f3755946cd8} for &apos;java/util/regex/Pattern$CharProperty&apos; cache=0x00007f3755947500
 - access:            0x81000000  
 - name:              &apos;match&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z&apos;
 - max stack:         5
 - max locals:        5
 - size of params:    4
 - method size:       12
 - highest level:     2
 - vtable index:      9
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37681c7d78: 0xbbab0000 i2c: 0x00007f3758b26ce0 c2i: 0x00007f3758b26e25 c2iUV: 0x00007f3758b26df8
 - compiled entry     0x00007f3758ca2680
 - code size:         56
 - code start:        0x00007f3755947258
 - code end (excl):   0x00007f3755947290
 - method data:       0x00007f3755b41c18
 - checked ex length: 0
 - linenumber start:  0x00007f3755947290
 - localvar length:   5
 - localvar start:    0x00007f37559472a2
 - compiled code: nmethod   2716  324       2       java.util.regex.Pattern$CharProperty::match (56 bytes)
#
#  bool ( java/util/regex/Pattern$CharProperty:NotNull *, java/util/regex/Matcher:exact *, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$CharProperty:NotNull *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/CharSequence *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N396: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B34 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (360 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movq    RAX, RSI	# spill
02f   	movl    RSI, #-10	# int
034   	movl    R10, [RDX + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
038   	NullCheck RDX
038
038   B2: #	B21 B3 &lt;- B1  Freq: 0.999999
038   	movl    RSI, #-34	# int
03d   	cmpl    RCX, R10
040   	jge     B21  P=0.018921 C=2650481.000000
040
046   B3: #	B35 B4 &lt;- B2  Freq: 0.981078
046   	movl    R10, [RAX + #8 (8-bit)]	# compressed klass ptr
04a   	movl    R11, [R8 + #8 (8-bit)]	# compressed klass ptr
04e   	NullCheck R8
04e
04e   B4: #	B23 B5 &lt;- B3  Freq: 0.981077
04e   	movl    RBX, RCX	# spill
050   	incl    RBX	# int
052   	cmpl    R11, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
059   	jne,u  B23  P=0.000001 C=-1.000000
059
05f   B5: #	B27 B6 &lt;- B4  Freq: 0.981076
05f   	movq    R11, R8	# spill
062   	# checkcastPP of R11
062   	testl   RCX, RCX
064   	jl     B27  P=0.000000 C=7895.000000
064
06a   B6: #	B36 B7 &lt;- B5  Freq: 0.981075
06a   	movl    R9, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
06e   	movq    RDI, R11	# spill
071   	movl    RSI, #-155	# int
076   	movl    RBP, [R9 + #12 (8-bit)]	# range
07a   	NullCheck R9
07a
07a   B7: #	B28 B8 &lt;- B6  Freq: 0.981074
07a   	cmpl    RCX, RBP
07c   	jge     B28  P=0.000000 C=7895.000000
07c
082   B8: #	B22 B9 &lt;- B7  Freq: 0.981074
082   	cmpl    RCX, RBP	# unsigned
084   	jnb,u  B22  P=0.000001 C=-1.000000
084
08a   B9: #	B29 B10 &lt;- B8  Freq: 0.981073
08a   	movzwl  R11, [R9 + #16 + RCX &lt;&lt; #1]	# ushort/char
090   	cmpl    R11, #55296
097   	jge     B29  P=0.000000 C=613346.000000
097
09d   B10: #	B24 B11 &lt;- B9  Freq: 0.981072
09d   	movl    R8, R11	# spill
0a0   	orl     R8, #1	# int
0a4   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Dot: 0x00007f372c036570:Constant:exact *	# compressed klass ptr
0ab   	jne,u  B24  P=0.000001 C=-1.000000
0ab
0b1   B11: #	B30 B12 &lt;- B10  Freq: 0.981071
0b1   	# checkcastPP of RAX
0b1   	movl    R9, [RDX + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
0b5   	movl    R10, [RAX + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
0b9   	cmpl    R11, #10
0bd   	je     B30  P=0.000000 C=2615664.000000
0bd
0c3   B12: #	B31 B13 &lt;- B11  Freq: 0.981071
0c3   	cmpl    R11, #13
0c7   	je     B31  P=0.000000 C=2615664.000000
0c7
0cd   B13: #	B32 B14 &lt;- B12  Freq: 0.98107
0cd   	cmpl    R8, #8233
0d4   	je     B32  P=0.000000 C=2615664.000000
0d4
0da   B14: #	B33 B15 &lt;- B13  Freq: 0.98107
0da   	cmpl    R11, #133
0e1   	je     B33  P=0.000000 C=2615664.000000
0e1
0e7   B15: #	B37 B16 &lt;- B14  Freq: 0.98107
0e7   	movl    RBP, [RDX + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
0ea   	movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
0ee   	NullCheck R10
0ee
0ee   B16: #	B25 B17 &lt;- B15  Freq: 0.981068
0ee   	movl    RSI, #-34	# int
0f3   	cmpl    R8, narrowklass: precise klass java/util/regex/Pattern$Node: 0x00007f372c036640:Constant:exact *	# compressed klass ptr
0fa   	jne,u  B25  P=0.000001 C=-1.000000
0fa
100   B17: #	B38 B18 &lt;- B16  Freq: 0.981067
100   	movl    [RDX + #32 (8-bit)], RBX	# int ! Field: java/util/regex/Matcher.last
103   	movl    R11, [RBP + #12 (8-bit)]	# range
107   	NullCheck RBP
107
107   B18: #	B26 B19 &lt;- B17  Freq: 0.981066
107   	movl    RAX, #1	# int
10c   	cmpl    R11, #1	# unsigned
110   	jbe,u  B26  P=0.000001 C=-1.000000
110
116   B19: #	B20 &lt;- B18  Freq: 0.981065
116   	movl    [RBP + #16 (8-bit)], R9	# int
11a   	movl    [RBP + #20 (8-bit)], RBX	# int
11a
11d   B20: #	N396 &lt;- B19 B21  Freq: 0.999987
11d   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

128   	ret
128
129   B21: #	B20 &lt;- B2  Freq: 0.0189211
129   	movb    [RDX + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
12d   	xorl    RAX, RAX	# int
12f   	jmp,s   B20
12f
131   B22: #	N396 &lt;- B8  Freq: 9.94102e-07
131   	movl    RSI, #-28	# int
136   	movq    RBP, RAX	# spill
139   	movq    [rsp + #0], RDX	# spill
13d   	movq    [rsp + #16], R8	# spill
142   	movl    [rsp + #12], RCX	# spill
146   	movl    [rsp + #24], RCX	# spill
14a   	movq    [rsp + #32], R11	# spill
14f   	movl    [rsp + #28], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
157   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #28 STK[1]=rsp + #12
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #24 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [28]=NarrowOop [32]=Oop off=348}
15c   	int3	# ShouldNotReachHere
15c
161   B23: #	N396 &lt;- B4  Freq: 9.81077e-07
161   	movq    RBP, RAX	# spill
164   	movq    [rsp + #0], RDX	# spill
168   	movq    [rsp + #24], R8	# spill
16d   	movl    [rsp + #12], RCX	# spill
171   	movq    [rsp + #32], R8	# spill
176   	movl    [rsp + #40], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
17b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=_ L[3]=_ STK[0]=rsp + #24 STK[1]=rsp + #12
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #24 L[4]=_
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [32]=Oop off=384}
180   	int3	# ShouldNotReachHere
180
185   B24: #	N396 &lt;- B10  Freq: 9.81072e-07
185   	movq    [rsp + #0], RDX	# spill
189   	movl    [rsp + #8], RCX	# spill
18d   	movq    [rsp + #16], RAX	# spill
192   	movq    [rsp + #24], RDI	# spill
197   	movl    [rsp + #32], R11	# spill
19c   	movl    RSI, #-34	# int
      	nop 	# 2 bytes pad for loops and calls
1a3   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #24 L[4]=rsp + #32 STK[0]=rsp + #16 STK[1]=rsp + #32
        # OopMap{[0]=Oop [16]=Oop [24]=Oop off=424}
1a8   	int3	# ShouldNotReachHere
1a8
1ad   B25: #	N396 &lt;- B16  Freq: 9.81069e-07
1ad   	movq    RBP, RDX	# spill
1b0   	movl    [rsp + #0], R10	# spill
1b4   	movl    [rsp + #4], RBX	# spill
1b8   	movq    [rsp + #8], RDI	# spill
      	nop 	# 2 bytes pad for loops and calls
1bf   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #0 STK[1]=RBP STK[2]=rsp + #4 STK[3]=rsp + #8
        # OopMap{rbp=Oop [0]=NarrowOop [8]=Oop off=452}
1c4   	int3	# ShouldNotReachHere
1c4
1c9   B26: #	N396 &lt;- B18  Freq: 9.81066e-07
1c9   	movq    [rsp + #0], RDX	# spill
1cd   	movl    RSI, #-28	# int
1d2   	movl    [rsp + #8], R9	# spill
1d7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=_ STK[0]=RBP STK[1]=#0 STK[2]=rsp + #8
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{rbp=NarrowOop [0]=Oop off=476}
1dc   	int3	# ShouldNotReachHere
1dc
1e1   B27: #	N396 &lt;- B5  Freq: 4.90538e-07
1e1   	movq    RBP, RAX	# spill
1e4   	movq    [rsp + #0], RDX	# spill
1e8   	movq    [rsp + #16], R8	# spill
1ed   	movl    [rsp + #12], RCX	# spill
1f1   	movl    [rsp + #24], RCX	# spill
1f5   	movq    [rsp + #40], R11	# spill
1fa   	movl    RSI, #-155	# int
1ff   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #40 L[1]=rsp + #12 STK[0]=rsp + #12
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [40]=Oop off=516}
204   	int3	# ShouldNotReachHere
204
209   B28: #	N396 &lt;- B7  Freq: 4.67813e-07
209   	movq    [rsp + #0], RAX	# spill
20d   	movq    [rsp + #8], RDX	# spill
212   	movq    [rsp + #24], R8	# spill
217   	movl    [rsp + #20], RCX	# spill
21b   	movl    [rsp + #32], RCX	# spill
21f   	movq    [rsp + #48], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
227   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #48 L[1]=rsp + #20 STK[0]=rsp + #20 STK[1]=RBP
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #48 L[1]=rsp + #32 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #20 L[3]=rsp + #24 L[4]=_
        # OopMap{[0]=Oop [8]=Oop [24]=Oop [48]=Oop off=556}
22c   	int3	# ShouldNotReachHere
22c
231   B29: #	N396 &lt;- B9  Freq: 4.67812e-07
231   	movq    RBP, RAX	# spill
234   	movq    [rsp + #0], RDX	# spill
238   	movq    [rsp + #16], R8	# spill
23d   	movl    [rsp + #12], RCX	# spill
241   	movq    [rsp + #24], RDI	# spill
246   	movl    [rsp + #36], R11	# spill
24b   	movl    [rsp + #40], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
253   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #40 STK[0]=rsp + #36 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #24 L[1]=rsp + #12 L[2]=rsp + #36 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=600}
258   	int3	# ShouldNotReachHere
258
25d   B30: #	N396 &lt;- B11  Freq: 4.67811e-07
25d   	movq    RBP, RAX	# spill
260   	movq    [rsp + #0], RDX	# spill
264   	movl    [rsp + #8], RCX	# spill
268   	movq    [rsp + #16], RDI	# spill
26d   	movl    [rsp + #24], R11	# spill
272   	movl    [rsp + #28], R11	# spill
277   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #24 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=636}
27c   	int3	# ShouldNotReachHere
27c
281   B31: #	N396 &lt;- B12  Freq: 4.67811e-07
281   	movq    RBP, RAX	# spill
284   	movq    [rsp + #0], RDX	# spill
288   	movl    [rsp + #8], RCX	# spill
28c   	movq    [rsp + #16], RDI	# spill
291   	movl    [rsp + #24], R11	# spill
296   	movl    [rsp + #28], R11	# spill
29b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #24 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=672}
2a0   	int3	# ShouldNotReachHere
2a0
2a5   B32: #	N396 &lt;- B13  Freq: 4.67811e-07
2a5   	movq    RBP, RAX	# spill
2a8   	movq    [rsp + #0], RDX	# spill
2ac   	movl    [rsp + #8], RCX	# spill
2b0   	movq    [rsp + #16], RDI	# spill
2b5   	movl    [rsp + #24], R11	# spill
2ba   	movl    [rsp + #28], R8	# spill
2bf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #24 STK[0]=rsp + #28 STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=708}
2c4   	int3	# ShouldNotReachHere
2c4
2c9   B33: #	N396 &lt;- B14  Freq: 4.67811e-07
2c9   	movq    RBP, RAX	# spill
2cc   	movq    [rsp + #0], RDX	# spill
2d0   	movl    [rsp + #8], RCX	# spill
2d4   	movq    [rsp + #16], RDI	# spill
2d9   	movl    [rsp + #24], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
2df   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=740}
2e4   	int3	# ShouldNotReachHere
2e4
2e9   B34: #	N396 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
2eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=752}
2f0   	int3	# ShouldNotReachHere
2f0
2f5   B35: #	N396 &lt;- B3  Freq: 9.94106e-07
2f5   	movl    RSI, #-10	# int
2fa   	movl    RBP, RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
2ff   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=772}
304   	int3	# ShouldNotReachHere
304
309   B36: #	N396 &lt;- B6  Freq: 9.94103e-07
309   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
30f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=788}
314   	int3	# ShouldNotReachHere
314
319   B37: #	N396 &lt;- B15  Freq: 9.94097e-07
319   	movq    RBP, RDX	# spill
31c   	movl    RSI, #-10	# int
321   	movl    [rsp + #0], RBX	# spill
324   	movq    [rsp + #8], RDI	# spill
      	nop 	# 2 bytes pad for loops and calls
32b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=816}
330   	int3	# ShouldNotReachHere
330
335   B38: #	N396 &lt;- B17  Freq: 9.94095e-07
335   	movl    RBP, R9	# spill
338   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
33f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=836}
344   	int3	# ShouldNotReachHere
344

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='334'>
{method}
 - this oop:          0x00007f3755735eb8
 - method holder:     &apos;java/lang/Character&apos;
 - constants:         0x00007f3755733b58 constant pool [502] {0x00007f3755733b58} for &apos;java/lang/Character&apos; cache=0x00007f375583cce8
 - access:            0x81000009  public static 
 - name:              &apos;codePointAt&apos;
 - signature:         &apos;(Ljava/lang/CharSequence;I)I&apos;
 - max stack:         3
 - max locals:        4
 - size of params:    2
 - method size:       12
 - highest level:     2
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758ca2e00
 - code size:         51
 - code start:        0x00007f3755735e48
 - code end (excl):   0x00007f3755735e7b
 - method data:       0x00007f3755b41e98
 - checked ex length: 0
 - linenumber start:  0x00007f3755735e7b
 - localvar length:   4
 - localvar start:    0x00007f3755735e86
 - compiled code: nmethod   2741  326       2       java.lang.Character::codePointAt (51 bytes)
#
#  int ( java/lang/CharSequence *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/CharSequence *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B14 B10 B11 B15 B12 B9 B13 B8  Freq: 1
abababab
000   B1: #	B14 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (240 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c   	movl    R10, [RSI + #8 (8-bit)]	# compressed klass ptr
010   	NullCheck RSI
010
010   B2: #	B10 B3 &lt;- B1  Freq: 0.999999
010   	cmpl    R10, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
017   	jne,us  B10  P=0.000001 C=-1.000000
017
019   B3: #	B11 B4 &lt;- B2  Freq: 0.999998
019   	# checkcastPP of RSI
019   	movl    R11, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
01d   	testl   RDX, RDX
01f   	jl,s   B11  P=0.000000 C=7895.000000
01f
021   B4: #	B15 B5 &lt;- B3  Freq: 0.999997
021   	movl    RBP, [R11 + #12 (8-bit)]	# range
025   	NullCheck R11
025
025   B5: #	B12 B6 &lt;- B4  Freq: 0.999996
025   	cmpl    RDX, RBP
027   	jge,s   B12  P=0.000000 C=7895.000000
027
029   B6: #	B9 B7 &lt;- B5  Freq: 0.999996
029   	cmpl    RDX, RBP	# unsigned
02b   	jnb,us  B9  P=0.000001 C=-1.000000
02b
02d   B7: #	B13 B8 &lt;- B6  Freq: 0.999995
02d   	movzwl  RAX, [R11 + #16 + RDX &lt;&lt; #1]	# ushort/char
033   	cmpl    RAX, #55296
039   	jge     B13  P=0.000000 C=613346.000000
039
03f   B8: #	N1 &lt;- B7  Freq: 0.999995
03f   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

04a   	ret
04a
04b   B9: #	N1 &lt;- B6  Freq: 1.01327e-06
04b   	movq    RBP, RSI	# spill
04e   	movl    [rsp + #4], RDX	# spill
052   	movl    [rsp + #8], R11	# spill
057   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
05f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #8 STK[1]=rsp + #4
        # java.lang.Character::codePointAt @ bci:2  L[0]=RBP L[1]=rsp + #4 L[2]=_ L[3]=_
        # OopMap{rbp=Oop [8]=NarrowOop off=100}
064   	int3	# ShouldNotReachHere
064
069   B10: #	N1 &lt;- B2  Freq: 9.99999e-07
069   	movq    [rsp + #8], RSI	# spill
06e   	movl    [rsp + #4], RDX	# spill
072   	movl    RSI, #-34	# int
077   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #8 L[1]=rsp + #4 L[2]=_ L[3]=_ STK[0]=rsp + #8 STK[1]=rsp + #4
        # OopMap{[8]=Oop off=124}
07c   	int3	# ShouldNotReachHere
07c
081   B11: #	N1 &lt;- B3  Freq: 4.99999e-07
081   	movq    [rsp + #8], RSI	# spill
086   	movl    [rsp + #4], RDX	# spill
08a   	movl    [rsp + #16], RDX	# spill
08e   	movl    RSI, #-155	# int
093   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #8 L[1]=rsp + #16 STK[0]=rsp + #4
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #8 L[1]=rsp + #4 L[2]=_ L[3]=_
        # OopMap{[8]=Oop off=152}
098   	int3	# ShouldNotReachHere
098
09d   B12: #	N1 &lt;- B5  Freq: 4.76835e-07
09d   	movq    [rsp + #16], RSI	# spill
0a2   	movl    [rsp + #12], RDX	# spill
0a6   	movl    [rsp + #24], RDX	# spill
0aa   	movl    RSI, #-155	# int
0af   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #16 L[1]=rsp + #24 STK[0]=rsp + #12 STK[1]=RBP
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #16 L[1]=rsp + #12 L[2]=_ L[3]=_
        # OopMap{[16]=Oop off=180}
0b4   	int3	# ShouldNotReachHere
0b4
0b9   B13: #	N1 &lt;- B7  Freq: 4.76835e-07
0b9   	movq    RBP, RSI	# spill
0bc   	movl    [rsp + #0], RDX	# spill
0bf   	movl    [rsp + #8], RAX	# spill
0c3   	movl    [rsp + #12], RAX	# spill
0c7   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
0cf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #12 STK[0]=rsp + #8 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_
        # OopMap{rbp=Oop off=212}
0d4   	int3	# ShouldNotReachHere
0d4
0d9   B14: #	N1 &lt;- B1  Freq: 1.01328e-06
0d9   	movl    RBP, RDX	# spill
0db   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
0e3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=232}
0e8   	int3	# ShouldNotReachHere
0e8
0ed   B15: #	N1 &lt;- B4  Freq: 1.01328e-06
0ed   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
0f3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap{off=248}
0f8   	int3	# ShouldNotReachHere
0f8

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='335'>
{method}
 - this oop:          0x00007f3755b1b6b0
 - method holder:     &apos;java/util/regex/Pattern$Dot&apos;
 - constants:         0x00007f3755b1b418 constant pool [29] {0x00007f3755b1b418} for &apos;java/util/regex/Pattern$Dot&apos; cache=0x00007f3755b1b738
 - access:            0x81000000  
 - name:              &apos;isSatisfiedBy&apos;
 - signature:         &apos;(I)Z&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     2
 - vtable index:      8
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758ca3420
 - code size:         34
 - code start:        0x00007f3755b1b668
 - code end (excl):   0x00007f3755b1b68a
 - method data:       0x00007f3755b42130
 - checked ex length: 0
 - linenumber start:  0x00007f3755b1b68a
 - localvar length:   2
 - localvar start:    0x00007f3755b1b696
 - compiled code: nmethod   2753  327       2       java.util.regex.Pattern$Dot::isSatisfiedBy (34 bytes)
#
#  bool ( java/util/regex/Pattern$Dot:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$Dot:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N78: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B6 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    RSI, #-155	# int
031   	cmpl    RDX, #10
034   	je,s   B6  P=0.000000 C=2643348.000000
034
036   B2: #	B7 B3 &lt;- B1  Freq: 1
036   	movl    RBP, RDX	# spill
038   	orl     RBP, #1	# int
03b   	movl    RAX, #1	# int
040   	cmpl    RDX, #13
043   	je,s   B7  P=0.000000 C=2643348.000000
043
045   B3: #	B8 B4 &lt;- B2  Freq: 0.999999
045   	cmpl    RBP, #8233
04b   	je,s   B8  P=0.000000 C=2643348.000000
04b
04d   B4: #	B9 B5 &lt;- B3  Freq: 0.999999
04d   	cmpl    RDX, #133
053   	je,s   B9  P=0.000000 C=2643348.000000
053
055   B5: #	N78 &lt;- B4  Freq: 0.999998
055   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

060   	ret
060
061   B6: #	N78 &lt;- B1  Freq: 4.76837e-07
061   	movl    [rsp + #0], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
067   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #0 STK[0]=rsp + #0 STK[1]=#10
        # OopMap{off=108}
06c   	int3	# ShouldNotReachHere
06c
071   B7: #	N78 &lt;- B2  Freq: 4.76837e-07
071   	movl    [rsp + #0], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
077   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #0 STK[0]=rsp + #0 STK[1]=#13
        # OopMap{off=124}
07c   	int3	# ShouldNotReachHere
07c
081   B8: #	N78 &lt;- B3  Freq: 4.76837e-07
081   	movl    [rsp + #0], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
087   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #0 STK[0]=RBP STK[1]=#8233
        # OopMap{off=140}
08c   	int3	# ShouldNotReachHere
08c
091   B9: #	N78 &lt;- B4  Freq: 4.76836e-07
091   	movl    RBP, RDX	# spill
093   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=#133
        # OopMap{off=152}
098   	int3	# ShouldNotReachHere
098

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='336'>
{method}
 - this oop:          0x00007f3755945438
 - method holder:     &apos;java/util/regex/Pattern$Node&apos;
 - constants:         0x00007f3755945088 constant pool [60] {0x00007f3755945088} for &apos;java/util/regex/Pattern$Node&apos; cache=0x00007f3755945580
 - access:            0x81000000  
 - name:              &apos;match&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z&apos;
 - max stack:         4
 - max locals:        4
 - size of params:    4
 - method size:       12
 - highest level:     2
 - vtable index:      6
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37681c7d78: 0xbbab0000 i2c: 0x00007f3758b26ce0 c2i: 0x00007f3758b26e25 c2iUV: 0x00007f3758b26df8
 - compiled entry     0x00007f3758ca3880
 - code size:         27
 - code start:        0x00007f37559453e0
 - code end (excl):   0x00007f37559453fb
 - method data:       0x00007f3755b42318
 - checked ex length: 0
 - linenumber start:  0x00007f37559453fb
 - localvar length:   4
 - localvar start:    0x00007f3755945406
 - compiled code: nmethod   2762  328       2       java.util.regex.Pattern$Node::match (27 bytes)
#
#  bool ( java/util/regex/Pattern$Node:NotNull *, java/util/regex/Matcher:exact *, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$Node:NotNull *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/CharSequence *
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N71: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B6 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (144 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    RSI, #-10	# int
031   	movl    R10, [RDX + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
035   	NullCheck RDX
035
035   B2: #	B7 B3 &lt;- B1  Freq: 0.999999
035   	movl    [RDX + #32 (8-bit)], RCX	# int ! Field: java/util/regex/Matcher.last
038   	movl    RBP, [RDX + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
03b   	movl    R8, [R10 + #12 (8-bit)]	# range
03f   	NullCheck R10
03f
03f   B3: #	B5 B4 &lt;- B2  Freq: 0.999998
03f   	movl    RAX, #1	# int
044   	cmpl    R8, #1	# unsigned
048   	jbe,us  B5  P=0.000001 C=-1.000000
048
04a   B4: #	N71 &lt;- B3  Freq: 0.999997
04a   	movl    [R10 + #16 (8-bit)], RBP	# int
04e   	movl    [R10 + #20 (8-bit)], RCX	# int
052   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

05d   	ret
05d
05e   B5: #	N71 &lt;- B3  Freq: 9.99998e-07
05e   	movl    RSI, #-28	# int
063   	movq    [rsp + #0], RDX	# spill
067   	movl    [rsp + #8], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
06f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=_ STK[0]=rsp + #8 STK[1]=#0 STK[2]=RBP
        # OopMap{[0]=Oop [8]=NarrowOop off=116}
074   	int3	# ShouldNotReachHere
074
079   B6: #	N71 &lt;- B1  Freq: 1.01328e-06
079   	movl    RBP, RCX	# spill
07b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Node::match @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=128}
080   	int3	# ShouldNotReachHere
080
085   B7: #	N71 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
087   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # OopMap{off=140}
08c   	int3	# ShouldNotReachHere
08c

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='270'>
{method}
 - this oop:          0x00007f375579c688
 - method holder:     &apos;java/lang/Math&apos;
 - constants:         0x00007f37557997e0 constant pool [324] {0x00007f37557997e0} for &apos;java/lang/Math&apos; cache=0x00007f375579e240
 - access:            0x81000009  public static 
 - name:              &apos;max&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - intrinsic id:      15 _max
 - highest level:     2
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680f0298: 0xaa000000 i2c: 0x00007f3758b22560 c2i: 0x00007f3758b2269c c2iUV: 0x00007f3758b2266f
 - compiled entry     0x00007f3758c6cd80
 - code size:         11
 - code start:        0x00007f375579c658
 - code end (excl):   0x00007f375579c663
 - method data:       0x00007f3755b21050
 - checked ex length: 0
 - linenumber start:  0x00007f375579c663
 - localvar length:   2
 - localvar start:    0x00007f375579c66e
 - compiled code: nmethod   2768  246       2       java.lang.Math::max (11 bytes)
#
#  int ( int, int )
#
#r018 rsi   : parm 0: int
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B3  Freq: 1
abababab
000   B1: #	B4 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	cmpl    RSI, RDX
00e   	jl,s   B4  P=0.015855 C=56323.000000
00e
010   B2: #	B3 &lt;- B1  Freq: 0.984145
010   	movl    RAX, RSI	# spill
010
012   B3: #	N1 &lt;- B4 B2  Freq: 1
012   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

01d   	ret
01d
01e   B4: #	B3 &lt;- B1  Freq: 0.015855
01e   	movl    RAX, RDX	# spill
020   	jmp,s   B3
020

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875527427840'/>
<dependency_failed type='leaf_type' ctxk='java/io/BufferedInputStream' witness='java/lang/UNIXProcess$ProcessPipeInputStream' stamp='2.866'/>
<writer thread='139875533833984'/>
<opto_assembly compile_id='354'>
{method}
 - this oop:          0x00007f37559acf58
 - method holder:     &apos;java/util/regex/Matcher&apos;
 - constants:         0x00007f37559a98c8 constant pool [380] {0x00007f37559a98c8} for &apos;java/util/regex/Matcher&apos; cache=0x00007f37559ad488
 - access:            0xc1000000  
 - name:              &apos;search&apos;
 - signature:         &apos;(I)Z&apos;
 - max stack:         5
 - max locals:        3
 - size of params:    2
 - method size:       12
 - highest level:     2
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758c680c0
 - code size:         109
 - code start:        0x00007f37559acea0
 - code end (excl):   0x00007f37559acf0d
 - method data:       0x00007f3755b21358
 - checked ex length: 0
 - linenumber start:  0x00007f37559acf0d
 - localvar length:   4
 - localvar start:    0x00007f37559acf26
 - compiled code: nmethod   2883  249       2       java.util.regex.Matcher::search (109 bytes)
#
#  bool ( java/util/regex/Matcher:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Matcher:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 128 --
#r191 rsp+124: in_preserve
#r190 rsp+120: return address
#r189 rsp+116: in_preserve
#r188 rsp+112: saved fp register
#r187 rsp+108: pad2, stack alignment
#r186 rsp+104: pad2, stack alignment
#r185 rsp+100: Fixed slot 1
#r184 rsp+96: Fixed slot 0
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1671: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B104 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (400 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

02c   	movq    R10, RSI	# spill
02f   	movb    [RSI + #44 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/util/regex/Matcher.hitEnd
033   	movb    [RSI + #45 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/util/regex/Matcher.requireEnd
037   	testl   RDX, RDX
039   	jl     B104  P=0.000000 C=1707.000000
039
03f   B2: #	B51 B3 &lt;- B1  Freq: 1
03f   	movl    R8, [RSI + #36 (8-bit)]	# int ! Field: java/util/regex/Matcher.oldLast
043   	movl    RSI, #-10	# int
048   	testl   R8, R8
04b   	jl     B51  P=0.065612 C=1707.000000
04b
051   B3: #	B112 B4 &lt;- B2 B51  Freq: 1
051   	movl    [R10 + #36 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.oldLast
055   	movl    [R10 + #28 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.first
059   	movl    R14, [R10 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
05d   	decode_heap_oop_not_null R13,R14
060   	leaq    R11, [R14 + #16 (8-bit)]	# ptr off8narrow
064   	movl    RBX, [R14 + #12 (8-bit)]	# range
068   	NullCheck R14
068
068   B4: #	B52 B5 &lt;- B3  Freq: 0.999999
068   	testl   RBX, RBX
06a   	jle     B52  P=0.047646 C=35848.000000
06a
070   B5: #	B101 B6 &lt;- B4  Freq: 0.952353
070   	movl    RSI, #-122	# int
075   	testl  RBX, RBX	# unsigned
077   	jbe,u  B101  P=0.000001 C=-1.000000
077
07d   B6: #	B100 B7 &lt;- B5  Freq: 0.952352
07d   	movq    [rsp + #0], R11	# spill
081   	movl    [rsp + #16], R14	# spill
086   	movq    RBP, R10	# spill
089   	movl    [rsp + #12], RDX	# spill
08d   	movl    R10, RBX	# spill
090   	decl    R10	# int
093   	cmpl    R10, RBX	# unsigned
096   	jnb,u  B100  P=0.000001 C=-1.000000
096
09c   B7: #	B8 &lt;- B6  Freq: 0.952351
09c   	movslq  RDX, RBX	# i2l
09f   	movq    RDI, R11	# spill
0a2   	movl    RSI, #-1	# int
0a7   	call_leaf_nofp,runtime  arrayof_jint_fill
        No JVM State Info
        # 
0b4   	movq    R10, RBP	# spill
0b4
0b7   B8: #	B113 B9 &lt;- B7 B52  Freq: 0.999997
0b7   	movl    [R10 + #24 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/util/regex/Matcher.acceptMode
0bb   	movl    R9, [R10 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
0bf   	movq    [rsp + #24], R10	# spill
0c4   	movl    RSI, #-10	# int
0c9   	movl    R11, [R10 + #48 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.parentPattern
0cd   	movl    R11, [R11 + #44 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern.root
0d1   	NullCheck R11
0d1
0d1   B9: #	B114 B10 &lt;- B8  Freq: 0.999996
0d1   	movl    R10, [R10 + #56 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.text
0d5   	movdl   XMM0, R10	# spill
0da   	decode_heap_oop_not_null R8,R11
0dd   	movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
0e1   	NullCheck R11
0e1
0e1   B10: #	B53 B11 &lt;- B9  Freq: 0.999995
0e1   	movdl   RDI, XMM0	# spill
0e5   	decode_heap_oop_not_null RAX,RDI
0e8   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$BnM: 0x00007f3724186020:Constant:exact *	# compressed klass ptr
0ef   	jne,u  B53  P=0.002921 C=-1.000000
0ef
0f5   B11: #	B115 B12 &lt;- B10  Freq: 0.997074
0f5   	# checkcastPP of R8
0f5   	movdq   XMM1, R8	# spill
0fa   	movl    R10, [R8 + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
0fe   	movdl   XMM2, R10	# spill
103   	movl    R10, [R8 + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.buffer
107   	movl    R11, [R10 + #12 (8-bit)]	# range
10b   	NullCheck R10
10b
10b   B12: #	B18 &lt;- B11  Freq: 0.997073
10b   	movdl   XMM7, RBX	# spill
10f   	movdq   XMM6, R13	# spill
114   	movl    [rsp + #32], R11	# spill
119   	movl    RSI, R11	# spill
11c   	decl    RSI	# int
11e   	movl    RDX, R11	# spill
121   	addl    RDX, #-2	# int
124   	movl    R11, [R8 + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
128   	movdl   XMM3, R11	# spill
12d   	decode_heap_oop_not_null R11,R10
130   	movdq   XMM8, R11	# spill
135   	movl    R11, R9	# spill
138   	subl    R11, [RSP + #32 (32-bit)]	# int
13d   	movl    [rsp + #8], R11	# spill
142   	movl    R11, #1	# int
148   	movdl   XMM10, R11	# spill
14d   	jmp,s   B18
14d
14f   B13: #	B110 B14 &lt;- B40 B30 B34  Freq: 7.29447
14f   	andl    RBX, #127	# int
152   	movl    RBP, R14	# spill
155   	incl    RBP	# int
157   	movdl   R11, XMM3	# spill
15c   	movl    R11, [R11 + #12 (8-bit)]	# range
160   	NullCheck R11
160
160   B14: #	B96 B15 &lt;- B13  Freq: 7.29446
160   	cmpl    RBX, R11	# unsigned
163   	jnb,u  B96  P=0.000001 C=-1.000000
163
169   B15: #	B111 B16 &lt;- B14  Freq: 7.29446
169   	movl    RBP, R14	# spill
16c   	movdl   R11, XMM3	# spill
171   	subl    RBP, [R11 + #16 + RBX &lt;&lt; #2]	# int
176   	incl    RBP	# int
178   	movdl   R11, XMM2	# spill
17d   	movl    R8, [R11 + #12 (8-bit)]	# range
181   	NullCheck R11
181
181   B16: #	B97 B17 &lt;- B15  Freq: 7.29445
181   	cmpl    R14, R8	# unsigned
184   	jnb,u  B97  P=0.000001 C=-1.000000
184
18a   B17: #	B18 &lt;- B16  Freq: 7.29444
18a   	movl    R11, [R11 + #16 + R13]	# int
18f   	cmpl    RBP, R11
192   	cmovll RBP, R11	# signed, int
196   	movl    R8, [rsp + #12]	# spill
19b   	addl    R8, RBP	# int
19e   	movl    [rsp + #12], R8	# spill
1a3   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$BnM::match @ bci:87  L[0]=XMM1 L[1]=rsp + #24 L[2]=R8 L[3]=XMM4 L[4]=XMM8 L[5]=rsp + #32 L[6]=rsp + #8 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{r10=NarrowOop rax=Oop xmm0=NarrowOop xmm1=Oop xmm2=NarrowOop xmm3=NarrowOop xmm4=Oop xmm6=Oop xmm8=Oop [0]=Derived_oop_xmm6 [16]=NarrowOop [24]=Oop off=419}
1a9
1a9   B18: #	B49 B19 &lt;- B12 B17 	Loop: B18-B17  Freq: 8.29152
1a9   	movl    R11, [rsp + #12]	# spill
1ae   	incl    R11	# int
1b1   	movl    R9, R11	# spill
1b4   	sarl    R9, #31
1b8   	andl    R9, R11	# int
1bb   	movl    R11, [rsp + #12]	# spill
1c0   	cmpl    R11, [RSP + #8 (32-bit)]
1c5   	jg     B49  P=0.013752 C=8726.000000
1c5
1cb   B19: #	B43 B20 &lt;- B18  Freq: 8.17749
1cb   	addl    R11, [RSP + #32 (32-bit)]	# int
1d0   	movdl   XMM5, R11	# spill
1d5   	movl    R11, #-2147483647	# int
1db   	subl    R11, R9	# int
1de   	movdl   RDI, XMM5	# spill
1e2   	decl    RDI	# int
1e4   	testl   RSI, RSI
1e6   	jl     B43  P=0.074668 C=22513.000000
1e6
1ec   B20: #	B95 B21 &lt;- B19  Freq: 7.5669
1ec   	movdl   R8, XMM0	# spill
1f1   	movl    R8, [R8 + #8 (8-bit)]	# compressed klass ptr
1f5   	NullCheck R8
1f5
1f5   B21: #	B95 B22 &lt;- B20  Freq: 7.56689
1f5   	movl    R9, #-1	# int
1fb   	subl    R9, [RSP + #12 (32-bit)]	# int
200   	movl    RBP, [rsp + #12]	# spill
204   	negl    RBP	# int
206   	cmpl    R11, R9
209   	cmovllt R11, R9	# max
20d   	movl    RCX, RBP	# spill
20f   	sarl    RCX, #31
212   	andl    RCX, RBP	# int
214   	cmpl    R8, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
21b   	jne,u  B95  P=0.000001 C=-1.000000
21b
221   B22: #	B95 B23 &lt;- B21  Freq: 7.56688
221   	movq    R8, RAX	# spill
224   	# checkcastPP of R8
224   	movdq   XMM4, R8	# spill
229   	movl    R9, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
22d   	movl    R8, [R9 + #12 (8-bit)]	# range
231   	NullCheck R9
231
231   B23: #	B95 B24 &lt;- B22  Freq: 7.56687
231   	movl    RBX, [rsp + #12]	# spill
235   	cmpl    RBX, R8	# unsigned
238   	jnb,u  B95  P=0.000001 C=-1.000000
238
23e   B24: #	B95 B25 &lt;- B23  Freq: 7.56686
23e   	movl    RBP, R8	# spill
241   	subl    RBP, [RSP + #12 (32-bit)]	# int
245   	addl    RCX, #2147483647	# int
24b   	cmpl    RDI, R8	# unsigned
24e   	jnb,u  B95  P=0.000001 C=-1.000000
24e
254   B25: #	B95 B26 &lt;- B24  Freq: 7.56686
254   	movl    RBX, #-1	# int
259   	cmpl    R11, RBX
25c   	movl    RDI, #-1	# int
261   	cmovllt R11, RDI	# max
265   	movl    RBX, [rsp + #32]	# spill
269   	testl  RBX, RBX	# unsigned
26b   	jbe,u  B95  P=0.000001 C=-1.000000
26b
271   B26: #	B95 B27 &lt;- B25  Freq: 7.56685
271   	decl    RBP	# int
273   	cmpl    RCX, RBP
275   	cmovlgt RCX, RBP	# min
278   	cmpl    RDX, RCX
27a   	movl    RDI, RDX	# spill
27c   	cmovlgt RDI, RCX	# min
27f   	cmpl    RSI, RBX	# unsigned
281   	jnb,u  B95  P=0.000001 C=-1.000000
281
287   B27: #	B28 &lt;- B26  Freq: 7.56684
287   	movl    RBX, #-1	# int
28c   	cmpl    RDI, RBX
28e   	movl    RCX, #-1	# int
293   	cmovllt RDI, RCX	# max
296   	movl    R14, RSI	# spill
296
299   B28: #	B98 B29 &lt;- B27 B31 	Loop: B28-B31 inner pre of N1602 Freq: 11.358
299   	movl    RBX, R14	# spill
29c   	addl    RBX, [RSP + #12 (32-bit)]	# int
2a0   	testl   RBX, RBX
2a2   	jl     B98  P=0.000000 C=7895.000000
2a2
2a8   B29: #	B99 B30 &lt;- B28  Freq: 11.358
2a8   	movslq  R13, R14	# i2l
2ab   	salq    R13, #2
2af   	movl    RCX, [R10 + #16 + R13]	# int
2b4   	cmpl    RBX, R8
2b7   	jge     B99  P=0.000000 C=7895.000000
2b7
2bd   B30: #	B13 B31 &lt;- B29  Freq: 11.358
2bd   	movzwl  RBX, [R9 + #16 + RBX &lt;&lt; #1]	# ushort/char
2c3   	cmpl    RBX, RCX
2c5   	jne     B13  P=0.332421 C=20832.000000
2c5
2cb   B31: #	B28 B32 &lt;- B30  Freq: 7.58237
2cb   	decl    R14	# int
2ce   	cmpl    R14, RDI
2d1   	jg,s   B28	# loop end  P=0.500000 C=13907.000000
2d1
2d3   B32: #	B36 B33 &lt;- B31  Freq: 3.79118
2d3   	cmpl    R14, R11
2d6   	jle,s   B36  P=0.000001 C=-1.000000
2d6
2d8   B33: #	B34 &lt;- B32  Freq: 3.79118
2d8   	# castII of R14
      	nop 	# 8 bytes pad for loops and calls

2e0   B34: #	B13 B35 &lt;- B33 B35 	Loop: B34-B35 inner main of N215 Freq: 9.91759
2e0   	movslq  R13, R14	# i2l
2e3   	movl    RBX, R14	# spill
2e6   	addl    RBX, [RSP + #12 (32-bit)]	# int
2ea   	salq    R13, #2
2ee   	movzwl  RBX, [R9 + #16 + RBX &lt;&lt; #1]	# ushort/char
2f4   	movl    RDI, [R10 + #16 + R13]	# int
2f9   	cmpl    RBX, RDI
2fb   	jne     B13  P=0.332421 C=20832.000000
2fb
301   B35: #	B34 B36 &lt;- B34  Freq: 6.62078
301   	decl    R14	# int
304   	cmpl    R14, R11
307   	jg,s   B34	# loop end  P=0.925332 C=13907.000000
307
309   B36: #	B43 B37 &lt;- B32 B35  Freq: 0.494364
309   	cmpl    R14, #-1
30d   	jle,s   B43  P=0.100000 C=-1.000000
30d
30f   B37: #	B38 &lt;- B36  Freq: 0.444927
30f   	# castII of R14
30f
30f   B38: #	B98 B39 &lt;- B37 B42 	Loop: B38-B42 inner post of N1602 Freq: 0.667848
30f   	movl    RBX, R14	# spill
312   	addl    RBX, [RSP + #12 (32-bit)]	# int
316   	movslq  R13, R14	# i2l
319   	salq    R13, #2
31d   	movl    R11, [R10 + #16 + R13]	# int
322   	testl   RBX, RBX
324   	jl     B98  P=0.000000 C=7895.000000
324
32a   B39: #	B99 B40 &lt;- B38  Freq: 0.667847
32a   	cmpl    RBX, R8
32d   	jge     B99  P=0.000000 C=7895.000000
32d
333   B40: #	B13 B41 &lt;- B39  Freq: 0.667847
333   	movzwl  RBX, [R9 + #16 + RBX &lt;&lt; #1]	# ushort/char
339   	movl    RDI, R14	# spill
33c   	decl    RDI	# int
33e   	cmpl    RBX, R11
341   	jne     B13  P=0.332421 C=20832.000000
341
347   B41: #	B43 B42 &lt;- B40  Freq: 0.44584
347   	cmpl    RDI, #-1
34a   	jle,s   B43	# loop end  P=0.500000 C=13907.000000
34a
34c   B42: #	B38 &lt;- B41  Freq: 0.22292
34c   	movl    R14, RDI	# spill
34f   	jmp,s   B38
34f
351   B43: #	B116 B44 &lt;- B36 B19 B41  Freq: 0.882953
351   	movq    R8, [rsp + #24]	# spill
356   	movl    R11, [rsp + #12]	# spill
35b   	movl    [R8 + #28 (8-bit)], R11	# int ! Field: java/util/regex/Matcher.first
35f   	movdq   R11, XMM1	# spill
364   	movl    RBP, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
368   	movl    R8, [RBP + #8 (8-bit)]	# compressed klass ptr
36c   	NullCheck RBP
36c
36c   B44: #	B102 B45 &lt;- B43  Freq: 0.882952
36c   	cmpl    R8, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f372c06be40:Constant:exact *	# compressed klass ptr
373   	jne,u  B102  P=0.000001 C=-1.000000
373
379   B45: #	B103 B46 &lt;- B44  Freq: 0.882952
379   	movq    R11, [rsp + #24]	# spill
37e   	movdl   R8, XMM5	# spill
383   	movl    [R11 + #32 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.last
387   	movdl   RCX, XMM7	# spill
38b   	cmpl    RCX, #1	# unsigned
38e   	jbe,u  B103  P=0.000001 C=-1.000000
38e
394   B46: #	B47 &lt;- B45  Freq: 0.882951
394   	movq    R10, [rsp + #0]	# spill
398   	movl    RCX, [rsp + #12]	# spill
39c   	movl    [R10], RCX	# int
39f   	movl    R9, [rsp + #16]	# spill
3a4   	movl    [R9 + #20 (8-bit)], R8	# int
3a8   	movl    [R10], RCX	# int
3ab   	movl    [R9 + #20 (8-bit)], R8	# int
3af   	movdl   R10, XMM10	# spill
3af
3b4   B47: #	B50 B48 &lt;- B46 B49 B80  Freq: 0.999891
3b4   	movl    R8, [R11 + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
3b8   	testl   R10, R10
3bb   	je,s   B50  P=0.068341 C=1712.000000
3bb
3bd   B48: #	N1671 &lt;- B50 B47  Freq: 0.999891
3bd   	movl    [R11 + #36 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.oldLast
3c1   	movl    RAX, R10	# spill
3c4   	addq    rsp, 112	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

3cf   	ret
3cf
3d0   B49: #	B47 &lt;- B18  Freq: 0.114025
3d0   	movq    R11, [rsp + #24]	# spill
3d5   	movb    [R11 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
3da   	xorl    R10, R10	# int
3dd   	jmp,s   B47
3dd
3df   B50: #	B48 &lt;- B47  Freq: 0.0683337
3df   	movl    [R11 + #28 (8-bit)], #-1	# int ! Field: java/util/regex/Matcher.first
3e7   	jmp,s   B48
3e7
3e9   B51: #	B3 &lt;- B2  Freq: 0.0656122
3e9   	movl    R8, RDX	# spill
3ec   	jmp     B3
3ec
3f1   B52: #	B8 &lt;- B4  Freq: 0.0476455
3f1   	movl    [rsp + #12], RDX	# spill
3f5   	movl    [rsp + #16], R14	# spill
3fa   	movq    [rsp + #0], R11	# spill
3fe   	jmp     B8
3fe
403   B53: #	B106 B54 &lt;- B10  Freq: 0.00292055
403   	movl    RSI, #-155	# int
408   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Start: 0x00007f37241860f0:Constant:exact *	# compressed klass ptr
40f   	jne,u  B106  P=0.000001 C=-1.000000
40f
415   B54: #	B108 B55 &lt;- B53  Freq: 0.00292055
415   	movq    RCX, R8	# spill
418   	# checkcastPP of RCX
418   	decode_heap_oop_not_null RDX,RDI
41b   	movl    RAX, R9	# spill
41e   	subl    RAX, [RCX + #16 (8-bit)]	# int
421   	decode_heap_oop R13,RDI
4ac   	movl    R10, [rsp + #12]	# spill
4b1   	cmpl    R10, RAX
4b4   	jg     B108  P=0.000000 C=303.000000
4b4
4ba   B55: #	B105 B56 &lt;- B54  Freq: 0.00292055
4ba   	cmpl    RAX, #2147483646
4c0   	jg     B105  P=0.000001 C=-1.000000
4c0
4c6   B56: #	B67 &lt;- B55  Freq: 0.00292054
4c6   	movl    R8, RAX	# spill
4c9   	incl    R8	# int
4cc   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #52], rax
	movq    rax, [rsp - #8]
4de   	xorl    RBX, RBX	# int
4e0   	jmp     B67
4e0
4e5   B57: #	B58 &lt;- B69  top-of-loop Freq: 0.0793369
4e5   	movl    RCX, [rsp + #52]	# spill
4e9   	xorl    R8, R8	# int
4ec   	movq    R9, [rsp + #24]	# spill
4ec
4f1   B58: #	B75 B59 &lt;- B74 B57  Freq: 0.116916
4f1   	movl    R11, [RSI + #16 (8-bit)]	# int ! Field: java/util/regex/Pattern$Curly.type
4f5   	testl   R11, R11
4f8   	je     B75  P=0.100000 C=-1.000000
4f8
4fe   B59: #	B77 B60 &lt;- B58  Freq: 0.105224
4fe   	cmpl    R11, #1
502   	je     B77  P=0.100000 C=-1.000000
502
508   B60: #	B124 B61 &lt;- B59  Freq: 0.0947016
508   	movq    [rsp + #24], R9	# spill
50d   	movq    RDX, R9	# spill
510   	movq    R9, [rsp + #40]	# spill
      	nop 	# 2 bytes pad for loops and calls
517   	call,static  java.util.regex.Pattern$Curly::match2
        # java.util.regex.Pattern$Curly::match @ bci:82  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #8 L[1]=rsp + #24 L[2]=rsp + #52 L[3]=rsp + #4 L[4]=rsp + #32
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [8]=Oop [16]=Oop [24]=Oop [40]=Oop off=1308}
51c
51c   B61: #	B63 &lt;- B60  Freq: 0.0946997
        # Block is sole successor of call
51c   	jmp,s   B63
51c
51e   B62: #	B63 &lt;- B72  Freq: 0.0417541
51e   	xorl    RAX, RAX	# int
520
520   B63: #	B64 &lt;- B62 B76 B78 B61  Freq: 0.158667
520   	movq    R11, [rsp + #24]	# spill
525   	movl    RCX, [rsp + #52]	# spill
525
529   B64: #	B92 B65 &lt;- B63 B89 B90  Freq: 0.161312
529   	movl    RBP, [R11 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
52d   	movl    R10, [R11 + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
531   	testl   RAX, RAX
533   	jne     B92  P=0.000665 C=16530.000000
533
539   B65: #	B79 B66 &lt;- B64  Freq: 0.161205
539   	movl    R9, [R11 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
53d   	movl    R10, [rsp + #48]	# spill
542   	cmpl    R10, [RSP + #36 (32-bit)]
547   	jge     B79	# loop end  P=0.017417 C=16520.000000
547
54d   B66: #	B67 &lt;- B65  Freq: 0.158397
54d   	movl    [rsp + #52], R10	# spill
552   	movq    [rsp + #24], R11	# spill
557   	movl    RBX, [rsp + #0]	# spill
55a   	movl    RDI, [rsp + #4]	# spill
55e   	movq    RCX, [rsp + #8]	# spill
563   	movq    RDX, [rsp + #16]	# spill
568   	movl    RAX, [rsp + #32]	# spill
56c   	movq    R13, [rsp + #40]	# spill
571   	movl    R8, [rsp + #36]	# spill
571
576   B67: #	B117 B68 &lt;- B56 B66 	Loop: B67-B66  Freq: 0.161319
576   	movl    RBP, [RCX + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
579   	movl    R11, [rsp + #52]	# spill
57e   	incl    R11	# int
581   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
585   	NullCheck RBP
585
585   B68: #	B81 B69 &lt;- B67  Freq: 0.161319
585   	movl    [rsp + #48], R11	# spill
58a   	movl    [rsp + #36], R8	# spill
58f   	movq    [rsp + #40], R13	# spill
594   	movl    [rsp + #32], RAX	# spill
598   	movq    [rsp + #16], RDX	# spill
59d   	movq    [rsp + #8], RCX	# spill
5a2   	movl    [rsp + #4], RDI	# spill
5a6   	movl    [rsp + #0], RBX	# spill
5a9   	decode_heap_oop_not_null RSI,RBP
5ac   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Curly: 0x00007f372428cab0:Constant:exact *	# compressed klass ptr
5b3   	jne,u  B81  P=0.016394 C=-1.000000
5b3
5b9   B69: #	B57 B70 &lt;- B68  Freq: 0.158674
5b9   	# checkcastPP of RSI
5b9   	movl    R11, [RSI + #20 (8-bit)]	# int ! Field: java/util/regex/Pattern$Curly.cmin
5bd   	testl   R11, R11
5c0   	jle     B57  P=0.500000 C=-1.000000
5c0
5c6   B70: #	B71 &lt;- B69  Freq: 0.0793369
5c6   	movl    RCX, [rsp + #52]	# spill
5ca   	xorl    RBP, RBP	# int
      	nop 	# 4 bytes pad for loops and calls

5d0   B71: #	B125 B72 &lt;- B70 B73 	Loop: B71-B73 inner  Freq: 0.417549
5d0   	movl    R10, [RSI + #28 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Curly.atom
5d4   	movq    [rsp + #56], RSI	# spill
5d9   	decode_heap_oop RSI,R10
664   	movq    RDX, [rsp + #24]	# spill
669   	movq    R8, [rsp + #40]	# spill
      	nop 	# 3 bytes pad for loops and calls
671   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$Node::match
        # java.util.regex.Pattern$Curly::match @ bci:19  L[0]=rsp + #56 L[1]=rsp + #24 L[2]=_ L[3]=rsp + #4 L[4]=RBP
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #8 L[1]=rsp + #24 L[2]=rsp + #52 L[3]=rsp + #4 L[4]=rsp + #32
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [8]=Oop [16]=Oop [24]=Oop [40]=Oop [56]=Oop off=1664}
680
680   B72: #	B62 B73 &lt;- B71  Freq: 0.417541
        # Block is sole successor of call
680   	movq    RSI, [rsp + #56]	# spill
685   	movl    R11, [RSI + #20 (8-bit)]	# int ! Field: java/util/regex/Pattern$Curly.cmin
689   	testl   RAX, RAX
68b   	je     B62  P=0.100000 C=-1.000000
68b
691   B73: #	B71 B74 &lt;- B72  Freq: 0.375787
691   	incl    RBP	# int
693   	movq    R9, [rsp + #24]	# spill
698   	movl    RCX, [R9 + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
69c   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$Curly::match @ bci:38  L[0]=RSI L[1]=rsp + #24 L[2]=RCX L[3]=rsp + #4 L[4]=RBP
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #8 L[1]=rsp + #24 L[2]=rsp + #52 L[3]=rsp + #4 L[4]=rsp + #32
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{r9=Oop rsi=Oop [4]=NarrowOop [8]=Oop [16]=Oop [24]=Oop [40]=Oop off=1692}
6a2   	cmpl    RBP, R11
6a5   	jl     B71  P=0.900000 C=-1.000000
6a5
6ab   B74: #	B58 &lt;- B73  Freq: 0.0375787
6ab   	movl    R8, RBP	# spill
6ae   	jmp     B58
6ae
6b3   B75: #	B123 B76 &lt;- B58  Freq: 0.0116916
6b3   	movq    [rsp + #24], R9	# spill
6b8   	movq    RDX, R9	# spill
6bb   	movq    R9, [rsp + #40]	# spill
6c0   	movq    RBP, RDX	# spill
6c3   	call,static  java.util.regex.Pattern$Curly::match0
        # java.util.regex.Pattern$Curly::match @ bci:54  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #8 L[1]=RBP L[2]=rsp + #52 L[3]=rsp + #4 L[4]=rsp + #32
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [4]=NarrowOop [8]=Oop [16]=Oop [24]=Oop [40]=Oop off=1736}
6c8
6c8   B76: #	B63 &lt;- B75  Freq: 0.0116913
        # Block is sole successor of call
6c8   	jmp     B63
6c8
6cd   B77: #	B122 B78 &lt;- B59  Freq: 0.0105224
6cd   	movq    [rsp + #24], R9	# spill
6d2   	movq    RDX, R9	# spill
6d5   	movq    R9, [rsp + #40]	# spill
6da   	movq    RBP, RDX	# spill
      	nop 	# 2 bytes pad for loops and calls
6df   	call,static  java.util.regex.Pattern$Curly::match1
        # java.util.regex.Pattern$Curly::match @ bci:72  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #8 L[1]=RBP L[2]=rsp + #52 L[3]=rsp + #4 L[4]=rsp + #32
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [4]=NarrowOop [8]=Oop [16]=Oop [24]=Oop [40]=Oop off=1764}
6e4
6e4   B78: #	B63 &lt;- B77  Freq: 0.0105222
        # Block is sole successor of call
6e4   	jmp     B63
6e4
6e9   B79: #	B80 &lt;- B65  Freq: 0.00280764
6e9   	movb    [R11 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
6ee   	movl    R8, [rsp + #0]	# spill
6ee
6f2   B80: #	B47 &lt;- B94 B79  Freq: 0.002915
6f2   	movl    R10, R8	# spill
6f5   	jmp     B47
6f5
6fa   B81: #	B107 B82 &lt;- B68  Freq: 0.00264473
6fa   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Single: 0x00007f372428cb80:Constant:exact *	# compressed klass ptr
701   	jne,u  B107  P=0.000001 C=-1.000000
701
707   B82: #	B90 B83 &lt;- B81  Freq: 0.00264472
707   	movl    RCX, [rsp + #52]	# spill
70b   	cmpl    RCX, R9
70e   	jge     B90  P=0.500000 C=-1.000000
70e
714   B83: #	B118 B84 &lt;- B82  Freq: 0.00132236
714   	movq    R10, RSI	# spill
717   	# checkcastPP of R10
717   	movq    [rsp + #56], R10	# spill
71c   	movq    RSI, R13	# spill
71f   	movl    RDX, [rsp + #52]	# spill
      	nop 	# 2 bytes pad for loops and calls
725   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.lang.CharSequence::charAt
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:11  L[0]=rsp + #56 L[1]=rsp + #24 L[2]=rsp + #52 L[3]=rsp + #4 STK[0]=rsp + #56
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #8 L[1]=rsp + #24 L[2]=rsp + #52 L[3]=rsp + #4 L[4]=rsp + #32
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [8]=Oop [16]=Oop [24]=Oop [40]=Oop [56]=Oop off=1844}
734
734   B84: #	B119 B85 &lt;- B83  Freq: 0.00132234
        # Block is sole successor of call
734   	movq    RSI, [rsp + #56]	# spill
739   	movl    RDX, RAX	# spill
73b   	call,static  java.util.regex.Pattern$Single::isSatisfiedBy
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:16  L[0]=rsp + #56 L[1]=rsp + #24 L[2]=rsp + #52 L[3]=rsp + #4
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #8 L[1]=rsp + #24 L[2]=rsp + #52 L[3]=rsp + #4 L[4]=rsp + #32
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [8]=Oop [16]=Oop [24]=Oop [40]=Oop [56]=Oop off=1856}
740
740   B85: #	B91 B86 &lt;- B84  Freq: 0.00132231
        # Block is sole successor of call
740   	movq    R10, [rsp + #56]	# spill
745   	movl    R11, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
749   	testl   RAX, RAX
74b   	je     B91  P=0.100000 C=-1.000000
74b
751   B86: #	B120 B87 &lt;- B85  Freq: 0.00119008
751   	decode_heap_oop RSI,R11
7dc   	movq    RDX, [rsp + #24]	# spill
7e1   	movl    RCX, [rsp + #48]	# spill
7e5   	movq    R8, [rsp + #16]	# spill
      	nop 	# 3 bytes pad for loops and calls
7ed   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$Node::match
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #8 L[1]=rsp + #24 L[2]=rsp + #52 L[3]=rsp + #4 L[4]=rsp + #32
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [8]=Oop [16]=Oop [24]=Oop [40]=Oop off=2044}
7fc
7fc   B87: #	B91 B88 &lt;- B86  Freq: 0.00119005
        # Block is sole successor of call
7fc   	testl   RAX, RAX
7fe   	je,s   B91  P=0.100000 C=-1.000000
7fe
800   B88: #	B89 &lt;- B87  Freq: 0.00107105
800   	movl    RAX, #1	# int
800
805   B89: #	B64 &lt;- B91 B88  Freq: 0.00132229
805   	movq    R11, [rsp + #24]	# spill
80a   	movl    RCX, [rsp + #52]	# spill
80e   	jmp     B64
80e
813   B90: #	B64 &lt;- B82  Freq: 0.00132236
813   	movq    R11, [rsp + #24]	# spill
818   	movb    [R11 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
81d   	xorl    RAX, RAX	# int
81f   	jmp     B64
81f
824   B91: #	B89 &lt;- B87 B85  Freq: 0.000251236
824   	xorl    RAX, RAX	# int
826   	jmp,s   B89
826
828   B92: #	B128 B93 &lt;- B64  Freq: 0.000107351
828   	movl    [R11 + #28 (8-bit)], RCX	# int ! Field: java/util/regex/Matcher.first
82c   	movl    R9, [RBP + #12 (8-bit)]	# range
830   	NullCheck RBP
830
830   B93: #	B109 B94 &lt;- B92  Freq: 0.000107351
830   	cmpl    R9, #1	# unsigned
834   	jbe,u  B109  P=0.000001 C=-1.000000
834
83a   B94: #	B80 &lt;- B93  Freq: 0.000107351
83a   	movl    [RBP + #16 (8-bit)], RCX	# int
83d   	movl    [RBP + #20 (8-bit)], R10	# int
841   	movl    R8, #1	# int
847   	jmp     B80
847
84c   B95: #	N1671 &lt;- B26 B20 B21 B22 B23 B24 B25  Freq: 5.34705e-05
84c   	movl    RBP, [rsp + #12]	# spill
850   	movl    [rsp + #0], R10	# spill
854   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
866   	movl    [rsp + #8], RSI	# spill
86a   	movsd   [rsp + #40], XMM1	# spill
870   	movss   [rsp + #12], XMM0	# spill
876   	movl    RSI, #-122	# int
87b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:37  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #12 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [12]=NarrowOop [24]=Oop [40]=Oop off=2176}
880   	int3	# ShouldNotReachHere
880
885   B96: #	N1671 &lt;- B14  Freq: 7.39133e-06
885   	movl    [rsp + #0], R10	# spill
889   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
89b   	movl    [rsp + #8], R14	# spill
8a0   	movl    [rsp + #16], RBX	# spill
8a4   	movl    RSI, #-28	# int
8a9   	movsd   [rsp + #40], XMM1	# spill
8af   	movsd   [rsp + #56], XMM4	# spill
8b5   	movl    R10, [rsp + #32]	# spill
8ba   	movl    [rsp + #20], R10	# spill
8bf   	movss   [rsp + #32], XMM3	# spill
      	nop 	# 2 bytes pad for loops and calls
8c7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=rsp + #56 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_ STK[0]=rsp + #12 STK[1]=RBP STK[2]=rsp + #32 STK[3]=rsp + #16
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=NarrowOop [40]=Oop [56]=Oop off=2252}
8cc   	int3	# ShouldNotReachHere
8cc
8d1   B97: #	N1671 &lt;- B16  Freq: 7.39131e-06
8d1   	movl    [rsp + #0], R10	# spill
8d5   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
8e7   	movl    R10, [rsp + #12]	# spill
8ec   	movl    [rsp + #8], R10	# spill
8f1   	movl    [rsp + #12], R14	# spill
8f6   	movsd   [rsp + #40], XMM1	# spill
8fc   	movsd   [rsp + #48], XMM4	# spill
902   	movl    [rsp + #36], R11	# spill
907   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
90f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=_ L[8]=_ STK[0]=rsp + #8 STK[1]=RBP STK[2]=rsp + #36 STK[3]=rsp + #12
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [36]=NarrowOop [40]=Oop [48]=Oop off=2324}
914   	int3	# ShouldNotReachHere
914
919   B98: #	N1671 &lt;- B38 B28  Freq: 6.01294e-06
919   	movl    RBP, [rsp + #12]	# spill
91d   	movl    [rsp + #0], R10	# spill
921   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
933   	movl    [rsp + #8], R14	# spill
938   	movl    [rsp + #16], RBX	# spill
93c   	movsd   [rsp + #40], XMM1	# spill
942   	movl    R10, [rsp + #32]	# spill
947   	movl    [rsp + #20], R10	# spill
94c   	movsd   [rsp + #32], XMM4	# spill
952   	movl    RSI, #-155	# int
957   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #32 L[1]=rsp + #16 STK[0]=rsp + #16
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=2396}
95c   	int3	# ShouldNotReachHere
95c
961   B99: #	N1671 &lt;- B39 B29  Freq: 5.73438e-06
961   	movl    RBP, [rsp + #12]	# spill
965   	movl    [rsp + #0], R10	# spill
969   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
97b   	movl    [rsp + #8], R14	# spill
980   	movl    [rsp + #16], RBX	# spill
984   	movl    [rsp + #20], R8	# spill
989   	movsd   [rsp + #40], XMM1	# spill
98f   	movsd   [rsp + #64], XMM4	# spill
995   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
99b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #64 L[1]=rsp + #16 STK[0]=rsp + #16 STK[1]=rsp + #20
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #64 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [40]=Oop [64]=Oop off=2464}
9a0   	int3	# ShouldNotReachHere
9a0
9a5   B100: #	B101 &lt;- B6  Freq: 9.64998e-07
9a5   	movq    R10, RBP	# spill
9a5
9a8   B101: #	N1671 &lt;- B100 B5  Freq: 1.91735e-06
9a8   	movl    RBP, RDX	# spill
9aa   	movq    [rsp + #0], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
9af   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:55  L[0]=rsp + #0 L[1]=RBP L[2]=#0
        # OopMap{[0]=Oop off=2484}
9b4   	int3	# ShouldNotReachHere
9b4
9b9   B102: #	N1671 &lt;- B44  Freq: 8.82952e-07
9b9   	movl    RSI, #-34	# int
9be   	movl    R11, [rsp + #12]	# spill
9c3   	movl    [rsp + #0], R11	# spill
9c7   	movl    [rsp + #4], R10	# spill
9cc   	movsd   [rsp + #40], XMM1	# spill
9d2   	movss   [rsp + #36], XMM5	# spill
9d8   	movss   [rsp + #56], XMM0	# spill
      	nop 	# 1 bytes pad for loops and calls
9df   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=rsp + #0 L[3]=rsp + #56 L[4]=rsp + #4 L[5]=rsp + #32 L[6]=rsp + #8 L[7]=_ L[8]=_ STK[0]=RBP STK[1]=rsp + #24 STK[2]=rsp + #36 STK[3]=rsp + #56
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{rbp=NarrowOop [4]=NarrowOop [24]=Oop [40]=Oop [56]=NarrowOop off=2532}
9e4   	int3	# ShouldNotReachHere
9e4
9e9   B103: #	N1671 &lt;- B45  Freq: 8.82952e-07
9e9   	movl    RSI, #-28	# int
9ee   	movl    RBP, [rsp + #12]	# spill
9f2   	movl    [rsp + #0], R10	# spill
9f6   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
a08   	movsd   [rsp + #40], XMM1	# spill
a0e   	movss   [rsp + #12], XMM0	# spill
a14   	movl    R10, [rsp + #32]	# spill
a19   	movl    [rsp + #20], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
a1f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_ STK[0]=rsp + #16 STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #12 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [12]=NarrowOop [16]=NarrowOop [24]=Oop [40]=Oop off=2596}
a24   	int3	# ShouldNotReachHere
a24
a29   B104: #	N1671 &lt;- B1  Freq: 4.76837e-07
a29   	movl    RSI, #-155	# int
a2e   	movl    [rsp + #0], RDX	# spill
a31   	movq    [rsp + #8], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
a37   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::search @ bci:11  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #0
        # OopMap{[8]=Oop off=2620}
a3c   	int3	# ShouldNotReachHere
a3c
a41   B105: #	N1671 &lt;- B55  Freq: 2.95933e-09
a41   	movl    RSI, #-130	# int
a46   	movl    RBP, [rsp + #12]	# spill
a4a   	movq    R10, [rsp + #24]	# spill
a4f   	movq    [rsp + #8], RCX	# spill
a54   	movq    [rsp + #16], R10	# spill
a59   	movl    [rsp + #24], RDI	# spill
a5d   	movl    [rsp + #28], RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
a63   	call,static  wrapper for: uncommon_trap(reason=&apos;loop_limit_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Start::match @ bci:37  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #24 L[4]=rsp + #28
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #16 L[1]=_ L[2]=_
        # OopMap{[8]=Oop [16]=Oop [24]=NarrowOop off=2664}
a68   	int3	# ShouldNotReachHere
a68
a6d   B106: #	N1671 &lt;- B53  Freq: 2.92055e-09
a6d   	movl    RBP, [rsp + #12]	# spill
a71   	movq    R10, [rsp + #24]	# spill
a76   	movl    [rsp + #8], R11	# spill
a7b   	movq    [rsp + #16], R10	# spill
a80   	movl    [rsp + #12], RDI	# spill
a84   	movl    RSI, #-58	# int
      	nop 	# 2 bytes pad for loops and calls
a8b   	call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #16 L[1]=_ L[2]=_ STK[0]=rsp + #8 STK[1]=rsp + #24 STK[2]=RBP STK[3]=rsp + #12
        # OopMap{[8]=NarrowOop [12]=NarrowOop [16]=Oop [24]=Oop off=2704}
a90   	int3	# ShouldNotReachHere
a90
a95   B107: #	N1671 &lt;- B81  Freq: 2.64473e-09
a95   	movl    RSI, #-58	# int
      	nop 	# 1 bytes pad for loops and calls
a9b   	call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #8 L[1]=rsp + #24 L[2]=rsp + #52 L[3]=rsp + #4 L[4]=rsp + #32 STK[0]=RBP STK[1]=rsp + #24 STK[2]=rsp + #52 STK[3]=rsp + #4
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{rbp=NarrowOop [4]=NarrowOop [8]=Oop [24]=Oop off=2720}
aa0   	int3	# ShouldNotReachHere
aa0
aa5   B108: #	N1671 &lt;- B54  Freq: 1.39263e-09
aa5   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
ab6   	movq    [rsp + #16], RCX	# spill
abb   	movl    [rsp + #4], RDI	# spill
abf   	movl    [rsp + #32], RAX	# spill
ac3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Start::match @ bci:10  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=rsp + #0 L[3]=rsp + #4 L[4]=_ STK[0]=rsp + #0 STK[1]=rsp + #32
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [16]=Oop [24]=Oop off=2760}
ac8   	int3	# ShouldNotReachHere
ac8
acd   B109: #	N1671 &lt;- B93  Freq: 1.07351e-10
acd   	movl    RSI, #-28	# int
ad2   	movq    [rsp + #8], R11	# spill
ad7   	movl    [rsp + #16], RCX	# spill
adb   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Start::match @ bci:64  L[0]=_ L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP STK[1]=#0 STK[2]=rsp + #16
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #8 L[1]=_ L[2]=_
        # OopMap{rbp=NarrowOop [8]=Oop off=2784}
ae0   	int3	# ShouldNotReachHere
ae0
ae5   B110: #	N1671 &lt;- B13  Freq: 7.39133e-06
ae5   	movl    RBP, RBX	# spill
ae7   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
aef   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=2804}
af4   	int3	# ShouldNotReachHere
af4
af9   B111: #	N1671 &lt;- B15  Freq: 7.39132e-06
af9   	movl    RBP, R14	# spill
afc   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
b03   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=2824}
b08   	int3	# ShouldNotReachHere
b08
b0d   B112: #	N1671 &lt;- B3  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
b0f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:51  L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=2836}
b14   	int3	# ShouldNotReachHere
b14
b19   B113: #	N1671 &lt;- B8  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
b1b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:77  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap{off=2848}
b20   	int3	# ShouldNotReachHere
b20
b25   B114: #	N1671 &lt;- B9  Freq: 1.01327e-06
b25   	movss   [rsp + #8], XMM0	# spill
b2b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL STK[1]=rsp + #24 STK[2]=rsp + #12 STK[3]=rsp + #8
        # OopMap{[8]=NarrowOop [24]=Oop off=2864}
b30   	int3	# ShouldNotReachHere
b30
b35   B115: #	N1671 &lt;- B11  Freq: 1.01031e-06
      	nop 	# 2 bytes pad for loops and calls
b37   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=2876}
b3c   	int3	# ShouldNotReachHere
b3c
b41   B116: #	N1671 &lt;- B43  Freq: 8.94678e-07
b41   	movq    RBP, [rsp + #24]	# spill
b46   	movss   [rsp + #0], XMM5	# spill
b4b   	movss   [rsp + #4], XMM0	# spill
b51   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
b57   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #4
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=Oop [4]=NarrowOop off=2908}
b5c   	int3	# ShouldNotReachHere
b5c
b61   B117: #	N1671 &lt;- B67  Freq: 1.63461e-07
b61   	movl    RSI, #-10	# int
b66   	movl    [rsp + #4], RDI	# spill
      	nop 	# 1 bytes pad for loops and calls
b6b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=rsp + #24 STK[2]=rsp + #52 STK[3]=rsp + #4
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [24]=Oop off=2928}
b70   	int3	# ShouldNotReachHere
b70
b75   B118: #	B121 &lt;- B83  Freq: 1.32236e-08
b75   	# exception oop is in rax; no code emitted
b75   	jmp,s   B121
b75
b77   B119: #	B121 &lt;- B84  Freq: 1.32234e-08
b77   	# exception oop is in rax; no code emitted
b77   	jmp,s   B121
b77
b79   B120: #	B121 &lt;- B86  Freq: 1.19008e-08
b79   	# exception oop is in rax; no code emitted
b79
b79   B121: #	B127 &lt;- B118 B119 B120  Freq: 3.83478e-08
b79   	movq    RSI, RAX	# spill
b7c   	jmp,s   B127
b7c
b7e   B122: #	B126 &lt;- B77  Freq: 1.05224e-07
b7e   	# exception oop is in rax; no code emitted
b7e   	jmp,s   B126
b7e
b80   B123: #	B126 &lt;- B75  Freq: 1.16916e-07
b80   	# exception oop is in rax; no code emitted
b80   	jmp,s   B126
b80
b82   B124: #	B126 &lt;- B60  Freq: 9.47016e-07
b82   	# exception oop is in rax; no code emitted
b82   	jmp,s   B126
b82
b84   B125: #	B126 &lt;- B71  Freq: 4.17549e-06
b84   	# exception oop is in rax; no code emitted
b84
b84   B126: #	B127 &lt;- B125 B123 B122 B124  Freq: 5.34465e-06
b84   	movq    RSI, RAX	# spill
b84
b87   B127: #	N1671 &lt;- B121 B126  Freq: 5.38299e-06
b87   	addq    rsp, 112	# Destroy frame
	popq   rbp

b8c   	jmp     rethrow_stub
b8c
b91   B128: #	N1671 &lt;- B92  Freq: 1.08776e-10
b91   	movl    RSI, #-10	# int
b96   	movl    RBP, RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
b9b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Start::match @ bci:64  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=2976}
ba0   	int3	# ShouldNotReachHere
ba0

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
<opto_assembly compile_id='356'>
{method}
 - this oop:          0x00007f3755948ca8
 - method holder:     &apos;java/util/regex/Pattern$Curly&apos;
 - constants:         0x00007f3755948538 constant pool [101] {0x00007f3755948538} for &apos;java/util/regex/Pattern$Curly&apos; cache=0x00007f3755949100
 - access:            0xc1000000  
 - name:              &apos;match0&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)Z&apos;
 - max stack:         6
 - max locals:        7
 - size of params:    5
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680efb48: 0xbbaab000 i2c: 0x00007f3758b14de0 c2i: 0x00007f3758b14f29 c2iUV: 0x00007f3758b14efc
 - compiled entry     0x00007f3758cab8a0
 - code size:         174
 - code start:        0x00007f3755948b88
 - code end (excl):   0x00007f3755948c36
 - method data:       0x00007f3755b43058
 - checked ex length: 0
 - linenumber start:  0x00007f3755948c36
 - localvar length:   7
 - localvar start:    0x00007f3755948c52
 - compiled code: nmethod   3039  340       3       java.util.regex.Pattern$Curly::match0 (174 bytes)
#
#  bool ( java/util/regex/Pattern$Curly:NotNull:exact *, java/util/regex/Matcher:exact *, int, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$Curly:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8   : parm 3: int
#r006 r9:r9   : parm 4: java/lang/CharSequence *
# -- Old rsp -- Framesize: 128 --
#r191 rsp+124: in_preserve
#r190 rsp+120: return address
#r189 rsp+116: in_preserve
#r188 rsp+112: saved fp register
#r187 rsp+108: pad2, stack alignment
#r186 rsp+104: pad2, stack alignment
#r185 rsp+100: Fixed slot 1
#r184 rsp+96: Fixed slot 0
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N2621: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B155 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (496 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

02c   	movq    [rsp + #88], R9	# spill
031   	movl    R14, RCX	# spill
034   	movq    [rsp + #32], RDX	# spill
039   	movl    R9, RCX	# spill
03c   	subl    R9, R8	# int
03f   	movq    RAX, RSI	# spill
042   	movl    RBX, [RSI + #28 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Curly.atom
045   	movl    R11, R8	# spill
048   	addl    R11, #2	# int
04c   	movl    RCX, R9	# spill
04f   	sarl    RCX, #31
052   	movl    RDI, R8	# spill
055   	subl    RDI, R14	# int
058   	movl    RDX, [RSI + #24 (8-bit)]	# int ! Field: java/util/regex/Pattern$Curly.cmax
05b   	andl    RCX, R9	# int
05e   	movl    R10, #-2147483647	# int
064   	subl    R10, RCX	# int
067   	cmpl    R11, R10
06a   	cmovllt R11, R10	# max
06e   	cmpl    R11, RDI
071   	cmovllt R11, RDI	# max
075   	movl    RCX, R8	# spill
078   	cmpl    R8, RDX
07b   	jge     B155  P=0.000000 C=45755.000000
07b
081   B2: #	B172 B3 &lt;- B1  Freq: 1
081   	decode_heap_oop_not_null RBP,RBX
084   	movl    RSI, #-34	# int
089   	movl    R8, [RBX + #8 (8-bit)]	# compressed klass ptr
08d   	NullCheck RBX
08d
08d   B3: #	B143 B4 &lt;- B2  Freq: 0.999999
08d   	movq    R13, RBP	# spill
090   	movl    [rsp + #8], R9	# spill
095   	movq    [rsp + #0], RAX	# spill
099   	movl    [rsp + #84], RCX	# spill
09d   	movl    R9, [RAX + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
0a1   	cmpl    R8, narrowklass: precise klass java/util/regex/Pattern$Dot: 0x00007f372c03e750:Constant:exact *	# compressed klass ptr
0a8   	jne,u  B143  P=0.000001 C=-1.000000
0a8
0ae   B4: #	B173 B5 &lt;- B3  Freq: 0.999997
0ae   	movl    RSI, #-10	# int
0b3   	cmpl    R11, RDX
0b6   	cmovlgt R11, RDX	# min
0ba   	cmpl    R11, R10
0bd   	cmovllt R11, R10	# max
0c1   	movq    R10, [rsp + #32]	# spill
0c6   	movl    RCX, [R10 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
0ca   	NullCheck R10
0ca
0ca   B5: #	B104 B6 &lt;- B4  Freq: 0.999996
0ca   	movdl   XMM3, R9	# spill
0cf   	movl    [rsp + #24], RDX	# spill
0d3   	movl    [rsp + #16], RCX	# spill
0d7   	subl    RCX, [RSP + #8 (32-bit)]	# int
0db   	movl    R9, RDI	# spill
0de   	incl    R9	# int
0e1   	cmpl    R14, [RSP + #16 (32-bit)]
0e6   	jge     B104  P=0.018921 C=2652425.000000
0e6
0ec   B6: #	B174 B7 &lt;- B5  Freq: 0.981075
0ec   	movl    R8, [R10 + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
0f0   	movl    RSI, #-34	# int
0f5   	movl    R10, R9	# spill
0f8   	sarl    R10, #31
0fc   	movq    RBX, [rsp + #88]	# spill
101   	movl    RDX, [RBX + #8 (8-bit)]	# compressed klass ptr
104   	NullCheck RBX
104
104   B7: #	B145 B8 &lt;- B6  Freq: 0.981074
104   	movq    RBX, RBP	# spill
107   	# checkcastPP of RBX
107   	movq    RAX, RBX	# spill
10a   	cmpl    RDX, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
110   	jne,u  B145  P=0.000001 C=-1.000000
110
116   B8: #	B154 B9 &lt;- B7  Freq: 0.981073
116   	movq    RBP, [rsp + #88]	# spill
11b   	# checkcastPP of RBP
11b   	movq    [rsp + #72], RBP	# spill
120   	andl    R10, R9	# int
123   	movl    RSI, #-155	# int
128   	movl    R9, [RBP + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
12c   	movdl   XMM4, R9	# spill
131   	addl    R10, #2147483647	# int
138   	testl   R14, R14
13b   	jl     B154  P=0.000000 C=7895.000000
13b
141   B9: #	B175 B10 &lt;- B8  Freq: 0.981073
141   	movq    R9, [rsp + #32]	# spill
146   	movl    R9, [R9 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
14a   	cmpl    R11, RDI
14d   	cmovllt R11, RDI	# max
151   	movdl   RBX, XMM4	# spill
155   	movl    RBX, [RBX + #12 (8-bit)]	# range
158   	NullCheck RBX
158
158   B10: #	B156 B11 &lt;- B9  Freq: 0.981072
158   	movl    RDI, RBX	# spill
15a   	subl    RDI, [RSP + #8 (32-bit)]	# int
15e   	cmpl    R10, RDI
161   	cmovlgt R10, RDI	# min
165   	cmpl    RCX, R10
168   	cmovlgt RCX, R10	# min
16c   	cmpl    R14, RBX
16f   	jge     B156  P=0.000000 C=7895.000000
16f
175   B11: #	B144 B12 &lt;- B10  Freq: 0.981071
175   	cmpl    R14, RBX	# unsigned
178   	jnb,u  B144  P=0.000001 C=-1.000000
178
17e   B12: #	B157 B13 &lt;- B11  Freq: 0.98107
17e   	movdl   R10, XMM4	# spill
183   	movzwl  R10, [R10 + #16 + R14 &lt;&lt; #1]	# ushort/char
189   	movl    RDX, R10	# spill
18c   	orl     R10, #1	# int
190   	movdl   XMM0, R10	# spill
195   	movl    R10, RDX	# spill
198   	cmpl    R10, #55296
19f   	jge     B157  P=0.000000 C=613346.000000
19f
1a5   B13: #	B158 B14 &lt;- B12  Freq: 0.98107
1a5   	cmpl    R10, #10
1a9   	je     B158  P=0.000000 C=2617442.000000
1a9
1af   B14: #	B159 B15 &lt;- B13  Freq: 0.981069
1af   	cmpl    R10, #13
1b3   	je     B159  P=0.000000 C=2617442.000000
1b3
1b9   B15: #	B160 B16 &lt;- B14  Freq: 0.981069
1b9   	movl    R10, [RAX + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
1bd   	movdl   XMM1, R10	# spill
1c2   	movdl   R10, XMM0	# spill
1c7   	cmpl    R10, #8233
1ce   	je     B160  P=0.000000 C=2617442.000000
1ce
1d4   B16: #	B161 B17 &lt;- B15  Freq: 0.981068
1d4   	movl    R10, R14	# spill
1d7   	incl    R10	# int
1da   	movdl   XMM0, R10	# spill
1df   	movl    R10, RDX	# spill
1e2   	cmpl    R10, #133
1e9   	je     B161  P=0.000000 C=2617442.000000
1e9
1ef   B17: #	B176 B18 &lt;- B16  Freq: 0.981068
1ef   	movl    RBP, [rsp + #84]	# spill
1f3   	incl    RBP	# int
1f5   	movl    [rsp + #20], RBP	# spill
1f9   	cmpl    R11, [RSP + #24 (32-bit)]
1fe   	movl    R10, [rsp + #24]	# spill
203   	cmovlgt R11, R10	# min
207   	movl    RSI, #-10	# int
20c   	movdl   R10, XMM1	# spill
211   	movl    RDI, [R10 + #8 (8-bit)]	# compressed klass ptr
215   	NullCheck R10
215
215   B18: #	B146 B19 &lt;- B17  Freq: 0.981067
215   	cmpl    RCX, [RSP + #24 (32-bit)]
219   	movl    R10, [rsp + #24]	# spill
21e   	cmovlgt RCX, R10	# min
222   	cmpl    RDI, narrowklass: precise klass java/util/regex/Pattern$Node: 0x00007f372c041400:Constant:exact *	# compressed klass ptr
228   	jne,u  B146  P=0.000001 C=-1.000000
228
22e   B19: #	B177 B20 &lt;- B18  Freq: 0.981066
22e   	movq    RDI, [rsp + #32]	# spill
233   	movdl   R10, XMM0	# spill
238   	movl    [RDI + #32 (8-bit)], R10	# int ! Field: java/util/regex/Matcher.last
23c   	movl    RDI, [R9 + #12 (8-bit)]	# range
240   	NullCheck R9
240
240   B20: #	B147 B21 &lt;- B19  Freq: 0.981065
240   	movl    RSI, #-28	# int
245   	cmpl    RDI, #1	# unsigned
248   	jbe,u  B147  P=0.000001 C=-1.000000
248
24e   B21: #	B162 B22 &lt;- B20  Freq: 0.981064
24e   	movl    [R9 + #16 (8-bit)], R8	# int
252   	movl    [R9 + #20 (8-bit)], R10	# int
256   	cmpl    R10, R14
259   	je     B162  P=0.000000 C=45754.000000
259
25f   B22: #	B163 B23 &lt;- B21  Freq: 0.981063
25f   	movl    R10, #-2147483648	# int
265   	cmpl    RBP, [RSP + #24 (32-bit)]
269   	jge     B163  P=0.000000 C=2416419.000000
269
26f   B23: #	B24 &lt;- B22  Freq: 0.981063
26f   	# checkcastPP of R13
26f   	movdq   XMM0, R13	# spill
274   	movl    RSI, #-34	# int
279   	movl    RDI, [R13 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
27d   	movl    R14, RDI	# spill
280   	movl    RDI, RCX	# spill
282   	decl    RDI	# int
284   	cmpl    RCX, RDI
286   	cmovll RDI, R10	# signed, int
28a   	movl    [rsp + #12], RDI	# spill
28e   	xorl    RBP, RBP	# int
290   	movl    [rsp + #52], RBP	# spill
290
294   B24: #	B77 B25 &lt;- B23 B36 	Loop: B24-B36 inner pre of N1621 Freq: 1.92568
294   	movl    RDX, [rsp + #20]	# spill
298   	addl    RDX, [RSP + #8 (32-bit)]	# int
29c   	cmpl    RDX, [RSP + #16 (32-bit)]
2a0   	jge     B77  P=0.018921 C=2652425.000000
2a0
2a6   B25: #	B135 B26 &lt;- B24  Freq: 1.88924
2a6   	testl   RDX, RDX
2a8   	jl     B135  P=0.000000 C=7895.000000
2a8
2ae   B26: #	B136 B27 &lt;- B25  Freq: 1.88924
2ae   	cmpl    RDX, RBX
2b0   	jge     B136  P=0.000000 C=7895.000000
2b0
2b6   B27: #	B130 B28 &lt;- B26  Freq: 1.88924
2b6   	cmpl    RDX, RBX	# unsigned
2b8   	jnb,u  B130  P=0.000001 C=-1.000000
2b8
2be   B28: #	B149 B29 &lt;- B27  Freq: 1.88924
2be   	movdl   R10, XMM4	# spill
2c3   	movzwl  R10, [R10 + #16 + RDX &lt;&lt; #1]	# ushort/char
2c9   	cmpl    R10, #55296
2d0   	jge     B149  P=0.000000 C=613346.000000
2d0
2d6   B29: #	B150 B30 &lt;- B28  Freq: 1.88924
2d6   	movl    R13, RDX	# spill
2d9   	incl    R13	# int
2dc   	movl    RDI, [rsp + #20]	# spill
2e0   	incl    RDI	# int
2e2   	cmpl    R10, #10
2e6   	je     B150  P=0.000000 C=2617442.000000
2e6
2ec   B30: #	B151 B31 &lt;- B29  Freq: 1.88924
2ec   	cmpl    R10, #13
2f0   	je     B151  P=0.000000 C=2617442.000000
2f0
2f6   B31: #	B152 B32 &lt;- B30  Freq: 1.88924
2f6   	movl    RCX, R10	# spill
2f9   	orl     RCX, #1	# int
2fc   	cmpl    RCX, #8233
302   	je     B152  P=0.000000 C=2617442.000000
302
308   B32: #	B153 B33 &lt;- B31  Freq: 1.88923
308   	cmpl    R10, #133
30f   	je     B153  P=0.000000 C=2617442.000000
30f
315   B33: #	B171 B34 &lt;- B32  Freq: 1.88923
315   	movl    RCX, [R14 + #8 (8-bit)]	# compressed klass ptr
319   	NullCheck R14
319
319   B34: #	B142 B35 &lt;- B33  Freq: 1.88923
319   	cmpl    RCX, narrowklass: precise klass java/util/regex/Pattern$Node: 0x00007f372c041400:Constant:exact *	# compressed klass ptr
31f   	jne,u  B142  P=0.000001 C=-1.000000
31f
325   B35: #	B37 B36 &lt;- B34  Freq: 1.88923
325   	movl    [R9 + #16 (8-bit)], R8	# int
329   	movl    [R9 + #20 (8-bit)], R13	# int
32d   	movq    R10, [rsp + #32]	# spill
332   	movl    [R10 + #32 (8-bit)], R13	# int ! Field: java/util/regex/Matcher.last
336   	cmpl    RDI, R11
339   	jge,s   B37	# loop end  P=0.500000 C=2370665.000000
339
33b   B36: #	B24 &lt;- B35  Freq: 0.944615
33b   	movl    [rsp + #20], RDI	# spill
33f   	jmp     B24
33f
344   B37: #	B148 B38 &lt;- B35  Freq: 0.944615
344   	cmpl    RDI, [RSP + #12 (32-bit)]
348   	jge     B148  P=0.000001 C=-1.000000
348
34e   B38: #	B40 &lt;- B37  Freq: 0.944614
34e   	# castII of RDI
34e   	jmp,s   B40
34e
350   B39: #	B40 &lt;- B50  top-of-loop Freq: 180090
350   	movl    RDI, RBP	# spill
352   	movdl   RBX, XMM2	# spill
352
356   B40: #	B66 B41 &lt;- B38 B39 	Loop: B40-B39 inner main of N470 Freq: 180091
356   	movl    RBP, RDI	# spill
358   	addl    RBP, [RSP + #8 (32-bit)]	# int
35c   	movdl   RSI, XMM4	# spill
360   	movzwl  R10, [RSI + #16 + RBP &lt;&lt; #1]	# ushort/char
366   	cmpl    R10, #55296
36d   	jge     B66  P=0.000000 C=613346.000000
36d
373   B41: #	B69 B42 &lt;- B40  Freq: 180091
373   	movl    R13, RBP	# spill
376   	addl    R13, #2	# int
37a   	movl    R11, RDI	# spill
37d   	incl    R11	# int
380   	cmpl    R10, #10
384   	je     B69  P=0.000000 C=2617442.000000
384
38a   B42: #	B71 B43 &lt;- B41  Freq: 180091
38a   	movl    RAX, RDI	# spill
38c   	incl    RAX	# int
38e   	movslq  R14, RBP	# i2l
391   	movl    RCX, R10	# spill
394   	orl     RCX, #1	# int
397   	cmpl    R10, #13
39b   	je     B71  P=0.000000 C=2617442.000000
39b
3a1   B43: #	B73 B44 &lt;- B42  Freq: 180091
3a1   	movdl   XMM2, RBX	# spill
3a5   	movl    RDX, RBP	# spill
3a7   	incl    RDX	# int
3a9   	cmpl    RCX, #8233
3af   	je     B73  P=0.000000 C=2617442.000000
3af
3b5   B44: #	B75 B45 &lt;- B43  Freq: 180091
3b5   	cmpl    R10, #133
3bc   	je     B75  P=0.000000 C=2617442.000000
3bc
3c2   B45: #	B67 B46 &lt;- B44  Freq: 180091
3c2   	movl    [R9 + #16 (8-bit)], R8	# int
3c6   	movzwl  R10, [RSI + #18 + R14 &lt;&lt; #1]	# ushort/char
3cc   	movl    RCX, RDI	# spill
3ce   	addl    RCX, #2	# int
3d1   	movl    RBP, RCX	# spill
3d3   	movl    [R9 + #20 (8-bit)], RDX	# int
3d7   	movq    RCX, [rsp + #32]	# spill
3dc   	movl    [RCX + #32 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.last
3df   	cmpl    R10, #55296
3e6   	jge     B67  P=0.000000 C=613346.000000
3e6
3ec   B46: #	B70 B47 &lt;- B45  Freq: 180091
3ec   	cmpl    R10, #10
3f0   	je     B70  P=0.000000 C=2617442.000000
3f0
3f6   B47: #	B72 B48 &lt;- B46  Freq: 180091
3f6   	movl    RBX, RDI	# spill
3f8   	incl    RBX	# int
3fa   	cmpl    R10, #13
3fe   	je     B72  P=0.000000 C=2617442.000000
3fe
404   B48: #	B74 B49 &lt;- B47  Freq: 180091
404   	movl    RCX, R10	# spill
407   	orl     RCX, #1	# int
40a   	cmpl    RCX, #8233
410   	je     B74  P=0.000000 C=2617442.000000
410
416   B49: #	B76 B50 &lt;- B48  Freq: 180090
416   	incl    RDI	# int
418   	cmpl    R10, #133
41f   	je     B76  P=0.000000 C=2617442.000000
41f
425   B50: #	B39 B51 &lt;- B49  Freq: 180090
425   	movq    R10, [rsp + #32]	# spill
42a   	movl    [R10 + #32 (8-bit)], R13	# int ! Field: java/util/regex/Matcher.last
42e   	movl    [R9 + #16 (8-bit)], R8	# int
432   	movl    [R9 + #20 (8-bit)], R13	# int
436   	cmpl    RBP, [RSP + #12 (32-bit)]
43a   	jl     B39	# loop end  P=1.000000 C=2370665.000000
43a
440   B51: #	B52 &lt;- B50  Freq: 0.0858738
440   	movdl   RBX, XMM2	# spill
440
444   B52: #	B165 B53 &lt;- B148 B51  Freq: 0.0858747
444   	cmpl    RBP, [RSP + #24 (32-bit)]
448   	jge     B165  P=0.000001 C=-1.000000
448
44e   B53: #	B55 &lt;- B52  Freq: 0.0858746
44e   	movl    R10, RBP	# spill
451   	# castII of R10
451   	movl    [rsp + #20], R10	# spill
456   	jmp,s   B55
456
458   B54: #	B55 &lt;- B64  top-of-loop Freq: 4.4514
458   	movl    [rsp + #20], RDI	# spill
458
45c   B55: #	B77 B56 &lt;- B53 B54 	Loop: B55-B54 inner post of N1621 Freq: 4.53727
45c   	movl    RDX, [rsp + #20]	# spill
460   	addl    RDX, [RSP + #8 (32-bit)]	# int
464   	cmpl    RDX, [RSP + #16 (32-bit)]
468   	jge     B77  P=0.018921 C=2652425.000000
468
46e   B56: #	B135 B57 &lt;- B55  Freq: 4.45142
46e   	testl   RDX, RDX
470   	jl     B135  P=0.000000 C=7895.000000
470
476   B57: #	B136 B58 &lt;- B56  Freq: 4.45142
476   	cmpl    RDX, RBX
478   	jge     B136  P=0.000000 C=7895.000000
478
47e   B58: #	B130 B59 &lt;- B57  Freq: 4.45142
47e   	cmpl    RDX, RBX	# unsigned
480   	jnb,u  B130  P=0.000001 C=-1.000000
480
486   B59: #	B137 B60 &lt;- B58  Freq: 4.45142
486   	movdl   R10, XMM4	# spill
48b   	movzwl  R10, [R10 + #16 + RDX &lt;&lt; #1]	# ushort/char
491   	movl    RCX, R10	# spill
494   	orl     RCX, #1	# int
497   	cmpl    R10, #55296
49e   	jge     B137  P=0.000000 C=613346.000000
49e
4a4   B60: #	B138 B61 &lt;- B59  Freq: 4.45141
4a4   	movl    RDI, [rsp + #20]	# spill
4a8   	incl    RDI	# int
4aa   	cmpl    R10, #10
4ae   	je     B138  P=0.000000 C=2617442.000000
4ae
4b4   B61: #	B139 B62 &lt;- B60  Freq: 4.45141
4b4   	cmpl    R10, #13
4b8   	je     B139  P=0.000000 C=2617442.000000
4b8
4be   B62: #	B140 B63 &lt;- B61  Freq: 4.45141
4be   	cmpl    RCX, #8233
4c4   	je     B140  P=0.000000 C=2617442.000000
4c4
4ca   B63: #	B141 B64 &lt;- B62  Freq: 4.45141
4ca   	cmpl    R10, #133
4d1   	je     B141  P=0.000000 C=2617442.000000
4d1
4d7   B64: #	B54 B65 &lt;- B63  Freq: 4.4514
4d7   	movl    [R9 + #16 (8-bit)], R8	# int
4db   	incl    RDX	# int
4dd   	movl    [R9 + #20 (8-bit)], RDX	# int
4e1   	movq    R10, [rsp + #32]	# spill
4e6   	movl    [R10 + #32 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.last
4ea   	cmpl    RDI, [RSP + #24 (32-bit)]
4ee   	jl     B54	# loop end  P=0.999999 C=2370665.000000
4ee
4f4   B65: #	N2621 &lt;- B64 B165  Freq: 4.59753e-06
4f4   	movq    RBP, [rsp + #0]	# spill
4f8   	movq    R10, [rsp + #32]	# spill
4fd   	movq    [rsp + #0], R10	# spill
501   	movl    [rsp + #8], RDX	# spill
505   	movl    [rsp + #16], RDI	# spill
509   	movl    R11, [rsp + #24]	# spill
50e   	movl    [rsp + #20], R11	# spill
513   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
51b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:66  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1 STK[0]=rsp + #16 STK[1]=rsp + #20
        # OopMap{rbp=Oop [0]=Oop [88]=Oop off=1312}
520   	int3	# ShouldNotReachHere
520
525   B66: #	B68 &lt;- B40  Freq: 0.0858742
525   	movl    RDX, RBP	# spill
527   	jmp,s   B68
527
529   B67: #	B68 &lt;- B45  Freq: 0.085874
529   	incl    RDI	# int
52b
52b   B68: #	N2621 &lt;- B137 B149 B66 B67  Freq: 0.171751
52b   	movq    RBP, [rsp + #0]	# spill
52f   	movq    R11, [rsp + #32]	# spill
534   	movl    [rsp + #12], RDI	# spill
538   	movq    [rsp + #16], R11	# spill
53d   	movl    [rsp + #24], RDX	# spill
541   	movq    R11, [rsp + #72]	# spill
546   	movq    [rsp + #32], R11	# spill
54b   	movl    [rsp + #28], RDX	# spill
54f   	movl    [rsp + #44], R10	# spill
554   	movl    [rsp + #48], R10	# spill
559   	movq    R10, [rsp + #88]	# spill
55e   	movsd   [rsp + #64], XMM0	# spill
564   	movq    [rsp + #72], R10	# spill
569   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
56f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #48 STK[0]=rsp + #44 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #32 L[1]=rsp + #24 L[2]=rsp + #44 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #64 L[1]=rsp + #16 L[2]=rsp + #28 L[3]=rsp + #88 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #12 L[4]=rsp + #72 L[5]=rsp + #84 L[6]=#1
        # OopMap{rbp=Oop [16]=Oop [32]=Oop [64]=Oop [72]=Oop [88]=Oop off=1396}
574   	int3	# ShouldNotReachHere
574
579   B69: #	B70 &lt;- B41  Freq: 0.0858741
579   	movl    RAX, RDI	# spill
57b   	movl    RDX, RBP	# spill
57b
57d   B70: #	N2621 &lt;- B138 B150 B69 B46  Freq: 0.171751
57d   	movq    RBP, [rsp + #0]	# spill
581   	movq    R11, [rsp + #32]	# spill
586   	movl    [rsp + #12], RAX	# spill
58a   	movq    [rsp + #16], R11	# spill
58f   	movl    [rsp + #24], RDX	# spill
593   	movl    [rsp + #40], R10	# spill
598   	movl    [rsp + #44], R10	# spill
59d   	movsd   [rsp + #64], XMM0	# spill
5a3   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
5ab   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #44 STK[0]=rsp + #40 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #64 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #72 L[4]=rsp + #40
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #12 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1
        # OopMap{rbp=Oop [16]=Oop [64]=Oop [72]=Oop [88]=Oop off=1456}
5b0   	int3	# ShouldNotReachHere
5b0
5b5   B71: #	B72 &lt;- B42  Freq: 0.0858741
5b5   	movl    RBX, RDI	# spill
5b7   	movl    RDX, RBP	# spill
5b7
5b9   B72: #	N2621 &lt;- B139 B151 B71 B47  Freq: 0.171751
5b9   	movq    RBP, [rsp + #0]	# spill
5bd   	movq    R11, [rsp + #32]	# spill
5c2   	movl    [rsp + #12], RBX	# spill
5c6   	movq    [rsp + #16], R11	# spill
5cb   	movl    [rsp + #24], RDX	# spill
5cf   	movl    [rsp + #40], R10	# spill
5d4   	movl    [rsp + #44], R10	# spill
5d9   	movsd   [rsp + #64], XMM0	# spill
5df   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
5e7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #44 STK[0]=rsp + #40 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #64 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #72 L[4]=rsp + #40
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #12 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1
        # OopMap{rbp=Oop [16]=Oop [64]=Oop [72]=Oop [88]=Oop off=1516}
5ec   	int3	# ShouldNotReachHere
5ec
5f1   B73: #	B74 &lt;- B43  Freq: 0.0858741
5f1   	movl    R11, RDI	# spill
5f4   	movl    RDX, RBP	# spill
5f4
5f6   B74: #	N2621 &lt;- B140 B152 B73 B48  Freq: 0.171751
5f6   	movq    RBP, [rsp + #0]	# spill
5fa   	movq    R8, [rsp + #32]	# spill
5ff   	movl    [rsp + #12], R11	# spill
604   	movq    [rsp + #16], R8	# spill
609   	movl    [rsp + #24], RDX	# spill
60d   	movl    [rsp + #40], R10	# spill
612   	movl    [rsp + #44], RCX	# spill
616   	movsd   [rsp + #64], XMM0	# spill
61c   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
623   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #40 STK[0]=rsp + #44 STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #64 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #72 L[4]=rsp + #40
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #12 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1
        # OopMap{rbp=Oop [16]=Oop [64]=Oop [72]=Oop [88]=Oop off=1576}
628   	int3	# ShouldNotReachHere
628
62d   B75: #	B76 &lt;- B44  Freq: 0.085874
62d   	movl    RDX, RBP	# spill
62d
62f   B76: #	N2621 &lt;- B141 B153 B75 B49  Freq: 0.171751
62f   	movl    RSI, #-155	# int
634   	movq    RBP, [rsp + #0]	# spill
638   	movq    R11, [rsp + #32]	# spill
63d   	movl    [rsp + #12], RDI	# spill
641   	movq    [rsp + #16], R11	# spill
646   	movl    [rsp + #24], RDX	# spill
64a   	movl    [rsp + #40], R10	# spill
64f   	movsd   [rsp + #56], XMM0	# spill
      	nop 	# 2 bytes pad for loops and calls
657   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #40 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #56 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #72 L[4]=rsp + #40
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #12 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1
        # OopMap{rbp=Oop [16]=Oop [56]=Oop [72]=Oop [88]=Oop off=1628}
65c   	int3	# ShouldNotReachHere
65c
661   B77: #	B102 B78 &lt;- B55 B24  Freq: 0.122287
661   	movq    R10, [rsp + #32]	# spill
666   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
66b   	movl    R10, [rsp + #20]	# spill
670   	cmpl    R10, [RSP + #84 (32-bit)]
675   	jl     B102  P=0.018245 C=2508055.000000
675
67b   B78: #	B164 B79 &lt;- B77  Freq: 0.120056
67b   	movl    R11, [rsp + #84]	# spill
680   	cmpl    R11, #-2147483647
687   	jl     B164  P=0.000001 C=-1.000000
687
68d   B79: #	B83 &lt;- B78  Freq: 0.120056
68d   	movl    R10, R11	# spill
690   	decl    R10	# int
693   	movl    [rsp + #12], R10	# spill
698   	jmp,s   B83
698
69a   B80: #	B81 &lt;- B112 B88  Freq: 0.121601
69a   	movq    R10, [rsp + #32]	# spill
69f   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
69f
6a4   B81: #	B102 B82 &lt;- B80 B117 B99 B94 B124  top-of-loop Freq: 6.57759
6a4   	movq    R10, [rsp + #32]	# spill
6a9   	movl    R10, [R10 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
6ad   	movq    R11, [rsp + #72]	# spill
6b2   	movl    R11, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
6b6   	movq    R8, [rsp + #0]	# spill
6ba   	movl    R8, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
6be   	movl    RBP, [rsp + #20]	# spill
6c2   	decl    RBP	# int
6c4   	movl    [rsp + #20], RBP	# spill
6c8   	cmpl    RBP, [RSP + #12 (32-bit)]
6cc   	jle     B102	# loop end  P=0.018245 C=2462298.000000
6cc
6d2   B82: #	B83 &lt;- B81  Freq: 6.45758
6d2   	movdl   XMM3, R8	# spill
6d7   	movl    [rsp + #16], R10	# spill
6dc   	movdl   XMM4, R11	# spill
6dc
6e1   B83: #	B168 B84 &lt;- B79 B82 	Loop: B83-B82  Freq: 6.57764
6e1   	movl    RDX, [rsp + #20]	# spill
6e5   	addl    RDX, [RSP + #8 (32-bit)]	# int
6e9   	movl    RBX, RDX	# spill
6eb   	sarl    RBX, #31
6ee   	andl    RBX, RDX	# int
6f0   	movdl   R11, XMM3	# spill
6f5   	movl    R9, [R11 + #8 (8-bit)]	# compressed klass ptr
6f9   	NullCheck R11
6f9
6f9   B84: #	B108 B85 &lt;- B83  Freq: 6.57763
6f9   	movl    R10, #1	# int
6ff   	subl    R10, RDX	# int
702   	cmpl    R9, narrowklass: precise klass java/util/regex/Pattern$Slice: 0x00007f372c03e820:Constant:exact *	# compressed klass ptr
709   	jne,u  B108  P=0.000001 C=-1.000000
709
70f   B85: #	B169 B86 &lt;- B84  Freq: 6.57762
70f   	movl    RAX, RDX	# spill
711   	negl    RAX	# int
713   	movl    R8, R10	# spill
716   	sarl    R8, #31
71a   	decode_heap_oop_not_null R11,R11
71a   	# checkcastPP of R11
71a   	movl    R9, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
71e   	movl    R14, [R11 + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$SliceNode.buffer
722   	movl    RCX, #-2147483647	# int
727   	subl    RCX, RBX	# int
729   	cmpl    RCX, RAX
72b   	movl    RSI, RCX	# spill
72d   	cmovllt RSI, RAX	# max
730   	movl    RBX, #1	# int
735   	cmpl    RSI, RBX
737   	movl    RDI, #1	# int
73c   	cmovllt RSI, RDI	# max
73f   	movl    RDI, [R14 + #12 (8-bit)]	# range
743   	NullCheck R14
743
743   B86: #	B121 B87 &lt;- B85  Freq: 6.57762
743   	cmpl    RSI, RDI
745   	cmovlgt RSI, RDI	# min
748   	cmpl    RSI, RCX
74a   	cmovllt RSI, RCX	# max
74d   	cmpl    RSI, RAX
74f   	cmovllt RSI, RAX	# max
752   	testl   RDI, RDI
754   	jle     B121  P=0.000001 C=2444278.000000
754
75a   B87: #	B88 &lt;- B86  Freq: 6.57761
75a   	andl    R8, R10	# int
75d   	xorl    R10, R10	# int
760
760   B88: #	B80 B89 &lt;- B87 B96 	Loop: B88-B96 inner pre of N1639 Freq: 6.59524
760   	movl    RBX, R10	# spill
763   	addl    RBX, RDX	# int
765   	cmpl    RBX, [RSP + #16 (32-bit)]
769   	jge     B80  P=0.018438 C=2444276.000000
769
76f   B89: #	B126 B90 &lt;- B88  Freq: 6.47364
76f   	cmpl    R10, RDI	# unsigned
772   	jnb,u  B126  P=0.000001 C=-1.000000
772
778   B90: #	B131 B91 &lt;- B89  Freq: 6.47363
778   	movdl   XMM0, R9	# spill
77d   	movl    RAX, [R14 + #16 + R10 &lt;&lt; #2]	# int
782   	cmpl    RSI, RDI
784   	movl    RCX, RSI	# spill
786   	cmovlgt RCX, RDI	# min
789   	movl    R9, R8	# spill
78c   	addl    R9, #2147483647	# int
793   	testl   RBX, RBX
795   	jl     B131  P=0.000000 C=7895.000000
795
79b   B91: #	B170 B92 &lt;- B90  Freq: 6.47363
79b   	movdl   RBP, XMM4	# spill
79f   	movl    RBP, [RBP + #12 (8-bit)]	# range
7a2   	NullCheck RBP
7a2
7a2   B92: #	B133 B93 &lt;- B91  Freq: 6.47362
7a2   	movl    R13, R10	# spill
7a5   	incl    R13	# int
7a8   	cmpl    RBX, RBP
7aa   	jge     B133  P=0.000000 C=7895.000000
7aa
7b0   B93: #	B128 B94 &lt;- B92  Freq: 6.47362
7b0   	cmpl    RBX, RBP	# unsigned
7b2   	jnb,u  B128  P=0.000001 C=-1.000000
7b2
7b8   B94: #	B81 B95 &lt;- B93  Freq: 6.47361
7b8   	movdl   R10, XMM4	# spill
7bd   	movzwl  R10, [R10 + #16 + RBX &lt;&lt; #1]	# ushort/char
7c3   	movl    RBX, RBP	# spill
7c5   	subl    RBX, RDX	# int
7c7   	cmpl    RAX, R10
7ca   	jne     B81  P=0.994554 C=2399209.000000
7ca
7d0   B95: #	B97 B96 &lt;- B94  Freq: 0.0352523
7d0   	cmpl    R9, RBX
7d3   	cmovlgt R9, RBX	# min
7d7   	movl    RBX, [rsp + #16]	# spill
7db   	subl    RBX, RDX	# int
7dd   	cmpl    RBX, R9
7e0   	cmovlgt RBX, R9	# min
7e4   	cmpl    RBX, RDI
7e6   	cmovlgt RBX, RDI	# min
7e9   	cmpl    R13, RCX
7ec   	jge,s   B97	# loop end  P=0.500000 C=13065.000000
7ec
7ee   B96: #	B88 &lt;- B95  Freq: 0.0176261
7ee   	movl    R10, R13	# spill
7f1   	movdl   R9, XMM0	# spill
7f6   	jmp     B88
7f6
7fb   B97: #	B109 B98 &lt;- B95  Freq: 0.0176261
7fb   	cmpl    R13, RBX
7fe   	jge     B109  P=0.000001 C=-1.000000
7fe
804   B98: #	B99 &lt;- B97  Freq: 0.0176261
804   	# castII of R13
      	nop 	# 12 bytes pad for loops and calls

810   B99: #	B81 B100 &lt;- B98 B100 	Loop: B99-B100 inner main of N568 Freq: 0.0177226
810   	movl    R9, R13	# spill
813   	addl    R9, RDX	# int
816   	movl    R8, [R14 + #16 + R13 &lt;&lt; #2]	# int
81b   	movdl   R10, XMM4	# spill
820   	movzwl  RCX, [R10 + #16 + R9 &lt;&lt; #1]	# ushort/char
826   	cmpl    R8, RCX
829   	jne     B81  P=0.994554 C=2399209.000000
829
82f   B100: #	B99 B101 &lt;- B99  Freq: 9.65093e-05
82f   	incl    R13	# int
832   	cmpl    R13, RBX
835   	jl,s   B99	# loop end  P=0.999999 C=13065.000000
835
837   B101: #	B110 &lt;- B100  Freq: 9.77909e-11
837   	jmp     B110
837
83c   B102: #	B103 &lt;- B81 B77  Freq: 0.122241
83c   	movl    RAX, [rsp + #52]	# spill
83c
840   B103: #	N2621 &lt;- B125 B102 B107  Freq: 0.141161
840   	addq    rsp, 112	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

84b   	ret
84b
84c   B104: #	B178 B105 &lt;- B5  Freq: 0.0189211
84c   	movq    R11, R10	# spill
84f   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
854   	movdl   R9, XMM3	# spill
859   	movl    R10, [R9 + #8 (8-bit)]	# compressed klass ptr
85d   	NullCheck R9
85d
85d   B105: #	B166 B106 &lt;- B104  Freq: 0.0189211
85d   	decode_heap_oop_not_null RSI,R9
860   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f372c03e8f0:Constant:exact *	# compressed klass ptr
867   	jne,u  B166  P=0.000001 C=-1.000000
867
86d   B106: #	B180 B107 &lt;- B105  Freq: 0.0189211
86d   	# checkcastPP of RSI
86d   	movq    RDX, R11	# spill
870   	movl    RCX, R14	# spill
873   	movq    R8, [rsp + #88]	# spill
      	nop 	# 3 bytes pad for loops and calls
87b   	call,static  java.util.regex.Pattern$LastNode::match
        # java.util.regex.Pattern$Curly::match0 @ bci:170  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=2176}
880
880   B107: #	B103 &lt;- B106  Freq: 0.0189207
        # Block is sole successor of call
880   	jmp,s   B103
880
882   B108: #	N2621 &lt;- B84  Freq: 6.57763e-06
882   	movq    RBP, [rsp + #0]	# spill
886   	movq    R10, [rsp + #32]	# spill
88b   	movq    [rsp + #0], R10	# spill
88f   	movl    R10, [rsp + #20]	# spill
894   	movl    [rsp + #12], R10	# spill
899   	movss   [rsp + #16], XMM3	# spill
89f   	movl    [rsp + #20], RDX	# spill
8a3   	movl    RSI, #-34	# int
8a8   	movq    R10, [rsp + #88]	# spill
8ad   	movq    [rsp + #48], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
8b3   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #20 L[3]=rsp + #12 L[4]=rsp + #48 L[5]=rsp + #84 L[6]=#1 STK[0]=rsp + #16 STK[1]=rsp + #0 STK[2]=rsp + #20 STK[3]=rsp + #88
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [48]=Oop [88]=Oop off=2232}
8b8   	int3	# ShouldNotReachHere
8b8
8bd   B109: #	B110 &lt;- B97  Freq: 1.78602e-08
8bd   	movdl   R10, XMM4	# spill
8bd
8c2   B110: #	B120 B111 &lt;- B109 B101  Freq: 1.7958e-08
8c2   	cmpl    R13, RDI
8c5   	jge,s   B120  P=0.500000 C=-1.000000
8c5
8c7   B111: #	B112 &lt;- B110  Freq: 8.979e-09
8c7   	# castII of R13
8c7
8c7   B112: #	B80 B113 &lt;- B111 B118 	Loop: B112-B118 inner post of N1639 Freq: 9.00306e-09
8c7   	movl    RBX, R13	# spill
8ca   	addl    RBX, RDX	# int
8cc   	cmpl    RBX, [RSP + #16 (32-bit)]
8d0   	jge     B80  P=0.018438 C=2444276.000000
8d0
8d6   B113: #	B127 B114 &lt;- B112  Freq: 8.83707e-09
8d6   	cmpl    R13, RDI	# unsigned
8d9   	jnb,u  B127  P=0.000001 C=-1.000000
8d9
8df   B114: #	B132 B115 &lt;- B113  Freq: 8.83706e-09
8df   	movl    RAX, [R14 + #16 + R13 &lt;&lt; #2]	# int
8e4   	testl   RBX, RBX
8e6   	jl     B132  P=0.000000 C=7895.000000
8e6
8ec   B115: #	B134 B116 &lt;- B114  Freq: 8.83705e-09
8ec   	cmpl    RBX, RBP
8ee   	jge     B134  P=0.000000 C=7895.000000
8ee
8f4   B116: #	B129 B117 &lt;- B115  Freq: 8.83705e-09
8f4   	cmpl    RBX, RBP	# unsigned
8f6   	jnb,u  B129  P=0.000001 C=-1.000000
8f6
8fc   B117: #	B81 B118 &lt;- B116  Freq: 8.83704e-09
8fc   	incl    R13	# int
8ff   	movzwl  RBX, [R10 + #16 + RBX &lt;&lt; #1]	# ushort/char
905   	cmpl    RAX, RBX
907   	jne     B81  P=0.994554 C=2399209.000000
907
90d   B118: #	B112 B119 &lt;- B117  Freq: 4.81224e-11
90d   	cmpl    R13, RDI
910   	jl,s   B112	# loop end  P=0.500000 C=13065.000000
910
912   B119: #	B121 &lt;- B118  Freq: 2.40612e-11
912   	movdl   R9, XMM0	# spill
917   	jmp,s   B121
917
919   B120: #	B121 &lt;- B110  Freq: 8.979e-09
919   	movdl   R9, XMM0	# spill
919
91e   B121: #	B182 B122 &lt;- B120 B86 B119  Freq: 6.58662e-06
91e   	movl    R8, RDX	# spill
921   	addl    R8, RDI	# int
924   	decode_heap_oop_not_null RSI,R9
927   	movl    R10, [R9 + #8 (8-bit)]	# compressed klass ptr
92b   	NullCheck R9
92b
92b   B122: #	B167 B123 &lt;- B121  Freq: 6.58661e-06
92b   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Curly: 0x00007f372c03de50:Constant:exact *	# compressed klass ptr
932   	jne,u  B167  P=0.000001 C=-1.000000
932
938   B123: #	B179 B124 &lt;- B122  Freq: 6.58661e-06
938   	# checkcastPP of RSI
938   	movl    RBP, RDX	# spill
93a   	movq    RDX, [rsp + #32]	# spill
93f   	movl    RCX, R8	# spill
942   	movq    R8, [rsp + #88]	# spill
947   	call,static  java.util.regex.Pattern$Curly::match
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #0 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #20 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1
        # OopMap{[0]=Oop [32]=Oop [72]=Oop [88]=Oop off=2380}
94c
94c   B124: #	B81 B125 &lt;- B123  Freq: 6.58648e-06
        # Block is sole successor of call
94c   	testl   RAX, RAX
94e   	je     B81  P=0.999999 C=2462295.000000
94e
954   B125: #	B103 &lt;- B124  Freq: 6.67394e-12
954   	movl    RAX, #1	# int
959   	jmp     B103
959
95e   B126: #	B127 &lt;- B89  Freq: 6.5596e-06
95e   	movl    R13, R10	# spill
95e
961   B127: #	N2621 &lt;- B113 B126  Freq: 6.5596e-06
961   	movq    RBP, [rsp + #0]	# spill
965   	movq    R10, [rsp + #32]	# spill
96a   	movl    R8, [rsp + #20]	# spill
96f   	movl    [rsp + #12], R8	# spill
974   	movq    [rsp + #16], R11	# spill
979   	movq    [rsp + #24], R10	# spill
97e   	movl    [rsp + #32], RDX	# spill
982   	movl    [rsp + #40], RDI	# spill
986   	movl    [rsp + #48], R14	# spill
98b   	movl    [rsp + #52], R13	# spill
990   	movl    RSI, #-28	# int
995   	movq    R10, [rsp + #88]	# spill
99a   	movq    [rsp + #56], R10	# spill
99f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:43  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #40 L[6]=rsp + #52 STK[0]=rsp + #48 STK[1]=rsp + #52
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #12 L[4]=rsp + #56 L[5]=rsp + #84 L[6]=#1
        # OopMap{rbp=Oop [16]=Oop [24]=Oop [48]=NarrowOop [56]=Oop off=2468}
9a4   	int3	# ShouldNotReachHere
9a4
9a9   B128: #	B129 &lt;- B93  Freq: 6.55958e-06
9a9   	movl    R13, R10	# spill
9ac   	movdl   R10, XMM4	# spill
9ac
9b1   B129: #	N2621 &lt;- B116 B128  Freq: 6.55958e-06
9b1   	movl    RSI, #-28	# int
9b6   	movq    RBP, [rsp + #0]	# spill
9ba   	movq    R8, [rsp + #32]	# spill
9bf   	movl    R9, [rsp + #20]	# spill
9c4   	movl    [rsp + #12], R9	# spill
9c9   	movq    [rsp + #16], R11	# spill
9ce   	movq    [rsp + #24], R8	# spill
9d3   	movl    [rsp + #32], RDX	# spill
9d7   	movq    R11, [rsp + #72]	# spill
9dc   	movq    [rsp + #40], R11	# spill
9e1   	movl    [rsp + #36], R14	# spill
9e6   	movl    [rsp + #48], RDI	# spill
9ea   	movl    [rsp + #52], R13	# spill
9ef   	movl    [rsp + #56], RAX	# spill
9f3   	movl    [rsp + #60], R10	# spill
9f8   	movl    [rsp + #64], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
9ff   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #60 STK[1]=rsp + #64
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=rsp + #36 L[5]=rsp + #48 L[6]=rsp + #52 STK[0]=rsp + #56
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #12 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1
        # OopMap{rbp=Oop [16]=Oop [24]=Oop [36]=NarrowOop [40]=Oop [60]=NarrowOop [88]=Oop off=2564}
a04   	int3	# ShouldNotReachHere
a04
a09   B130: #	N2621 &lt;- B58 B27  Freq: 6.42486e-06
a09   	movq    RBP, [rsp + #0]	# spill
a0d   	movq    R10, [rsp + #32]	# spill
a12   	movl    R11, [rsp + #20]	# spill
a17   	movl    [rsp + #12], R11	# spill
a1c   	movq    [rsp + #16], R10	# spill
a21   	movl    [rsp + #24], RDX	# spill
a25   	movq    R10, [rsp + #72]	# spill
a2a   	movq    [rsp + #32], R10	# spill
a2f   	movl    [rsp + #28], RDX	# spill
a33   	movss   [rsp + #40], XMM4	# spill
a39   	movq    R10, [rsp + #88]	# spill
a3e   	movsd   [rsp + #64], XMM0	# spill
a44   	movq    [rsp + #72], R10	# spill
a49   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
a4f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #40 STK[1]=rsp + #24
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #24 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #64 L[1]=rsp + #16 L[2]=rsp + #28 L[3]=rsp + #88 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #12 L[4]=rsp + #72 L[5]=rsp + #84 L[6]=#1
        # OopMap{rbp=Oop [16]=Oop [32]=Oop [40]=NarrowOop [64]=Oop [72]=Oop [88]=Oop off=2644}
a54   	int3	# ShouldNotReachHere
a54
a59   B131: #	B132 &lt;- B90  Freq: 3.23682e-06
a59   	movl    R13, R10	# spill
a59
a5c   B132: #	N2621 &lt;- B114 B131  Freq: 3.23682e-06
a5c   	movq    RBP, [rsp + #0]	# spill
a60   	movq    R10, [rsp + #32]	# spill
a65   	movq    [rsp + #0], R10	# spill
a69   	movl    R10, [rsp + #20]	# spill
a6e   	movl    [rsp + #12], R10	# spill
a73   	movq    [rsp + #16], R11	# spill
a78   	movl    [rsp + #32], RDX	# spill
a7c   	movq    R10, [rsp + #72]	# spill
a81   	movl    [rsp + #36], R14	# spill
a86   	movl    [rsp + #48], RDI	# spill
a8a   	movl    [rsp + #52], R13	# spill
a8f   	movl    [rsp + #56], RAX	# spill
a93   	movq    [rsp + #64], R10	# spill
a98   	movl    [rsp + #72], RBX	# spill
a9c   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
aa3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #64 L[1]=rsp + #72 STK[0]=rsp + #72
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #32 L[3]=rsp + #64 L[4]=rsp + #36 L[5]=rsp + #48 L[6]=rsp + #52 STK[0]=rsp + #56
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #32 L[3]=rsp + #12 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [36]=NarrowOop [64]=Oop [88]=Oop off=2728}
aa8   	int3	# ShouldNotReachHere
aa8
aad   B133: #	B134 &lt;- B92  Freq: 3.08686e-06
aad   	movl    R13, R10	# spill
aad
ab0   B134: #	N2621 &lt;- B115 B133  Freq: 3.08686e-06
ab0   	movq    [rsp + #24], R11	# spill
ab5   	movl    [rsp + #40], RDX	# spill
ab9   	movl    [rsp + #44], R14	# spill
abe   	movl    [rsp + #56], RDI	# spill
ac2   	movl    [rsp + #60], R13	# spill
ac7   	movl    [rsp + #64], RAX	# spill
acb   	movl    [rsp + #80], RBX	# spill
acf   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
ad7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #72 L[1]=rsp + #80 STK[0]=rsp + #80 STK[1]=RBP
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #72 L[4]=rsp + #44 L[5]=rsp + #56 L[6]=rsp + #60 STK[0]=rsp + #64
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #0 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #20 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1
        # OopMap{[0]=Oop [24]=Oop [32]=Oop [44]=NarrowOop [72]=Oop [88]=Oop off=2780}
adc   	int3	# ShouldNotReachHere
adc
ae1   B135: #	N2621 &lt;- B56 B25  Freq: 3.17033e-06
ae1   	movq    RBP, [rsp + #0]	# spill
ae5   	movq    R10, [rsp + #32]	# spill
aea   	movl    R11, [rsp + #20]	# spill
aef   	movl    [rsp + #12], R11	# spill
af4   	movq    [rsp + #16], R10	# spill
af9   	movl    [rsp + #24], RDX	# spill
afd   	movq    R10, [rsp + #72]	# spill
b02   	movl    [rsp + #28], RDX	# spill
b06   	movq    [rsp + #40], R10	# spill
b0b   	movq    R10, [rsp + #88]	# spill
b10   	movq    [rsp + #56], R10	# spill
b15   	movl    R10, [rsp + #84]	# spill
b1a   	movl    [rsp + #64], R10	# spill
b1f   	movsd   [rsp + #72], XMM0	# spill
b25   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
b2b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #40 L[1]=rsp + #24 STK[0]=rsp + #24
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #72 L[1]=rsp + #16 L[2]=rsp + #28 L[3]=rsp + #56 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #12 L[4]=rsp + #56 L[5]=rsp + #64 L[6]=#1
        # OopMap{rbp=Oop [16]=Oop [40]=Oop [56]=Oop [72]=Oop off=2864}
b30   	int3	# ShouldNotReachHere
b30
b35   B136: #	N2621 &lt;- B57 B26  Freq: 3.02346e-06
b35   	movq    RBP, [rsp + #0]	# spill
b39   	movq    R10, [rsp + #32]	# spill
b3e   	movl    R11, [rsp + #20]	# spill
b43   	movl    [rsp + #12], R11	# spill
b48   	movq    [rsp + #16], R10	# spill
b4d   	movl    [rsp + #24], RDX	# spill
b51   	movq    R10, [rsp + #72]	# spill
b56   	movl    [rsp + #28], RDX	# spill
b5a   	movq    [rsp + #40], R10	# spill
b5f   	movl    [rsp + #56], RBX	# spill
b63   	movq    R10, [rsp + #88]	# spill
b68   	movq    [rsp + #64], R10	# spill
b6d   	movl    R10, [rsp + #84]	# spill
b72   	movl    [rsp + #60], R10	# spill
b77   	movsd   [rsp + #72], XMM0	# spill
b7d   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
b83   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #40 L[1]=rsp + #24 STK[0]=rsp + #24 STK[1]=rsp + #56
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #72 L[1]=rsp + #16 L[2]=rsp + #28 L[3]=rsp + #64 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #12 L[4]=rsp + #64 L[5]=rsp + #60 L[6]=#1
        # OopMap{rbp=Oop [16]=Oop [40]=Oop [64]=Oop [72]=Oop off=2952}
b88   	int3	# ShouldNotReachHere
b88
b8d   B137: #	B68 &lt;- B59  Freq: 2.1226e-06
b8d   	movl    RDI, [rsp + #20]	# spill
b91   	jmp     B68
b91
b96   B138: #	B70 &lt;- B60  Freq: 2.1226e-06
b96   	movl    RAX, [rsp + #20]	# spill
b9a   	jmp     B70
b9a
b9f   B139: #	B72 &lt;- B61  Freq: 2.1226e-06
b9f   	movl    RBX, [rsp + #20]	# spill
ba3   	jmp     B72
ba3
ba8   B140: #	B74 &lt;- B62  Freq: 2.1226e-06
ba8   	movl    R11, [rsp + #20]	# spill
bad   	jmp     B74
bad
bb2   B141: #	B76 &lt;- B63  Freq: 2.1226e-06
bb2   	movl    RDI, [rsp + #20]	# spill
bb6   	jmp     B76
bb6
bbb   B142: #	N2621 &lt;- B34  Freq: 1.88923e-06
bbb   	movq    RBP, [rsp + #0]	# spill
bbf   	movq    R10, [rsp + #32]	# spill
bc4   	movq    [rsp + #0], R10	# spill
bc8   	movl    [rsp + #8], RDX	# spill
bcc   	movl    R10, [rsp + #20]	# spill
bd1   	movl    [rsp + #12], R10	# spill
bd6   	movl    [rsp + #24], R13	# spill
bdb   	movl    [rsp + #48], R14	# spill
      	nop 	# 3 bytes pad for loops and calls
be3   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #48 STK[1]=rsp + #0 STK[2]=rsp + #24 STK[3]=rsp + #72
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1
        # OopMap{rbp=Oop [0]=Oop [48]=NarrowOop [72]=Oop [88]=Oop off=3048}
be8   	int3	# ShouldNotReachHere
be8
bed   B143: #	N2621 &lt;- B3  Freq: 9.99999e-07
bed   	movq    RBP, RAX	# spill
bf0   	movq    R10, [rsp + #32]	# spill
bf5   	movq    [rsp + #8], R10	# spill
bfa   	movq    R10, [rsp + #88]	# spill
bff   	movq    [rsp + #24], R10	# spill
c04   	movl    [rsp + #32], RCX	# spill
c08   	movl    [rsp + #36], RBX	# spill
c0c   	movl    [rsp + #40], R14	# spill
      	nop 	# 2 bytes pad for loops and calls
c13   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #40 L[3]=rsp + #32 L[4]=rsp + #24 L[5]=rsp + #84 L[6]=_ STK[0]=rsp + #36 STK[1]=rsp + #8 STK[2]=rsp + #40 STK[3]=rsp + #24
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [36]=NarrowOop off=3096}
c18   	int3	# ShouldNotReachHere
c18
c1d   B144: #	N2621 &lt;- B11  Freq: 9.94099e-07
c1d   	movl    RSI, #-28	# int
c22   	movq    RBP, [rsp + #0]	# spill
c26   	movq    R10, [rsp + #32]	# spill
c2b   	movq    [rsp + #8], R10	# spill
c30   	movq    R10, [rsp + #72]	# spill
c35   	movq    [rsp + #16], R10	# spill
c3a   	movss   [rsp + #24], XMM4	# spill
c40   	movl    R11, [rsp + #84]	# spill
c45   	movq    R10, [rsp + #88]	# spill
c4a   	movq    [rsp + #40], R10	# spill
c4f   	movl    [rsp + #36], R11	# spill
c54   	movq    [rsp + #48], RAX	# spill
c59   	movl    [rsp + #56], R14	# spill
c5e   	movl    [rsp + #60], R14	# spill
c63   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=rsp + #56
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #16 L[1]=rsp + #56 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #48 L[1]=rsp + #8 L[2]=rsp + #60 L[3]=rsp + #40 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #56 L[3]=rsp + #36 L[4]=rsp + #40 L[5]=rsp + #84 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [24]=NarrowOop [40]=Oop [48]=Oop off=3176}
c68   	int3	# ShouldNotReachHere
c68
c6d   B145: #	N2621 &lt;- B7  Freq: 9.81074e-07
c6d   	movq    RBP, [rsp + #0]	# spill
c71   	movq    R10, [rsp + #32]	# spill
c76   	movq    [rsp + #8], R10	# spill
c7b   	movl    R11, [rsp + #84]	# spill
c80   	movq    R10, [rsp + #88]	# spill
c85   	movq    [rsp + #24], R10	# spill
c8a   	movl    [rsp + #32], R11	# spill
c8f   	movq    [rsp + #40], RBX	# spill
c94   	movl    [rsp + #36], R14	# spill
c99   	movl    [rsp + #64], R14	# spill
      	nop 	# 1 bytes pad for loops and calls
c9f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #24 L[1]=rsp + #36 L[2]=_ L[3]=_ STK[0]=rsp + #24 STK[1]=rsp + #36
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #40 L[1]=rsp + #8 L[2]=rsp + #64 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #36 L[3]=rsp + #32 L[4]=rsp + #24 L[5]=rsp + #84 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [40]=Oop off=3236}
ca4   	int3	# ShouldNotReachHere
ca4
ca9   B146: #	N2621 &lt;- B18  Freq: 9.81067e-07
ca9   	movl    RSI, #-34	# int
cae   	movq    RBP, [rsp + #0]	# spill
cb2   	movq    R10, [rsp + #32]	# spill
cb7   	movq    [rsp + #8], R10	# spill
cbc   	movl    [rsp + #24], R14	# spill
cc1   	movl    R11, [rsp + #84]	# spill
cc6   	movl    [rsp + #40], R11	# spill
ccb   	movss   [rsp + #44], XMM1	# spill
cd1   	movss   [rsp + #48], XMM0	# spill
cd7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #44 STK[1]=rsp + #8 STK[2]=rsp + #48 STK[3]=rsp + #72
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #24 L[3]=rsp + #40 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [44]=NarrowOop [72]=Oop [88]=Oop off=3292}
cdc   	int3	# ShouldNotReachHere
cdc
ce1   B147: #	N2621 &lt;- B20  Freq: 9.81065e-07
ce1   	movq    RBP, [rsp + #0]	# spill
ce5   	movq    R10, [rsp + #32]	# spill
cea   	movq    [rsp + #8], R10	# spill
cef   	movl    [rsp + #16], R9	# spill
cf4   	movl    [rsp + #20], R8	# spill
cf9   	movl    [rsp + #24], R14	# spill
cfe   	movl    R10, [rsp + #84]	# spill
d03   	movl    [rsp + #28], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
d0b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=rsp + #8 L[2]=_ L[3]=_ STK[0]=rsp + #16 STK[1]=#0 STK[2]=rsp + #20
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #24 L[3]=rsp + #28 L[4]=rsp + #88 L[5]=rsp + #28 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=NarrowOop [88]=Oop off=3344}
d10   	int3	# ShouldNotReachHere
d10
d15   B148: #	B52 &lt;- B37  Freq: 9.57158e-07
d15   	movl    RBP, RDI	# spill
d17   	jmp     B52
d17
d1c   B149: #	B68 &lt;- B28  Freq: 9.00859e-07
d1c   	movl    RDI, [rsp + #20]	# spill
d20   	jmp     B68
d20
d25   B150: #	B70 &lt;- B29  Freq: 9.00858e-07
d25   	movl    RAX, [rsp + #20]	# spill
d29   	jmp     B70
d29
d2e   B151: #	B72 &lt;- B30  Freq: 9.00858e-07
d2e   	movl    RBX, [rsp + #20]	# spill
d32   	jmp     B72
d32
d37   B152: #	B74 &lt;- B31  Freq: 9.00858e-07
d37   	movl    R11, [rsp + #20]	# spill
d3c   	jmp     B74
d3c
d41   B153: #	B76 &lt;- B32  Freq: 9.00857e-07
d41   	movl    RDI, [rsp + #20]	# spill
d45   	jmp     B76
d45
d4a   B154: #	N2621 &lt;- B8  Freq: 4.90537e-07
d4a   	movq    RBP, [rsp + #0]	# spill
d4e   	movq    R10, [rsp + #32]	# spill
d53   	movq    [rsp + #8], R10	# spill
d58   	movq    R10, [rsp + #72]	# spill
d5d   	movq    [rsp + #24], R10	# spill
d62   	movl    R10, [rsp + #84]	# spill
d67   	movl    [rsp + #36], R10	# spill
d6c   	movq    R10, [rsp + #88]	# spill
d71   	movq    [rsp + #56], RBX	# spill
d76   	movl    [rsp + #52], R14	# spill
d7b   	movq    [rsp + #64], R10	# spill
d80   	movl    [rsp + #72], R14	# spill
      	nop 	# 2 bytes pad for loops and calls
d87   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #24 L[1]=rsp + #52 STK[0]=rsp + #52
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #24 L[1]=rsp + #52 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #56 L[1]=rsp + #8 L[2]=rsp + #72 L[3]=rsp + #88 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #52 L[3]=rsp + #36 L[4]=rsp + #64 L[5]=rsp + #36 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [56]=Oop [64]=Oop [88]=Oop off=3468}
d8c   	int3	# ShouldNotReachHere
d8c
d91   B155: #	N2621 &lt;- B1  Freq: 4.76837e-07
d91   	movl    RSI, #-155	# int
d96   	movq    RBP, RAX	# spill
d99   	movl    [rsp + #8], RDX	# spill
d9d   	movl    [rsp + #12], R14	# spill
da2   	movl    [rsp + #20], R8	# spill
da7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:5  L[0]=RBP L[1]=rsp + #32 L[2]=rsp + #12 L[3]=rsp + #20 L[4]=rsp + #88 L[5]=_ L[6]=_ STK[0]=rsp + #20 STK[1]=rsp + #8
        # OopMap{rbp=Oop [32]=Oop [88]=Oop off=3500}
dac   	int3	# ShouldNotReachHere
dac
db1   B156: #	N2621 &lt;- B10  Freq: 4.67812e-07
db1   	movq    RBP, [rsp + #0]	# spill
db5   	movq    R10, [rsp + #32]	# spill
dba   	movq    [rsp + #8], R10	# spill
dbf   	movq    R10, [rsp + #72]	# spill
dc4   	movq    [rsp + #24], R10	# spill
dc9   	movl    [rsp + #32], RBX	# spill
dcd   	movl    R11, [rsp + #84]	# spill
dd2   	movq    R10, [rsp + #88]	# spill
dd7   	movq    [rsp + #48], R10	# spill
ddc   	movl    [rsp + #44], R11	# spill
de1   	movq    [rsp + #56], RAX	# spill
de6   	movl    [rsp + #64], R14	# spill
deb   	movl    [rsp + #68], R14	# spill
      	nop 	# 3 bytes pad for loops and calls
df3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #24 L[1]=rsp + #64 STK[0]=rsp + #64 STK[1]=rsp + #32
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #24 L[1]=rsp + #64 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #56 L[1]=rsp + #8 L[2]=rsp + #68 L[3]=rsp + #48 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #64 L[3]=rsp + #44 L[4]=rsp + #48 L[5]=rsp + #44 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [48]=Oop [56]=Oop off=3576}
df8   	int3	# ShouldNotReachHere
df8
dfd   B157: #	N2621 &lt;- B12  Freq: 4.67811e-07
dfd   	movq    RBP, [rsp + #0]	# spill
e01   	movq    R10, [rsp + #32]	# spill
e06   	movq    [rsp + #8], R10	# spill
e0b   	movq    R10, [rsp + #72]	# spill
e10   	movq    [rsp + #16], R10	# spill
e15   	movl    R11, [rsp + #84]	# spill
e1a   	movq    R10, [rsp + #88]	# spill
e1f   	movq    [rsp + #32], R10	# spill
e24   	movl    [rsp + #40], R11	# spill
e29   	movq    [rsp + #48], RAX	# spill
e2e   	movl    [rsp + #44], R14	# spill
e33   	movl    [rsp + #64], R14	# spill
e38   	movl    [rsp + #72], RDX	# spill
e3c   	movl    [rsp + #76], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
e43   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #76 STK[0]=rsp + #72 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #16 L[1]=rsp + #44 L[2]=rsp + #72 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #48 L[1]=rsp + #8 L[2]=rsp + #64 L[3]=rsp + #32 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #44 L[3]=rsp + #40 L[4]=rsp + #32 L[5]=rsp + #84 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [32]=Oop [48]=Oop off=3656}
e48   	int3	# ShouldNotReachHere
e48
e4d   B158: #	N2621 &lt;- B13  Freq: 4.67811e-07
e4d   	movq    RBP, [rsp + #0]	# spill
e51   	movq    R10, [rsp + #32]	# spill
e56   	movq    [rsp + #8], R10	# spill
e5b   	movl    R11, [rsp + #84]	# spill
e60   	movl    [rsp + #40], R11	# spill
e65   	movq    [rsp + #48], RAX	# spill
e6a   	movl    [rsp + #44], R14	# spill
e6f   	movl    [rsp + #60], RDX	# spill
e73   	movl    [rsp + #64], RDX	# spill
e77   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #64 STK[0]=rsp + #60 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #48 L[1]=rsp + #8 L[2]=rsp + #44 L[3]=rsp + #72 L[4]=rsp + #60
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #44 L[3]=rsp + #40 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [48]=Oop [72]=Oop [88]=Oop off=3708}
e7c   	int3	# ShouldNotReachHere
e7c
e81   B159: #	N2621 &lt;- B14  Freq: 4.6781e-07
e81   	movq    RBP, [rsp + #0]	# spill
e85   	movq    R10, [rsp + #32]	# spill
e8a   	movq    [rsp + #8], R10	# spill
e8f   	movl    R10, [rsp + #84]	# spill
e94   	movl    [rsp + #28], R10	# spill
e99   	movq    [rsp + #48], RAX	# spill
e9e   	movl    [rsp + #44], R14	# spill
ea3   	movl    [rsp + #60], RDX	# spill
ea7   	movl    [rsp + #64], RDX	# spill
eab   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #64 STK[0]=rsp + #60 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #48 L[1]=rsp + #8 L[2]=rsp + #44 L[3]=rsp + #72 L[4]=rsp + #60
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #44 L[3]=rsp + #28 L[4]=rsp + #88 L[5]=rsp + #28 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [48]=Oop [72]=Oop [88]=Oop off=3760}
eb0   	int3	# ShouldNotReachHere
eb0
eb5   B160: #	N2621 &lt;- B15  Freq: 4.6781e-07
eb5   	movq    RBP, [rsp + #0]	# spill
eb9   	movq    R10, [rsp + #32]	# spill
ebe   	movq    [rsp + #8], R10	# spill
ec3   	movl    R10, [rsp + #84]	# spill
ec8   	movl    [rsp + #28], R10	# spill
ecd   	movq    [rsp + #48], RAX	# spill
ed2   	movl    [rsp + #44], R14	# spill
ed7   	movl    [rsp + #60], RDX	# spill
edb   	movss   [rsp + #64], XMM0	# spill
      	nop 	# 2 bytes pad for loops and calls
ee3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #60 STK[0]=rsp + #64 STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #48 L[1]=rsp + #8 L[2]=rsp + #44 L[3]=rsp + #72 L[4]=rsp + #60
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #44 L[3]=rsp + #28 L[4]=rsp + #88 L[5]=rsp + #28 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [48]=Oop [72]=Oop [88]=Oop off=3816}
ee8   	int3	# ShouldNotReachHere
ee8
eed   B161: #	N2621 &lt;- B16  Freq: 4.6781e-07
eed   	movq    RBP, [rsp + #0]	# spill
ef1   	movq    R10, [rsp + #32]	# spill
ef6   	movq    [rsp + #8], R10	# spill
efb   	movl    R11, [rsp + #84]	# spill
f00   	movl    [rsp + #40], R11	# spill
f05   	movq    [rsp + #48], RAX	# spill
f0a   	movl    [rsp + #44], R14	# spill
f0f   	movl    [rsp + #60], RDX	# spill
f13   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #60 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #48 L[1]=rsp + #8 L[2]=rsp + #44 L[3]=rsp + #72 L[4]=rsp + #60
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #44 L[3]=rsp + #40 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [48]=Oop [72]=Oop [88]=Oop off=3864}
f18   	int3	# ShouldNotReachHere
f18
f1d   B162: #	N2621 &lt;- B21  Freq: 4.67808e-07
f1d   	movq    RBP, [rsp + #0]	# spill
f21   	movl    [rsp + #8], R14	# spill
f26   	movl    R11, [rsp + #84]	# spill
f2b   	movl    [rsp + #24], R11	# spill
f30   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
f37   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:47  L[0]=RBP L[1]=rsp + #32 L[2]=rsp + #8 L[3]=rsp + #24 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1 STK[0]=#1
        # OopMap{rbp=Oop [32]=Oop [88]=Oop off=3900}
f3c   	int3	# ShouldNotReachHere
f3c
f41   B163: #	N2621 &lt;- B22  Freq: 4.67807e-07
f41   	movq    RBP, [rsp + #0]	# spill
f45   	movq    R10, [rsp + #32]	# spill
f4a   	movq    [rsp + #0], R10	# spill
f4e   	movl    R11, [rsp + #20]	# spill
f53   	movl    [rsp + #12], R11	# spill
f58   	movl    R10, [rsp + #24]	# spill
f5d   	movl    [rsp + #16], R10	# spill
f62   	movss   [rsp + #20], XMM0	# spill
f68   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
f6f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:66  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #20 L[3]=rsp + #12 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1 STK[0]=rsp + #12 STK[1]=rsp + #16
        # OopMap{rbp=Oop [0]=Oop [88]=Oop off=3956}
f74   	int3	# ShouldNotReachHere
f74
f79   B164: #	N2621 &lt;- B78  Freq: 1.20056e-07
f79   	movq    RBP, [rsp + #0]	# spill
f7d   	movl    [rsp + #8], RDX	# spill
f81   	movl    R10, [rsp + #20]	# spill
f86   	movl    [rsp + #12], R10	# spill
f8b   	movl    RSI, #-130	# int
      	nop 	# 3 bytes pad for loops and calls
f93   	call,static  wrapper for: uncommon_trap(reason=&apos;loop_limit_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:133  L[0]=RBP L[1]=rsp + #32 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=#1
        # OopMap{rbp=Oop [32]=Oop [88]=Oop off=3992}
f98   	int3	# ShouldNotReachHere
f98
f9d   B165: #	B65 &lt;- B52  Freq: 8.70151e-08
f9d   	movl    RDI, RBP	# spill
f9f   	movl    RDX, R13	# spill
fa2   	jmp     B65
fa2
fa7   B166: #	N2621 &lt;- B105  Freq: 1.89211e-08
fa7   	movl    RBP, R9	# spill
faa   	movl    RSI, #-34	# int
faf   	movl    [rsp + #8], R14	# spill
      	nop 	# 3 bytes pad for loops and calls
fb7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:170  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP STK[1]=rsp + #32 STK[2]=rsp + #8 STK[3]=rsp + #88
        # OopMap{rbp=NarrowOop [32]=Oop [88]=Oop off=4028}
fbc   	int3	# ShouldNotReachHere
fbc
fc1   B167: #	N2621 &lt;- B122  Freq: 6.58661e-12
fc1   	movq    RBP, [rsp + #0]	# spill
fc5   	movq    R10, [rsp + #32]	# spill
fca   	movq    [rsp + #0], R10	# spill
fce   	movl    [rsp + #8], RDX	# spill
fd2   	movl    R10, [rsp + #20]	# spill
fd7   	movl    [rsp + #12], R10	# spill
fdc   	movl    [rsp + #16], R9	# spill
fe1   	movl    RSI, #-34	# int
fe6   	movq    R10, [rsp + #88]	# spill
feb   	movq    [rsp + #32], R10	# spill
ff0   	movl    [rsp + #40], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
ff7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #16 STK[1]=rsp + #0 STK[2]=rsp + #40 STK[3]=rsp + #32
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=rsp + #32 L[5]=rsp + #84 L[6]=#1
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [32]=Oop off=4092}
ffc   	int3	# ShouldNotReachHere
ffc
1001   B168: #	N2621 &lt;- B83  Freq: 6.66498e-06
1001   	movq    R10, [rsp + #32]	# spill
1006   	movq    RBP, R10	# spill
1009   	movl    [rsp + #0], RDX	# spill
100c   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
1013   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #88
        # OopMap{rbp=Oop [88]=Oop off=4120}
1018   	int3	# ShouldNotReachHere
1018
101d   B169: #	N2621 &lt;- B85  Freq: 6.66497e-06
101d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1023   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4136}
1028   	int3	# ShouldNotReachHere
1028
102d   B170: #	N2621 &lt;- B91  Freq: 6.55959e-06
102d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1033   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4152}
1038   	int3	# ShouldNotReachHere
1038
103d   B171: #	N2621 &lt;- B33  Freq: 1.91432e-06
103d   	movq    RBP, [rsp + #32]	# spill
1042   	movl    [rsp + #0], R13	# spill
1046   	movl    RSI, #-10	# int
104b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #72
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [72]=Oop off=4176}
1050   	int3	# ShouldNotReachHere
1050
1055   B172: #	N2621 &lt;- B2  Freq: 1.01328e-06
1055   	movl    RSI, #-10	# int
105a   	movq    RBP, [rsp + #32]	# spill
105f   	movl    [rsp + #0], R14	# spill
1063   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #88
        # OopMap{rbp=Oop [88]=Oop off=4200}
1068   	int3	# ShouldNotReachHere
1068
106d   B173: #	N2621 &lt;- B4  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
106f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4212}
1074   	int3	# ShouldNotReachHere
1074
1079   B174: #	N2621 &lt;- B6  Freq: 9.94103e-07
1079   	movl    RBP, R14	# spill
107c   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
1083   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4232}
1088   	int3	# ShouldNotReachHere
1088
108d   B175: #	N2621 &lt;- B9  Freq: 9.941e-07
108d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1093   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4248}
1098   	int3	# ShouldNotReachHere
1098
109d   B176: #	N2621 &lt;- B17  Freq: 9.94096e-07
109d   	movq    RBP, [rsp + #32]	# spill
10a2   	movss   [rsp + #8], XMM0	# spill
      	nop 	# 3 bytes pad for loops and calls
10ab   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #8 STK[3]=rsp + #72
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [72]=Oop off=4272}
10b0   	int3	# ShouldNotReachHere
10b0
10b5   B177: #	N2621 &lt;- B19  Freq: 9.94094e-07
10b5   	movl    RBP, R8	# spill
      	nop 	# 3 bytes pad for loops and calls
10bb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4288}
10c0   	int3	# ShouldNotReachHere
10c0
10c5   B178: #	N2621 &lt;- B104  Freq: 1.91724e-08
10c5   	movq    RBP, R11	# spill
10c8   	movl    [rsp + #0], R14	# spill
      	nop 	# 3 bytes pad for loops and calls
10cf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:170  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #88
        # OopMap{rbp=Oop [88]=Oop off=4308}
10d4   	int3	# ShouldNotReachHere
10d4
10d9   B179: #	B181 &lt;- B123  Freq: 6.58661e-11
10d9   	# exception oop is in rax; no code emitted
10d9   	movq    RSI, RAX	# spill
10dc   	jmp,s   B181
10dc
10de   B180: #	B181 &lt;- B106  Freq: 1.89211e-07
10de   	# exception oop is in rax; no code emitted
10de   	movq    RSI, RAX	# spill
10de
10e1   B181: #	N2621 &lt;- B179 B180  Freq: 1.89277e-07
10e1   	addq    rsp, 112	# Destroy frame
	popq   rbp

10e6   	jmp     rethrow_stub
10e6
10eb   B182: #	N2621 &lt;- B121  Freq: 6.67408e-12
10eb   	movq    RBP, [rsp + #32]	# spill
10f0   	movl    RSI, #-10	# int
10f5   	movl    [rsp + #0], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
10fb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #88
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [88]=Oop off=4352}
1100   	int3	# ShouldNotReachHere
1100

</opto_assembly>
<writer thread='139875533833984'/>
<opto_assembly compile_id='395'>
{method}
 - this oop:          0x00007f375570c028
 - method holder:     &apos;java/lang/AbstractStringBuilder&apos;
 - constants:         0x00007f375570ab80 constant pool [365] {0x00007f375570ab80} for &apos;java/lang/AbstractStringBuilder&apos; cache=0x00007f37557cbc80
 - access:            0x81000002  private 
 - name:              &apos;ensureCapacityInternal&apos;
 - signature:         &apos;(I)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      59
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758bfd4e0
 - code size:         16
 - code start:        0x00007f375570bff0
 - code end (excl):   0x00007f375570c000
 - method data:       0x00007f37558faa08
 - checked ex length: 0
 - linenumber start:  0x00007f375570c000
 - localvar length:   2
 - localvar start:    0x00007f375570c00e
 - compiled code: nmethod   3143   13       3       java.lang.AbstractStringBuilder::ensureCapacityInternal (16 bytes)
#
#  void ( java/lang/AbstractStringBuilder:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/AbstractStringBuilder:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N378: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B25 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (368 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movq    [rsp + #64], RSI	# spill
031   	movl    R8, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
035   	# TLS is in R15
035   	decode_heap_oop_not_null RBX,R8
038   	movl    R11, [R8 + #12 (8-bit)]	# range
03c   	NullCheck R8
03c
03c   B2: #	B15 B3 &lt;- B1  Freq: 0.999999
03c   	movl    R10, R11	# spill
03f   	sall    R10, #1
042   	movl    RCX, RDX	# spill
044   	subl    RCX, R11	# int
047   	movl    RDI, R10	# spill
04a   	subl    RDI, RDX	# int
04c   	addl    RDI, #2	# int
04f   	testl   RCX, RCX
051   	jle     B15  P=0.745262 C=5751.000000
051
057   B3: #	B16 B4 &lt;- B2  Freq: 0.254738
057   	testl   RDI, RDI
059   	jl     B16  P=0.192787 C=1525.000000
059
05f   B4: #	B5 &lt;- B3  Freq: 0.205628
05f   	addl    R10, #2	# int
063
063   B5: #	B24 B6 &lt;- B16 B4  Freq: 0.254738
063   	cmpl    R11, R10
066   	movl    R9, R10	# spill
069   	cmovll R9, R11	# signed, int
06d   	movslq  R13, R9	# i2l
070   	movq    RSI, R13	# spill
073   	salq    RSI, #1
076   	movslq  RCX, R10	# i2l
079   	salq    RCX, #1
07c   	addq    RCX, #23	# long
080   	testl   R10, R10
083   	jl     B24  P=0.000000 C=1525.000000
083
089   B6: #	B18 B7 &lt;- B5  Freq: 0.254738
089   	movq    RAX, RCX	# spill
08c   	andq    RAX, #-8	# long
090   	movq    RBP, [R15 + #112 (8-bit)]	# ptr
094   	shrq    RCX, #3
098   	movq    RDI, RCX	# spill
09b   	addq    RDI, #-2	# long
09f   	movq    RDX, RAX	# spill
0a2   	addq    RDX, #-16	# long
0a6   	cmpl    R10, #524288	# unsigned
0ad   	jnbe,u  B18  P=0.000001 C=-1.000000
0ad
0b3   B7: #	B19 B8 &lt;- B6  Freq: 0.254738
0b3   	movq    [rsp + #56], RSI	# spill
0b8   	movl    [rsp + #52], R11	# spill
0bd   	movl    [rsp + #48], R8	# spill
0c2   	movq    R11, RBP	# spill
0c5   	addq    R11, RAX	# ptr
0c8   	cmpq    R11, [R15 + #128 (32-bit)]	# raw ptr
0cf   	jnb,u  B19  P=0.000100 C=-1.000000
0cf
0d5   B8: #	B9 &lt;- B7  Freq: 0.254712
0d5   	PREFETCHNTA [R11 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0dd   	movq    [R15 + #112 (8-bit)], R11	# ptr
0e1   	PREFETCHNTA [R11 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0e9   	movq    [RBP], 0x0000000000000001	# ptr
0f1   	movl    [RBP + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f37682141b0:Constant:exact *	# compressed klass ptr
0f8   	PREFETCHNTA [R11 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
100   	movl    [RBP + #12 (8-bit)], R10	# int
104   	PREFETCHNTA [R11 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
104
10c   B9: #	B21 B10 &lt;- B20 B8  Freq: 0.254738
10c   	
10c   	# checkcastPP of RBP
10c   	movq    RSI, RBP	# spill
10f   	addq    RSI, #16	# ptr
113   	movl    R8, [rsp + #52]	# spill
118   	cmpl    R8, R9	# unsigned
11b   	jb,u  B21  P=0.000001 C=-1.000000
11b
121   B10: #	B21 B11 &lt;- B9  Freq: 0.254738
121   	movq    R11, [rsp + #56]	# spill
126   	addq    R11, #16	# long
12a   	movq    RAX, R11	# spill
12d   	andq    R11, #-7	# long
131   	movq    R8, RBP	# spill
134   	addq    R8, R11	# ptr
137   	cmpl    R10, R9	# unsigned
13a   	jb,u  B21  P=0.000001 C=-1.000000
13a
140   B11: #	B23 B12 &lt;- B10  Freq: 0.254737
140   	shrq    RDX, #3
144   	movl    R11, [rsp + #48]	# spill
149   	leaq    R11, [R11 + #16 (8-bit)]	# ptr off8narrow
14d   	testl   R9, R9
150   	jle     B23  P=0.000001 C=-1.000000
150
156   B12: #	B17 B13 &lt;- B11  Freq: 0.254737
156   	shrq    RAX, #3
15a   	cmpl    R9, R10
15d   	jl     B17  P=0.001000 C=-1.000000
15d
163   B13: #	B14 &lt;- B12  Freq: 0.254482
163   	movq    RDI, R11	# spill
166   	call_leaf_nofp,runtime  jlong_disjoint_arraycopy
        No JVM State Info
        # 
173
173   B14: #	B15 &lt;- B17 B13 B22 B23  Freq: 0.254738
173   	encode_heap_oop_not_null R10,RBP
27e   	MEMBAR-storestore (empty encoding)
27e   	movq    R11, [rsp + #64]	# spill
283   	movl    [R11 + #16 (8-bit)], R10	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
287   	movq    R10, R11	# ptr -&gt; long
28a   	shrq    R10, #9
28e   	movq    R11, 0x00007f3757e0b000	# ptr
298   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
298
29c   B15: #	N378 &lt;- B14 B2  Freq: 0.999999
29c   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

2a7   	ret
2a7
2a8   B16: #	B5 &lt;- B3  Freq: 0.0491102
2a8   	movl    R10, RDX	# spill
2ab   	jmp     B5
2ab
2b0   B17: #	B14 &lt;- B12  Freq: 0.000254737
2b0   	subq    RCX, RAX	# long
2b3   	movq    RDI, R8	# spill
2b6   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
2c0   	movq    RDI, R11	# spill
2c3   	movq    RDX, R13	# spill
2c6   	call_leaf_nofp,runtime  arrayof_jshort_disjoint_arraycopy
        No JVM State Info
        # 
2d3   	jmp     B14
2d3
2d8   B18: #	B19 &lt;- B6  Freq: 2.58121e-07
2d8   	movl    [rsp + #48], R8	# spill
2dd   	movl    [rsp + #52], R11	# spill
2e2   	movq    [rsp + #56], RSI	# spill
2e2
2e7   B19: #	B27 B20 &lt;- B18 B7  Freq: 2.57361e-05
2e7   	movq    [rsp + #40], RDX	# spill
2ec   	movq    [rsp + #32], RDI	# spill
2f1   	movq    [rsp + #24], RCX	# spill
2f6   	movq    [rsp + #16], R13	# spill
2fb   	movl    [rsp + #12], R9	# spill
300   	movl    [rsp + #8], R10	# spill
305   	movq    [rsp + #0], RBX	# spill
309   	movq    RBP, [rsp + #64]	# spill
30e   	movq    RSI, precise klass [C: 0x00007f37682141b0:Constant:exact *	# ptr
318   	movl    RDX, R10	# spill
31b   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOf @ bci:1  L[0]=rsp + #48 L[1]=rsp + #8 L[2]=_
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=RBP
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [0]=Oop [48]=NarrowOop [64]=Oop off=800}
320
320   B20: #	B9 &lt;- B19  Freq: 2.57356e-05
        # Block is sole successor of call
320   	movq    RBX, [rsp + #0]	# spill
324   	movl    R10, [rsp + #8]	# spill
329   	movl    R9, [rsp + #12]	# spill
32e   	movq    R13, [rsp + #16]	# spill
333   	movq    RCX, [rsp + #24]	# spill
338   	movq    RBP, RAX	# spill
33b   	movq    RDI, [rsp + #32]	# spill
340   	movq    RDX, [rsp + #40]	# spill
345   	jmp     B9
345
34a   B21: #	B26 B22 &lt;- B9 B10  Freq: 5.09476e-07
34a   	movq    RCX, RDI	# spill
34d   	movq    RDI, RSI	# spill
350   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
35a   	movq    RSI, RBX	# spill
35d   	xorl    RDX, RDX	# int
35f   	movq    RCX, RBP	# spill
362   	xorl    R8, R8	# int
      	nop 	# 2 bytes pad for loops and calls
367   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOf @ bci:14  L[0]=_ L[1]=_ L[2]=RBP
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #64
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [64]=Oop off=876}
36c
36c   B22: #	B14 &lt;- B21  Freq: 5.09465e-07
        # Block is sole successor of call
36c   	jmp     B14
36c
371   B23: #	B14 &lt;- B11  Freq: 2.54737e-07
371   	movq    RCX, RDI	# spill
374   	movq    RDI, RSI	# spill
377   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
381   	
381   	jmp     B14
381
386   B24: #	N378 &lt;- B5  Freq: 1.21469e-07
386   	movl    RSI, #-155	# int
38b   	movq    RBP, [rsp + #64]	# spill
390   	movl    [rsp + #0], RDX	# spill
393   	movl    [rsp + #8], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
39b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:19  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 STK[0]=rsp + #8
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # OopMap{rbp=Oop off=928}
3a0   	int3	# ShouldNotReachHere
3a0
3a5   B25: #	N378 &lt;- B1  Freq: 1.01328e-06
3a5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
3ab   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:5  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=944}
3b0   	int3	# ShouldNotReachHere
3b0
3b5   B26: #	B28 &lt;- B21  Freq: 5.09476e-12
3b5   	# exception oop is in rax; no code emitted
3b5   	movq    RSI, RAX	# spill
3b8   	jmp,s   B28
3b8
3ba   B27: #	B28 &lt;- B19  Freq: 2.57361e-10
3ba   	# exception oop is in rax; no code emitted
3ba   	movq    RSI, RAX	# spill
3ba
3bd   B28: #	N378 &lt;- B27 B26  Freq: 2.62456e-10
3bd   	addq    rsp, 96	# Destroy frame
	popq   rbp

3c2   	jmp     rethrow_stub
3c2

</opto_assembly>
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='419'>
{method}
 - this oop:          0x00007f37557ee5a8
 - method holder:     &apos;java/io/BufferedInputStream&apos;
 - constants:         0x00007f37557ede50 constant pool [155] {0x00007f37557ede50} for &apos;java/io/BufferedInputStream&apos; cache=0x00007f37557eff08
 - access:            0x81000002  private 
 - name:              &apos;getBufIfOpen&apos;
 - signature:         &apos;()[B&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      16
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef680: 0xb0000000 i2c: 0x00007f3758b11620 c2i: 0x00007f3758b1175a c2iUV: 0x00007f3758b1172d
 - compiled entry     0x00007f3758c0c300
 - code size:         21
 - code start:        0x00007f37557ee568
 - code end (excl):   0x00007f37557ee57d
 - method data:       0x00007f3755999588
 - checked ex length: 1
 - checked ex start:  0x00007f37557ee5a4
 - linenumber start:  0x00007f37557ee57d
 - localvar length:   2
 - localvar start:    0x00007f37557ee58a
 - compiled code: nmethod   3598   37       3       java.io.BufferedInputStream::getBufIfOpen (21 bytes)
#
#  byte[int:&gt;=0]:exact * ( java/io/BufferedInputStream:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/io/BufferedInputStream:NotNull *
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N37: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    R10, [RSI + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
030   	MEMBAR-acquire ! (empty encoding)
030   	testl   R10, R10	# compressed ptr
033   	je,s   B3  P=0.000000 C=5649.000000
033
035   B2: #	N37 &lt;- B1  Freq: 1
035   	decode_heap_oop_not_null RAX,R10
038   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

043   	ret
043
044   B3: #	N37 &lt;- B1  Freq: 4.76837e-07
044   	movl    RSI, #-155	# int
049   	movl    [rsp + #0], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
04f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #0 STK[0]=rsp + #0
        # OopMap{[0]=NarrowOop off=84}
054   	int3	# ShouldNotReachHere
054

</opto_assembly>
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='421'>
{method}
 - this oop:          0x00007f37557ee938
 - method holder:     &apos;java/io/BufferedInputStream&apos;
 - constants:         0x00007f37557ede50 constant pool [155] {0x00007f37557ede50} for &apos;java/io/BufferedInputStream&apos; cache=0x00007f37557eff08
 - access:            0x81000002  private 
 - name:              &apos;fill&apos;
 - signature:         &apos;()V&apos;
 - max stack:         6
 - max locals:        4
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      14
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef680: 0xb0000000 i2c: 0x00007f3758b11620 c2i: 0x00007f3758b1175a c2iUV: 0x00007f3758b1172d
 - compiled entry     0x00007f3758ce2fc0
 - code size:         233
 - code start:        0x00007f37557ee7e0
 - code end (excl):   0x00007f37557ee8c9
 - method data:       0x00007f3755999c68
 - checked ex length: 1
 - checked ex start:  0x00007f37557ee934
 - linenumber start:  0x00007f37557ee8c9
 - localvar length:   6
 - localvar start:    0x00007f37557ee8ea
 - compiled code: nmethod   3871  414       3       java.io.BufferedInputStream::fill (233 bytes)
#
#  void ( java/io/BufferedInputStream:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/io/BufferedInputStream:NotNull *
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N159: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B12 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (264 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	movq    [rsp + #0], RSI	# spill
030   	movl    R10, [RSI + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
034   	movl    RSI, #-155	# int
039   	MEMBAR-acquire ! (empty encoding)
039   	movq    R11, [rsp + #0]	# spill
03d   	movl    R11, [R11 + #24 (8-bit)]	# int ! Field: java/io/BufferedInputStream.markpos
041   	movl    R8, [R10 + #12 (8-bit)]	# range
045   	NullCheck R10
045
045   B2: #	B10 B3 &lt;- B1  Freq: 1
045   	movq    R9, [rsp + #0]	# spill
049   	movl    RBP, [R9 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
04d   	testl   R11, R11
050   	jge     B10  P=0.000000 C=5121.000000
050
056   B3: #	B13 B4 &lt;- B2  Freq: 0.999999
056   	movl    [R9 + #20 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/io/BufferedInputStream.pos
05a   	movl    [R9 + #16 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/io/BufferedInputStream.count
05e   	MEMBAR-acquire ! (empty encoding)
05e   	movl    RCX, [R9 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
062   	subl    R8, RCX	# int
065   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
069   	NullCheck RBP
069
069   B4: #	B8 B5 &lt;- B3  Freq: 0.999999
069   	decode_heap_oop_not_null RDX,R10
06c   	cmpl    R11, narrowklass: precise klass java/io/FileInputStream: 0x00007f37240881d0:Constant:exact *	# compressed klass ptr
073   	jne,us  B8  P=0.000001 C=-1.000000
073
075   B5: #	B11 B6 &lt;- B4  Freq: 0.999998
075   	decode_heap_oop_not_null RSI,RBP
078   	# checkcastPP of RSI
      	nop 	# 3 bytes pad for loops and calls
07b   	call,static  java.io.FileInputStream::readBytes
        # java.io.FileInputStream::read @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::fill @ bci:214  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=_
        # OopMap{[0]=Oop off=128}
080
080   B6: #	B9 B7 &lt;- B5  Freq: 0.999978
        # Block is sole successor of call
080   	movl    R11, RAX	# spill
083   	movq    R10, [rsp + #0]	# spill
087   	addl    R11, [R10 + #20 (8-bit)]	# int
08b   	movl    RSI, #-155	# int
090   	testl   RAX, RAX
092   	jle,s   B9  P=0.000000 C=5117.000000
092
094   B7: #	N159 &lt;- B6  Freq: 0.999977
094   	movl    [R10 + #16 (8-bit)], R11	# int ! Field: java/io/BufferedInputStream.count
098   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0a3   	ret
0a3
0a4   B8: #	N159 &lt;- B4  Freq: 9.99999e-07
0a4   	movl    RSI, #-34	# int
0a9   	movl    [rsp + #8], R10	# spill
0ae   	movl    [rsp + #12], R8	# spill
0b3   	movl    [rsp + #16], RCX	# spill
0b7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedInputStream::fill @ bci:214  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #8 STK[2]=rsp + #16 STK[3]=rsp + #12
        # OopMap{rbp=NarrowOop [0]=Oop [8]=NarrowOop off=188}
0bc   	int3	# ShouldNotReachHere
0bc
0c1   B9: #	N159 &lt;- B6  Freq: 4.99989e-07
0c1   	movq    RBP, R10	# spill
0c4   	movl    [rsp + #4], RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
0cb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::fill @ bci:219  L[0]=RBP L[1]=_ L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #4
        # OopMap{rbp=Oop off=208}
0d0   	int3	# ShouldNotReachHere
0d0
0d5   B10: #	N159 &lt;- B2  Freq: 4.76837e-07
0d5   	movq    RBP, R9	# spill
0d8   	movl    [rsp + #0], R10	# spill
0dc   	movl    [rsp + #4], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
0e3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::fill @ bci:9  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=_ STK[0]=rsp + #4
        # OopMap{rbp=Oop [0]=NarrowOop off=232}
0e8   	int3	# ShouldNotReachHere
0e8
0ed   B11: #	N159 &lt;- B5  Freq: 9.99998e-06
0ed   	# exception oop is in rax; no code emitted
0ed   	movq    RSI, RAX	# spill
0f0   	addq    rsp, 48	# Destroy frame
	popq   rbp

0f5   	jmp     rethrow_stub
0f5
0fa   B12: #	N159 &lt;- B1  Freq: 4.76837e-07
0fa   	movq    RBP, [rsp + #0]	# spill
0fe   	movl    [rsp + #4], R10	# spill
103   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #4 STK[0]=rsp + #4
        # java.io.BufferedInputStream::fill @ bci:1  L[0]=RBP L[1]=_ L[2]=_ L[3]=_
        # OopMap{rbp=Oop [4]=NarrowOop off=264}
108   	int3	# ShouldNotReachHere
108
10d   B13: #	N159 &lt;- B3  Freq: 4.76837e-07
10d   	movl    [rsp + #8], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
113   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getInIfOpen @ bci:6  L[0]=_ L[1]=RBP STK[0]=RBP
        # java.io.BufferedInputStream::fill @ bci:199  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=_
        # OopMap{rbp=NarrowOop [0]=Oop [8]=NarrowOop off=280}
118   	int3	# ShouldNotReachHere
118

</opto_assembly>
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='423'>
{method}
 - this oop:          0x00007f37557ee4d8
 - method holder:     &apos;java/io/BufferedInputStream&apos;
 - constants:         0x00007f37557ede50 constant pool [155] {0x00007f37557ede50} for &apos;java/io/BufferedInputStream&apos; cache=0x00007f37557eff08
 - access:            0x81000002  private 
 - name:              &apos;getInIfOpen&apos;
 - signature:         &apos;()Ljava/io/InputStream;&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      15
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef680: 0xb0000000 i2c: 0x00007f3758b11620 c2i: 0x00007f3758b1175a c2iUV: 0x00007f3758b1172d
 - compiled entry     0x00007f3758ce13c0
 - code size:         21
 - code start:        0x00007f37557ee498
 - code end (excl):   0x00007f37557ee4ad
 - method data:       0x00007f3755be84f0
 - checked ex length: 1
 - checked ex start:  0x00007f37557ee4d4
 - linenumber start:  0x00007f37557ee4ad
 - localvar length:   2
 - localvar start:    0x00007f37557ee4ba
 - compiled code: nmethod   3918  415       3       java.io.BufferedInputStream::getInIfOpen (21 bytes)
#
#  java/io/InputStream * ( java/io/BufferedInputStream:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/io/BufferedInputStream:NotNull *
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N37: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
030   	movl    RSI, #-155	# int
035   	MEMBAR-acquire ! (empty encoding)
035   	testl   R10, R10	# compressed ptr
038   	je,s   B3  P=0.000000 C=5561.000000
038
03a   B2: #	N37 &lt;- B1  Freq: 1
03a   	decode_heap_oop_not_null RAX,R10
03d   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

048   	ret
048
049   B3: #	N37 &lt;- B1  Freq: 4.76837e-07
049   	movl    [rsp + #0], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
04f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getInIfOpen @ bci:6  L[0]=_ L[1]=rsp + #0 STK[0]=rsp + #0
        # OopMap{[0]=NarrowOop off=84}
054   	int3	# ShouldNotReachHere
054

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
<opto_assembly compile_id='422'>
{method}
 - this oop:          0x00007f37557eeb78
 - method holder:     &apos;java/io/BufferedInputStream&apos;
 - constants:         0x00007f37557ede50 constant pool [155] {0x00007f37557ede50} for &apos;java/io/BufferedInputStream&apos; cache=0x00007f37557eff08
 - access:            0x81000002  private 
 - name:              &apos;read1&apos;
 - signature:         &apos;([BII)I&apos;
 - max stack:         6
 - max locals:        6
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      17
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680efb00: 0xbbaa0000 i2c: 0x00007f3758b14ae0 c2i: 0x00007f3758b14c25 c2iUV: 0x00007f3758b14bf8
 - compiled entry     0x00007f3758cd35c0
 - code size:         108
 - code start:        0x00007f37557eeaa8
 - code end (excl):   0x00007f37557eeb14
 - method data:       0x00007f3755be8230
 - checked ex length: 1
 - checked ex start:  0x00007f37557eeb74
 - linenumber start:  0x00007f37557eeb14
 - localvar length:   6
 - localvar start:    0x00007f37557eeb2a
 - compiled code: nmethod   3928  410       3       java.io.BufferedInputStream::read1 (108 bytes)
#
#  int ( java/io/BufferedInputStream:NotNull *, byte[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/io/BufferedInputStream:NotNull *
#r016 rdx:rdx   : parm 1: byte[int:&gt;=0]:exact *
#r010 rcx   : parm 2: int
#r004 r8   : parm 3: int
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N453: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B11 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (392 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c   	movl    [rsp + #20], R8	# spill
031   	movl    [rsp + #16], RCX	# spill
035   	movq    [rsp + #8], RDX	# spill
03a   	movq    [rsp + #24], RSI	# spill
03f   	movl    R10, [RSI + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
043   	movl    R8, [RSI + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
047   	subl    R10, [RSI + #20 (8-bit)]	# int
04b   	movl    [rsp + #32], R10	# spill
050   	testl   R10, R10
053   	jg     B11  P=0.001115 C=5382.000000
053
059   B2: #	B33 B3 &lt;- B1  Freq: 0.998885
059   	MEMBAR-acquire ! (empty encoding)
059   	movl    R9, [RSI + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
05d   	movl    RSI, #-155	# int
062   	decode_heap_oop_not_null RDX,R9
065   	movl    RBP, [R8 + #12 (8-bit)]	# range
069   	NullCheck R8
069
069   B3: #	B29 B4 &lt;- B2  Freq: 0.998885
069   	movl    R10, [rsp + #20]	# spill
06e   	cmpl    R10, RBP
071   	jge     B29  P=0.000000 C=5376.000000
071
077   B4: #	B34 B5 &lt;- B3  Freq: 0.998884
077   	MEMBAR-acquire ! (empty encoding)
077   	movq    R10, [rsp + #24]	# spill
07c   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
080   	movl    R11, [R9 + #12 (8-bit)]	# range
084   	NullCheck R9
084
084   B5: #	B30 B6 &lt;- B4  Freq: 0.998884
084   	movq    R8, [rsp + #24]	# spill
089   	movl    RBP, [R8 + #24 (8-bit)]	# int ! Field: java/io/BufferedInputStream.markpos
08d   	testl   RBP, RBP
08f   	jge     B30  P=0.000000 C=5556.000000
08f
095   B6: #	B35 B7 &lt;- B5  Freq: 0.998883
095   	movl    [R8 + #16 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/io/BufferedInputStream.count
099   	movl    [R8 + #20 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/io/BufferedInputStream.pos
09d   	decode_heap_oop_not_null RSI,R10
0a0   	MEMBAR-acquire ! (empty encoding)
0a0   	movl    RCX, [R8 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
0a4   	subl    R11, RCX	# int
0a7   	movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
0ab   	NullCheck R10
0ab
0ab   B7: #	B27 B8 &lt;- B6  Freq: 0.998883
0ab   	cmpl    R8, narrowklass: precise klass java/io/FileInputStream: 0x00007f37242ce9d0:Constant:exact *	# compressed klass ptr
0b2   	jne,u  B27  P=0.000001 C=-1.000000
0b2
0b8   B8: #	B37 B9 &lt;- B7  Freq: 0.998882
0b8   	# checkcastPP of RSI
0b8   	movl    R8, R11	# spill
0bb   	movq    RBP, [rsp + #24]	# spill
      	nop 	# 3 bytes pad for loops and calls
0c3   	call,static  java.io.FileInputStream::readBytes
        # java.io.FileInputStream::read @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::fill @ bci:214  L[0]=RBP L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #20 L[4]=_ L[5]=_
        # OopMap{rbp=Oop [8]=Oop [24]=Oop off=200}
0c8
0c8   B9: #	B28 B10 &lt;- B8  Freq: 0.998862
        # Block is sole successor of call
0c8   	movl    [rsp + #32], RAX	# spill
0cc   	testl   RAX, RAX
0ce   	jle     B28  P=0.000000 C=5553.000000
0ce
0d4   B10: #	B11 &lt;- B9  Freq: 0.998861
0d4   	movl    R10, RAX	# spill
0d7   	addl    R10, [RBP + #20 (8-bit)]	# int
0db   	movl    [RBP + #16 (8-bit)], R10	# int ! Field: java/io/BufferedInputStream.count
0db
0df   B11: #	B21 B12 &lt;- B10 B1  Freq: 0.999976
0df   	movl    R11, [rsp + #32]	# spill
0e4   	cmpl    R11, [RSP + #20 (32-bit)]
0e9   	jge     B21  P=0.001115 C=5381.000000
0e9
0ef   B12: #	B32 B13 &lt;- B21 B11  Freq: 0.999976
0ef   	movq    R10, [rsp + #24]	# spill
0f4   	movl    RBP, [R10 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
0f8   	decode_heap_oop_not_null RAX,RBP
0fb   	MEMBAR-acquire ! (empty encoding)
0fb   	movl    R8, [RBP + #12 (8-bit)]	# range
0ff   	NullCheck RBP
0ff
0ff   B13: #	B31 B14 &lt;- B12  Freq: 0.999976
0ff   	movl    RSI, #-10	# int
104   	movl    RBX, [R10 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
108   	movslq  R9, [RSP + #16 (32-bit)]	# int -&gt; long
10d   	movq    R11, [rsp + #8]	# spill
112   	movl    RCX, [R11 + #12 (8-bit)]	# range
116   	NullCheck R11
116
116   B14: #	B22 B15 &lt;- B13  Freq: 0.999975
116   	movslq  R10, RBX	# i2l
119   	testl   RBX, RBX
11b   	jl,s   B22  P=0.000001 C=-1.000000
11b
11d   B15: #	B23 B16 &lt;- B14  Freq: 0.999974
11d   	leaq    RSI, [R11 + #16 + R9]	# ptr idxoff
122   	movl    RDI, [rsp + #32]	# spill
126   	addl    RDI, RBX	# int
128   	movl    R9, [rsp + #16]	# spill
12d   	testl   R9, R9
130   	jl,s   B23  P=0.000001 C=-1.000000
130
132   B16: #	B23 B17 &lt;- B15  Freq: 0.999973
132   	movslq  RDX, [RSP + #32 (32-bit)]	# int -&gt; long
137   	cmpl    R8, RDI	# unsigned
13a   	jb,us  B23  P=0.000001 C=-1.000000
13a
13c   B17: #	B23 B18 &lt;- B16  Freq: 0.999972
13c   	leaq    RDI, [RBP + #16 + R10]	# ptr idxoffnarrow
141   	movl    R10, R9	# spill
144   	addl    R10, [RSP + #32 (32-bit)]	# int
149   	cmpl    RCX, R10	# unsigned
14c   	jb,us  B23  P=0.000001 C=-1.000000
14c
14e   B18: #	B25 B19 &lt;- B17  Freq: 0.999971
14e   	movl    R10, [rsp + #32]	# spill
153   	testl   R10, R10
156   	jle,s   B25  P=0.000001 C=-1.000000
156
158   B19: #	B20 &lt;- B18  Freq: 0.99997
158   	call_leaf_nofp,runtime  jbyte_arraycopy
        No JVM State Info
        # 
165
165   B20: #	N453 &lt;- B19 B26 B24  Freq: 0.999975
165   	
165   	movq    R10, [rsp + #24]	# spill
16a   	movl    R11, [rsp + #32]	# spill
16f   	addl    [R10 + #20 (8-bit)], R11	# int ! Field: java/io/BufferedInputStream.pos
173   	movl    RAX, [rsp + #32]	# spill
177   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

182   	ret
182
183   B21: #	B12 &lt;- B11  Freq: 0.001115
183   	movl    R11, [rsp + #20]	# spill
188   	movl    [rsp + #32], R11	# spill
18d   	jmp     B12
18d
192   B22: #	B23 &lt;- B14  Freq: 9.99975e-07
192   	movl    R9, [rsp + #16]	# spill
192
197   B23: #	B36 B24 &lt;- B22 B15 B16 B17 B25  Freq: 3.99989e-06
197   	movq    RSI, RAX	# spill
19a   	movl    RDX, RBX	# spill
19c   	movq    RCX, R11	# spill
19f   	movl    R8, R9	# spill
1a2   	movl    R9, [rsp + #32]	# spill
1a7   	movq    RBP, [rsp + #24]	# spill
      	nop 	# 3 bytes pad for loops and calls
1af   	call,static  wrapper for: slow_arraycopy
        # java.io.BufferedInputStream::read1 @ bci:91  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #32
        # OopMap{rbp=Oop [24]=Oop off=436}
1b4
1b4   B24: #	B20 &lt;- B23  Freq: 3.99981e-06
        # Block is sole successor of call
1b4   	jmp,s   B20
1b4
1b6   B25: #	B23 B26 &lt;- B18  Freq: 9.99971e-07
1b6   	testl   R10, R10
1b9   	jl,s   B23  P=0.000001 C=-1.000000
1b9
1bb   B26: #	B20 &lt;- B25  Freq: 9.9997e-07
1bb   	jmp,s   B20
1bb
1bd   B27: #	N453 &lt;- B7  Freq: 9.98883e-07
1bd   	movl    RSI, #-34	# int
1c2   	movq    RBP, [rsp + #24]	# spill
1c7   	movq    R8, [rsp + #8]	# spill
1cc   	movq    [rsp + #0], R8	# spill
1d0   	movl    R8, [rsp + #16]	# spill
1d5   	movl    [rsp + #8], R8	# spill
1da   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
1ec   	movl    [rsp + #24], R10	# spill
1f1   	movl    [rsp + #28], R9	# spill
1f6   	movl    [rsp + #32], RCX	# spill
1fa   	movl    [rsp + #36], R11	# spill
1ff   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedInputStream::fill @ bci:214  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24 STK[1]=rsp + #28 STK[2]=rsp + #32 STK[3]=rsp + #36
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=_ L[5]=_
        # OopMap{rbp=Oop [0]=Oop [24]=NarrowOop [28]=NarrowOop off=516}
204   	int3	# ShouldNotReachHere
204
209   B28: #	N453 &lt;- B9  Freq: 4.99431e-07
209   	movq    R10, [rsp + #8]	# spill
20e   	movq    [rsp + #0], R10	# spill
212   	movl    R10, [rsp + #16]	# spill
217   	movl    [rsp + #8], R10	# spill
21c   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
22e   	movl    [rsp + #28], RAX	# spill
232   	movl    RSI, #-155	# int
237   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::fill @ bci:219  L[0]=RBP L[1]=_ L[2]=rsp + #28 L[3]=_ STK[0]=rsp + #32
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=_ L[5]=_
        # OopMap{rbp=Oop [0]=Oop off=572}
23c   	int3	# ShouldNotReachHere
23c
241   B29: #	N453 &lt;- B3  Freq: 4.76305e-07
241   	pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #0]
      	nop 	# 1 bytes pad for loops and calls
24b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read1 @ bci:22  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #20 L[4]=_ L[5]=_ STK[0]=rsp + #20 STK[1]=RBP
        # OopMap{[0]=Oop [8]=Oop off=592}
250   	int3	# ShouldNotReachHere
250
255   B30: #	N453 &lt;- B5  Freq: 4.76305e-07
255   	movl    [rsp + #32], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
25b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::fill @ bci:9  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=_ STK[0]=RBP
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #24 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #20 L[4]=_ L[5]=_
        # OopMap{[8]=Oop [24]=Oop [32]=NarrowOop off=608}
260   	int3	# ShouldNotReachHere
260
265   B31: #	N453 &lt;- B13  Freq: 1.01325e-06
265   	movl    [rsp + #8], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
26b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedInputStream::read1 @ bci:91  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=RBP STK[1]=rsp + #8 STK[2]=#NULL STK[3]=rsp + #16 STK[4]=rsp + #32
        # OopMap{rbp=NarrowOop off=624}
270   	int3	# ShouldNotReachHere
270
275   B32: #	N453 &lt;- B12  Freq: 4.76826e-07
275   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
27b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=RBP STK[0]=RBP
        # java.io.BufferedInputStream::read1 @ bci:80  L[0]=rsp + #24 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=_ L[4]=_ L[5]=rsp + #32
        # OopMap{rbp=NarrowOop [8]=Oop [24]=Oop off=640}
280   	int3	# ShouldNotReachHere
280
285   B33: #	N453 &lt;- B2  Freq: 4.76306e-07
285   	movq    RBP, [rsp + #24]	# spill
28a   	movq    R10, [rsp + #8]	# spill
28f   	movq    [rsp + #0], R10	# spill
293   	movl    [rsp + #8], RCX	# spill
297   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
2a9   	movl    [rsp + #24], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
2af   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #24 STK[0]=rsp + #24
        # java.io.BufferedInputStream::read1 @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=_ L[5]=_ STK[0]=rsp + #12
        # OopMap{rbp=Oop [0]=Oop [24]=NarrowOop off=692}
2b4   	int3	# ShouldNotReachHere
2b4
2b9   B34: #	N453 &lt;- B4  Freq: 4.76305e-07
2b9   	movq    RBP, [rsp + #24]	# spill
2be   	movq    R10, [rsp + #8]	# spill
2c3   	movq    [rsp + #0], R10	# spill
2c7   	movl    [rsp + #8], RCX	# spill
2cb   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
2dd   	movl    [rsp + #28], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
2e3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #28
        # java.io.BufferedInputStream::fill @ bci:1  L[0]=RBP L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=_ L[5]=_
        # OopMap{rbp=Oop [0]=Oop [28]=NarrowOop off=744}
2e8   	int3	# ShouldNotReachHere
2e8
2ed   B35: #	N453 &lt;- B6  Freq: 4.76305e-07
2ed   	movl    RSI, #-155	# int
2f2   	movq    RBP, [rsp + #24]	# spill
2f7   	movq    R11, [rsp + #8]	# spill
2fc   	movq    [rsp + #0], R11	# spill
300   	movl    R11, [rsp + #16]	# spill
305   	movl    [rsp + #8], R11	# spill
30a   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
31c   	movl    [rsp + #24], R9	# spill
321   	movl    [rsp + #32], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
327   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getInIfOpen @ bci:6  L[0]=_ L[1]=rsp + #32 STK[0]=rsp + #32
        # java.io.BufferedInputStream::fill @ bci:199  L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=_ L[5]=_
        # OopMap{rbp=Oop [0]=Oop [24]=NarrowOop [32]=NarrowOop off=812}
32c   	int3	# ShouldNotReachHere
32c
331   B36: #	B38 &lt;- B23  Freq: 3.99989e-11
331   	# exception oop is in rax; no code emitted
331   	movq    RSI, RAX	# spill
334   	jmp,s   B38
334
336   B37: #	B38 &lt;- B8  Freq: 9.98882e-06
336   	# exception oop is in rax; no code emitted
336   	movq    RSI, RAX	# spill
336
339   B38: #	N453 &lt;- B37 B36  Freq: 9.98886e-06
339   	addq    rsp, 64	# Destroy frame
	popq   rbp

33e   	jmp     rethrow_stub
33e

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
<opto_assembly compile_id='424'>
{method}
 - this oop:          0x00007f37557ef820
 - method holder:     &apos;java/io/FilterInputStream&apos;
 - constants:         0x00007f37557ef398 constant pool [62] {0x00007f37557ef398} for &apos;java/io/FilterInputStream&apos; cache=0x00007f37557efd98
 - access:            0x81000001  public 
 - name:              &apos;read&apos;
 - signature:         &apos;([B)I&apos;
 - max stack:         5
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef710: 0xbb000000 i2c: 0x00007f3758b11fa0 c2i: 0x00007f3758b120de c2iUV: 0x00007f3758b120b1
 - compiled entry     0x00007f3758cd1840
 - code size:         9
 - code start:        0x00007f37557ef7f0
 - code end (excl):   0x00007f37557ef7f9
 - method data:       0x00007f3755be8ad0
 - checked ex length: 1
 - checked ex start:  0x00007f37557ef81c
 - linenumber start:  0x00007f37557ef7f9
 - localvar length:   2
 - localvar start:    0x00007f37557ef802
 - compiled code: nmethod   4234  417       3       java.io.FilterInputStream::read (9 bytes)
#
#  int ( java/io/FilterInputStream:NotNull *, byte[int:&gt;=0]:exact * )
#
#r018 rsi:rsi   : parm 0: java/io/FilterInputStream:NotNull *
#r016 rdx:rdx   : parm 1: byte[int:&gt;=0]:exact *
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: Fixed slot 3
#r186 rsp+88: Fixed slot 2
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1520: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B95 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (640 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movq    R8, RSI	# spill
02f   	movq    [rsp + #48], RDX	# spill
034   	movl    R11, narrowklass: precise klass java/lang/UNIXProcess$ProcessPipeInputStream: 0x00007f372c10ef70:Constant:exact *	# compressed klass ptr
03a   	movl    RSI, #-34	# int
03f   	movl    R10, [RDX + #12 (8-bit)]	# range
043   	NullCheck RDX
043
043   B2: #	B61 B3 &lt;- B1  Freq: 0.999999
043   	movl    [rsp + #32], R10	# spill
048   	movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
04c   	decode_klass_not_null R11,R11
050   	# TLS is in R15
050   	cmpl    R10, narrowklass: precise klass java/lang/UNIXProcess$ProcessPipeInputStream: 0x00007f372c10ef70:Constant:exact *	# compressed klass ptr
057   	jne,u  B61  P=0.000001 C=-1.000000
057
05d   B3: #	B63 B4 &lt;- B2  Freq: 0.999998
05d   	# checkcastPP of R8
05d   	movq    [rsp + #16], R8	# spill
062   	movq    R9, [R8]	# long
065   	movq    R10, R9	# spill
068   	andq    R10, #7	# long
06c   	cmpq    R10, #5
070   	jne     B63  P=0.000001 C=-1.000000
070
076   B4: #	B65 B5 &lt;- B3  Freq: 0.999997
076   	movq    R10, [R11 + #176 (32-bit)]	# long
07d   	movq    R11, R10	# spill
080   	orq     R11, R15	# long
083   	movq    R8, R11	# spill
086   	xorq    R8, R9	# long
089   	testq   R8, #-121	# long
090   	jne     B65  P=0.000001 C=-1.000000
090
096   B5: #	B76 B6 &lt;- B64 B63 B4 B68  Freq: 0.999998
096   	movl    RSI, #-155	# int
09b   	MEMBAR-acquire (prior CMPXCHG in FastLock so empty encoding)
09b   	movq    R10, [rsp + #16]	# spill
0a0   	movl    R8, [R10 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
0a4   	MEMBAR-acquire ! (empty encoding)
0a4   	movl    RBX, [R10 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
0a8   	movl    R11, [R10 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
0ac   	testl   R8, R8	# compressed ptr
0af   	je     B76  P=0.000000 C=5789.000000
0af
0b5   B6: #	B77 B7 &lt;- B5  Freq: 0.999997
0b5   	subl    RBX, [R10 + #20 (8-bit)]	# int
0b9   	movl    R8, [rsp + #32]	# spill
0be   	testl   R8, R8
0c1   	je     B77  P=0.000000 C=5729.000000
0c1
0c7   B7: #	B17 B8 &lt;- B6  Freq: 0.999997
0c7   	testl   RBX, RBX
0c9   	jg     B17  P=0.003075 C=5854.000000
0c9
0cf   B8: #	B98 B9 &lt;- B7  Freq: 0.996922
0cf   	MEMBAR-acquire ! (empty encoding)
0cf   	movl    R9, [R10 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
0d3   	movl    RBP, [R11 + #12 (8-bit)]	# range
0d7   	NullCheck R11
0d7
0d7   B9: #	B79 B10 &lt;- B8  Freq: 0.996922
0d7   	decode_heap_oop_not_null RDX,R9
0da   	cmpl    R8, RBP
0dd   	jge     B79  P=0.000000 C=5836.000000
0dd
0e3   B10: #	B99 B11 &lt;- B9  Freq: 0.996921
0e3   	MEMBAR-acquire ! (empty encoding)
0e3   	movl    R8, [R9 + #12 (8-bit)]	# range
0e7   	NullCheck R9
0e7
0e7   B11: #	B80 B12 &lt;- B10  Freq: 0.996921
0e7   	movl    RDI, [R10 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
0eb   	movl    RBP, [R10 + #24 (8-bit)]	# int ! Field: java/io/BufferedInputStream.markpos
0ef   	testl   RBP, RBP
0f1   	jge     B80  P=0.000000 C=5556.000000
0f1
0f7   B12: #	B100 B13 &lt;- B11  Freq: 0.99692
0f7   	movl    [R10 + #16 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/io/BufferedInputStream.count
0fb   	movl    [R10 + #20 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/io/BufferedInputStream.pos
0ff   	decode_heap_oop_not_null RSI,RDI
102   	MEMBAR-acquire ! (empty encoding)
102   	movl    RCX, [R10 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
106   	subl    R8, RCX	# int
109   	movl    R11, [RDI + #8 (8-bit)]	# compressed klass ptr
10d   	NullCheck RDI
10d
10d   B13: #	B72 B14 &lt;- B12  Freq: 0.99692
10d   	cmpl    R11, narrowklass: precise klass java/io/FileInputStream: 0x00007f3724124d50:Constant:exact *	# compressed klass ptr
114   	jne,u  B72  P=0.000001 C=-1.000000
114
11a   B14: #	B109 B15 &lt;- B13  Freq: 0.996919
11a   	# checkcastPP of RSI
11a   	movq    [rsp + #0], R10	# spill
11e   	movq    R10, [rsp + #48]	# spill
123   	movq    [rsp + #8], R10	# spill
128   	movl    R10, [rsp + #32]	# spill
12d   	movl    [rsp + #24], R10	# spill
132   	movq    RBP, [rsp + #0]	# spill
      	nop 	# 1 bytes pad for loops and calls
137   	call,static  java.io.FileInputStream::readBytes
        # java.io.FileInputStream::read @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::fill @ bci:214  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=RBP L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #32 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=RBP L[1]=rsp + #8 L[2]=#0 L[3]=rsp + #24 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=RBP
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [0]=Oop [8]=Oop [16]=Oop [48]=Oop off=316}
13c
13c   B15: #	B75 B16 &lt;- B14  Freq: 0.996899
        # Block is sole successor of call
13c   	movl    R11, RAX	# spill
13f   	addl    R11, [RBP + #20 (8-bit)]	# int
143   	movl    RBX, RAX	# spill
145   	testl   RAX, RAX
147   	jle     B75  P=0.000000 C=5553.000000
147
14d   B16: #	B17 &lt;- B15  Freq: 0.996898
14d   	movl    [RBP + #16 (8-bit)], R11	# int ! Field: java/io/BufferedInputStream.count
14d
151   B17: #	B58 B18 &lt;- B16 B7  Freq: 0.999973
151   	movq    R10, [rsp + #16]	# spill
156   	movl    RBP, [R10 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
15a   	decode_heap_oop_not_null R9,RBP
15d   	movq    RSI, [rsp + #48]	# spill
162   	addq    RSI, #16	# ptr
166   	cmpl    RBX, [RSP + #32 (32-bit)]
16a   	jge     B58  P=0.003247 C=5852.000000
16a
170   B18: #	B97 B19 &lt;- B58 B17  Freq: 0.999973
170   	MEMBAR-acquire ! (empty encoding)
170   	movq    R10, [rsp + #16]	# spill
175   	movl    RDX, [R10 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
179   	movslq  R10, RDX	# i2l
17c   	leaq    RDI, [RBP + #16 + R10]	# ptr idxoffnarrow
181   	movl    R11, [RBP + #12 (8-bit)]	# range
185   	NullCheck RBP
185
185   B19: #	B70 B20 &lt;- B18  Freq: 0.999973
185   	testl   RDX, RDX
187   	jl     B70  P=0.000001 C=-1.000000
187
18d   B20: #	B70 B21 &lt;- B19  Freq: 0.999972
18d   	movl    R8, RBX	# spill
190   	addl    R8, RDX	# int
193   	cmpl    R11, R8	# unsigned
196   	jb,u  B70  P=0.000001 C=-1.000000
196
19c   B21: #	B70 B22 &lt;- B20  Freq: 0.999971
19c   	movl    R10, [rsp + #32]	# spill
1a1   	cmpl    R10, RBX	# unsigned
1a4   	jb,u  B70  P=0.000001 C=-1.000000
1a4
1aa   B22: #	B69 B23 &lt;- B21  Freq: 0.99997
1aa   	testl   RBX, RBX
1ac   	jle     B69  P=0.000001 C=-1.000000
1ac
1b2   B23: #	B24 &lt;- B22  Freq: 0.999969
1b2   	movslq  RDX, RBX	# i2l
1b5   	call_leaf_nofp,runtime  jbyte_arraycopy
        No JVM State Info
        # 
1c2
1c2   B24: #	B78 B25 &lt;- B23 B69 B71  Freq: 0.999973
1c2   	
1c2   	movq    R10, [rsp + #16]	# spill
1c7   	addl    [R10 + #20 (8-bit)], RBX	# int ! Field: java/io/BufferedInputStream.pos
1cb   	testl   RBX, RBX
1cd   	jle     B78  P=0.000000 C=5843.000000
1cd
1d3   B25: #	B26 &lt;- B24  Freq: 0.999972
1d3   	movl    RCX, #7	# long (unsigned 32-bit)
1d3
1d8   B26: #	B55 B27 &lt;- B25 B54 	Loop: B26-B54 inner  Freq: 1.02024
1d8   	movq    R10, [rsp + #16]	# spill
1dd   	movl    R11, [R10 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
1e1   	decode_heap_oop_not_null RSI,R11
1e4   	cmpl    RBX, [RSP + #32 (32-bit)]
1e8   	jge     B55  P=0.003252 C=5843.000000
1e8
1ee   B27: #	B96 B28 &lt;- B26  Freq: 1.01692
1ee   	movslq  R10, RBX	# i2l
1f1   	MEMBAR-acquire ! (empty encoding)
1f1   	movl    R8, [R11 + #8 (8-bit)]	# compressed klass ptr
1f5   	NullCheck R11
1f5
1f5   B28: #	B60 B29 &lt;- B27  Freq: 1.01692
1f5   	movq    R9, [rsp + #48]	# spill
1fa   	leaq    R10, [R9 + #16 + R10]	# ptr idxoff
1ff   	cmpl    R8, narrowklass: precise klass java/io/FileInputStream: 0x00007f3724124d50:Constant:exact *	# compressed klass ptr
206   	jne,u  B60  P=0.000001 C=-1.000000
206
20c   B29: #	B108 B30 &lt;- B28  Freq: 1.01692
20c   	movq    [rsp + #8], R10	# spill
211   	movl    [rsp + #36], RBX	# spill
215   	movq    [rsp + #0], RCX	# spill
219   	# checkcastPP of RSI
      	nop 	# 2 bytes pad for loops and calls
21b   	call,static  java.io.FileInputStream::available
        # java.io.BufferedInputStream::read @ bci:101  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #32 L[4]=rsp + #36 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[8]=Derived_oop_[48] [16]=Oop [48]=Oop off=544}
220
220   B30: #	B34 B31 &lt;- B29  Freq: 1.0169
        # Block is sole successor of call
220   	movq    RCX, [rsp + #16]	# spill
225   	movl    R9, [RCX + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
229   	testl   RAX, RAX
22b   	jg,s   B34  P=0.019918 C=5824.000000
22b
22d   B31: #	B73 B32 &lt;- B30  Freq: 0.996643
22d   	MEMBAR-release (a FastUnlock follows so empty encoding)
22d   	movq    R10, [rsp + #0]	# spill
231   	andq    R10, [RCX]	# long
234   	cmpq    R10, #5
238   	jne     B73  P=0.000001 C=-1.000000
238
23e   B32: #	B33 &lt;- B74 B73 B31  Freq: 0.996643
23e   	movl    RBX, [rsp + #36]	# spill
23e
242   B33: #	N1520 &lt;- B57 B56 B55 B32  Freq: 0.99996
242   	movl    RAX, RBX	# spill
244   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

24f   	ret
24f
250   B34: #	B44 B35 &lt;- B30  Freq: 0.0202542
250   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.io.BufferedInputStream::read @ bci:110  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #32 L[4]=rsp + #36 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{r9=NarrowOop rcx=Oop [8]=Derived_oop_[48] [16]=Oop [48]=Oop off=592}
256   	movl    R8, [RCX + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
25a   	subl    R8, [RCX + #20 (8-bit)]	# int
25e   	movl    R10, [rsp + #32]	# spill
263   	subl    R10, [RSP + #36 (32-bit)]	# int
268   	testl   R8, R8
26b   	jg     B44  P=0.003075 C=5854.000000
26b
271   B35: #	B102 B36 &lt;- B34  Freq: 0.0201919
271   	MEMBAR-acquire ! (empty encoding)
271   	movl    R11, [R9 + #12 (8-bit)]	# range
275   	NullCheck R9
275
275   B36: #	B92 B37 &lt;- B35  Freq: 0.0201919
275   	movl    R8, [RCX + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
279   	cmpl    R10, R11
27c   	jge     B92  P=0.000000 C=5836.000000
27c
282   B37: #	B103 B38 &lt;- B36  Freq: 0.0201919
282   	movl    [rsp + #56], R10	# spill
287   	movl    RSI, #-155	# int
28c   	MEMBAR-acquire ! (empty encoding)
28c   	movl    R11, [RCX + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
290   	movl    RCX, R11	# spill
293   	movq    R10, [rsp + #16]	# spill
298   	movl    RBP, [R10 + #24 (8-bit)]	# int ! Field: java/io/BufferedInputStream.markpos
29c   	movl    R10, [R8 + #12 (8-bit)]	# range
2a0   	NullCheck R8
2a0
2a0   B38: #	B93 B39 &lt;- B37  Freq: 0.0201918
2a0   	testl   RBP, RBP
2a2   	jge     B93  P=0.000000 C=5556.000000
2a2
2a8   B39: #	B104 B40 &lt;- B38  Freq: 0.0201918
2a8   	movq    R11, [rsp + #16]	# spill
2ad   	movl    [R11 + #16 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/io/BufferedInputStream.count
2b1   	movl    [R11 + #20 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/io/BufferedInputStream.pos
2b5   	MEMBAR-acquire ! (empty encoding)
2b5   	movl    R9, [R11 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
2b9   	movl    RBX, [RCX + #8 (8-bit)]	# compressed klass ptr
2bc   	NullCheck RCX
2bc
2bc   B40: #	B89 B41 &lt;- B39  Freq: 0.0201918
2bc   	decode_heap_oop_not_null RDX,R8
2bf   	movl    R11, R10	# spill
2c2   	subl    R11, R9	# int
2c5   	cmpl    RBX, narrowklass: precise klass java/io/FileInputStream: 0x00007f3724124d50:Constant:exact *	# compressed klass ptr
2cb   	jne,u  B89  P=0.000001 C=-1.000000
2cb
2d1   B41: #	B107 B42 &lt;- B40  Freq: 0.0201918
2d1   	decode_heap_oop_not_null RSI,RCX
2d4   	# checkcastPP of RSI
2d4   	movl    RCX, R9	# spill
2d7   	movl    R8, R11	# spill
      	nop 	# 1 bytes pad for loops and calls
2db   	call,static  java.io.FileInputStream::readBytes
        # java.io.FileInputStream::read @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::fill @ bci:214  L[0]=rsp + #16 L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #36 L[3]=rsp + #56 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #32 L[4]=rsp + #36 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[8]=Derived_oop_[48] [16]=Oop [48]=Oop off=736}
2e0
2e0   B42: #	B90 B43 &lt;- B41  Freq: 0.0201914
        # Block is sole successor of call
2e0   	movl    R8, RAX	# spill
2e3   	testl   RAX, RAX
2e5   	jle     B90  P=0.000000 C=5553.000000
2e5
2eb   B43: #	B44 &lt;- B42  Freq: 0.0201914
2eb   	movl    R10, RAX	# spill
2ee   	movq    RCX, [rsp + #16]	# spill
2f3   	addl    R10, [RCX + #20 (8-bit)]	# int
2f7   	movl    [RCX + #16 (8-bit)], R10	# int ! Field: java/io/BufferedInputStream.count
2fb   	movl    R10, [rsp + #56]	# spill
2fb
300   B44: #	B59 B45 &lt;- B43 B34  Freq: 0.0202537
300   	movl    RBP, [RCX + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
303   	cmpl    R8, R10
306   	jge     B59  P=0.003247 C=5852.000000
306
30c   B45: #	B46 &lt;- B44  Freq: 0.0201879
30c   	movl    R13, R8	# spill
30c
30f   B46: #	B101 B47 &lt;- B59 B45  Freq: 0.0202537
30f   	movq    [rsp + #16], RCX	# spill
314   	decode_heap_oop_not_null RSI,RBP
317   	MEMBAR-acquire ! (empty encoding)
317   	movl    R11, [RCX + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
31b   	movslq  R10, R11	# i2l
31e   	movl    R8, [RBP + #12 (8-bit)]	# range
322   	NullCheck RBP
322
322   B47: #	B81 B48 &lt;- B46  Freq: 0.0202537
322   	leaq    RDI, [RBP + #16 + R10]	# ptr idxoffnarrow
327   	movl    RBP, [rsp + #36]	# spill
32b   	addl    RBP, R13	# int
32e   	testl   R11, R11
331   	jl     B81  P=0.000001 C=-1.000000
331
337   B48: #	B82 B49 &lt;- B47  Freq: 0.0202536
337   	movl    R9, R13	# spill
33a   	addl    R9, R11	# int
33d   	movl    R10, [rsp + #36]	# spill
342   	testl   R10, R10
345   	jl     B82  P=0.000001 C=-1.000000
345
34b   B49: #	B83 B50 &lt;- B48  Freq: 0.0202536
34b   	cmpl    R8, R9	# unsigned
34e   	jb,u  B83  P=0.000001 C=-1.000000
34e
354   B50: #	B84 B51 &lt;- B49  Freq: 0.0202536
354   	movslq  RDX, R13	# i2l
357   	movl    R8, [rsp + #32]	# spill
35c   	cmpl    R8, RBP	# unsigned
35f   	jb,u  B84  P=0.000001 C=-1.000000
35f
365   B51: #	B87 B52 &lt;- B50  Freq: 0.0202536
365   	testl   R13, R13
368   	jle     B87  P=0.000001 C=-1.000000
368
36e   B52: #	B53 &lt;- B51  Freq: 0.0202536
36e   	movq    RSI, [rsp + #8]	# spill
373   	call_leaf_nofp,runtime  jbyte_arraycopy
        No JVM State Info
        # 
380   	movl    R10, R13	# spill
380
383   B53: #	B91 B54 &lt;- B52 B87 B86  Freq: 0.0202537
383   	
383   	movq    R11, [rsp + #16]	# spill
388   	addl    [R11 + #20 (8-bit)], R10	# int ! Field: java/io/BufferedInputStream.pos
38c   	testl   R10, R10
38f   	jle     B91  P=0.000000 C=116.000000
38f
395   B54: #	B26 &lt;- B53  Freq: 0.0202537
395   	movl    RBX, RBP	# spill
397   	movq    RCX, [rsp + #0]	# spill
39b   	jmp     B26
39b
3a0   B55: #	B33 B56 &lt;- B26  Freq: 0.00331753
3a0   	MEMBAR-release (a FastUnlock follows so empty encoding)
3a0   	andq    RCX, [R10]	# long
3a3   	cmpq    RCX, #5
3a7   	je     B33  P=0.999999 C=-1.000000
3a7
3ad   B56: #	B33 B57 &lt;- B55  Freq: 3.31753e-09
3ad   	leaq    RAX, [rsp + #80]	# box lock
3b2   	movq    R11, [rsp + #16]	# spill
3b7   	fastunlock R11,RAX	! kills RAX,R10
438   	je     B33  P=0.999999 C=-1.000000
438
43e   B57: #	B33 &lt;- B56  Freq: 3.31753e-15
43e   	movq    RDI, [rsp + #16]	# spill
443   	leaq    RSI, [rsp + #80]	# box lock
448   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
455   	jmp     B33
455
45a   B58: #	B18 &lt;- B17  Freq: 0.00324664
45a   	movl    R10, [rsp + #32]	# spill
45f   	movl    RBX, R10	# spill
462   	jmp     B18
462
467   B59: #	B46 &lt;- B44  Freq: 6.57581e-05
467   	movl    R13, R10	# spill
46a   	jmp     B46
46a
46f   B60: #	N1520 &lt;- B28  Freq: 1.01692e-06
46f   	movl    [rsp + #4], RBX	# spill
473   	movl    [rsp + #8], R11	# spill
478   	movl    RSI, #-34	# int
      	nop 	# 2 bytes pad for loops and calls
47f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedInputStream::read @ bci:101  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #32 L[4]=rsp + #4 L[5]=_ L[6]=_ STK[0]=rsp + #8 MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[8]=NarrowOop [16]=Oop [48]=Oop off=1156}
484   	int3	# ShouldNotReachHere
484
489   B61: #	N1520 &lt;- B2  Freq: 9.99999e-07
489   	movl    RBP, [rsp + #32]	# spill
48d   	movq    [rsp + #0], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
493   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #0 STK[1]=rsp + #48 STK[2]=#0 STK[3]=RBP
        # OopMap{[0]=Oop [48]=Oop off=1176}
498   	int3	# ShouldNotReachHere
498
49d   B62: #	B63 &lt;- B65  Freq: 9.99997e-13
49d   	movq    RAX, R9	# spill
4a0   	movq    R11, [rsp + #16]	# spill
4a5   	cmpxchgq [R11], R10	# If rax == [R11] then store R10 into [R11]
4aa
4aa   B63: #	B5 B64 &lt;- B3 B62  Freq: 9.99999e-07
4aa   	leaq    RBX, [rsp + #80]	# box lock
4af   	movq    R11, [rsp + #16]	# spill
4b4   	fastlock R11,RBX	! kills RBX,RAX,R10
4fc   	je     B5  P=0.999999 C=-1.000000
4fc
502   B64: #	B5 &lt;- B67 B63  Freq: 1.99999e-12
502   	movq    RSI, [rsp + #16]	# spill
507   	leaq    RDX, [rsp + #80]	# box lock
50c   	movq    RBP, RSI	# spill
50f   	call,static  wrapper for: _complete_monitor_locking_Java
        # java.io.BufferedInputStream::read @ bci:-1  L[0]=RBP L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #32 L[4]=_ L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=RBP
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [16]=Oop [48]=Oop off=1300}
514   	jmp     B5
514
519   B65: #	B62 B66 &lt;- B4  Freq: 9.99997e-07
519   	testq   R8, #7	# long
520   	jne     B62  P=0.000001 C=-1.000000
520
526   B66: #	B94 B67 &lt;- B65  Freq: 9.99996e-07
526   	movq    RAX, R9	# spill
529   	andq    RAX, #895	# long
530   	movq    R10, RAX	# spill
533   	orq     R10, R15	# long
536   	testq   R8, #768	# long
53d   	jne     B94  P=0.000001 C=-1.000000
53d
543   B67: #	B64 B68 &lt;- B66 B94  Freq: 9.99996e-07
543   	movq    R11, [rsp + #16]	# spill
548   	cmpxchgq [R11], R10	# If rax == [R11] then store R10 into [R11]
54d   	jne,us  B64  P=0.000001 C=-1.000000
54d
54f   B68: #	B5 &lt;- B67  Freq: 9.99995e-07
54f   	jmp     B5
54f
554   B69: #	B24 B70 &lt;- B22  Freq: 9.9997e-07
554   	testl   RBX, RBX
556   	jge     B24  P=0.999999 C=-1.000000
556
55c   B70: #	B106 B71 &lt;- B19 B20 B21 B69  Freq: 2.99992e-06
55c   	movl    [rsp + #4], RBX	# spill
560   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
571   	movq    RBP, [rsp + #48]	# spill
576   	movq    RSI, R9	# spill
579   	movq    RCX, RBP	# spill
57c   	xorl    R8, R8	# int
57f   	movl    R9, RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
583   	call,static  wrapper for: slow_arraycopy
        # java.io.BufferedInputStream::read1 @ bci:91  L[0]=rsp + #16 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #4
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=RBP L[2]=#0 L[3]=rsp + #0 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [16]=Oop [48]=Oop off=1416}
588
588   B71: #	B24 &lt;- B70  Freq: 2.99986e-06
        # Block is sole successor of call
588   	movl    RBX, [rsp + #4]	# spill
58c   	jmp     B24
58c
591   B72: #	N1520 &lt;- B13  Freq: 9.9692e-07
591   	movl    RSI, #-34	# int
596   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
5a7   	movq    [rsp + #8], R10	# spill
5ac   	pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #32]
5b6   	movl    [rsp + #48], RDI	# spill
5ba   	movl    [rsp + #52], R9	# spill
5bf   	movl    [rsp + #56], RCX	# spill
5c3   	movl    [rsp + #60], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
5cb   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedInputStream::fill @ bci:214  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #48 STK[1]=rsp + #52 STK[2]=rsp + #56 STK[3]=rsp + #60
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #8 L[1]=rsp + #32 L[2]=#0 L[3]=rsp + #0 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #8 L[1]=rsp + #32 L[2]=#0 L[3]=rsp + #0 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[8]=Oop [16]=Oop [32]=Oop [48]=NarrowOop [52]=NarrowOop off=1488}
5d0   	int3	# ShouldNotReachHere
5d0
5d5   B73: #	B32 B74 &lt;- B31  Freq: 9.96643e-07
5d5   	leaq    RAX, [rsp + #80]	# box lock
5da   	fastunlock RCX,RAX	! kills RAX,R10
65b   	je     B32  P=0.999999 C=-1.000000
65b
661   B74: #	B32 &lt;- B73  Freq: 9.96643e-13
661   	movq    RDI, [rsp + #16]	# spill
666   	leaq    RSI, [rsp + #80]	# box lock
66b   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
678   	jmp     B32
678
67d   B75: #	N1520 &lt;- B15  Freq: 4.98449e-07
67d   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #24]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
68e   	movl    [rsp + #36], RAX	# spill
692   	movl    RSI, #-155	# int
697   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::fill @ bci:219  L[0]=RBP L[1]=_ L[2]=rsp + #36 L[3]=_ STK[0]=rsp + #36
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=RBP L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #0 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=RBP L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #0 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=RBP
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [48]=Oop off=1692}
69c   	int3	# ShouldNotReachHere
69c
6a1   B76: #	N1520 &lt;- B5  Freq: 4.76836e-07
6a1   	movq    [rsp + #8], R10	# spill
6a6   	movl    [rsp + #24], R8	# spill
6ab   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #24 STK[0]=rsp + #24
        # java.io.BufferedInputStream::read @ bci:1  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #32 L[4]=_ L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #8
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[8]=Oop [24]=NarrowOop [48]=Oop off=1712}
6b0   	int3	# ShouldNotReachHere
6b0
6b5   B77: #	N1520 &lt;- B6  Freq: 4.76836e-07
6b5   	movl    [rsp + #4], R8	# spill
6ba   	movq    [rsp + #8], R10	# spill
6bf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read @ bci:31  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #4 L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #32 MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #8
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[8]=Oop [48]=Oop off=1732}
6c4   	int3	# ShouldNotReachHere
6c4
6c9   B78: #	N1520 &lt;- B24  Freq: 4.76824e-07
6c9   	movl    RSI, #-155	# int
6ce   	movq    RBP, R10	# spill
6d1   	movl    [rsp + #8], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
6d7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read @ bci:56  L[0]=RBP L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #32 L[4]=#0 L[5]=rsp + #8 L[6]=_ STK[0]=rsp + #8 MON-BOX0=rsp+80 MON-OBJ[0]=RBP
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [48]=Oop off=1756}
6dc   	int3	# ShouldNotReachHere
6dc
6e1   B79: #	N1520 &lt;- B9  Freq: 4.75369e-07
6e1   	movl    [rsp + #12], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
6e7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read1 @ bci:22  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #32 L[4]=_ L[5]=_ STK[0]=rsp + #12 STK[1]=RBP
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #12 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[16]=Oop [48]=Oop off=1772}
6ec   	int3	# ShouldNotReachHere
6ec
6f1   B80: #	N1520 &lt;- B11  Freq: 4.75369e-07
6f1   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
703   	movl    [rsp + #56], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
70b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::fill @ bci:9  L[0]=rsp + #16 L[1]=rsp + #56 L[2]=_ L[3]=_ STK[0]=RBP
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #8 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #8 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[16]=Oop [48]=Oop [56]=NarrowOop off=1808}
710   	int3	# ShouldNotReachHere
710
715   B81: #	B85 &lt;- B47  Freq: 2.02537e-08
715   	movl    R10, R13	# spill
718   	jmp,s   B85
718
71a   B82: #	B85 &lt;- B48  Freq: 2.02536e-08
71a   	movl    R10, R13	# spill
71d   	jmp,s   B85
71d
71f   B83: #	B85 &lt;- B49  Freq: 2.02536e-08
71f   	movl    R10, R13	# spill
722   	jmp,s   B85
722
724   B84: #	B85 &lt;- B50  Freq: 2.02536e-08
724   	movl    R10, R13	# spill
724
727   B85: #	B105 B86 &lt;- B81 B82 B83 B84 B88  Freq: 8.10145e-08
727   	movl    [rsp + #8], R10	# spill
72c   	movl    RDX, R11	# spill
72f   	movq    RCX, [rsp + #48]	# spill
734   	movl    R8, [rsp + #36]	# spill
739   	movl    R9, R10	# spill
      	nop 	# 3 bytes pad for loops and calls
73f   	call,static  wrapper for: slow_arraycopy
        # java.io.BufferedInputStream::read1 @ bci:91  L[0]=rsp + #16 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #8
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #32 L[4]=rsp + #36 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[16]=Oop [48]=Oop off=1860}
744
744   B86: #	B53 &lt;- B85  Freq: 8.10129e-08
        # Block is sole successor of call
744   	movl    R10, [rsp + #8]	# spill
749   	jmp     B53
749
74e   B87: #	B53 B88 &lt;- B51  Freq: 2.02536e-08
74e   	movl    R10, R13	# spill
751   	testl   R13, R13
754   	jge     B53  P=0.999999 C=-1.000000
754
75a   B88: #	B85 &lt;- B87  Freq: 2.02536e-14
75a   	jmp,s   B85
75a
75c   B89: #	N1520 &lt;- B40  Freq: 2.01918e-08
75c   	movl    RBX, [rsp + #32]	# spill
760   	movl    [rsp + #0], RBX	# spill
763   	movl    R10, [rsp + #36]	# spill
768   	movl    [rsp + #4], R10	# spill
76d   	movl    RSI, #-34	# int
772   	movl    R10, [rsp + #56]	# spill
777   	movl    [rsp + #28], R10	# spill
77c   	movl    [rsp + #56], RCX	# spill
780   	movl    [rsp + #60], R8	# spill
785   	movl    [rsp + #64], R9	# spill
78a   	movl    [rsp + #68], R11	# spill
78f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedInputStream::fill @ bci:214  L[0]=rsp + #16 L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #56 STK[1]=rsp + #60 STK[2]=rsp + #64 STK[3]=rsp + #68
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #4 L[3]=rsp + #28 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #0 L[4]=rsp + #4 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[16]=Oop [48]=Oop [56]=NarrowOop [60]=NarrowOop off=1940}
794   	int3	# ShouldNotReachHere
794
799   B90: #	N1520 &lt;- B42  Freq: 1.00957e-08
799   	movl    R10, [rsp + #32]	# spill
79e   	movl    [rsp + #0], R10	# spill
7a2   	movl    R11, [rsp + #36]	# spill
7a7   	movl    [rsp + #24], R11	# spill
7ac   	movl    RSI, #-155	# int
7b1   	movl    R10, [rsp + #56]	# spill
7b6   	movl    [rsp + #28], R10	# spill
7bb   	movl    [rsp + #60], RAX	# spill
7bf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::fill @ bci:219  L[0]=rsp + #16 L[1]=_ L[2]=rsp + #60 L[3]=_ STK[0]=rsp + #60
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #24 L[3]=rsp + #28 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #0 L[4]=rsp + #24 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[16]=Oop [48]=Oop off=1988}
7c4   	int3	# ShouldNotReachHere
7c4
7c9   B91: #	N1520 &lt;- B53  Freq: 9.6577e-09
7c9   	movq    RBP, R11	# spill
7cc   	movl    RSI, #-155	# int
7d1   	movl    [rsp + #28], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
7d7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read @ bci:56  L[0]=RBP L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #32 L[4]=rsp + #36 L[5]=rsp + #28 L[6]=_ STK[0]=rsp + #28 MON-BOX0=rsp+80 MON-OBJ[0]=RBP
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [48]=Oop off=2012}
7dc   	int3	# ShouldNotReachHere
7dc
7e1   B92: #	N1520 &lt;- B36  Freq: 9.62823e-09
7e1   	movl    R9, [rsp + #32]	# spill
7e6   	movl    [rsp + #0], R9	# spill
7ea   	movl    R8, [rsp + #36]	# spill
7ef   	movl    [rsp + #24], R8	# spill
7f4   	movl    RSI, #-155	# int
7f9   	movq    R8, [rsp + #48]	# spill
7fe   	movq    [rsp + #40], R8	# spill
803   	movl    [rsp + #48], R10	# spill
808   	movl    [rsp + #52], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
80f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read1 @ bci:22  L[0]=rsp + #16 L[1]=rsp + #40 L[2]=rsp + #24 L[3]=rsp + #48 L[4]=_ L[5]=_ STK[0]=rsp + #48 STK[1]=rsp + #52
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #40 L[2]=#0 L[3]=rsp + #0 L[4]=rsp + #24 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[16]=Oop [40]=Oop off=2068}
814   	int3	# ShouldNotReachHere
814
819   B93: #	N1520 &lt;- B38  Freq: 9.62822e-09
819   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
82b   	movl    R11, [rsp + #36]	# spill
830   	movl    [rsp + #32], R11	# spill
835   	movl    R11, [rsp + #56]	# spill
83a   	movl    [rsp + #36], R11	# spill
83f   	movl    [rsp + #56], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
847   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::fill @ bci:9  L[0]=rsp + #16 L[1]=rsp + #56 L[2]=_ L[3]=_ STK[0]=RBP
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #32 L[3]=rsp + #36 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #8 L[4]=rsp + #32 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[16]=Oop [48]=Oop [56]=NarrowOop off=2124}
84c   	int3	# ShouldNotReachHere
84c
851   B94: #	B67 &lt;- B66  Freq: 9.99996e-13
851   	movq    R10, R11	# spill
854   	movq    RAX, R9	# spill
857   	jmp     B67
857
85c   B95: #	N1520 &lt;- B1  Freq: 1.01328e-06
85c   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
863   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.FilterInputStream::read @ bci:4  L[0]=_ L[1]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=#NULL
        # OopMap{off=2152}
868   	int3	# ShouldNotReachHere
868
86d   B96: #	N1520 &lt;- B27  Freq: 4.84905e-07
86d   	movl    [rsp + #4], RBX	# spill
871   	movl    [rsp + #12], R11	# spill
876   	movl    RSI, #-155	# int
87b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read @ bci:96  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #32 L[4]=rsp + #4 L[5]=_ L[6]=rsp + #12 STK[0]=rsp + #12 MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[12]=NarrowOop [16]=Oop [48]=Oop off=2176}
880   	int3	# ShouldNotReachHere
880
885   B97: #	N1520 &lt;- B18  Freq: 4.76824e-07
885   	pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #0]
88e   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
8a0   	movl    [rsp + #12], RBX	# spill
8a4   	movl    RSI, #-155	# int
8a9   	pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #32]
8b3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=RBP STK[0]=RBP
        # java.io.BufferedInputStream::read1 @ bci:80  L[0]=rsp + #0 L[1]=rsp + #32 L[2]=#0 L[3]=_ L[4]=_ L[5]=rsp + #12
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #0 L[1]=rsp + #32 L[2]=#0 L[3]=rsp + #8 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #0
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{rbp=NarrowOop [0]=Oop [32]=Oop off=2232}
8b8   	int3	# ShouldNotReachHere
8b8
8bd   B98: #	N1520 &lt;- B8  Freq: 4.7537e-07
8bd   	movq    [rsp + #8], R10	# spill
8c2   	movl    [rsp + #4], R8	# spill
8c7   	movl    [rsp + #24], R8	# spill
8cc   	pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #32]
8d6   	movl    [rsp + #48], R11	# spill
8db   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #48 STK[0]=rsp + #48
        # java.io.BufferedInputStream::read1 @ bci:18  L[0]=rsp + #8 L[1]=rsp + #32 L[2]=#0 L[3]=rsp + #24 L[4]=_ L[5]=_ STK[0]=rsp + #4
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #8 L[1]=rsp + #32 L[2]=#0 L[3]=rsp + #4 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[8]=Oop [16]=Oop [32]=Oop [48]=NarrowOop off=2272}
8e0   	int3	# ShouldNotReachHere
8e0
8e5   B99: #	N1520 &lt;- B10  Freq: 4.75369e-07
8e5   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
8f6   	movq    [rsp + #8], R10	# spill
8fb   	pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #32]
905   	movl    [rsp + #52], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
90b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #52 STK[0]=rsp + #52
        # java.io.BufferedInputStream::fill @ bci:1  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #8 L[1]=rsp + #32 L[2]=#0 L[3]=rsp + #0 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #8 L[1]=rsp + #32 L[2]=#0 L[3]=rsp + #0 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[8]=Oop [16]=Oop [32]=Oop [52]=NarrowOop off=2320}
910   	int3	# ShouldNotReachHere
910
915   B100: #	N1520 &lt;- B12  Freq: 4.75369e-07
915   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
926   	movq    [rsp + #8], R10	# spill
92b   	movl    RSI, #-155	# int
930   	pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #32]
93a   	movl    [rsp + #48], R9	# spill
93f   	movl    [rsp + #56], RDI	# spill
943   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getInIfOpen @ bci:6  L[0]=_ L[1]=rsp + #56 STK[0]=rsp + #56
        # java.io.BufferedInputStream::fill @ bci:199  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #8 L[1]=rsp + #32 L[2]=#0 L[3]=rsp + #0 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #8 L[1]=rsp + #32 L[2]=#0 L[3]=rsp + #0 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[8]=Oop [16]=Oop [32]=Oop [48]=NarrowOop [56]=NarrowOop off=2376}
948   	int3	# ShouldNotReachHere
948
94d   B101: #	N1520 &lt;- B46  Freq: 9.6577e-09
94d   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
95f   	movl    R10, [rsp + #36]	# spill
964   	movl    [rsp + #12], R10	# spill
969   	movl    RSI, #-155	# int
96e   	movl    [rsp + #36], R13	# spill
973   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=RBP STK[0]=RBP
        # java.io.BufferedInputStream::read1 @ bci:80  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #12 L[3]=_ L[4]=_ L[5]=rsp + #36
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #8 L[4]=rsp + #12 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{rbp=NarrowOop [16]=Oop [48]=Oop off=2424}
978   	int3	# ShouldNotReachHere
978
97d   B102: #	N1520 &lt;- B35  Freq: 9.62824e-09
97d   	movl    R11, [rsp + #32]	# spill
982   	movl    [rsp + #0], R11	# spill
986   	movl    R8, [rsp + #36]	# spill
98b   	movl    [rsp + #24], R8	# spill
990   	movl    RSI, #-155	# int
995   	movq    R11, [rsp + #48]	# spill
99a   	movq    [rsp + #40], R11	# spill
99f   	movl    [rsp + #48], R10	# spill
9a4   	movl    [rsp + #56], R9	# spill
      	nop 	# 2 bytes pad for loops and calls
9ab   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #56 STK[0]=rsp + #56
        # java.io.BufferedInputStream::read1 @ bci:18  L[0]=rsp + #16 L[1]=rsp + #40 L[2]=rsp + #24 L[3]=rsp + #48 L[4]=_ L[5]=_ STK[0]=rsp + #48
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #40 L[2]=#0 L[3]=rsp + #0 L[4]=rsp + #24 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[16]=Oop [40]=Oop [56]=NarrowOop off=2480}
9b0   	int3	# ShouldNotReachHere
9b0
9b5   B103: #	N1520 &lt;- B37  Freq: 9.62823e-09
9b5   	movl    R10, [rsp + #32]	# spill
9ba   	movl    [rsp + #0], R10	# spill
9be   	movl    R11, [rsp + #36]	# spill
9c3   	movl    [rsp + #24], R11	# spill
9c8   	movl    R11, [rsp + #56]	# spill
9cd   	movl    [rsp + #28], R11	# spill
9d2   	movl    [rsp + #60], R8	# spill
9d7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #60 STK[0]=rsp + #60
        # java.io.BufferedInputStream::fill @ bci:1  L[0]=rsp + #16 L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #24 L[3]=rsp + #28 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #0 L[4]=rsp + #24 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[16]=Oop [48]=Oop [60]=NarrowOop off=2524}
9dc   	int3	# ShouldNotReachHere
9dc
9e1   B104: #	N1520 &lt;- B39  Freq: 9.62822e-09
9e1   	movl    R10, [rsp + #32]	# spill
9e6   	movl    [rsp + #0], R10	# spill
9ea   	movl    R11, [rsp + #36]	# spill
9ef   	movl    [rsp + #24], R11	# spill
9f4   	movl    R11, [rsp + #56]	# spill
9f9   	movl    [rsp + #28], R11	# spill
9fe   	movl    [rsp + #56], R8	# spill
a03   	movl    [rsp + #64], RCX	# spill
a07   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getInIfOpen @ bci:6  L[0]=_ L[1]=rsp + #64 STK[0]=rsp + #64
        # java.io.BufferedInputStream::fill @ bci:199  L[0]=rsp + #16 L[1]=rsp + #56 L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #24 L[3]=rsp + #28 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #0 L[4]=rsp + #24 L[5]=_ L[6]=_ MON-BOX0=rsp+80 MON-OBJ[0]=rsp + #16
        # java.io.FilterInputStream::read @ bci:5  L[0]=_ L[1]=_
        # OopMap{[16]=Oop [48]=Oop [56]=NarrowOop [64]=NarrowOop off=2572}
a0c   	int3	# ShouldNotReachHere
a0c
a11   B105: #	B110 &lt;- B85  Freq: 8.10145e-13
a11   	# exception oop is in rax; no code emitted
a11   	movq    RBX, RAX	# spill
a14   	movq    R10, [rsp + #0]	# spill
a18   	jmp,s   B110
a18
a1a   B106: #	B110 &lt;- B70  Freq: 2.99992e-11
a1a   	# exception oop is in rax; no code emitted
a1a   	movq    RBX, RAX	# spill
a1d   	movl    R10, #7	# long (unsigned 32-bit)
a23   	jmp,s   B110
a23
a25   B107: #	B110 &lt;- B41  Freq: 2.01918e-07
a25   	# exception oop is in rax; no code emitted
a25   	movq    RBX, RAX	# spill
a28   	movq    R10, [rsp + #0]	# spill
a2c   	jmp,s   B110
a2c
a2e   B108: #	B110 &lt;- B29  Freq: 1.01692e-05
a2e   	# exception oop is in rax; no code emitted
a2e   	movq    RBX, RAX	# spill
a31   	movq    R10, [rsp + #0]	# spill
a35   	jmp,s   B110
a35
a37   B109: #	B110 &lt;- B14  Freq: 9.96919e-06
a37   	# exception oop is in rax; no code emitted
a37   	movq    RBX, RAX	# spill
a3a   	movl    R10, #7	# long (unsigned 32-bit)
a3a
a40   B110: #	B112 B111 &lt;- B109 B106 B108 B107 B105  Freq: 2.03403e-05
a40   	MEMBAR-release (a FastUnlock follows so empty encoding)
a40   	movq    R11, [rsp + #16]	# spill
a45   	andq    R10, [R11]	# long
a48   	cmpq    R10, #5
a4c   	jne,s   B112  P=0.000001 C=-1.000000
a4c
a4e   B111: #	N1520 &lt;- B113 B112 B110  Freq: 2.03403e-05
a4e   	movq    RSI, RBX	# spill
a51   	addq    rsp, 96	# Destroy frame
	popq   rbp

a56   	jmp     rethrow_stub
a56
a5b   B112: #	B111 B113 &lt;- B110  Freq: 2.03403e-11
a5b   	leaq    RAX, [rsp + #80]	# box lock
a60   	fastunlock R11,RAX	! kills RAX,R10
ae1   	je     B111  P=0.999999 C=-1.000000
ae1
ae7   B113: #	B111 &lt;- B112  Freq: 2.03403e-17
ae7   	movq    RDI, [rsp + #16]	# spill
aec   	leaq    RSI, [rsp + #80]	# box lock
af1   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
afe   	jmp     B111
afe

</opto_assembly>
<writer thread='139875534886656'/>
<opto_assembly compile_id='425'>
{method}
 - this oop:          0x00007f37557eece8
 - method holder:     &apos;java/io/BufferedInputStream&apos;
 - constants:         0x00007f37557ede50 constant pool [155] {0x00007f37557ede50} for &apos;java/io/BufferedInputStream&apos; cache=0x00007f37557eff08
 - access:            0xc1000021  public synchronized 
 - name:              &apos;read&apos;
 - signature:         &apos;([BII)I&apos;
 - max stack:         6
 - max locals:        7
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f37589eb920
 - adapters:          AHE@0x00007f37680efb00: 0xbbaa0000 i2c: 0x00007f3758b14ae0 c2i: 0x00007f3758b14c25 c2iUV: 0x00007f3758b14bf8
 - compiled entry     0x00007f3758cd1e00
 - code size:         113
 - code start:        0x00007f37557eec08
 - code end (excl):   0x00007f37557eec79
 - method data:       0x00007f3755be8668
 - checked ex length: 1
 - checked ex start:  0x00007f37557eece4
 - linenumber start:  0x00007f37557eec79
 - localvar length:   7
 - localvar start:    0x00007f37557eec8e
 - compiled code: nmethod   4399  411  s    3       java.io.BufferedInputStream::read (113 bytes)
#
#  int ( java/io/BufferedInputStream:NotNull *, byte[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/io/BufferedInputStream:NotNull *
#r016 rdx:rdx   : parm 1: byte[int:&gt;=0]:exact *
#r010 rcx   : parm 2: int
#r004 r8   : parm 3: int
# -- Old rsp -- Framesize: 128 --
#r191 rsp+124: in_preserve
#r190 rsp+120: return address
#r189 rsp+116: in_preserve
#r188 rsp+112: saved fp register
#r187 rsp+108: Fixed slot 3
#r186 rsp+104: Fixed slot 2
#r185 rsp+100: Fixed slot 1
#r184 rsp+96: Fixed slot 0
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1630: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B62 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (544 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

02c   	movl    [rsp + #8], R8	# spill
031   	movl    [rsp + #40], RCX	# spill
035   	movq    [rsp + #48], RDX	# spill
03a   	movq    R13, RSI	# spill
03d   	movq    RCX, [RSI]	# long
040   	movq    R11, RCX	# spill
043   	andq    R11, #7	# long
047   	# TLS is in R15
047   	movl    R10, [rsp + #40]	# spill
04c   	addl    R10, R8	# int
04f   	movl    R9, [rsp + #40]	# spill
054   	orl     R9, R8	# int
057   	orl     R9, R10	# int
05a   	movq    RAX, RCX	# spill
05d   	andq    RAX, #895	# long
064   	cmpq    R11, #5
068   	jne     B62  P=0.000001 C=-1.000000
068
06e   B2: #	B64 B3 &lt;- B1  Freq: 0.999999
06e   	movl    R8, [RSI + #8 (8-bit)]	# compressed klass ptr
072   	decode_klass_not_null R11,R8
080   	movq    R11, [R11 + #176 (32-bit)]	# long
087   	movq    R8, R11	# spill
08a   	orq     R8, R15	# long
08d   	movq    RBX, R8	# spill
090   	xorq    RBX, RCX	# long
093   	testq   RBX, #-121	# long
09a   	jne     B64  P=0.000001 C=-1.000000
09a
0a0   B3: #	B77 B4 &lt;- B63 B62 B2 B67  Freq: 1
0a0   	MEMBAR-acquire (prior CMPXCHG in FastLock so empty encoding)
0a0   	movl    RBP, [R13 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
0a4   	MEMBAR-acquire ! (empty encoding)
0a4   	movl    R11, [R13 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
0a8   	subl    R11, [R13 + #20 (8-bit)]	# int
0ac   	testl   RBP, RBP	# compressed ptr
0ae   	je     B77  P=0.000000 C=5789.000000
0ae
0b4   B4: #	B97 B5 &lt;- B3  Freq: 1
0b4   	movslq  R8, [RSP + #40 (32-bit)]	# int -&gt; long
0b9   	movl    RSI, #-155	# int
0be   	movq    RCX, [rsp + #48]	# spill
0c3   	movl    R14, [RCX + #12 (8-bit)]	# range
0c7   	NullCheck RCX
0c7
0c7   B5: #	B78 B6 &lt;- B4  Freq: 0.999999
0c7   	movl    RBX, R14	# spill
0ca   	subl    RBX, R10	# int
0cd   	orl     R9, RBX	# int
0d0   	movq    R10, RCX	# spill
0d3   	leaq    R10, [RCX + #16 + R8]	# ptr idxoff
0d8   	movq    [rsp + #24], R10	# spill
0dd   	testl   R9, R9
0e0   	jl     B78  P=0.000000 C=6405.000000
0e0
0e6   B6: #	B79 B7 &lt;- B5  Freq: 0.999998
0e6   	movl    R10, [R13 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
0ea   	movl    R9, [rsp + #8]	# spill
0ef   	testl   R9, R9
0f2   	je     B79  P=0.000000 C=6405.000000
0f2
0f8   B7: #	B17 B8 &lt;- B6  Freq: 0.999998
0f8   	testl   R11, R11
0fb   	jg     B17  P=0.002861 C=6291.000000
0fb
101   B8: #	B100 B9 &lt;- B7  Freq: 0.997136
101   	MEMBAR-acquire ! (empty encoding)
101   	movl    RBP, [R10 + #12 (8-bit)]	# range
105   	NullCheck R10
105
105   B9: #	B81 B10 &lt;- B8  Freq: 0.997136
105   	cmpl    R9, RBP
108   	jge     B81  P=0.000000 C=6273.000000
108
10e   B10: #	B101 B11 &lt;- B9  Freq: 0.997135
10e   	movl    RBX, [R13 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
112   	MEMBAR-acquire ! (empty encoding)
112   	decode_heap_oop_not_null RDX,RBX
115   	movl    RCX, [R13 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
119   	movl    RBP, [R13 + #24 (8-bit)]	# int ! Field: java/io/BufferedInputStream.markpos
11d   	decode_heap_oop_not_null RDI,RCX
120   	movl    R10, [RBX + #12 (8-bit)]	# range
124   	NullCheck RBX
124
124   B11: #	B82 B12 &lt;- B10  Freq: 0.997135
124   	testl   RBP, RBP
126   	jge     B82  P=0.000000 C=5556.000000
126
12c   B12: #	B102 B13 &lt;- B11  Freq: 0.997134
12c   	movl    [R13 + #16 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/io/BufferedInputStream.count
130   	movl    RSI, #-34	# int
135   	movl    [R13 + #20 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/io/BufferedInputStream.pos
139   	MEMBAR-acquire ! (empty encoding)
139   	movl    R8, [R13 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
13d   	subl    R10, R8	# int
140   	movl    R11, [RCX + #8 (8-bit)]	# compressed klass ptr
144   	NullCheck RCX
144
144   B13: #	B73 B14 &lt;- B12  Freq: 0.997134
144   	cmpl    R11, narrowklass: precise klass java/io/FileInputStream: 0x00007f372c273380:Constant:exact *	# compressed klass ptr
14b   	jne,u  B73  P=0.000001 C=-1.000000
14b
151   B14: #	B111 B15 &lt;- B13  Freq: 0.997133
151   	movl    [rsp + #4], R14	# spill
156   	movl    [rsp + #0], R9	# spill
15a   	movq    [rsp + #16], R13	# spill
15f   	# checkcastPP of RDI
15f   	movl    RCX, R8	# spill
162   	movl    R8, R10	# spill
165   	movq    [rsp + #8], R13	# spill
16a   	movl    RBP, R9	# spill
16d   	movq    RSI, RDI	# spill
      	nop 	# 3 bytes pad for loops and calls
173   	call,static  java.io.FileInputStream::readBytes
        # java.io.FileInputStream::read @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::fill @ bci:214  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=RBP L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=RBP L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #16
        # OopMap{[8]=Oop [16]=Oop [24]=Derived_oop_[48] [48]=Oop off=376}
178
178   B15: #	B76 B16 &lt;- B14  Freq: 0.997113
        # Block is sole successor of call
178   	movl    R8, RAX	# spill
17b   	movq    R13, [rsp + #8]	# spill
180   	addl    R8, [R13 + #20 (8-bit)]	# int
184   	movl    RSI, #-155	# int
189   	movl    R11, RAX	# spill
18c   	testl   RAX, RAX
18e   	jle     B76  P=0.000000 C=5553.000000
18e
194   B16: #	B17 &lt;- B15  Freq: 0.997113
194   	movl    [R13 + #16 (8-bit)], R8	# int ! Field: java/io/BufferedInputStream.count
198   	movl    R9, RBP	# spill
19b   	movl    R14, [rsp + #4]	# spill
19b
1a0   B17: #	B55 B18 &lt;- B16 B7  Freq: 0.999974
1a0   	movl    RBP, [R13 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
1a4   	cmpl    R11, R9
1a7   	jge     B55  P=0.003021 C=6290.000000
1a7
1ad   B18: #	B99 B19 &lt;- B55 B17  Freq: 0.999974
1ad   	movl    RSI, #-155	# int
1b2   	MEMBAR-acquire ! (empty encoding)
1b2   	movl    R10, [RBP + #12 (8-bit)]	# range
1b6   	NullCheck RBP
1b6
1b6   B19: #	B68 B20 &lt;- B18  Freq: 0.999973
1b6   	movl    RAX, [R13 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
1ba   	decode_heap_oop_not_null RSI,RBP
1bd   	movl    RBX, R11	# spill
1c0   	addl    RBX, RAX	# int
1c2   	movslq  R8, RAX	# i2l
1c5   	leaq    RDI, [RBP + #16 + R8]	# ptr idxoffnarrow
1ca   	testl   RAX, RAX
1cc   	jl     B68  P=0.000001 C=-1.000000
1cc
1d2   B20: #	B69 B21 &lt;- B19  Freq: 0.999972
1d2   	movl    R8, [rsp + #40]	# spill
1d7   	testl   R8, R8
1da   	jl     B69  P=0.000001 C=-1.000000
1da
1e0   B21: #	B69 B22 &lt;- B20  Freq: 0.999971
1e0   	movl    RCX, R8	# spill
1e3   	addl    RCX, R11	# int
1e6   	movslq  RDX, R11	# i2l
1e9   	cmpl    R10, RBX	# unsigned
1ec   	jb,u  B69  P=0.000001 C=-1.000000
1ec
1f2   B22: #	B69 B23 &lt;- B21  Freq: 0.99997
1f2   	cmpl    R14, RCX	# unsigned
1f5   	jb,u  B69  P=0.000001 C=-1.000000
1f5
1fb   B23: #	B71 B24 &lt;- B22  Freq: 0.999969
1fb   	testl   R11, R11
1fe   	jle     B71  P=0.000001 C=-1.000000
1fe
204   B24: #	B25 &lt;- B23  Freq: 0.999968
204   	movl    [rsp + #0], R14	# spill
208   	movl    RBP, R11	# spill
20b   	movl    R14, R9	# spill
20e   	movl    RBX, R8	# spill
211   	movq    RSI, [rsp + #24]	# spill
216   	call_leaf_nofp,runtime  jbyte_arraycopy
        No JVM State Info
        # 
223   	movl    R8, RBX	# spill
226   	movl    R9, R14	# spill
229   	movl    R11, RBP	# spill
22c   	movl    R14, [rsp + #0]	# spill
22c
230   B25: #	B80 B26 &lt;- B24 B71 B70  Freq: 0.999973
230   	
230   	addl    [R13 + #20 (8-bit)], R11	# int ! Field: java/io/BufferedInputStream.pos
234   	testl   R11, R11
237   	jle     B80  P=0.000000 C=6518.000000
237
23d   B26: #	B27 &lt;- B25  Freq: 0.999973
23d   	movl    RDI, #7	# long (unsigned 32-bit)
23d
242   B27: #	B56 B28 &lt;- B26 B54 	Loop: B27-B54 inner  Freq: 1.0181
242   	movl    RCX, R9	# spill
245   	subl    RCX, R11	# int
248   	movl    R10, [R13 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
24c   	movl    RBX, R11	# spill
24f   	cmpl    R11, R9
252   	jge     B56  P=0.002915 C=6519.000000
252
258   B28: #	B98 B29 &lt;- B27  Freq: 1.01513
258   	movl    [rsp + #32], RCX	# spill
25c   	movl    [rsp + #12], R11	# spill
261   	movq    [rsp + #24], RDI	# spill
266   	movl    [rsp + #0], R14	# spill
26a   	movl    [rsp + #8], R9	# spill
26f   	movl    [rsp + #56], R8	# spill
274   	movq    [rsp + #16], R13	# spill
279   	MEMBAR-acquire ! (empty encoding)
279   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
27d   	NullCheck R10
27d
27d   B29: #	B60 B30 &lt;- B28  Freq: 1.01513
27d   	movl    R9, RBX	# spill
280   	addl    R9, R8	# int
283   	movl    [rsp + #60], R9	# spill
288   	cmpl    R11, narrowklass: precise klass java/io/FileInputStream: 0x00007f372c273380:Constant:exact *	# compressed klass ptr
28f   	jne,u  B60  P=0.000001 C=-1.000000
28f
295   B30: #	B110 B31 &lt;- B29  Freq: 1.01513
295   	decode_heap_oop_not_null RSI,R10
298   	# checkcastPP of RSI
      	nop 	# 3 bytes pad for loops and calls
29b   	call,static  java.io.FileInputStream::available
        # java.io.BufferedInputStream::read @ bci:101  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #8 L[4]=rsp + #12 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #16
        # OopMap{[16]=Oop [48]=Oop off=672}
2a0
2a0   B31: #	B35 B32 &lt;- B30  Freq: 1.01511
        # Block is sole successor of call
2a0   	movq    R10, [rsp + #16]	# spill
2a5   	movl    RBX, [R10 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
2a9   	subl    RBX, [R10 + #20 (8-bit)]	# int
2ad   	movslq  R10, [RSP + #60 (32-bit)]	# int -&gt; long
2b2   	movq    [rsp + #40], R10	# spill
2b7   	testl   RAX, RAX
2b9   	jg,s   B35  P=0.017846 C=6500.000000
2b9
2bb   B32: #	B74 B33 &lt;- B31  Freq: 0.996994
2bb   	MEMBAR-release (a FastUnlock follows so empty encoding)
2bb   	movq    R11, [rsp + #16]	# spill
2c0   	movq    R10, [rsp + #24]	# spill
2c5   	andq    R10, [R11]	# long
2c8   	cmpq    R10, #5
2cc   	jne     B74  P=0.000001 C=-1.000000
2cc
2d2   B33: #	B34 &lt;- B75 B74 B32  Freq: 0.996994
2d2   	movl    RBX, [rsp + #12]	# spill
2d2
2d6   B34: #	N1630 &lt;- B58 B57 B56 B33  Freq: 0.999961
2d6   	movl    RAX, RBX	# spill
2d8   	addq    rsp, 112	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

2e3   	ret
2e3
2e4   B35: #	B45 B36 &lt;- B31  Freq: 0.0181158
2e4   	movq    R10, [rsp + #16]	# spill
2e9   	movl    R8, [R10 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
2ed   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.io.BufferedInputStream::read @ bci:110  L[0]=R10 L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #8 L[4]=rsp + #12 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=R10
        # OopMap{r10=Oop r8=NarrowOop [16]=Oop [48]=Oop off=749}
2f3   	testl   RBX, RBX
2f5   	jg     B45  P=0.002861 C=6291.000000
2f5
2fb   B36: #	B104 B37 &lt;- B35  Freq: 0.018064
2fb   	MEMBAR-acquire ! (empty encoding)
2fb   	movl    R11, [R8 + #12 (8-bit)]	# range
2ff   	NullCheck R8
2ff
2ff   B37: #	B94 B38 &lt;- B36  Freq: 0.018064
2ff   	movl    R10, R11	# spill
302   	movq    R11, [rsp + #16]	# spill
307   	movl    R11, [R11 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
30b   	movl    RCX, R11	# spill
30e   	movl    R8, [rsp + #32]	# spill
313   	cmpl    R8, R10
316   	jge     B94  P=0.000000 C=6273.000000
316
31c   B38: #	B105 B39 &lt;- B37  Freq: 0.018064
31c   	MEMBAR-acquire ! (empty encoding)
31c   	decode_heap_oop_not_null RDX,R11
31f   	movq    R10, [rsp + #16]	# spill
324   	movl    R11, [R10 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
328   	movl    R8, R11	# spill
32b   	movl    RBP, [R10 + #24 (8-bit)]	# int ! Field: java/io/BufferedInputStream.markpos
32f   	movl    R11, [RCX + #12 (8-bit)]	# range
333   	NullCheck RCX
333
333   B39: #	B95 B40 &lt;- B38  Freq: 0.018064
333   	testl   RBP, RBP
335   	jge     B95  P=0.000000 C=5556.000000
335
33b   B40: #	B106 B41 &lt;- B39  Freq: 0.0180639
33b   	movq    R10, [rsp + #16]	# spill
340   	movl    [R10 + #16 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/io/BufferedInputStream.count
344   	movl    [R10 + #20 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/io/BufferedInputStream.pos
348   	decode_heap_oop_not_null RSI,R8
34b   	MEMBAR-acquire ! (empty encoding)
34b   	movq    R10, [rsp + #16]	# spill
350   	movl    R10, [R10 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
354   	movl    R9, R10	# spill
357   	subl    R11, R10	# int
35a   	movl    RDI, R11	# spill
35d   	movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
361   	NullCheck R8
361
361   B41: #	B91 B42 &lt;- B40  Freq: 0.0180639
361   	cmpl    R10, narrowklass: precise klass java/io/FileInputStream: 0x00007f372c273380:Constant:exact *	# compressed klass ptr
368   	jne,u  B91  P=0.000001 C=-1.000000
368
36e   B42: #	B109 B43 &lt;- B41  Freq: 0.0180639
36e   	# checkcastPP of RSI
36e   	movl    RCX, R9	# spill
371   	movl    R8, R11	# spill
374   	movq    RBP, [rsp + #16]	# spill
      	nop 	# 2 bytes pad for loops and calls
37b   	call,static  java.io.FileInputStream::readBytes
        # java.io.FileInputStream::read @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::fill @ bci:214  L[0]=RBP L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #60 L[3]=rsp + #32 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #8 L[4]=rsp + #12 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [16]=Oop [48]=Oop off=896}
380
380   B43: #	B92 B44 &lt;- B42  Freq: 0.0180636
        # Block is sole successor of call
380   	movl    RBX, RAX	# spill
382   	movl    RSI, #-155	# int
387   	movl    R10, RAX	# spill
38a   	addl    R10, [RBP + #20 (8-bit)]	# int
38e   	testl   RAX, RAX
390   	jle     B92  P=0.000000 C=5553.000000
390
396   B44: #	B45 &lt;- B43  Freq: 0.0180635
396   	movl    [RBP + #16 (8-bit)], R10	# int ! Field: java/io/BufferedInputStream.count
396
39a   B45: #	B59 B46 &lt;- B44 B35  Freq: 0.0181154
39a   	movq    R10, [rsp + #48]	# spill
39f   	movq    R11, [rsp + #40]	# spill
3a4   	leaq    R10, [R10 + #16 + R11]	# ptr idxoff
3a9   	movq    R11, [rsp + #16]	# spill
3ae   	movl    RBP, [R11 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
3b2   	cmpl    RBX, [RSP + #32 (32-bit)]
3b6   	jge     B59  P=0.003021 C=6290.000000
3b6
3bc   B46: #	B103 B47 &lt;- B59 B45  Freq: 0.0181154
3bc   	MEMBAR-acquire ! (empty encoding)
3bc   	movq    R11, [rsp + #16]	# spill
3c1   	movl    R11, [R11 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
3c5   	movl    R8, R11	# spill
3c8   	movl    RCX, RBX	# spill
3ca   	addl    RCX, R11	# int
3cd   	movl    R13, [RBP + #12 (8-bit)]	# range
3d1   	NullCheck RBP
3d1
3d1   B47: #	B83 B48 &lt;- B46  Freq: 0.0181154
3d1   	movslq  R11, R11	# i2l
3d4   	decode_heap_oop_not_null RSI,RBP
3d7   	testl   R8, R8
3da   	jl     B83  P=0.000001 C=-1.000000
3da
3e0   B48: #	B84 B49 &lt;- B47  Freq: 0.0181153
3e0   	movslq  RDX, RBX	# i2l
3e3   	movl    R9, [rsp + #60]	# spill
3e8   	testl   R9, R9
3eb   	jl     B84  P=0.000001 C=-1.000000
3eb
3f1   B49: #	B85 B50 &lt;- B48  Freq: 0.0181153
3f1   	leaq    RDI, [RBP + #16 + R11]	# ptr idxoffnarrow
3f6   	cmpl    R13, RCX	# unsigned
3f9   	jb,u  B85  P=0.000001 C=-1.000000
3f9
3ff   B50: #	B86 B51 &lt;- B49  Freq: 0.0181153
3ff   	addl    R9, RBX	# int
402   	movl    RCX, [rsp + #0]	# spill
405   	cmpl    RCX, R9	# unsigned
408   	jb,u  B86  P=0.000001 C=-1.000000
408
40e   B51: #	B89 B52 &lt;- B50  Freq: 0.0181153
40e   	testl   RBX, RBX
410   	jle     B89  P=0.000001 C=-1.000000
410
416   B52: #	B53 &lt;- B51  Freq: 0.0181153
416   	movq    RSI, R10	# spill
419   	call_leaf_nofp,runtime  jbyte_arraycopy
        No JVM State Info
        # 
426   	movl    R11, RBX	# spill
426
429   B53: #	B93 B54 &lt;- B52 B89 B88  Freq: 0.0181154
429   	movl    R10, [rsp + #12]	# spill
42e   	addl    R10, R11	# int
431   	
431   	movq    R13, [rsp + #16]	# spill
436   	addl    [R13 + #20 (8-bit)], R11	# int ! Field: java/io/BufferedInputStream.pos
43a   	testl   R11, R11
43d   	jle     B93  P=0.000000 C=116.000000
43d
443   B54: #	B27 &lt;- B53  Freq: 0.0181154
443   	movl    R11, R10	# spill
446   	movl    R8, [rsp + #56]	# spill
44b   	movl    R9, [rsp + #8]	# spill
450   	movl    R14, [rsp + #0]	# spill
454   	movq    RDI, [rsp + #24]	# spill
459   	jmp     B27
459
45e   B55: #	B18 &lt;- B17  Freq: 0.00302056
45e   	movl    R11, R9	# spill
461   	jmp     B18
461
466   B56: #	B34 B57 &lt;- B27  Freq: 0.0029673
466   	MEMBAR-release (a FastUnlock follows so empty encoding)
466   	andq    RDI, [R13]	# long
46a   	cmpq    RDI, #5
46e   	je     B34  P=0.999999 C=-1.000000
46e
474   B57: #	B34 B58 &lt;- B56  Freq: 2.9673e-09
474   	leaq    RAX, [rsp + #96]	# box lock
479   	fastunlock R13,RAX	! kills RAX,R10
4fc   	je     B34  P=0.999999 C=-1.000000
4fc
502   B58: #	B34 &lt;- B57  Freq: 2.9673e-15
502   	movq    RDI, R13	# spill
505   	leaq    RSI, [rsp + #96]	# box lock
50a   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
517   	jmp     B34
517
51c   B59: #	B46 &lt;- B45  Freq: 5.47201e-05
51c   	movl    RBX, [rsp + #32]	# spill
520   	jmp     B46
520
525   B60: #	N1630 &lt;- B29  Freq: 1.01513e-06
525   	movq    RBP, R13	# spill
528   	movl    R11, [rsp + #8]	# spill
52d   	movl    [rsp + #0], R11	# spill
531   	movl    [rsp + #4], RBX	# spill
535   	movl    [rsp + #8], R10	# spill
53a   	movl    RSI, #-34	# int
53f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedInputStream::read @ bci:101  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #0 L[4]=rsp + #4 L[5]=_ L[6]=_ STK[0]=rsp + #8 MON-BOX0=rsp+96 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [8]=NarrowOop [48]=Oop off=1348}
544   	int3	# ShouldNotReachHere
544
549   B61: #	B62 &lt;- B64  Freq: 9.99999e-13
549   	movq    RAX, RCX	# spill
54c   	cmpxchgq [RSI], R11	# If rax == [RSI] then store R11 into [RSI]
551
551   B62: #	B3 B63 &lt;- B1 B61  Freq: 1e-06
551   	leaq    RBX, [rsp + #96]	# box lock
556   	fastlock RSI,RBX	! kills RBX,RAX,R11
59e   	je     B3  P=0.999999 C=-1.000000
59e
5a4   B63: #	B3 &lt;- B66 B62  Freq: 2e-12
5a4   	movl    [rsp + #4], R9	# spill
5a9   	movl    [rsp + #0], R10	# spill
5ad   	movq    RBP, RSI	# spill
5b0   	leaq    RDX, [rsp + #96]	# box lock
      	nop 	# 2 bytes pad for loops and calls
5b7   	call,static  wrapper for: _complete_monitor_locking_Java
        # java.io.BufferedInputStream::read @ bci:-1  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [48]=Oop off=1468}
5bc   	movq    R13, RBP	# spill
5bf   	movl    R10, [rsp + #0]	# spill
5c3   	movl    R9, [rsp + #4]	# spill
5c8   	jmp     B3
5c8
5cd   B64: #	B61 B65 &lt;- B2  Freq: 9.99999e-07
5cd   	testq   RBX, #7	# long
5d4   	jne     B61  P=0.000001 C=-1.000000
5d4
5da   B65: #	B96 B66 &lt;- B64  Freq: 9.99998e-07
5da   	movq    R11, RAX	# spill
5dd   	orq     R11, R15	# long
5e0   	testq   RBX, #768	# long
5e7   	jne     B96  P=0.000001 C=-1.000000
5e7
5ed   B66: #	B63 B67 &lt;- B65 B96  Freq: 9.99998e-07
5ed   	cmpxchgq [RSI], R11	# If rax == [RSI] then store R11 into [RSI]
5f2   	jne,us  B63  P=0.000001 C=-1.000000
5f2
5f4   B67: #	B3 &lt;- B66  Freq: 9.99997e-07
5f4   	jmp     B3
5f4
5f9   B68: #	B69 &lt;- B19  Freq: 9.99973e-07
5f9   	movl    R8, [rsp + #40]	# spill
5f9
5fe   B69: #	B108 B70 &lt;- B68 B20 B21 B22 B72  Freq: 3.99989e-06
5fe   	movl    [rsp + #12], R14	# spill
603   	movl    [rsp + #8], R11	# spill
608   	movl    [rsp + #4], R9	# spill
60d   	movl    [rsp + #0], R8	# spill
611   	movq    RBP, [rsp + #48]	# spill
616   	movq    [rsp + #16], R13	# spill
61b   	movl    RDX, RAX	# spill
61d   	movq    RCX, RBP	# spill
620   	movl    R9, R11	# spill
623   	call,static  wrapper for: slow_arraycopy
        # java.io.BufferedInputStream::read1 @ bci:91  L[0]=rsp + #16 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #8
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #4 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #16
        # OopMap{rbp=Oop [16]=Oop [48]=Oop off=1576}
628
628   B70: #	B25 &lt;- B69  Freq: 3.99981e-06
        # Block is sole successor of call
628   	movq    R13, [rsp + #16]	# spill
62d   	movl    R8, [rsp + #0]	# spill
631   	movl    R9, [rsp + #4]	# spill
636   	movl    R11, [rsp + #8]	# spill
63b   	movl    R14, [rsp + #12]	# spill
640   	jmp     B25
640
645   B71: #	B25 B72 &lt;- B23  Freq: 9.99969e-07
645   	testl   R11, R11
648   	jge     B25  P=0.999999 C=-1.000000
648
64e   B72: #	B69 &lt;- B71  Freq: 9.99969e-13
64e   	jmp,s   B69
64e
650   B73: #	N1630 &lt;- B13  Freq: 9.97134e-07
650   	movq    [rsp + #8], R13	# spill
655   	movq    [rsp + #16], R13	# spill
65a   	movl    [rsp + #4], R9	# spill
65f   	movl    [rsp + #56], RCX	# spill
663   	movl    [rsp + #60], RBX	# spill
667   	movl    [rsp + #64], R8	# spill
66c   	movl    [rsp + #68], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
673   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedInputStream::fill @ bci:214  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #56 STK[1]=rsp + #60 STK[2]=rsp + #64 STK[3]=rsp + #68
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #4 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #4 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #16
        # OopMap{[8]=Oop [16]=Oop [48]=Oop [56]=NarrowOop [60]=NarrowOop off=1656}
678   	int3	# ShouldNotReachHere
678
67d   B74: #	B33 B75 &lt;- B32  Freq: 9.96994e-07
67d   	leaq    RAX, [rsp + #96]	# box lock
682   	fastunlock R11,RAX	! kills RAX,R10
703   	je     B33  P=0.999999 C=-1.000000
703
709   B75: #	B33 &lt;- B74  Freq: 9.96994e-13
709   	movq    RDI, R11	# spill
70c   	leaq    RSI, [rsp + #96]	# box lock
711   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
71e   	jmp     B33
71e
723   B76: #	N1630 &lt;- B15  Freq: 4.98557e-07
723   	movq    [rsp + #24], R13	# spill
728   	movl    [rsp + #36], RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
72f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::fill @ bci:219  L[0]=rsp + #8 L[1]=_ L[2]=rsp + #36 L[3]=_ STK[0]=rsp + #36
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #0 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #24 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #0 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #8
        # OopMap{[8]=Oop [24]=Oop [48]=Oop off=1844}
734   	int3	# ShouldNotReachHere
734
739   B77: #	N1630 &lt;- B3  Freq: 4.76837e-07
739   	movl    RSI, #-155	# int
73e   	movq    [rsp + #16], R13	# spill
743   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=RBP STK[0]=RBP
        # java.io.BufferedInputStream::read @ bci:1  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #16
        # OopMap{rbp=NarrowOop [16]=Oop [48]=Oop off=1864}
748   	int3	# ShouldNotReachHere
748
74d   B78: #	N1630 &lt;- B5  Freq: 4.76836e-07
74d   	movl    R10, [rsp + #8]	# spill
752   	movl    [rsp + #0], R10	# spill
756   	movq    [rsp + #8], R13	# spill
75b   	movl    [rsp + #24], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
763   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read @ bci:19  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #0 L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #24 MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #8
        # OopMap{[8]=Oop [48]=Oop off=1896}
768   	int3	# ShouldNotReachHere
768
76d   B79: #	N1630 &lt;- B6  Freq: 4.76836e-07
76d   	movl    [rsp + #4], R9	# spill
772   	movq    [rsp + #8], R13	# spill
777   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read @ bci:31  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #4 L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #4 MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #8
        # OopMap{[8]=Oop [48]=Oop off=1916}
77c   	int3	# ShouldNotReachHere
77c
781   B80: #	N1630 &lt;- B25  Freq: 4.76824e-07
781   	movl    RSI, #-155	# int
786   	movl    [rsp + #0], R9	# spill
78a   	movl    [rsp + #8], R11	# spill
78f   	movq    [rsp + #16], R13	# spill
794   	movl    [rsp + #12], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
79b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read @ bci:56  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #12 L[3]=rsp + #0 L[4]=#0 L[5]=rsp + #8 L[6]=_ STK[0]=rsp + #8 MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #16
        # OopMap{[16]=Oop [48]=Oop off=1952}
7a0   	int3	# ShouldNotReachHere
7a0
7a5   B81: #	N1630 &lt;- B9  Freq: 4.75471e-07
7a5   	movq    [rsp + #16], R13	# spill
7aa   	movq    [rsp + #24], R13	# spill
7af   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read1 @ bci:22  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #8 L[4]=_ L[5]=_ STK[0]=rsp + #8 STK[1]=RBP
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #8 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #24
        # OopMap{[16]=Oop [24]=Oop [48]=Oop off=1972}
7b4   	int3	# ShouldNotReachHere
7b4
7b9   B82: #	N1630 &lt;- B11  Freq: 4.75471e-07
7b9   	movq    [rsp + #16], R13	# spill
7be   	movq    [rsp + #24], R13	# spill
7c3   	movl    [rsp + #64], RBX	# spill
7c7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::fill @ bci:9  L[0]=rsp + #16 L[1]=rsp + #64 L[2]=_ L[3]=_ STK[0]=RBP
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #8 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #8 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #24
        # OopMap{[16]=Oop [24]=Oop [48]=Oop [64]=NarrowOop off=1996}
7cc   	int3	# ShouldNotReachHere
7cc
7d1   B83: #	B87 &lt;- B47  Freq: 1.81154e-08
7d1   	movl    R11, RBX	# spill
7d4   	jmp,s   B87
7d4
7d6   B84: #	B87 &lt;- B48  Freq: 1.81153e-08
7d6   	movl    R11, RBX	# spill
7d9   	jmp,s   B87
7d9
7db   B85: #	B87 &lt;- B49  Freq: 1.81153e-08
7db   	movl    R11, RBX	# spill
7de   	jmp,s   B87
7de
7e0   B86: #	B87 &lt;- B50  Freq: 1.81153e-08
7e0   	movl    R11, RBX	# spill
7e0
7e3   B87: #	B107 B88 &lt;- B83 B84 B85 B86 B90  Freq: 7.24614e-08
7e3   	movl    RBP, R11	# spill
7e6   	movl    RDX, R8	# spill
7e9   	movq    RCX, [rsp + #48]	# spill
7ee   	movl    R8, [rsp + #60]	# spill
7f3   	movl    R9, R11	# spill
      	nop 	# 1 bytes pad for loops and calls
7f7   	call,static  wrapper for: slow_arraycopy
        # java.io.BufferedInputStream::read1 @ bci:91  L[0]=rsp + #16 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=RBP
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #8 L[4]=rsp + #12 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #16
        # OopMap{[16]=Oop [48]=Oop off=2044}
7fc
7fc   B88: #	B53 &lt;- B87  Freq: 7.24599e-08
        # Block is sole successor of call
7fc   	movl    R11, RBP	# spill
7ff   	jmp     B53
7ff
804   B89: #	B53 B90 &lt;- B51  Freq: 1.81153e-08
804   	movl    R11, RBX	# spill
807   	testl   RBX, RBX
809   	jge     B53  P=0.999999 C=-1.000000
809
80f   B90: #	B87 &lt;- B89  Freq: 1.81153e-14
80f   	jmp,s   B87
80f
811   B91: #	N1630 &lt;- B41  Freq: 1.80639e-08
811   	movq    RBP, [rsp + #16]	# spill
816   	movl    R10, [rsp + #8]	# spill
81b   	movl    [rsp + #0], R10	# spill
81f   	movl    R11, [rsp + #12]	# spill
824   	movl    [rsp + #4], R11	# spill
829   	movl    R10, [rsp + #32]	# spill
82e   	movl    [rsp + #24], R10	# spill
833   	movl    RSI, #-34	# int
838   	movl    R11, [rsp + #56]	# spill
83d   	movl    [rsp + #28], R11	# spill
842   	movl    R10, [rsp + #60]	# spill
847   	movl    [rsp + #56], R10	# spill
84c   	movl    [rsp + #60], R8	# spill
851   	movl    [rsp + #64], RCX	# spill
855   	movl    [rsp + #68], R9	# spill
85a   	movl    [rsp + #72], RDI	# spill
      	nop 	# 1 bytes pad for loops and calls
85f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedInputStream::fill @ bci:214  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #60 STK[1]=rsp + #64 STK[2]=rsp + #68 STK[3]=rsp + #72
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #24 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #28 L[3]=rsp + #0 L[4]=rsp + #4 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [48]=Oop [60]=NarrowOop [64]=NarrowOop off=2148}
864   	int3	# ShouldNotReachHere
864
869   B92: #	N1630 &lt;- B43  Freq: 9.03178e-09
869   	movl    R11, [rsp + #8]	# spill
86e   	movl    [rsp + #0], R11	# spill
872   	movl    R10, [rsp + #12]	# spill
877   	movl    [rsp + #4], R10	# spill
87c   	movl    R11, [rsp + #32]	# spill
881   	movl    [rsp + #24], R11	# spill
886   	movl    R10, [rsp + #56]	# spill
88b   	movl    [rsp + #28], R10	# spill
890   	movl    R11, [rsp + #60]	# spill
895   	movl    [rsp + #56], R11	# spill
89a   	movl    [rsp + #64], RAX	# spill
      	nop 	# 1 bytes pad for loops and calls
89f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::fill @ bci:219  L[0]=RBP L[1]=_ L[2]=rsp + #64 L[3]=_ STK[0]=rsp + #64
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #24 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #28 L[3]=rsp + #0 L[4]=rsp + #4 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [48]=Oop off=2212}
8a4   	int3	# ShouldNotReachHere
8a4
8a9   B93: #	N1630 &lt;- B53  Freq: 8.63808e-09
8a9   	movl    R8, [rsp + #8]	# spill
8ae   	movl    [rsp + #0], R8	# spill
8b2   	movl    R10, [rsp + #12]	# spill
8b7   	movl    [rsp + #4], R10	# spill
8bc   	movq    [rsp + #8], R13	# spill
8c1   	movl    RSI, #-155	# int
8c6   	movl    [rsp + #32], R11	# spill
8cb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read @ bci:56  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #0 L[4]=rsp + #4 L[5]=rsp + #32 L[6]=_ STK[0]=rsp + #32 MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #8
        # OopMap{[8]=Oop [48]=Oop off=2256}
8d0   	int3	# ShouldNotReachHere
8d0
8d5   B94: #	N1630 &lt;- B37  Freq: 8.61357e-09
8d5   	movq    RBP, [rsp + #16]	# spill
8da   	movl    R8, [rsp + #8]	# spill
8df   	movl    [rsp + #0], R8	# spill
8e3   	movl    R11, [rsp + #12]	# spill
8e8   	movl    [rsp + #4], R11	# spill
8ed   	movl    R8, [rsp + #32]	# spill
8f2   	movl    [rsp + #28], R8	# spill
8f7   	movl    RSI, #-155	# int
8fc   	movl    R11, [rsp + #56]	# spill
901   	movl    [rsp + #40], R11	# spill
906   	movl    [rsp + #56], R10	# spill
90b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read1 @ bci:22  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #60 L[3]=rsp + #28 L[4]=_ L[5]=_ STK[0]=rsp + #28 STK[1]=rsp + #56
        # java.io.BufferedInputStream::read @ bci:49  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #0 L[4]=rsp + #4 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [48]=Oop off=2320}
910   	int3	# ShouldNotReachHere
910
915   B95: #	N1630 &lt;- B39  Freq: 8.61356e-09
915   	movl    RSI, #-155	# int
91a   	movl    R11, [rsp + #56]	# spill
91f   	movl    [rsp + #36], R11	# spill
924   	movl    R10, [rsp + #60]	# spill
929   	movl    [rsp + #56], R10	# spill
92e   	movl    [rsp + #60], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
933   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::fill @ bci:9  L[0]=rsp + #16 L[1]=rsp + #60 L[2]=_ L[3]=_ STK[0]=RBP
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #32 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #36 L[3]=rsp + #8 L[4]=rsp + #12 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #16
        # OopMap{[16]=Oop [48]=Oop [60]=NarrowOop off=2360}
938   	int3	# ShouldNotReachHere
938
93d   B96: #	B66 &lt;- B65  Freq: 9.99998e-13
93d   	movq    R11, R8	# spill
940   	movq    RAX, RCX	# spill
943   	jmp     B66
943
948   B97: #	N1630 &lt;- B4  Freq: 1.01328e-06
948   	movq    RBP, R13	# spill
94b   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
953   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedInputStream::read @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL MON-BOX0=rsp+96 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop off=2392}
958   	int3	# ShouldNotReachHere
958
95d   B98: #	N1630 &lt;- B28  Freq: 4.84052e-07
95d   	movq    RBP, R13	# spill
960   	movl    [rsp + #0], R9	# spill
964   	movl    [rsp + #4], RBX	# spill
968   	movl    [rsp + #12], R10	# spill
96d   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
973   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::read @ bci:96  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #0 L[4]=rsp + #4 L[5]=_ L[6]=rsp + #12 STK[0]=rsp + #12 MON-BOX0=rsp+96 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [12]=NarrowOop [48]=Oop off=2424}
978   	int3	# ShouldNotReachHere
978
97d   B99: #	N1630 &lt;- B18  Freq: 4.76825e-07
97d   	movl    [rsp + #8], R9	# spill
982   	movq    [rsp + #16], R13	# spill
987   	movq    [rsp + #24], R13	# spill
98c   	movl    [rsp + #12], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
993   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=RBP STK[0]=RBP
        # java.io.BufferedInputStream::read1 @ bci:80  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=_ L[4]=_ L[5]=rsp + #12
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #8 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #24
        # OopMap{rbp=NarrowOop [16]=Oop [24]=Oop [48]=Oop off=2456}
998   	int3	# ShouldNotReachHere
998
99d   B100: #	N1630 &lt;- B8  Freq: 4.75472e-07
99d   	movq    [rsp + #8], R13	# spill
9a2   	movq    [rsp + #16], R13	# spill
9a7   	movl    [rsp + #4], R9	# spill
9ac   	movl    [rsp + #24], R9	# spill
9b1   	movl    [rsp + #56], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
9b7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #56 STK[0]=rsp + #56
        # java.io.BufferedInputStream::read1 @ bci:18  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #24 L[4]=_ L[5]=_ STK[0]=rsp + #4
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #4 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #16
        # OopMap{[8]=Oop [16]=Oop [48]=Oop [56]=NarrowOop off=2492}
9bc   	int3	# ShouldNotReachHere
9bc
9c1   B101: #	N1630 &lt;- B10  Freq: 4.75471e-07
9c1   	movq    [rsp + #8], R13	# spill
9c6   	movq    [rsp + #16], R13	# spill
9cb   	movl    [rsp + #4], R9	# spill
9d0   	movl    [rsp + #60], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
9d7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #60 STK[0]=rsp + #60
        # java.io.BufferedInputStream::fill @ bci:1  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #4 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #4 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #16
        # OopMap{[8]=Oop [16]=Oop [48]=Oop [60]=NarrowOop off=2524}
9dc   	int3	# ShouldNotReachHere
9dc
9e1   B102: #	N1630 &lt;- B12  Freq: 4.75471e-07
9e1   	movq    [rsp + #8], R13	# spill
9e6   	movq    [rsp + #16], R13	# spill
9eb   	movl    [rsp + #4], R9	# spill
9f0   	movl    RSI, #-155	# int
9f5   	movl    [rsp + #56], RBX	# spill
9f9   	movl    [rsp + #64], RCX	# spill
      	nop 	# 2 bytes pad for loops and calls
9ff   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getInIfOpen @ bci:6  L[0]=_ L[1]=rsp + #64 STK[0]=rsp + #64
        # java.io.BufferedInputStream::fill @ bci:199  L[0]=rsp + #8 L[1]=rsp + #56 L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #4 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #4 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #16
        # OopMap{[8]=Oop [16]=Oop [48]=Oop [56]=NarrowOop [64]=NarrowOop off=2564}
a04   	int3	# ShouldNotReachHere
a04
a09   B103: #	N1630 &lt;- B46  Freq: 8.63808e-09
a09   	movl    RSI, #-155	# int
a0e   	movl    R11, [rsp + #56]	# spill
a13   	movl    [rsp + #40], R11	# spill
a18   	movl    [rsp + #56], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
a1f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=RBP STK[0]=RBP
        # java.io.BufferedInputStream::read1 @ bci:80  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #60 L[3]=_ L[4]=_ L[5]=rsp + #56
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #8 L[4]=rsp + #12 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=rsp + #16
        # OopMap{rbp=NarrowOop [16]=Oop [48]=Oop off=2596}
a24   	int3	# ShouldNotReachHere
a24
a29   B104: #	N1630 &lt;- B36  Freq: 8.61358e-09
a29   	movq    RBP, [rsp + #16]	# spill
a2e   	movl    R11, [rsp + #8]	# spill
a33   	movl    [rsp + #0], R11	# spill
a37   	movl    R10, [rsp + #12]	# spill
a3c   	movl    [rsp + #4], R10	# spill
a41   	movl    R11, [rsp + #32]	# spill
a46   	movl    [rsp + #28], R11	# spill
a4b   	movl    RSI, #-155	# int
a50   	movl    R11, [rsp + #56]	# spill
a55   	movl    [rsp + #40], R11	# spill
a5a   	movl    R10, [rsp + #60]	# spill
a5f   	movl    [rsp + #44], R10	# spill
a64   	movl    [rsp + #60], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
a6b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #60 STK[0]=rsp + #60
        # java.io.BufferedInputStream::read1 @ bci:18  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #44 L[3]=rsp + #28 L[4]=_ L[5]=_ STK[0]=rsp + #28
        # java.io.BufferedInputStream::read @ bci:49  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #0 L[4]=rsp + #4 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [48]=Oop [60]=NarrowOop off=2672}
a70   	int3	# ShouldNotReachHere
a70
a75   B105: #	N1630 &lt;- B38  Freq: 8.61357e-09
a75   	movl    RSI, #-155	# int
a7a   	movq    RBP, [rsp + #16]	# spill
a7f   	movl    R10, [rsp + #8]	# spill
a84   	movl    [rsp + #0], R10	# spill
a88   	movl    R11, [rsp + #12]	# spill
a8d   	movl    [rsp + #4], R11	# spill
a92   	movl    R10, [rsp + #32]	# spill
a97   	movl    [rsp + #24], R10	# spill
a9c   	movl    R11, [rsp + #56]	# spill
aa1   	movl    [rsp + #28], R11	# spill
aa6   	movl    R10, [rsp + #60]	# spill
aab   	movl    [rsp + #56], R10	# spill
ab0   	movl    [rsp + #64], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
ab7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #64 STK[0]=rsp + #64
        # java.io.BufferedInputStream::fill @ bci:1  L[0]=RBP L[1]=_ L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #24 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #28 L[3]=rsp + #0 L[4]=rsp + #4 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [48]=Oop [64]=NarrowOop off=2748}
abc   	int3	# ShouldNotReachHere
abc
ac1   B106: #	N1630 &lt;- B40  Freq: 8.61356e-09
ac1   	movq    RBP, [rsp + #16]	# spill
ac6   	movl    R11, [rsp + #8]	# spill
acb   	movl    [rsp + #0], R11	# spill
acf   	movl    R10, [rsp + #12]	# spill
ad4   	movl    [rsp + #4], R10	# spill
ad9   	movl    R11, [rsp + #32]	# spill
ade   	movl    [rsp + #24], R11	# spill
ae3   	movl    RSI, #-155	# int
ae8   	movl    R10, [rsp + #56]	# spill
aed   	movl    [rsp + #28], R10	# spill
af2   	movl    R11, [rsp + #60]	# spill
af7   	movl    [rsp + #56], R11	# spill
afc   	movl    [rsp + #60], RCX	# spill
b00   	movl    [rsp + #68], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
b07   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedInputStream::getInIfOpen @ bci:6  L[0]=_ L[1]=rsp + #68 STK[0]=rsp + #68
        # java.io.BufferedInputStream::fill @ bci:199  L[0]=RBP L[1]=rsp + #60 L[2]=_ L[3]=_
        # java.io.BufferedInputStream::read1 @ bci:44  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #24 L[4]=_ L[5]=_
        # java.io.BufferedInputStream::read @ bci:49  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #28 L[3]=rsp + #0 L[4]=rsp + #4 L[5]=_ L[6]=_ MON-BOX0=rsp+96 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [48]=Oop [60]=NarrowOop [68]=NarrowOop off=2828}
b0c   	int3	# ShouldNotReachHere
b0c
b11   B107: #	B112 &lt;- B87  Freq: 7.24614e-13
b11   	# exception oop is in rax; no code emitted
b11   	movq    RBX, RAX	# spill
b14   	movq    R10, [rsp + #24]	# spill
b19   	jmp,s   B112
b19
b1b   B108: #	B112 &lt;- B69  Freq: 3.99989e-11
b1b   	# exception oop is in rax; no code emitted
b1b   	movq    RBX, RAX	# spill
b1e   	movl    R10, #7	# long (unsigned 32-bit)
b24   	jmp,s   B112
b24
b26   B109: #	B112 &lt;- B42  Freq: 1.80639e-07
b26   	# exception oop is in rax; no code emitted
b26   	movq    RBX, RAX	# spill
b29   	movq    R10, [rsp + #24]	# spill
b2e   	jmp,s   B112
b2e
b30   B110: #	B112 &lt;- B30  Freq: 1.01513e-05
b30   	# exception oop is in rax; no code emitted
b30   	movq    RBX, RAX	# spill
b33   	movq    R10, [rsp + #24]	# spill
b38   	jmp,s   B112
b38
b3a   B111: #	B112 &lt;- B14  Freq: 9.97133e-06
b3a   	# exception oop is in rax; no code emitted
b3a   	movq    RBX, RAX	# spill
b3d   	movl    R10, #7	# long (unsigned 32-bit)
b3d
b43   B112: #	B114 B113 &lt;- B111 B108 B110 B109 B107  Freq: 2.03033e-05
b43   	MEMBAR-release (a FastUnlock follows so empty encoding)
b43   	movq    R11, [rsp + #16]	# spill
b48   	andq    R10, [R11]	# long
b4b   	cmpq    R10, #5
b4f   	jne,s   B114  P=0.000001 C=-1.000000
b4f
b51   B113: #	N1630 &lt;- B115 B114 B112  Freq: 2.03033e-05
b51   	movq    RSI, RBX	# spill
b54   	addq    rsp, 112	# Destroy frame
	popq   rbp

b59   	jmp     rethrow_stub
b59
b5e   B114: #	B113 B115 &lt;- B112  Freq: 2.03033e-11
b5e   	leaq    RAX, [rsp + #96]	# box lock
b63   	fastunlock R11,RAX	! kills RAX,R10
be4   	je     B113  P=0.999999 C=-1.000000
be4
bea   B115: #	B113 &lt;- B114  Freq: 2.03033e-17
bea   	movq    RDI, [rsp + #16]	# spill
bef   	leaq    RSI, [rsp + #96]	# box lock
bf4   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
c01   	jmp     B113
c01

</opto_assembly>
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='427'>
{method}
 - this oop:          0x00007f37558f0048
 - method holder:     &apos;java/io/ByteArrayOutputStream&apos;
 - constants:         0x00007f37558ef958 constant pool [127] {0x00007f37558ef958} for &apos;java/io/ByteArrayOutputStream&apos; cache=0x00007f37558f0a30
 - access:            0x81000002  private 
 - name:              &apos;ensureCapacity&apos;
 - signature:         &apos;(I)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      15
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758ce2920
 - code size:         16
 - code start:        0x00007f37558f0018
 - code end (excl):   0x00007f37558f0028
 - method data:       0x00007f3755be91e8
 - checked ex length: 0
 - linenumber start:  0x00007f37558f0028
 - localvar length:   2
 - localvar start:    0x00007f37558f002e
 - compiled code: nmethod   4614  420       3       java.io.ByteArrayOutputStream::ensureCapacity (16 bytes)
#
#  void ( java/io/ByteArrayOutputStream:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/io/ByteArrayOutputStream:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N63: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B6 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	movl    R11, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/io/ByteArrayOutputStream.buf
030   	movl    R10, [R11 + #12 (8-bit)]	# range
034   	NullCheck R11
034
034   B2: #	B4 B3 &lt;- B1  Freq: 0.999999
034   	movl    R8, RDX	# spill
037   	subl    R8, R10	# int
03a   	testl   R8, R8
03d   	jg,s   B4  P=0.000449 C=20039.000000
03d
03f   B3: #	N63 &lt;- B5 B2  Freq: 0.999999
03f   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

04a   	ret
04a
04b   B4: #	B7 B5 &lt;- B2  Freq: 0.000449121
04b   	call,static  java.io.ByteArrayOutputStream::grow
        # java.io.ByteArrayOutputStream::ensureCapacity @ bci:12  L[0]=_ L[1]=_
        # OopMap{off=80}
050
050   B5: #	B3 &lt;- B4  Freq: 0.000449112
        # Block is sole successor of call
050   	jmp,s   B3
050
052   B6: #	N63 &lt;- B1  Freq: 1.01328e-06
052   	movl    RSI, #-10	# int
057   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.ByteArrayOutputStream::ensureCapacity @ bci:5  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=92}
05c   	int3	# ShouldNotReachHere
05c
061   B7: #	N63 &lt;- B4  Freq: 4.49121e-09
061   	# exception oop is in rax; no code emitted
061   	movq    RSI, RAX	# spill
064   	addq    rsp, 16	# Destroy frame
	popq   rbp

069   	jmp     rethrow_stub
069

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='426'>
{method}
 - this oop:          0x00007f37558f03f0
 - method holder:     &apos;java/io/ByteArrayOutputStream&apos;
 - constants:         0x00007f37558ef958 constant pool [127] {0x00007f37558ef958} for &apos;java/io/ByteArrayOutputStream&apos; cache=0x00007f37558f0a30
 - access:            0x81000021  public synchronized 
 - name:              &apos;write&apos;
 - signature:         &apos;([BII)V&apos;
 - max stack:         6
 - max locals:        4
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f37589eb920
 - adapters:          AHE@0x00007f37680efb00: 0xbbaa0000 i2c: 0x00007f3758b14ae0 c2i: 0x00007f3758b14c25 c2iUV: 0x00007f3758b14bf8
 - compiled entry     0x00007f3758ce1da0
 - code size:         66
 - code start:        0x00007f37558f0370
 - code end (excl):   0x00007f37558f03b2
 - method data:       0x00007f3755be8fb0
 - checked ex length: 0
 - linenumber start:  0x00007f37558f03b2
 - localvar length:   4
 - localvar start:    0x00007f37558f03be
 - compiled code: nmethod   4661  418  s    3       java.io.ByteArrayOutputStream::write (66 bytes)
#
#  void ( java/io/ByteArrayOutputStream:NotNull *, byte[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/io/ByteArrayOutputStream:NotNull *
#r016 rdx:rdx   : parm 1: byte[int:&gt;=0]:exact *
#r010 rcx   : parm 2: int
#r004 r8   : parm 3: int
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: Fixed slot 3
#r186 rsp+72: Fixed slot 2
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N540: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B21 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (248 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movl    [rsp + #20], R8	# spill
031   	movl    RBP, RCX	# spill
033   	movq    [rsp + #0], RDX	# spill
037   	movq    [rsp + #48], RSI	# spill
03c   	movq    R9, [RSI]	# long
03f   	movl    RDI, RCX	# spill
041   	addl    RDI, R8	# int
044   	# TLS is in R15
044   	movq    R10, R9	# spill
047   	andq    R10, #7	# long
04b   	movl    R11, narrowklass: precise klass java/io/ByteArrayOutputStream: 0x00007f372411d840:Constant:exact *	# compressed klass ptr
051   	cmpq    R10, #5
055   	jne     B21  P=0.000001 C=-1.000000
055
05b   B2: #	B23 B3 &lt;- B1  Freq: 0.999999
05b   	decode_klass_not_null R10,R11
069   	movq    R10, [R10 + #176 (32-bit)]	# long
070   	movq    R11, R10	# spill
073   	orq     R11, R15	# long
076   	movq    R8, R11	# spill
079   	xorq    R8, R9	# long
07c   	testq   R8, #-121	# long
083   	jne     B23  P=0.000001 C=-1.000000
083
089   B3: #	B32 B4 &lt;- B22 B21 B2 B27  Freq: 1
089   	MEMBAR-acquire (prior CMPXCHG in FastLock so empty encoding)
089   	movl    R11, RBP	# spill
08c   	testl   R11, R11
08f   	jl     B32  P=0.000000 C=20896.000000
08f
095   B4: #	B38 B5 &lt;- B3  Freq: 1
095   	movslq  R14, [RSP + #20 (32-bit)]	# int -&gt; long
09a   	movq    R10, [rsp + #48]	# spill
09f   	movl    R9, [R10 + #12 (8-bit)]	# int ! Field: java/io/ByteArrayOutputStream.count
0a3   	movl    R13, [R10 + #16 (8-bit)]	# compressed ptr ! Field: java/io/ByteArrayOutputStream.buf
0a7   	movq    RAX, [rsp + #0]	# spill
0ab   	movl    RBX, [RAX + #12 (8-bit)]	# range
0ae   	NullCheck RAX
0ae
0ae   B5: #	B34 B6 &lt;- B4  Freq: 0.999999
0ae   	movl    RSI, #-155	# int
0b3   	movl    RDX, [rsp + #20]	# spill
0b7   	addl    RDX, R9	# int
0ba   	cmpl    R11, RBX
0bd   	jg     B34  P=0.000000 C=20898.000000
0bd
0c3   B6: #	B33 B7 &lt;- B5  Freq: 0.999998
0c3   	movl    R8, [rsp + #20]	# spill
0c8   	testl   R8, R8
0cb   	jl     B33  P=0.000000 C=20898.000000
0cb
0d1   B7: #	B35 B8 &lt;- B6  Freq: 0.999998
0d1   	movl    RBP, RDI	# spill
0d3   	subl    RBP, RBX	# int
0d5   	testl   RBP, RBP
0d7   	jg     B35  P=0.000000 C=20898.000000
0d7
0dd   B8: #	B39 B9 &lt;- B7  Freq: 0.999997
0dd   	movslq  R8, R11	# i2l
0e0   	movl    R10, [R13 + #12 (8-bit)]	# range
0e4   	NullCheck R13
0e4
0e4   B9: #	B17 B10 &lt;- B8  Freq: 0.999996
0e4   	leaq    RBP, [RAX + #16 + R8]	# ptr idxoff
0e9   	movl    R8, RDX	# spill
0ec   	subl    R8, R10	# int
0ef   	testl   R8, R8
0f2   	jg     B17  P=0.000431 C=20896.000000
0f2
0f8   B10: #	B28 B11 &lt;- B19 B9  Freq: 0.999996
0f8   	movl    R8, [R13 + #12 (8-bit)]	# range
0fc   	decode_heap_oop_not_null RCX,R13
0ff   	movslq  RDX, R9	# i2l
102   	testl   R9, R9
105   	jl     B28  P=0.000001 C=-1.000000
105
10b   B11: #	B28 B12 &lt;- B10  Freq: 0.999995
10b   	movl    R10, [rsp + #20]	# spill
110   	addl    R10, R9	# int
113   	leaq    RSI, [R13 + #16 + RDX]	# ptr idxoffnarrow
118   	cmpl    RBX, RDI	# unsigned
11a   	jb,u  B28  P=0.000001 C=-1.000000
11a
120   B12: #	B28 B13 &lt;- B11  Freq: 0.999994
120   	cmpl    R8, R10	# unsigned
123   	jb,u  B28  P=0.000001 C=-1.000000
123
129   B13: #	B15 B14 &lt;- B12  Freq: 0.999993
129   	movl    R10, [rsp + #20]	# spill
12e   	testl   R10, R10
131   	jle,s   B15  P=0.000001 C=-1.000000
131
133   B14: #	B15 &lt;- B13  Freq: 0.999992
133   	movq    RDI, RBP	# spill
136   	movq    RDX, R14	# spill
139   	call_leaf_nofp,runtime  jbyte_arraycopy
        No JVM State Info
        # 
146
146   B15: #	B30 B16 &lt;- B14 B13 B29  Freq: 0.999996
146   	
146   	movq    R10, [rsp + #48]	# spill
14b   	movl    R8, [rsp + #20]	# spill
150   	addl    [R10 + #12 (8-bit)], R8	# int ! Field: java/io/ByteArrayOutputStream.count
154   	MEMBAR-release (a FastUnlock follows so empty encoding)
154   	movl    R10, #7	# long (unsigned 32-bit)
15a   	movq    R11, [rsp + #48]	# spill
15f   	andq    R10, [R11]	# long
162   	cmpq    R10, #5
166   	jne     B30  P=0.000001 C=-1.000000
166
16c   B16: #	N540 &lt;- B31 B30 B15  Freq: 0.999996
16c   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

177   	ret
177
178   B17: #	B41 B18 &lt;- B9  Freq: 0.000430701
178   	movq    [rsp + #40], RBP	# spill
17d   	movl    [rsp + #32], RBX	# spill
181   	movq    [rsp + #24], R14	# spill
186   	movl    [rsp + #16], RDI	# spill
18a   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
19c   	movl    [rsp + #8], R11	# spill
1a1   	movq    RBP, [rsp + #48]	# spill
1a6   	movq    RSI, RBP	# spill
      	nop 	# 2 bytes pad for loops and calls
1ab   	call,static  java.io.ByteArrayOutputStream::grow
        # java.io.ByteArrayOutputStream::ensureCapacity @ bci:12  L[0]=_ L[1]=_
        # java.io.ByteArrayOutputStream::write @ bci:38  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #12 MON-BOX0=rsp+64 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [0]=Oop [40]=Derived_oop_[0] [48]=Oop off=432}
1b0
1b0   B18: #	B36 B19 &lt;- B17  Freq: 0.000430693
        # Block is sole successor of call
1b0   	movl    R13, [RBP + #16 (8-bit)]	# compressed ptr ! Field: java/io/ByteArrayOutputStream.buf
1b4   	movl    R9, [RBP + #12 (8-bit)]	# int ! Field: java/io/ByteArrayOutputStream.count
1b8   	testl   R13, R13	# compressed ptr
1bb   	je     B36  P=0.000001 C=-1.000000
1bb
1c1   B19: #	B10 &lt;- B18  Freq: 0.000430692
1c1   	movq    RAX, [rsp + #0]	# spill
1c5   	movl    R11, [rsp + #8]	# spill
1ca   	movl    RDI, [rsp + #16]	# spill
1ce   	movq    R14, [rsp + #24]	# spill
1d3   	movl    RBX, [rsp + #32]	# spill
1d7   	movq    RBP, [rsp + #40]	# spill
1dc   	jmp     B10
1dc
1e1   B20: #	B21 &lt;- B23  Freq: 9.99999e-13
1e1   	movq    RAX, R9	# spill
1e4   	cmpxchgq [RSI], R10	# If rax == [RSI] then store R10 into [RSI]
1e9
1e9   B21: #	B3 B22 &lt;- B1 B20  Freq: 1e-06
1e9   	leaq    RBX, [rsp + #64]	# box lock
1ee   	fastlock RSI,RBX	! kills RBX,RAX,R10
236   	je     B3  P=0.999999 C=-1.000000
236
23c   B22: #	B3 &lt;- B26 B21  Freq: 2e-12
23c   	movl    [rsp + #16], RDI	# spill
240   	movq    [rsp + #8], RSI	# spill
245   	leaq    RDX, [rsp + #64]	# box lock
      	nop 	# 1 bytes pad for loops and calls
24b   	call,static  wrapper for: _complete_monitor_locking_Java
        # java.io.ByteArrayOutputStream::write @ bci:-1  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=RBP L[3]=rsp + #20 MON-BOX0=rsp+64 MON-OBJ[0]=rsp + #8
        # OopMap{[0]=Oop [8]=Oop [48]=Oop off=592}
250   	movl    RDI, [rsp + #16]	# spill
254   	jmp     B3
254
259   B23: #	B20 B24 &lt;- B2  Freq: 9.99999e-07
259   	movq    RAX, R9	# spill
25c   	andq    RAX, #895	# long
263   	testq   R8, #7	# long
26a   	jne     B20  P=0.000001 C=-1.000000
26a
270   B24: #	B37 B25 &lt;- B23  Freq: 9.99998e-07
270   	testq   R8, #768	# long
277   	jne     B37  P=0.000001 C=-1.000000
277
27d   B25: #	B26 &lt;- B24  Freq: 9.99997e-07
27d   	movq    R11, RAX	# spill
280   	orq     R11, R15	# long
283
283   B26: #	B22 B27 &lt;- B25 B37  Freq: 9.99998e-07
283   	cmpxchgq [RSI], R11	# If rax == [RSI] then store R11 into [RSI]
288   	jne,us  B22  P=0.000001 C=-1.000000
288
28a   B27: #	B3 &lt;- B26  Freq: 9.99997e-07
28a   	jmp     B3
28a
28f   B28: #	B40 B29 &lt;- B12 B10 B11  Freq: 2.99999e-06
28f   	movq    RSI, RAX	# spill
292   	movl    RDX, R11	# spill
295   	movl    R8, R9	# spill
298   	movl    R9, [rsp + #20]	# spill
29d   	movq    RBP, [rsp + #48]	# spill
      	nop 	# 1 bytes pad for loops and calls
2a3   	call,static  wrapper for: slow_arraycopy
        # java.io.ByteArrayOutputStream::write @ bci:52  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #20 MON-BOX0=rsp+64 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [48]=Oop off=680}
2a8
2a8   B29: #	B15 &lt;- B28  Freq: 2.99993e-06
        # Block is sole successor of call
2a8   	jmp     B15
2a8
2ad   B30: #	B16 B31 &lt;- B15  Freq: 9.99996e-07
2ad   	leaq    RAX, [rsp + #64]	# box lock
2b2   	fastunlock R11,RAX	! kills RAX,R10
333   	je     B16  P=0.999999 C=-1.000000
333
339   B31: #	B16 &lt;- B30  Freq: 9.99996e-13
339   	movq    RDI, R11	# spill
33c   	leaq    RSI, [rsp + #64]	# box lock
341   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
34e   	jmp     B16
34e
353   B32: #	N540 &lt;- B3  Freq: 5e-07
353   	movq    RBP, [rsp + #48]	# spill
358   	movl    [rsp + #16], R11	# spill
35d   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
363   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.ByteArrayOutputStream::write @ bci:1  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #16 L[3]=rsp + #20 STK[0]=rsp + #16 MON-BOX0=rsp+64 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [0]=Oop off=872}
368   	int3	# ShouldNotReachHere
368
36d   B33: #	N540 &lt;- B6  Freq: 4.99999e-07
36d   	movl    [rsp + #8], R11	# spill
372   	movl    [rsp + #16], R8	# spill
377   	movq    [rsp + #24], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
37f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.ByteArrayOutputStream::write @ bci:11  L[0]=rsp + #24 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 STK[0]=rsp + #20 MON-BOX0=rsp+64 MON-OBJ[0]=rsp + #48
        # OopMap{[0]=Oop [24]=Oop [48]=Oop off=900}
384   	int3	# ShouldNotReachHere
384
389   B34: #	N540 &lt;- B5  Freq: 4.76836e-07
389   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
39b   	movl    [rsp + #16], R11	# spill
3a0   	movq    [rsp + #24], R10	# spill
3a5   	movl    [rsp + #20], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
3ab   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.ByteArrayOutputStream::write @ bci:7  L[0]=rsp + #24 L[1]=rsp + #0 L[2]=rsp + #16 L[3]=rsp + #12 STK[0]=rsp + #16 STK[1]=rsp + #20 MON-BOX0=rsp+64 MON-OBJ[0]=rsp + #48
        # OopMap{[0]=Oop [24]=Oop [48]=Oop off=944}
3b0   	int3	# ShouldNotReachHere
3b0
3b5   B35: #	N540 &lt;- B7  Freq: 4.76836e-07
3b5   	movq    [rsp + #8], RAX	# spill
3ba   	movl    [rsp + #16], R11	# spill
3bf   	movq    [rsp + #24], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
3c7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.ByteArrayOutputStream::write @ bci:20  L[0]=rsp + #24 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #20 STK[0]=RBP MON-BOX0=rsp+64 MON-OBJ[0]=rsp + #48
        # OopMap{[8]=Oop [24]=Oop [48]=Oop off=972}
3cc   	int3	# ShouldNotReachHere
3cc
3d1   B36: #	N540 &lt;- B18  Freq: 4.36412e-10
3d1   	movq    RBP, [rsp + #0]	# spill
3d5   	movl    R10, [rsp + #8]	# spill
3da   	movl    [rsp + #0], R10	# spill
3de   	movl    RSI, #-10	# int
3e3   	movl    [rsp + #16], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
3eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.ByteArrayOutputStream::write @ bci:52  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=#NULL STK[3]=rsp + #16 STK[4]=rsp + #20 MON-BOX0=rsp+64 MON-OBJ[0]=rsp + #48
        # OopMap{rbp=Oop [48]=Oop off=1008}
3f0   	int3	# ShouldNotReachHere
3f0
3f5   B37: #	B26 &lt;- B24  Freq: 9.99998e-13
3f5   	movq    RAX, R9	# spill
3f8   	jmp     B26
3f8
3fd   B38: #	N540 &lt;- B4  Freq: 1.01328e-06
3fd   	movq    RBP, R10	# spill
400   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
407   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.ByteArrayOutputStream::write @ bci:6  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL MON-BOX0=rsp+64 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop off=1036}
40c   	int3	# ShouldNotReachHere
40c
411   B39: #	N540 &lt;- B8  Freq: 1.01328e-06
411   	movq    RBP, [rsp + #48]	# spill
416   	movl    RSI, #-10	# int
41b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.ByteArrayOutputStream::ensureCapacity @ bci:5  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.io.ByteArrayOutputStream::write @ bci:38  L[0]=_ L[1]=_ L[2]=_ L[3]=_ MON-BOX0=rsp+64 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop off=1056}
420   	int3	# ShouldNotReachHere
420
425   B40: #	B42 &lt;- B28  Freq: 2.99998e-11
425   	# exception oop is in rax; no code emitted
425   	movq    RBX, RAX	# spill
428   	jmp,s   B42
428
42a   B41: #	B42 &lt;- B17  Freq: 4.30701e-09
42a   	# exception oop is in rax; no code emitted
42a   	movq    RBX, RAX	# spill
42a
42d   B42: #	B44 B43 &lt;- B41 B40  Freq: 4.33701e-09
42d   	MEMBAR-release (a FastUnlock follows so empty encoding)
42d   	movl    R10, #7	# long (unsigned 32-bit)
433   	movq    R11, [rsp + #48]	# spill
438   	andq    R10, [R11]	# long
43b   	cmpq    R10, #5
43f   	jne,s   B44  P=0.000001 C=-1.000000
43f
441   B43: #	N540 &lt;- B45 B44 B42  Freq: 4.33701e-09
441   	movq    RSI, RBX	# spill
444   	addq    rsp, 80	# Destroy frame
	popq   rbp

449   	jmp     rethrow_stub
449
44e   B44: #	B43 B45 &lt;- B42  Freq: 4.33701e-15
44e   	leaq    RAX, [rsp + #64]	# box lock
453   	fastunlock R11,RAX	! kills RAX,R10
4d4   	je     B43  P=0.999999 C=-1.000000
4d4
4da   B45: #	B43 &lt;- B44  Freq: 4.33701e-21
4da   	movq    RDI, R11	# spill
4dd   	leaq    RSI, [rsp + #64]	# box lock
4e2   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
4ef   	jmp     B43
4ef

</opto_assembly>
<writer thread='139875516786432'/>
<dependency_failed type='leaf_type' ctxk='java/lang/ThreadLocal' witness='java/lang/InheritableThreadLocal' stamp='6.200'/>
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='435'>
{method}
 - this oop:          0x00007f3755886b98
 - method holder:     &apos;java/lang/CharacterData&apos;
 - constants:         0x00007f3755885a00 constant pool [76] {0x00007f3755885a00} for &apos;java/lang/CharacterData&apos; cache=0x00007f3755886bf8
 - access:            0x81000018  static final 
 - name:              &apos;of&apos;
 - signature:         &apos;(I)Ljava/lang/CharacterData;&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef998: 0xa0000000 i2c: 0x00007f3758b13ba0 c2i: 0x00007f3758b13cd9 c2iUV: 0x00007f3758b13cac
 - compiled entry     0x00007f3758bfeb80
 - code size:         120
 - code start:        0x00007f3755886b00
 - code end (excl):   0x00007f3755886b78
 - method data:       0x00007f375590c7b0
 - checked ex length: 0
 - linenumber start:  0x00007f3755886b78
 - localvar length:   1
 - localvar start:    0x00007f3755886b8a
 - compiled code: nmethod   6228   17       3       java.lang.CharacterData::of (120 bytes)
#
#  java/lang/CharacterDataLatin1 * ( int )
#
#r018 rsi   : parm 0: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B3 B2  Freq: 1
abababab
000   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (112 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c   	movl    R11, RSI	# spill
00f   	shrl    R11, #8
013   	testl   R11, R11
016   	jne,s   B3  P=0.000000 C=5517.000000
016
018   B2: #	N1 &lt;- B1  Freq: 1
018   	movq    RAX, java/lang/CharacterDataLatin1:exact *	# ptr
022   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

02d   	ret
02d
02e   B3: #	N1 &lt;- B1  Freq: 5e-07
02e   	movl    RBP, RSI	# spill
030   	movl    [rsp + #0], R11	# spill
034   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
03b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.CharacterData::of @ bci:4  L[0]=RBP STK[0]=rsp + #0
        # OopMap{off=64}
040   	int3	# ShouldNotReachHere
040

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='439'>
{method}
 - this oop:          0x00007f375586da98
 - method holder:     &apos;java/util/concurrent/ConcurrentHashMap&apos;
 - constants:         0x00007f3755868870 constant pool [1215] {0x00007f3755868870} for &apos;java/util/concurrent/ConcurrentHashMap&apos; cache=0x00007f37558758f8
 - access:            0x81000018  static final 
 - name:              &apos;tabAt&apos;
 - signature:         &apos;([Ljava/util/concurrent/ConcurrentHashMap$Node;I)Ljava/util/concurrent/ConcurrentHashMap$Node;&apos;
 - max stack:         7
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758c0bd20
 - code size:         21
 - code start:        0x00007f375586da60
 - code end (excl):   0x00007f375586da75
 - method data:       0x00007f3755990f60
 - checked ex length: 0
 - linenumber start:  0x00007f375586da75
 - localvar length:   2
 - localvar start:    0x00007f375586da7c
 - compiled code: nmethod   6272   35       3       java.util.concurrent.ConcurrentHashMap::tabAt (21 bytes)
#
#  java/util/concurrent/ConcurrentHashMap$Node * ( narrowoop: java/util/concurrent/ConcurrentHashMap$Node *[int:&gt;=0] *, int )
#
#r018 rsi:rsi   : parm 0: narrowoop: java/util/concurrent/ConcurrentHashMap$Node *[int:&gt;=0] *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B1  Freq: 1
abababab
000   B1: #	N1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	
00c   	movslq  R10, RDX	# i2l
00f   	movl    R10, [RSI + #16 + R10 &lt;&lt; #2]	# compressed ptr
014   	decode_heap_oop RAX,R10
09f   	MEMBAR-acquire ! (empty encoding)
09f   	
09f   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0aa   	ret
0aa

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='457'>
{method}
 - this oop:          0x00007f3755c0b8d0
 - method holder:     &apos;sun/reflect/ClassFileAssembler&apos;
 - constants:         0x00007f3755c0a7b0 constant pool [221] {0x00007f3755c0a7b0} for &apos;sun/reflect/ClassFileAssembler&apos; cache=0x00007f3755c0fa18
 - access:            0x81000001  public 
 - name:              &apos;emitByte&apos;
 - signature:         &apos;(B)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      87
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758cec960
 - code size:         11
 - code start:        0x00007f3755c0b8a0
 - code end (excl):   0x00007f3755c0b8ab
 - method data:       0x00007f3755c10740
 - checked ex length: 0
 - linenumber start:  0x00007f3755c0b8ab
 - localvar length:   2
 - localvar start:    0x00007f3755c0b8b6
 - compiled code: nmethod   6391  433       3       sun.reflect.ClassFileAssembler::emitByte (11 bytes)
#
#  void ( sun/reflect/ClassFileAssembler:NotNull *, byte )
#
#r018 rsi:rsi   : parm 0: sun/reflect/ClassFileAssembler:NotNull *
#r016 rdx   : parm 1: byte
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N153: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B12 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (224 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    [rsp + #0], RDX	# spill
02f   	movl    R10, [RSI + #28 (8-bit)]	# compressed ptr ! Field: sun/reflect/ClassFileAssembler.vec
033   	decode_heap_oop_not_null R8,R10
036   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
03a   	NullCheck R10
03a
03a   B2: #	B11 B3 &lt;- B1  Freq: 0.999999
03a   	cmpl    R11, narrowklass: precise klass sun/reflect/ByteVectorImpl: 0x00007f372410ece0:Constant:exact *	# compressed klass ptr
041   	jne,u  B11  P=0.000001 C=-1.000000
041
047   B3: #	B13 B4 &lt;- B2  Freq: 0.999998
047   	# checkcastPP of R8
047   	movl    R9, [R8 + #12 (8-bit)]	# int ! Field: sun/reflect/ByteVectorImpl.pos
04b   	movl    RSI, #-10	# int
050   	movl    RBP, [R8 + #16 (8-bit)]	# compressed ptr ! Field: sun/reflect/ByteVectorImpl.data
054   	incl    R9	# int
057   	movl    [R8 + #12 (8-bit)], R9	# int ! Field: sun/reflect/ByteVectorImpl.pos
05b   	movl    R11, [RBP + #12 (8-bit)]	# range
05f   	NullCheck RBP
05f
05f   B4: #	B7 B5 &lt;- B3  Freq: 0.999997
05f   	cmpl    R9, R11
062   	jge,s   B7  P=0.002791 C=5375.000000
062
064   B5: #	B10 B6 &lt;- B8 B4  Freq: 0.999997
064   	movl    R10, [RBP + #12 (8-bit)]	# range
068   	cmpl    R9, R10	# unsigned
06b   	jnb,us  B10  P=0.000001 C=-1.000000
06b
06d   B6: #	N153 &lt;- B5  Freq: 0.999996
06d   	movslq  R10, R9	# i2l
070   	movl    R8, [rsp + #0]	# spill
074   	movb    [RBP + #16 + R10], R8	# byte
079   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

084   	ret
084
085   B7: #	B14 B8 &lt;- B4  Freq: 0.00279068
085   	movq    RBP, R8	# spill
088   	movq    RSI, R8	# spill
08b   	movl    RDX, R9	# spill
      	nop 	# 1 bytes pad for loops and calls
08f   	call,static  sun.reflect.ByteVectorImpl::resize
        # sun.reflect.ByteVectorImpl::add @ bci:24  L[0]=RBP L[1]=rsp + #0
        # sun.reflect.ClassFileAssembler::emitByte @ bci:5  L[0]=_ L[1]=_
        # OopMap{rbp=Oop off=148}
094
094   B8: #	B5 B9 &lt;- B7  Freq: 0.00279063
        # Block is sole successor of call
094   	movq    R10, RBP	# spill
097   	movl    R9, [R10 + #12 (8-bit)]	# int ! Field: sun/reflect/ByteVectorImpl.pos
09b   	movl    RBP, [R10 + #16 (8-bit)]	# compressed ptr ! Field: sun/reflect/ByteVectorImpl.data
09f   	testl   RBP, RBP	# compressed ptr
0a1   	jne,s   B5  P=0.999999 C=-1.000000
0a1
0a3   B9: #	N153 &lt;- B8  Freq: 2.82768e-09
0a3   	movl    RBP, [rsp + #0]	# spill
0a6   	movl    RSI, #-10	# int
0ab   	movl    [rsp + #0], R9	# spill
0af   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=rsp + #0 STK[2]=RBP
        # sun.reflect.ClassFileAssembler::emitByte @ bci:5  L[0]=_ L[1]=_
        # OopMap{off=180}
0b4   	int3	# ShouldNotReachHere
0b4
0b9   B10: #	N153 &lt;- B5  Freq: 1.01328e-06
0b9   	movl    RSI, #-28	# int
0be   	movl    [rsp + #4], R9	# spill
0c3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:36  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #4 STK[2]=rsp + #0
        # sun.reflect.ClassFileAssembler::emitByte @ bci:5  L[0]=_ L[1]=_
        # OopMap{rbp=NarrowOop off=200}
0c8   	int3	# ShouldNotReachHere
0c8
0cd   B11: #	N153 &lt;- B2  Freq: 9.99999e-07
0cd   	movl    RSI, #-34	# int
0d2   	movl    RBP, R10	# spill
      	nop 	# 2 bytes pad for loops and calls
0d7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ClassFileAssembler::emitByte @ bci:5  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap{rbp=NarrowOop off=220}
0dc   	int3	# ShouldNotReachHere
0dc
0e1   B12: #	N153 &lt;- B1  Freq: 1.01328e-06
0e1   	movl    RSI, #-10	# int
0e6   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
0eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ClassFileAssembler::emitByte @ bci:5  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=240}
0f0   	int3	# ShouldNotReachHere
0f0
0f5   B13: #	N153 &lt;- B3  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
0f7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:15  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # sun.reflect.ClassFileAssembler::emitByte @ bci:5  L[0]=_ L[1]=_
        # OopMap{off=252}
0fc   	int3	# ShouldNotReachHere
0fc
101   B14: #	N153 &lt;- B7  Freq: 2.79068e-08
101   	# exception oop is in rax; no code emitted
101   	movq    RSI, RAX	# spill
104   	addq    rsp, 32	# Destroy frame
	popq   rbp

109   	jmp     rethrow_stub
109

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='458'>
{method}
 - this oop:          0x00007f3755c0a2c8
 - method holder:     &apos;sun/reflect/ByteVectorImpl&apos;
 - constants:         0x00007f3755c09718 constant pool [56] {0x00007f3755c09718} for &apos;sun/reflect/ByteVectorImpl&apos; cache=0x00007f3755c0a5b8
 - access:            0x81000001  public 
 - name:              &apos;add&apos;
 - signature:         &apos;(B)V&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758cec060
 - code size:         38
 - code start:        0x00007f3755c0a280
 - code end (excl):   0x00007f3755c0a2a6
 - method data:       0x00007f3755c108e8
 - checked ex length: 0
 - linenumber start:  0x00007f3755c0a2a6
 - localvar length:   2
 - localvar start:    0x00007f3755c0a2ae
 - compiled code: nmethod   6470  434       3       sun.reflect.ByteVectorImpl::add (38 bytes)
#
#  void ( sun/reflect/ByteVectorImpl:NotNull *, byte )
#
#r018 rsi:rsi   : parm 0: sun/reflect/ByteVectorImpl:NotNull *
#r016 rdx   : parm 1: byte
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N116: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B9 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    [rsp + #4], RDX	# spill
030   	movq    RBP, RSI	# spill
033   	movl    RDX, [RSI + #12 (8-bit)]	# int ! Field: sun/reflect/ByteVectorImpl.pos
036   	movl    R11, [RSI + #16 (8-bit)]	# compressed ptr ! Field: sun/reflect/ByteVectorImpl.data
03a   	incl    RDX	# int
03c   	movl    [RSI + #12 (8-bit)], RDX	# int ! Field: sun/reflect/ByteVectorImpl.pos
03f   	movl    R10, [R11 + #12 (8-bit)]	# range
043   	NullCheck R11
043
043   B2: #	B5 B3 &lt;- B1  Freq: 0.999999
043   	cmpl    RDX, R10
046   	jge,s   B5  P=0.002683 C=7082.000000
046
048   B3: #	B8 B4 &lt;- B6 B2  Freq: 0.999999
048   	movl    R8, [R11 + #12 (8-bit)]	# range
04c   	cmpl    RDX, R8	# unsigned
04f   	jnb,us  B8  P=0.000001 C=-1.000000
04f
051   B4: #	N116 &lt;- B3  Freq: 0.999998
051   	movslq  R10, RDX	# i2l
054   	movl    R8, [rsp + #4]	# spill
059   	movb    [R11 + #16 + R10], R8	# byte
05e   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

069   	ret
069
06a   B5: #	B10 B6 &lt;- B2  Freq: 0.00268286
      	nop 	# 1 bytes pad for loops and calls
06b   	call,static  sun.reflect.ByteVectorImpl::resize
        # sun.reflect.ByteVectorImpl::add @ bci:24  L[0]=RBP L[1]=rsp + #4
        # OopMap{rbp=Oop off=112}
070
070   B6: #	B3 B7 &lt;- B5  Freq: 0.00268281
        # Block is sole successor of call
070   	movl    R11, [RBP + #16 (8-bit)]	# compressed ptr ! Field: sun/reflect/ByteVectorImpl.data
074   	movl    RDX, [RBP + #12 (8-bit)]	# int ! Field: sun/reflect/ByteVectorImpl.pos
077   	testl   R11, R11	# compressed ptr
07a   	jne,s   B3  P=0.999999 C=-1.000000
07a
07c   B7: #	N116 &lt;- B6  Freq: 2.71843e-09
07c   	movl    RBP, RDX	# spill
07e   	movl    RSI, #-10	# int
083   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #4
        # OopMap{off=136}
088   	int3	# ShouldNotReachHere
088
08d   B8: #	N116 &lt;- B3  Freq: 1.01328e-06
08d   	movl    RSI, #-28	# int
092   	movl    RBP, R11	# spill
095   	movl    [rsp + #0], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
09b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:36  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #4
        # OopMap{rbp=NarrowOop off=160}
0a0   	int3	# ShouldNotReachHere
0a0
0a5   B9: #	N116 &lt;- B1  Freq: 1.01328e-06
0a5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
0ab   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:15  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=176}
0b0   	int3	# ShouldNotReachHere
0b0
0b5   B10: #	N116 &lt;- B5  Freq: 2.68286e-08
0b5   	# exception oop is in rax; no code emitted
0b5   	movq    RSI, RAX	# spill
0b8   	addq    rsp, 32	# Destroy frame
	popq   rbp

0bd   	jmp     rethrow_stub
0bd

</opto_assembly>
<writer thread='139875533833984'/>
<opto_assembly compile_id='448'>
{method}
 - this oop:          0x00007f375568b528
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f37556850e8 constant pool [680] {0x00007f37556850e8} for &apos;java/lang/String&apos; cache=0x00007f375574e5e0
 - access:            0xc1000001  public 
 - name:              &apos;replace&apos;
 - signature:         &apos;(CC)Ljava/lang/String;&apos;
 - max stack:         5
 - max locals:        8
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef6c8: 0xbaa00000 i2c: 0x00007f3758b11ca0 c2i: 0x00007f3758b11de0 c2iUV: 0x00007f3758b11db3
 - compiled entry     0x00007f3758c1ccc0
 - code size:         127
 - code start:        0x00007f375568b420
 - code end (excl):   0x00007f375568b49f
 - method data:       0x00007f37559cce68
 - checked ex length: 0
 - linenumber start:  0x00007f375568b49f
 - localvar length:   9
 - localvar start:    0x00007f375568b4ba
 - compiled code: nmethod   6477   68       3       java.lang.String::replace (127 bytes)
#
#  java/lang/String:exact * ( java/lang/String:NotNull:exact *, char, char )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: char
#r010 rcx   : parm 2: char
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N834: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B71 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (184 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	movl    [rsp + #4], RCX	# spill
030   	movl    R11, RDX	# spill
033   	movq    R13, RSI	# spill
036   	movl    RDX, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
039   	cmpl    R11, RCX
03c   	je     B71  P=0.002404 C=832.000000
03c
042   B2: #	B81 B3 &lt;- B1  Freq: 0.997596
042   	movl    R10, [RDX + #12 (8-bit)]	# range
046   	NullCheck RDX
046
046   B3: #	B71 B4 &lt;- B2  Freq: 0.997595
046   	movslq  RBX, R10	# i2l
049   	salq    RBX, #1
04c   	addq    RBX, #23	# long
050   	movl    RBP, #1	# int
055   	testl   R10, R10
058   	jle     B71  P=0.003008 C=4322.000000
058
05e   B4: #	B77 B5 &lt;- B3  Freq: 0.994594
05e   	movq    RCX, RBX	# spill
061   	shrq    RCX, #3
065   	testl  R10, R10	# unsigned
068   	jbe,u  B77  P=0.000001 C=-1.000000
068
06e   B5: #	B77 B6 &lt;- B4  Freq: 0.994593
06e   	movl    R9, R10	# spill
071   	decl    R9	# int
074   	cmpl    R9, R10	# unsigned
077   	jnb,u  B77  P=0.000001 C=-1.000000
077
07d   B6: #	B63 B7 &lt;- B5  Freq: 0.994592
07d   	movzwl  R8, [RDX + #16 (8-bit)]	# ushort/char
082   	movl    R14, R10	# spill
085   	addl    R14, #-3	# int
089   	andq    RBX, #-8	# long
08d   	cmpl    R8, R11
090   	je     B63  P=0.189603 C=4309.000000
090
096   B7: #	B79 B8 &lt;- B6  Freq: 0.806015
096   	cmpl    R14, #1
09a   	jle     B79  P=0.000001 C=-1.000000
09a
0a0   B8: #	B9 &lt;- B7  Freq: 0.806014
0a0   	xorl    R9, R9	# int
0a3   	movdl   XMM0, R10	# spill
0a3
0a8   B9: #	B15 B10 &lt;- B8 B14 	Loop: B9-B14 inner main of N171 Freq: 1.41409
0a8   	movl    RDI, RBP	# spill
0aa   	addl    RDI, #4	# int
0ad   	movl    RAX, RBP	# spill
0af   	addl    RAX, #2	# int
0b2   	movzwl  R10, [RDX + #16 + RBP &lt;&lt; #1]	# ushort/char
0b8   	movslq  RSI, RBP	# i2l
0bb   	movzwl  R8, [RDX + #18 + RSI &lt;&lt; #1]	# ushort/char
0c1   	cmpl    R10, R11
0c4   	je,s   B15  P=0.189603 C=4309.000000
0c4
0c6   B10: #	B18 B11 &lt;- B9  Freq: 1.14598
0c6   	cmpl    R8, R11
0c9   	je,s   B18  P=0.189603 C=4309.000000
0c9
0cb   B11: #	B16 B12 &lt;- B10  Freq: 0.928697
0cb   	movzwl  R10, [RDX + #20 + RSI &lt;&lt; #1]	# ushort/char
0d1   	movzwl  R8, [RDX + #22 + RSI &lt;&lt; #1]	# ushort/char
0d7   	cmpl    R10, R11
0da   	je,s   B16  P=0.189603 C=4309.000000
0da
0dc   B12: #	B17 B13 &lt;- B11  Freq: 0.752613
0dc   	cmpl    R8, R11
0df   	je,s   B17  P=0.189603 C=4309.000000
0df
0e1   B13: #	B65 B14 &lt;- B12  Freq: 0.609915
0e1   	cmpl    RDI, R14
0e4   	jge     B65	# loop end  P=0.003008 C=4322.000000
0e4
0ea   B14: #	B9 &lt;- B13  Freq: 0.608081
0ea   	movl    RBP, RDI	# spill
0ec   	jmp,s   B9
0ec
0ee   B15: #	B16 &lt;- B9  Freq: 0.268117
0ee   	movl    RAX, RBP	# spill
0ee
0f0   B16: #	B19 &lt;- B15 B11  Freq: 0.4442
0f0   	movl    RBP, RAX	# spill
0f2   	jmp,s   B19
0f2
0f4   B17: #	B18 &lt;- B12  Freq: 0.142698
0f4   	addl    RBP, #2	# int
0f7
0f7   B18: #	B19 &lt;- B10 B17  Freq: 0.359979
0f7   	incl    RBP	# int
0f9
0f9   B19: #	B20 &lt;- B16 B18  Freq: 0.804179
0f9   	movdl   R10, XMM0	# spill
0f9
0fe   B20: #	B71 B21 &lt;- B72 B63 B19  Freq: 0.99305
0fe   	addq    RCX, #-2	# long
102   	cmpl    RBP, R10
105   	jge     B71  P=0.015663 C=830.000000
105
10b   B21: #	B73 B22 &lt;- B20  Freq: 0.977496
10b   	# TLS is in R15
10b   	movq    R13, [R15 + #112 (8-bit)]	# ptr
10f   	movq    RDI, R13	# spill
112   	addq    RDI, #16	# ptr
116   	movq    R8, R13	# spill
119   	addq    R8, RBX	# ptr
11c   	cmpl    R10, #524288	# unsigned
123   	jnbe,u  B73  P=0.000001 C=-1.000000
123
129   B22: #	B73 B23 &lt;- B21  Freq: 0.977495
129   	# TLS is in R15
129   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
130   	jnb,u  B73  P=0.000100 C=-1.000000
130
136   B23: #	B24 &lt;- B22  Freq: 0.977397
136   	# TLS is in R15
136   	movq    [R15 + #112 (8-bit)], R8	# ptr
13a   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
142   	movq    [R13], 0x0000000000000001	# ptr
14a   	PREFETCHNTA [R8 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
152   	PREFETCHNTA [R8 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
15a   	movl    [R13 + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f37682141b0:Constant:exact *	# compressed klass ptr
162   	movl    [R13 + #12 (8-bit)], R10	# int
166   	PREFETCHNTA [R8 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
16e   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
178
178   B24: #	B34 B25 &lt;- B74 B23  Freq: 0.977496
178   	movl    RSI, #-122	# int
17d   	movl    RCX, #-2147483648	# int
182   	
182   	movl    RDI, RBP	# spill
184   	addl    RDI, #-3	# int
187   	MEMBAR-storestore (empty encoding)
187   	# checkcastPP of R13
187   	movl    RBX, RBP	# spill
189   	decl    RBX	# int
18b   	testl   RBP, RBP
18d   	jle,s   B34  P=0.194016 C=4211.000000
18d
18f   B25: #	B80 B26 &lt;- B24  Freq: 0.787846
18f   	cmpl    RBP, RDI
191   	cmovll RDI, RCX	# signed, int
194   	cmpl    RBX, R10	# unsigned
197   	jnb,u  B80  P=0.000001 C=-1.000000
197
19d   B26: #	B27 &lt;- B25  Freq: 0.787845
19d   	movl    RCX, #4	# int
1a2   	cmpl    RBP, RCX
1a4   	movl    R8, RBP	# spill
1a7   	cmovlgt R8, RCX	# min
1a7
1ab   B27: #	B27 B28 &lt;- B26 B27 	Loop: B27-B27 inner pre of N551 Freq: 1.57569
1ab   	movzwl  RBX, [RDX + #16 + R9 &lt;&lt; #1]	# ushort/char
1b1   	movw    [R13 + #16 + R9 &lt;&lt; #1], RBX	# char/short
1b7   	incl    R9	# int
1ba   	cmpl    R9, R8
1bd   	jl,s   B27	# loop end  P=0.500000 C=3394.000000
1bd
1bf   B28: #	B31 B29 &lt;- B27  Freq: 0.787845
1bf   	cmpl    R9, RDI
1c2   	jge,s   B31  P=0.000001 C=-1.000000
1c2
1c4   B29: #	B30 &lt;- B28  Freq: 0.787845
1c4   	# castII of R9
      	nop 	# 12 bytes pad for loops and calls

1d0   B30: #	B30 B31 &lt;- B29 B30 	Loop: B30-B30 inner main of N264 Freq: 4.06073
1d0   	movq    XMM0,[RDX + #16 + R9 &lt;&lt; #1]	! load vector (8 bytes)
1d7   	movq    [R13 + #16 + R9 &lt;&lt; #1],XMM0	! store vector (8 bytes)
1de   	addl    R9, #4	# int
1e2   	cmpl    R9, RDI
1e5   	jl,s   B30	# loop end  P=0.805984 C=3394.000000
1e5
1e7   B31: #	B34 B32 &lt;- B28 B30  Freq: 0.787845
1e7   	cmpl    R9, RBP
1ea   	jge,s   B34  P=0.500000 C=-1.000000
1ea
1ec   B32: #	B33 &lt;- B31  Freq: 0.393923
1ec   	# castII of R9
1ec
1ec   B33: #	B33 B34 &lt;- B32 B33 	Loop: B33-B33 inner post of N551 Freq: 0.787845
1ec   	movzwl  R8, [RDX + #16 + R9 &lt;&lt; #1]	# ushort/char
1f2   	movw    [R13 + #16 + R9 &lt;&lt; #1], R8	# char/short
1f8   	incl    R9	# int
1fb   	cmpl    R9, RBP
1fe   	jl,s   B33	# loop end  P=0.500000 C=3394.000000
1fe
200   B34: #	B78 B35 &lt;- B33 B31 B24  Freq: 0.977495
200   	cmpl    RBP, R10	# unsigned
203   	jnb,u  B78  P=0.000001 C=-1.000000
203
209   B35: #	B36 &lt;- B34  Freq: 0.977494
209   	encode_heap_oop_not_null R8,R13
314   	movl    R9, RBP	# spill
317   	incl    R9	# int
31a
31a   B36: #	B62 B37 &lt;- B35 B38 	Loop: B36-B38 inner pre of N557 Freq: 1.95499
31a   	movzwl  RCX, [RDX + #16 + RBP &lt;&lt; #1]	# ushort/char
31f   	movl    RBX, RBP	# spill
321   	incl    RBX	# int
323   	cmpl    RCX, R11
326   	je     B62  P=0.120182 C=16891.000000
326
32c   B37: #	B39 B38 &lt;- B36 B62  Freq: 1.95499
32c   	movw    [R13 + #16 + RBP &lt;&lt; #1], RCX	# char/short
332   	cmpl    RBX, R9
335   	jge,s   B39	# loop end  P=0.500000 C=16890.000000
335
337   B38: #	B36 &lt;- B37  Freq: 0.977494
337   	movl    RBP, RBX	# spill
339   	jmp,s   B36
339
33b   B39: #	B52 B40 &lt;- B37  Freq: 0.977494
33b   	cmpl    RBX, R14
33e   	jge,s   B52  P=0.000001 C=-1.000000
33e
340   B40: #	B44 &lt;- B39  Freq: 0.977493
340   	# castII of RBX
340   	jmp,s   B44
340
342   B41: #	B42 &lt;- B48  top-of-loop Freq: 2.54923
342   	movl    RBX, [rsp + #4]	# spill
      	nop 	# 10 bytes pad for loops and calls

350   B42: #	B53 B43 &lt;- B47 B41  top-of-loop Freq: 21.2114
350   	movw    [R13 + #22 + R9 &lt;&lt; #1], RBX	# char/short
356   	cmpl    RCX, R14
359   	jge,s   B53	# loop end  P=0.046083 C=16890.000000
359
35b   B43: #	B44 &lt;- B42  Freq: 20.2339
35b   	movl    RBX, RCX	# spill
35b
35d   B44: #	B49 B45 &lt;- B40 B43 	Loop: B44-B43 inner main of N323 Freq: 21.2114
35d   	movzwl  RDI, [RDX + #16 + RBX &lt;&lt; #1]	# ushort/char
362   	movl    RCX, RBX	# spill
364   	addl    RCX, #4	# int
367   	cmpl    RDI, R11
36a   	je,s   B49  P=0.120182 C=16891.000000
36a
36c   B45: #	B50 B46 &lt;- B44 B49  Freq: 21.2114
36c   	movslq  R9, RBX	# i2l
36f   	movw    [R13 + #16 + RBX &lt;&lt; #1], RDI	# char/short
375   	movzwl  RBX, [RDX + #18 + R9 &lt;&lt; #1]	# ushort/char
37b   	cmpl    RBX, R11
37e   	je,s   B50  P=0.120182 C=16891.000000
37e
380   B46: #	B51 B47 &lt;- B45 B50  Freq: 21.2114
380   	movw    [R13 + #18 + R9 &lt;&lt; #1], RBX	# char/short
386   	movzwl  RBX, [RDX + #20 + R9 &lt;&lt; #1]	# ushort/char
38c   	cmpl    RBX, R11
38f   	je,s   B51  P=0.120182 C=16891.000000
38f
391   B47: #	B42 B48 &lt;- B46 B51  Freq: 21.2114
391   	movw    [R13 + #20 + R9 &lt;&lt; #1], RBX	# char/short
397   	movzwl  RBX, [RDX + #22 + R9 &lt;&lt; #1]	# ushort/char
39d   	cmpl    RBX, R11
3a0   	jne,s   B42  P=0.879818 C=16891.000000
3a0
3a2   B48: #	B41 &lt;- B47  Freq: 2.54923
3a2   	jmp,s   B41
3a2
3a4   B49: #	B45 &lt;- B44  Freq: 2.54923
3a4   	movl    RDI, [rsp + #4]	# spill
3a8   	jmp,s   B45
3a8
3aa   B50: #	B46 &lt;- B45  Freq: 2.54923
3aa   	movl    RBX, [rsp + #4]	# spill
3ae   	jmp,s   B46
3ae
3b0   B51: #	B47 &lt;- B46  Freq: 2.54923
3b0   	movl    RBX, [rsp + #4]	# spill
3b4   	jmp,s   B47
3b4
3b6   B52: #	B53 &lt;- B39  Freq: 9.90474e-07
3b6   	movl    RCX, RBX	# spill
3b6
3b8   B53: #	B58 B54 &lt;- B52 B42  Freq: 0.977494
3b8   	cmpl    RCX, R10
3bb   	jge,s   B58  P=0.500000 C=-1.000000
3bb
3bd   B54: #	B55 &lt;- B53  Freq: 0.488747
3bd   	# castII of RCX
      	nop 	# 3 bytes pad for loops and calls

3c0   B55: #	B64 B56 &lt;- B54 B57 	Loop: B55-B57 inner post of N557 Freq: 0.977494
3c0   	movzwl  R9, [RDX + #16 + RCX &lt;&lt; #1]	# ushort/char
3c6   	movl    RDI, RCX	# spill
3c8   	incl    RDI	# int
3ca   	cmpl    R9, R11
3cd   	je     B64  P=0.120182 C=16891.000000
3cd
3d3   B56: #	B58 B57 &lt;- B55 B64  Freq: 0.977494
3d3   	movw    [R13 + #16 + RCX &lt;&lt; #1], R9	# char/short
3d9   	cmpl    RDI, R10
3dc   	jge,s   B58	# loop end  P=0.500000 C=16890.000000
3dc
3de   B57: #	B55 &lt;- B56  Freq: 0.488747
3de   	movl    RCX, RDI	# spill
3e0   	jmp,s   B55
3e0
3e2   B58: #	B75 B59 &lt;- B56 B53  Freq: 0.977494
3e2   	movq    RBP, 0x00007f3757e0b000	# ptr
3ec   	# TLS is in R15
3ec   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
3f0   	movq    R10, RAX	# spill
3f3   	addq    R10, #24	# ptr
3f7   	# TLS is in R15
3f7   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
3fe   	jnb,u  B75  P=0.000100 C=-1.000000
3fe
404   B59: #	B60 &lt;- B58  Freq: 0.977396
404   	# TLS is in R15
404   	movq    [R15 + #112 (8-bit)], R10	# ptr
408   	movl    R11, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
40e   	decode_klass_not_null R11,R11
412   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
41a   	movq    R10, [R11 + #176 (32-bit)]	# ptr
421   	movq    [RAX], R10	# ptr
424   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
42b   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
42f   	movq    [RAX + #16 (8-bit)], R12	# long (R12_heapbase==0)
42f
433   B60: #	B61 &lt;- B76 B59  Freq: 0.977494
433   	
433   	MEMBAR-storestore (empty encoding)
433   	# checkcastPP of RAX
433   	movq    R10, RAX	# ptr -&gt; long
436   	movl    [RAX + #12 (8-bit)], R8	# compressed ptr ! Field: java/lang/String.value
43a   	shrq    R10, #9
43e   	movb    [RBP + R10], R12	# short/char (R12_heapbase==0)
443   	MEMBAR-release ! (empty encoding)
443
443   B61: #	N834 &lt;- B60 B71  Freq: 0.999995
443   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

44e   	ret
44e
44f   B62: #	B37 &lt;- B36  Freq: 0.234955
44f   	movl    RCX, [rsp + #4]	# spill
453   	jmp     B37
453
458   B63: #	B20 &lt;- B6  Freq: 0.188578
458   	xorl    RBP, RBP	# int
45a   	xorl    R9, R9	# int
45d   	jmp     B20
45d
462   B64: #	B56 &lt;- B55  Freq: 0.117478
462   	movl    R9, [rsp + #4]	# spill
467   	jmp     B56
467
46c   B65: #	B66 &lt;- B13  Freq: 0.00183456
46c   	movdl   R10, XMM0	# spill
46c
471   B66: #	B71 B67 &lt;- B79 B65  Freq: 0.00183537
471   	cmpl    RDI, R10
474   	jge,s   B71  P=0.500000 C=-1.000000
474
476   B67: #	B68 &lt;- B66  Freq: 0.000917687
476   	# castII of RDI
      	nop 	# 2 bytes pad for loops and calls

478   B68: #	B72 B69 &lt;- B67 B70 	Loop: B68-B70 inner post of N545 Freq: 0.00154285
478   	movzwl  RBP, [RDX + #16 + RDI &lt;&lt; #1]	# ushort/char
47d   	movl    RAX, RDI	# spill
47f   	incl    RAX	# int
481   	cmpl    RBP, R11
484   	je,s   B72  P=0.189603 C=4309.000000
484
486   B69: #	B71 B70 &lt;- B68  Freq: 0.00125032
486   	cmpl    RAX, R10
489   	jge,s   B71	# loop end  P=0.500000 C=4322.000000
489
48b   B70: #	B68 &lt;- B69  Freq: 0.000625158
48b   	movl    RDI, RAX	# spill
48d   	jmp,s   B68
48d
48f   B71: #	B61 &lt;- B3 B1 B66 B20 B69  Freq: 0.0225011
48f   	movq    RAX, R13	# spill
492   	jmp,s   B61
492
494   B72: #	B20 &lt;- B68  Freq: 0.000292528
494   	movl    RBP, RDI	# spill
496   	jmp     B20
496
49b   B73: #	B82 B74 &lt;- B21 B22  Freq: 9.87562e-05
49b   	movl    [rsp + #20], R14	# spill
4a0   	movl    [rsp + #16], R9	# spill
4a5   	movl    [rsp + #12], R10	# spill
4aa   	movl    [rsp + #8], RDX	# spill
4ae   	movl    [rsp + #0], R11	# spill
4b2   	movq    RSI, precise klass [C: 0x00007f37682141b0:Constant:exact *	# ptr
4bc   	movl    RDX, R10	# spill
4bf   	call,static  wrapper for: _new_array_Java
        # java.lang.String::replace @ bci:48  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #12 L[4]=RBP L[5]=rsp + #8 L[6]=_ L[7]=_
        # OopMap{[8]=NarrowOop off=1220}
4c4
4c4   B74: #	B24 &lt;- B73  Freq: 9.87542e-05
        # Block is sole successor of call
4c4   	movl    R11, [rsp + #0]	# spill
4c8   	movl    RDX, [rsp + #8]	# spill
4cc   	movl    RCX, [rsp + #12]	# spill
4d0   	movl    R9, [rsp + #16]	# spill
4d5   	movl    R14, [rsp + #20]	# spill
4da   	movq    R13, RAX	# spill
4dd   	movl    R10, RCX	# spill
4e0   	jmp     B24
4e0
4e5   B75: #	B83 B76 &lt;- B58  Freq: 9.77656e-05
4e5   	movl    [rsp + #8], R8	# spill
4ea   	movq    [rsp + #0], R13	# spill
4ee   	movq    RSI, precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# ptr
      	nop 	# 3 bytes pad for loops and calls
4fb   	call,static  wrapper for: _new_instance_Java
        # java.lang.String::replace @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #0 L[7]=_
        # OopMap{[0]=Oop [8]=NarrowOop off=1280}
500
500   B76: #	B60 &lt;- B75  Freq: 9.77637e-05
        # Block is sole successor of call
500   	movl    R8, [rsp + #8]	# spill
505   	jmp     B60
505
50a   B77: #	N834 &lt;- B5 B4  Freq: 2.00239e-06
50a   	movl    RSI, #-122	# int
50f   	movl    RBP, R11	# spill
512   	movl    R8, [rsp + #4]	# spill
517   	movl    [rsp + #0], R8	# spill
51b   	movl    [rsp + #4], RDX	# spill
51f   	movq    [rsp + #8], R13	# spill
524   	movl    [rsp + #16], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
52b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::replace @ bci:29  L[0]=rsp + #8 L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #16 L[4]=#0 L[5]=rsp + #4 L[6]=_ L[7]=_
        # OopMap{[4]=NarrowOop [8]=Oop off=1328}
530   	int3	# ShouldNotReachHere
530
535   B78: #	N834 &lt;- B34  Freq: 9.90475e-07
535   	movl    [rsp + #0], R11	# spill
539   	movl    [rsp + #8], RDX	# spill
53d   	movq    [rsp + #16], R13	# spill
542   	movl    RSI, #-122	# int
547   	movl    [rsp + #12], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
54f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::replace @ bci:84  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #12 L[4]=RBP L[5]=rsp + #8 L[6]=rsp + #16 L[7]=_
        # OopMap{[8]=NarrowOop [16]=Oop off=1364}
554   	int3	# ShouldNotReachHere
554
559   B79: #	B66 &lt;- B7  Freq: 8.16718e-07
559   	movl    RDI, #1	# int
55e   	xorl    R9, R9	# int
561   	jmp     B66
561
566   B80: #	N834 &lt;- B25  Freq: 7.98308e-07
566   	movl    [rsp + #0], R11	# spill
56a   	movl    [rsp + #8], RDX	# spill
56e   	movq    [rsp + #16], R13	# spill
573   	movl    [rsp + #12], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
57b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::replace @ bci:62  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #12 L[4]=RBP L[5]=rsp + #8 L[6]=rsp + #16 L[7]=#0
        # OopMap{[8]=NarrowOop [16]=Oop off=1408}
580   	int3	# ShouldNotReachHere
580
585   B81: #	N834 &lt;- B2  Freq: 1.01084e-06
585   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
58b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::replace @ bci:9  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL
        # OopMap{off=1424}
590   	int3	# ShouldNotReachHere
590
595   B82: #	B84 &lt;- B73  Freq: 9.87562e-10
595   	# exception oop is in rax; no code emitted
595   	movq    RSI, RAX	# spill
598   	jmp,s   B84
598
59a   B83: #	B84 &lt;- B75  Freq: 9.77656e-10
59a   	# exception oop is in rax; no code emitted
59a   	movq    RSI, RAX	# spill
59a
59d   B84: #	N834 &lt;- B82 B83  Freq: 1.96522e-09
59d   	addq    rsp, 48	# Destroy frame
	popq   rbp

5a2   	jmp     rethrow_stub
5a2

</opto_assembly>
<writer thread='139875516786432'/>
<dependency_failed type='leaf_type' ctxk='java/util/ArrayList' witness='org/openjdk/jcstress/util/NonNullArrayList' stamp='6.539'/>
<dependency_failed type='leaf_type' ctxk='java/util/ArrayList' witness='org/openjdk/jcstress/util/NonNullArrayList' stamp='6.539'/>
<dependency_failed type='leaf_type' ctxk='java/util/ArrayList' witness='org/openjdk/jcstress/util/NonNullArrayList' stamp='6.539'/>
<dependency_failed type='leaf_type' ctxk='java/util/ArrayList' witness='org/openjdk/jcstress/util/NonNullArrayList' stamp='6.539'/>
<dependency_failed type='leaf_type' ctxk='java/util/ArrayList' witness='org/openjdk/jcstress/util/NonNullArrayList' stamp='6.539'/>
<dependency_failed type='leaf_type' ctxk='java/util/ArrayList' witness='org/openjdk/jcstress/util/NonNullArrayList' stamp='6.539'/>
<dependency_failed type='leaf_type' ctxk='java/util/ArrayList' witness='org/openjdk/jcstress/util/NonNullArrayList' stamp='6.539'/>
<dependency_failed type='leaf_type' ctxk='java/util/ArrayList' witness='org/openjdk/jcstress/util/NonNullArrayList' stamp='6.539'/>
<dependency_failed type='leaf_type' ctxk='java/util/ArrayList' witness='org/openjdk/jcstress/util/NonNullArrayList' stamp='6.539'/>
<dependency_failed type='leaf_type' ctxk='java/util/ArrayList' witness='org/openjdk/jcstress/util/NonNullArrayList' stamp='6.539'/>
<dependency_failed type='leaf_type' ctxk='java/util/ArrayList' witness='org/openjdk/jcstress/util/NonNullArrayList' stamp='6.539'/>
<dependency_failed type='leaf_type' ctxk='java/util/ArrayList' witness='org/openjdk/jcstress/util/NonNullArrayList' stamp='6.539'/>
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
<opto_assembly compile_id='478'>
{method}
 - this oop:          0x00007f37559ab220
 - method holder:     &apos;java/util/regex/Matcher&apos;
 - constants:         0x00007f37559a98c8 constant pool [380] {0x00007f37559a98c8} for &apos;java/util/regex/Matcher&apos; cache=0x00007f37559ad488
 - access:            0xc1000001  public 
 - name:              &apos;reset&apos;
 - signature:         &apos;()Ljava/util/regex/Matcher;&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef680: 0xb0000000 i2c: 0x00007f3758b11620 c2i: 0x00007f3758b1175a c2iUV: 0x00007f3758b1172d
 - compiled entry     0x00007f3758c84ae0
 - code size:         83
 - code start:        0x00007f37559ab190
 - code end (excl):   0x00007f37559ab1e3
 - method data:       0x00007f3755b24fb0
 - checked ex length: 0
 - linenumber start:  0x00007f37559ab1e3
 - localvar length:   3
 - localvar start:    0x00007f37559ab1fa
 - compiled code: nmethod   6733  286       3       java.util.regex.Matcher::reset (83 bytes)
#
#  java/util/regex/Matcher:exact * ( java/util/regex/Matcher:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Matcher:NotNull:exact *
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N209: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B18 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (296 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movq    RBX, RSI	# spill
02f   	movl    [RSI + #32 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/util/regex/Matcher.last
033   	movl    [RSI + #28 (8-bit)], #-1	# int ! Field: java/util/regex/Matcher.first
03a   	movl    [RSI + #36 (8-bit)], #-1	# int ! Field: java/util/regex/Matcher.oldLast
041   	movl    RSI, #-10	# int
046   	movl    R10, [RBX + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
04a   	movl    R8, [R10 + #12 (8-bit)]	# range
04e   	NullCheck R10
04e
04e   B2: #	B6 B3 &lt;- B1  Freq: 0.999999
04e   	decode_heap_oop_not_null R11,R10
051   	testl   R8, R8
054   	jle,s   B6  P=0.047619 C=34524.000000
054
056   B3: #	B16 B4 &lt;- B2  Freq: 0.95238
056   	movl    R9, R8	# spill
059   	decl    R9	# int
05c   	leaq    RDI, [R10 + #16 (8-bit)]	# ptr off8narrow
060   	testl  R8, R8	# unsigned
063   	jbe,u  B16  P=0.000001 C=-1.000000
063
069   B4: #	B16 B5 &lt;- B3  Freq: 0.952379
069   	cmpl    R9, R8	# unsigned
06c   	jnb,u  B16  P=0.000001 C=-1.000000
06c
072   B5: #	B6 &lt;- B4  Freq: 0.952378
072   	movslq  RDX, R8	# i2l
075   	movl    RSI, #-1	# int
07a   	call_leaf_nofp,runtime  arrayof_jint_fill
        No JVM State Info
        # 
087
087   B6: #	B19 B7 &lt;- B5 B2  Freq: 0.999997
087   	movl    RSI, #-10	# int
08c   	movl    R10, [RBX + #60 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.locals
090   	decode_heap_oop_not_null R11,R10
093   	movl    R8, [R10 + #12 (8-bit)]	# range
097   	NullCheck R10
097
097   B7: #	B12 B8 &lt;- B6  Freq: 0.999996
097   	movslq  RDX, R8	# i2l
09a   	testl   R8, R8
09d   	jg,s   B12  P=0.177177 C=1998.000000
09d
09f   B8: #	B20 B9 &lt;- B14 B7  Freq: 0.999996
09f   	movl    [RBX + #40 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/util/regex/Matcher.lastAppendPosition
0a3   	movl    RBP, [RBX + #56 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.text
0a6   	movl    [RBX + #12 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/util/regex/Matcher.from
0aa   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
0ae   	NullCheck RBP
0ae
0ae   B9: #	B15 B10 &lt;- B8  Freq: 0.999995
0ae   	movl    RSI, #-34	# int
0b3   	decode_heap_oop_not_null R10,RBP
0b6   	cmpl    R11, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
0bd   	jne,us  B15  P=0.000001 C=-1.000000
0bd
0bf   B10: #	B21 B11 &lt;- B9  Freq: 0.999994
0bf   	# checkcastPP of R10
0bf   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
0c3   	movl    R11, [R10 + #12 (8-bit)]	# range
0c7   	NullCheck R10
0c7
0c7   B11: #	N209 &lt;- B10  Freq: 0.999993
0c7   	movl    [RBX + #16 (8-bit)], R11	# int ! Field: java/util/regex/Matcher.to
0cb   	movq    RAX, RBX	# spill
0ce   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0d9   	ret
0d9
0da   B12: #	B17 B13 &lt;- B7  Freq: 0.177176
0da   	movl    R9, R8	# spill
0dd   	decl    R9	# int
0e0   	movl    RSI, #-122	# int
0e5   	testl  R8, R8	# unsigned
0e8   	jbe,us  B17  P=0.000001 C=-1.000000
0e8
0ea   B13: #	B17 B14 &lt;- B12  Freq: 0.177176
0ea   	cmpl    R9, R8	# unsigned
0ed   	jnb,us  B17  P=0.000001 C=-1.000000
0ed
0ef   B14: #	B8 &lt;- B13  Freq: 0.177176
0ef   	leaq    RDI, [R10 + #16 (8-bit)]	# ptr off8narrow
0f3   	movl    RSI, #-1	# int
0f8   	call_leaf_nofp,runtime  arrayof_jint_fill
        No JVM State Info
        # 
105   	jmp,s   B8
105
107   B15: #	N209 &lt;- B9  Freq: 9.99995e-07
107   	movq    [rsp + #8], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
10f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::getTextLength @ bci:4  L[0]=_ STK[0]=RBP
        # java.util.regex.Matcher::reset @ bci:75  L[0]=rsp + #8 L[1]=_ STK[0]=rsp + #8
        # OopMap{rbp=NarrowOop [8]=Oop off=276}
114   	int3	# ShouldNotReachHere
114
119   B16: #	N209 &lt;- B4 B3  Freq: 1.91741e-06
119   	movq    RBP, RBX	# spill
11c   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
123   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::reset @ bci:26  L[0]=RBP L[1]=#0
        # OopMap{rbp=Oop off=296}
128   	int3	# ShouldNotReachHere
128
12d   B17: #	N209 &lt;- B13 B12  Freq: 3.56706e-07
12d   	movq    RBP, RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
133   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::reset @ bci:50  L[0]=RBP L[1]=#0
        # OopMap{rbp=Oop off=312}
138   	int3	# ShouldNotReachHere
138
13d   B18: #	N209 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
13f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::reset @ bci:22  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=324}
144   	int3	# ShouldNotReachHere
144
149   B19: #	N209 &lt;- B6  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
14b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::reset @ bci:46  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=336}
150   	int3	# ShouldNotReachHere
150
155   B20: #	N209 &lt;- B8  Freq: 1.01327e-06
155   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
15b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::getTextLength @ bci:4  L[0]=_ STK[0]=#NULL
        # java.util.regex.Matcher::reset @ bci:75  L[0]=_ L[1]=_ STK[0]=_
        # OopMap{off=352}
160   	int3	# ShouldNotReachHere
160
165   B21: #	N209 &lt;- B10  Freq: 1.01327e-06
165   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
16b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # java.util.regex.Matcher::getTextLength @ bci:4  L[0]=_
        # java.util.regex.Matcher::reset @ bci:75  L[0]=_ L[1]=_ STK[0]=_
        # OopMap{off=368}
170   	int3	# ShouldNotReachHere
170

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='491'>
{method}
 - this oop:          0x00007f37559472e0
 - method holder:     &apos;java/util/regex/Pattern$CharProperty&apos;
 - constants:         0x00007f3755946cd8 constant pool [88] {0x00007f3755946cd8} for &apos;java/util/regex/Pattern$CharProperty&apos; cache=0x00007f3755947500
 - access:            0x81000000  
 - name:              &apos;match&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z&apos;
 - max stack:         5
 - max locals:        5
 - size of params:    4
 - method size:       12
 - highest level:     4
 - vtable index:      9
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37681c7d78: 0xbbab0000 i2c: 0x00007f3758b26ce0 c2i: 0x00007f3758b26e25 c2iUV: 0x00007f3758b26df8
 - compiled entry     0x00007f3758b26e25
 - code size:         56
 - code start:        0x00007f3755947258
 - code end (excl):   0x00007f3755947290
 - method data:       0x00007f3755b41c18
 - checked ex length: 0
 - linenumber start:  0x00007f3755947290
 - localvar length:   5
 - localvar start:    0x00007f37559472a2
#
#  bool ( java/util/regex/Pattern$CharProperty:NotNull *, java/util/regex/Matcher:exact *, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$CharProperty:NotNull *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/CharSequence *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N778: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B61 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (360 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movq    RBX, R8	# spill
02f   	movq    R11, RSI	# spill
032   	movl    R9, [RDX + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
036   	NullCheck RDX
036
036   B2: #	B22 B3 &lt;- B1  Freq: 0.999999
036   	movl    R8, RCX	# spill
039   	cmpl    RCX, R9
03c   	jge     B22  P=0.018798 C=2693581.000000
03c
042   B3: #	B62 B4 &lt;- B2  Freq: 0.981201
042   	movl    R9, [RBX + #8 (8-bit)]	# compressed klass ptr
046   	NullCheck RBX
046
046   B4: #	B45 B5 &lt;- B3  Freq: 0.9812
046   	movl    RSI, #-34	# int
04b   	cmpl    R9, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
052   	jne,u  B45  P=0.000001 C=-1.000000
052
058   B5: #	B47 B6 &lt;- B4  Freq: 0.981199
058   	movq    RAX, RBX	# spill
05b   	# checkcastPP of RAX
05b   	testl   RCX, RCX
05d   	jl     B47  P=0.000000 C=7895.000000
05d
063   B6: #	B63 B7 &lt;- B5  Freq: 0.981199
063   	movl    RSI, #-10	# int
068   	movl    R10, [RAX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
06c   	movl    R9, [R10 + #12 (8-bit)]	# range
070   	NullCheck R10
070
070   B7: #	B48 B8 &lt;- B6  Freq: 0.981198
070   	cmpl    RCX, R9
073   	jge     B48  P=0.000000 C=7895.000000
073
079   B8: #	B44 B9 &lt;- B7  Freq: 0.981197
079   	movl    R14, [RDX + #60 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.locals
07d   	cmpl    RCX, R9	# unsigned
080   	jnb,u  B44  P=0.000001 C=-1.000000
080
086   B9: #	B49 B10 &lt;- B8  Freq: 0.981196
086   	movzwl  R9, [R10 + #16 + RCX &lt;&lt; #1]	# ushort/char
08c   	movl    RSI, #-58	# int
091   	movl    R10, R9	# spill
094   	orl     R10, #1	# int
098   	movq    RBP, R11	# spill
09b   	movl    RDI, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
09f   	cmpl    R9, #55296
0a6   	jge     B49  P=0.000000 C=613346.000000
0a6
0ac   B10: #	B23 B11 &lt;- B9  Freq: 0.981196
0ac   	movl    RCX, [R11 + #8 (8-bit)]	# compressed klass ptr
0b0   	movl    R11, R8	# spill
0b3   	incl    R11	# int
0b6   	cmpl    RCX, narrowklass: precise klass java/util/regex/Pattern$Dot: 0x00007f372413e050:Constant:exact *	# compressed klass ptr
0bc   	jne,u  B23  P=0.006880 C=-1.000000
0bc
0c2   B11: #	B50 B12 &lt;- B10  Freq: 0.974445
0c2   	# checkcastPP of RBP
0c2   	cmpl    R9, #10
0c6   	je     B50  P=0.000000 C=2643348.000000
0c6
0cc   B12: #	B51 B13 &lt;- B11  Freq: 0.974445
0cc   	movl    RCX, [RDX + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
0cf   	movl    RSI, #-155	# int
0d4   	cmpl    R9, #13
0d8   	je     B51  P=0.000000 C=2643348.000000
0d8
0de   B13: #	B52 B14 &lt;- B12  Freq: 0.974444
0de   	movl    RBX, [RDX + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
0e1   	cmpl    R10, #8233
0e8   	je     B52  P=0.000000 C=2643348.000000
0e8
0ee   B14: #	B53 B15 &lt;- B13  Freq: 0.974444
0ee   	cmpl    R9, #133
0f5   	je     B53  P=0.000000 C=2643348.000000
0f5
0fb   B15: #	B64 B16 &lt;- B14 B26  Freq: 0.981194
0fb   	movl    R8, [RDI + #8 (8-bit)]	# compressed klass ptr
0ff   	NullCheck RDI
0ff
0ff   B16: #	B27 B17 &lt;- B15  Freq: 0.981193
0ff   	movl    RSI, #-58	# int
104   	cmpl    R8, narrowklass: precise klass java/util/regex/Pattern$Node: 0x00007f372413e1f0:Constant:exact *	# compressed klass ptr
10b   	jne,u  B27  P=0.006880 C=-1.000000
10b
111   B17: #	B65 B18 &lt;- B16  Freq: 0.974442
111   	movl    [RDX + #32 (8-bit)], R11	# int ! Field: java/util/regex/Matcher.last
115   	movl    R8, [RBX + #12 (8-bit)]	# range
119   	NullCheck RBX
119
119   B18: #	B46 B19 &lt;- B17  Freq: 0.974441
119   	cmpl    R8, #1	# unsigned
11d   	jbe,u  B46  P=0.000001 C=-1.000000
11d
123   B19: #	B20 &lt;- B18  Freq: 0.97444
123   	movl    [RBX + #16 (8-bit)], RCX	# int
126   	movl    [RBX + #20 (8-bit)], R11	# int
126
12a   B20: #	B21 &lt;- B19 B35 B40  Freq: 0.980853
12a   	movl    RAX, #1	# int
12a
12f   B21: #	N778 &lt;- B20 B22  Freq: 0.999651
12f   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

13a   	ret
13a
13b   B22: #	B21 &lt;- B2  Freq: 0.0187976
13b   	movb    [RDX + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
13f   	xorl    RAX, RAX	# int
141   	jmp,s   B21
141
143   B23: #	B55 B24 &lt;- B10  Freq: 0.0067505
143   	cmpl    RCX, narrowklass: precise klass java/util/regex/Pattern$5: 0x00007f372413e120:Constant:exact *	# compressed klass ptr
149   	jne,u  B55  P=0.000001 C=-1.000000
149
14f   B24: #	B68 B25 &lt;- B23  Freq: 0.00675049
14f   	movl    [rsp + #32], R11	# spill
154   	movl    [rsp + #12], R9	# spill
159   	movq    [rsp + #24], RAX	# spill
15e   	movq    [rsp + #16], RBP	# spill
163   	movl    [rsp + #8], R8	# spill
168   	movq    [rsp + #0], RDX	# spill
16c   	# checkcastPP of RBP
16c   	movl    R11, [RBP + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$5.val$lhs
170   	decode_heap_oop RSI,R11
1fb   	movl    RDX, R9	# spill
      	nop 	# 3 bytes pad for loops and calls
201   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$CharProperty::isSatisfiedBy
        # java.util.regex.Pattern$5::isSatisfiedBy @ bci:5  L[0]=RBP L[1]=rsp + #12
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #24 L[4]=rsp + #12
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=528}
210
210   B25: #	B41 B26 &lt;- B24  Freq: 0.00675035
        # Block is sole successor of call
210   	movl    R10, [RBP + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$5.val$rhs
214   	decode_heap_oop RSI,R10
29f   	testl   RAX, RAX
2a1   	je     B41  P=0.100000 C=-1.000000
2a1
2a7   B26: #	B15 &lt;- B42 B25  Freq: 0.00675034
2a7   	movq    RDX, [rsp + #0]	# spill
2ab   	movl    RBX, [RDX + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
2ae   	movl    R14, [RDX + #60 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.locals
2b2   	movl    RCX, [RDX + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
2b5   	movq    R10, [rsp + #16]	# spill
2ba   	movl    RDI, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
2be   	movq    RAX, [rsp + #24]	# spill
2c3   	movl    R11, [rsp + #32]	# spill
2c8   	jmp     B15
2c8
2cd   B27: #	B56 B28 &lt;- B16  Freq: 0.00675047
2cd   	cmpl    R8, narrowklass: precise klass java/util/regex/Pattern$GroupTail: 0x00007f372413e2c0:Constant:exact *	# compressed klass ptr
2d4   	jne,u  B56  P=0.000001 C=-1.000000
2d4
2da   B28: #	B66 B29 &lt;- B27  Freq: 0.00675047
2da   	decode_heap_oop_not_null R9,RDI
2dd   	# checkcastPP of R9
2dd   	movl    R8, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
2e1   	decode_heap_oop RDI,R8
36c   	movl    RCX, [R9 + #16 (8-bit)]	# int ! Field: java/util/regex/Pattern$GroupTail.localIndex
370   	movl    RSI, #-10	# int
375   	movl    R10, [R14 + #12 (8-bit)]	# range
379   	NullCheck R14
379
379   B29: #	B54 B30 &lt;- B28  Freq: 0.00675046
379   	movl    R8, [R9 + #20 (8-bit)]	# int ! Field: java/util/regex/Pattern$GroupTail.groupIndex
37d   	cmpl    RCX, R10	# unsigned
380   	jnb,u  B54  P=0.000001 C=-1.000000
380
386   B30: #	B40 B31 &lt;- B29  Freq: 0.00675045
386   	movl    RCX, [R14 + #16 + RCX &lt;&lt; #2]	# int
38b   	testl   RCX, RCX
38d   	jl     B40  P=0.500000 C=-1.000000
38d
393   B31: #	B72 B32 &lt;- B30  Freq: 0.00337523
393   	movl    R10, R8	# spill
396   	incl    R10	# int
399   	movl    RSI, [RBX + #12 (8-bit)]	# range
39c   	NullCheck RBX
39c
39c   B32: #	B57 B33 &lt;- B31  Freq: 0.00337522
39c   	cmpl    R8, RSI	# unsigned
39f   	jnb,u  B57  P=0.000001 C=-1.000000
39f
3a5   B33: #	B58 B34 &lt;- B32  Freq: 0.00337522
3a5   	movl    RBP, [RBX + #16 + R8 &lt;&lt; #2]	# int
3aa   	movslq  R13, R8	# i2l
3ad   	cmpl    R10, RSI	# unsigned
3b0   	jnb,u  B58  P=0.000001 C=-1.000000
3b0
3b6   B34: #	B70 B35 &lt;- B33  Freq: 0.00337522
3b6   	movl    [rsp + #8], RBP	# spill
3ba   	movq    [rsp + #0], R9	# spill
3be   	movq    RBP, RDX	# spill
3c1   	movl    R9, [RBX + #20 + R13 &lt;&lt; #2]	# int
3c6   	movl    [rsp + #12], R9	# spill
3cb   	movl    [RBX + #16 + R8 &lt;&lt; #2], RCX	# int
3d0   	movl    [RBX + #20 + R13 &lt;&lt; #2], R11	# int
3d5   	movl    RCX, R11	# spill
3d8   	movq    R8, RAX	# spill
3db   	movq    RSI, RDI	# spill
      	nop 	# 3 bytes pad for loops and calls
3e1   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$Node::match
        # java.util.regex.Pattern$GroupTail::match @ bci:70  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=rsp + #12
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{rbp=Oop [0]=Oop off=1008}
3f0
3f0   B35: #	B20 B36 &lt;- B34  Freq: 0.00337515
        # Block is sole successor of call
3f0   	movq    R8, [rsp + #0]	# spill
3f4   	movl    R10, [R8 + #20 (8-bit)]	# int ! Field: java/util/regex/Pattern$GroupTail.groupIndex
3f8   	testl   RAX, RAX
3fa   	jne     B20  P=0.900000 C=-1.000000
3fa
400   B36: #	B73 B37 &lt;- B35  Freq: 0.000337515
400   	movq    RCX, RBP	# spill
403   	movl    R11, [RCX + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
407   	movl    R9, [R11 + #12 (8-bit)]	# range
40b   	NullCheck R11
40b
40b   B37: #	B59 B38 &lt;- B36  Freq: 0.000337515
40b   	cmpl    R10, R9	# unsigned
40e   	jnb,u  B59  P=0.000001 C=-1.000000
40e
414   B38: #	B60 B39 &lt;- B37  Freq: 0.000337514
414   	movl    R8, [rsp + #8]	# spill
419   	movl    [R11 + #16 + R10 &lt;&lt; #2], R8	# int
41e   	movl    RSI, #-155	# int
423   	movl    RBP, R10	# spill
426   	incl    RBP	# int
428   	cmpl    RBP, R9	# unsigned
42b   	jnb,u  B60  P=0.000001 C=-1.000000
42b
431   B39: #	N778 &lt;- B38  Freq: 0.000337514
431   	movslq  R10, R10	# i2l
434   	movl    R9, [rsp + #12]	# spill
439   	movl    [R11 + #20 + R10 &lt;&lt; #2], R9	# int
      	nop 	# 1 bytes pad for loops and calls
43f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:40  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#0
        # OopMap{off=1092}
444   	int3	# ShouldNotReachHere
444
449   B40: #	B20 &lt;- B30  Freq: 0.00337523
449   	movl    [RDX + #32 (8-bit)], R11	# int ! Field: java/util/regex/Matcher.last
44d   	jmp     B20
44d
452   B41: #	B67 B42 &lt;- B25  Freq: 0.000675036
452   	movl    RDX, [rsp + #12]	# spill
      	nop 	# 3 bytes pad for loops and calls
459   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$CharProperty::isSatisfiedBy
        # java.util.regex.Pattern$5::isSatisfiedBy @ bci:16  L[0]=_ L[1]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #24 L[4]=rsp + #12
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=1128}
468
468   B42: #	B26 B43 &lt;- B41  Freq: 0.000675022
        # Block is sole successor of call
468   	testl   RAX, RAX
46a   	jne     B26  P=0.999999 C=-1.000000
46a
470   B43: #	N778 &lt;- B42  Freq: 6.83986e-10
470   	movq    RBP, [rsp + #16]	# spill
475   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
47b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:21  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #24 L[4]=rsp + #12 STK[0]=#0
        # OopMap{rbp=Oop [0]=Oop [24]=Oop off=1152}
480   	int3	# ShouldNotReachHere
480
485   B44: #	N778 &lt;- B8  Freq: 9.94227e-07
485   	movq    RBP, R11	# spill
488   	movq    [rsp + #0], RDX	# spill
48c   	movq    [rsp + #16], RBX	# spill
491   	movl    [rsp + #12], RCX	# spill
495   	movl    [rsp + #24], RCX	# spill
499   	movq    [rsp + #32], RAX	# spill
49e   	movl    [rsp + #28], R10	# spill
4a3   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
4ab   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #28 STK[1]=rsp + #12
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #24 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [28]=NarrowOop [32]=Oop off=1200}
4b0   	int3	# ShouldNotReachHere
4b0
4b5   B45: #	N778 &lt;- B4  Freq: 9.812e-07
4b5   	movq    RBP, R11	# spill
4b8   	movq    [rsp + #0], RDX	# spill
4bc   	movq    [rsp + #24], RBX	# spill
4c1   	movl    [rsp + #12], RCX	# spill
4c5   	movq    [rsp + #32], RBX	# spill
4ca   	movl    [rsp + #40], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
4cf   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=_ L[3]=_ STK[0]=rsp + #24 STK[1]=rsp + #12
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #24 L[4]=_
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [32]=Oop off=1236}
4d4   	int3	# ShouldNotReachHere
4d4
4d9   B46: #	N778 &lt;- B18  Freq: 9.74441e-07
4d9   	movq    RBP, RDX	# spill
4dc   	movl    [rsp + #0], RBX	# spill
4df   	movl    [rsp + #4], RCX	# spill
4e3   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
4eb   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=RBP L[2]=_ L[3]=_ STK[0]=rsp + #0 STK[1]=#0 STK[2]=rsp + #4
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{rbp=Oop [0]=NarrowOop off=1264}
4f0   	int3	# ShouldNotReachHere
4f0
4f5   B47: #	N778 &lt;- B5  Freq: 4.906e-07
4f5   	movq    RBP, R11	# spill
4f8   	movq    [rsp + #0], RDX	# spill
4fc   	movq    [rsp + #16], RBX	# spill
501   	movl    [rsp + #12], RCX	# spill
505   	movl    [rsp + #24], RCX	# spill
509   	movq    [rsp + #40], RAX	# spill
50e   	movl    RSI, #-155	# int
513   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #40 L[1]=rsp + #12 STK[0]=rsp + #12
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [40]=Oop off=1304}
518   	int3	# ShouldNotReachHere
518
51d   B48: #	N778 &lt;- B7  Freq: 4.67872e-07
51d   	movq    RBP, R11	# spill
520   	movq    [rsp + #0], RDX	# spill
524   	movq    [rsp + #16], RBX	# spill
529   	movl    [rsp + #12], RCX	# spill
52d   	movl    [rsp + #24], RCX	# spill
531   	movq    [rsp + #40], RAX	# spill
536   	movl    [rsp + #48], R9	# spill
53b   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
543   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #40 L[1]=rsp + #12 STK[0]=rsp + #12 STK[1]=rsp + #48
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [40]=Oop off=1352}
548   	int3	# ShouldNotReachHere
548
54d   B49: #	N778 &lt;- B9  Freq: 4.67871e-07
54d   	movq    [rsp + #0], RDX	# spill
551   	movq    [rsp + #16], RBX	# spill
556   	movl    [rsp + #12], RCX	# spill
55a   	movq    [rsp + #24], RAX	# spill
55f   	movl    [rsp + #36], R9	# spill
564   	movl    [rsp + #40], R9	# spill
569   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
56f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #40 STK[0]=rsp + #36 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #24 L[1]=rsp + #12 L[2]=rsp + #36 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=1396}
574   	int3	# ShouldNotReachHere
574
579   B50: #	N778 &lt;- B11  Freq: 4.64652e-07
579   	movq    [rsp + #0], RDX	# spill
57d   	movl    [rsp + #8], R8	# spill
582   	movl    RSI, #-155	# int
587   	movq    [rsp + #16], RAX	# spill
58c   	movl    [rsp + #24], R9	# spill
591   	movl    [rsp + #28], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
597   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #24 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=1436}
59c   	int3	# ShouldNotReachHere
59c
5a1   B51: #	N778 &lt;- B12  Freq: 4.64652e-07
5a1   	movq    [rsp + #0], RDX	# spill
5a5   	movl    [rsp + #8], R8	# spill
5aa   	movq    [rsp + #16], RAX	# spill
5af   	movl    [rsp + #24], R9	# spill
5b4   	movl    [rsp + #28], R9	# spill
      	nop 	# 2 bytes pad for loops and calls
5bb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #24 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=1472}
5c0   	int3	# ShouldNotReachHere
5c0
5c5   B52: #	N778 &lt;- B13  Freq: 4.64651e-07
5c5   	movq    [rsp + #0], RDX	# spill
5c9   	movl    [rsp + #8], R8	# spill
5ce   	movq    [rsp + #16], RAX	# spill
5d3   	movl    [rsp + #24], R9	# spill
5d8   	movl    [rsp + #28], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
5df   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #24 STK[0]=rsp + #28 STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=1508}
5e4   	int3	# ShouldNotReachHere
5e4
5e9   B53: #	N778 &lt;- B14  Freq: 4.64651e-07
5e9   	movq    [rsp + #0], RDX	# spill
5ed   	movl    [rsp + #8], R8	# spill
5f2   	movq    [rsp + #16], RAX	# spill
5f7   	movl    [rsp + #24], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
5ff   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=1540}
604   	int3	# ShouldNotReachHere
604
609   B54: #	N778 &lt;- B29  Freq: 6.8401e-09
609   	movq    RBP, RDX	# spill
60c   	movl    RSI, #-28	# int
611   	movq    [rsp + #0], R9	# spill
615   	movl    [rsp + #8], R11	# spill
61a   	movq    [rsp + #16], RAX	# spill
61f   	movl    [rsp + #12], R14	# spill
624   	movl    [rsp + #24], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
62b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$GroupTail::match @ bci:8  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #12 STK[1]=rsp + #24
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{rbp=Oop [0]=Oop [12]=NarrowOop [16]=Oop off=1584}
630   	int3	# ShouldNotReachHere
630
635   B55: #	N778 &lt;- B23  Freq: 6.7505e-09
635   	movq    [rsp + #0], RDX	# spill
639   	movl    [rsp + #8], R8	# spill
63e   	movq    [rsp + #24], RAX	# spill
643   	movl    [rsp + #32], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
64b   	call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #24 L[4]=rsp + #32 STK[0]=RBP STK[1]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [24]=Oop off=1616}
650   	int3	# ShouldNotReachHere
650
655   B56: #	N778 &lt;- B27  Freq: 6.75047e-09
655   	movq    RBP, RDX	# spill
658   	movl    [rsp + #0], RDI	# spill
65b   	movl    [rsp + #4], R11	# spill
660   	movq    [rsp + #8], RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
667   	call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #0 STK[1]=RBP STK[2]=rsp + #4 STK[3]=rsp + #8
        # OopMap{rbp=Oop [0]=NarrowOop [8]=Oop off=1644}
66c   	int3	# ShouldNotReachHere
66c
671   B57: #	N778 &lt;- B32  Freq: 3.42004e-09
671   	movl    RSI, #-28	# int
676   	movq    RBP, RDX	# spill
679   	movq    [rsp + #0], R9	# spill
67d   	movl    [rsp + #8], R11	# spill
682   	movq    [rsp + #16], RAX	# spill
687   	movl    [rsp + #12], RCX	# spill
68b   	movl    [rsp + #24], RBX	# spill
68f   	movl    [rsp + #28], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
697   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$GroupTail::match @ bci:24  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #12 L[5]=_ L[6]=_ STK[0]=rsp + #24 STK[1]=rsp + #28
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=NarrowOop off=1692}
69c   	int3	# ShouldNotReachHere
69c
6a1   B58: #	N778 &lt;- B33  Freq: 3.42004e-09
6a1   	movl    RSI, #-28	# int
6a6   	movq    [rsp + #0], RDX	# spill
6aa   	movq    [rsp + #8], R9	# spill
6af   	movl    [rsp + #16], R11	# spill
6b4   	movq    [rsp + #24], RAX	# spill
6b9   	movl    [rsp + #20], RCX	# spill
6bd   	movl    [rsp + #32], RBX	# spill
6c1   	movl    [rsp + #36], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
6c7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$GroupTail::match @ bci:37  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #16 L[3]=rsp + #24 L[4]=rsp + #20 L[5]=RBP L[6]=_ STK[0]=rsp + #32 STK[1]=rsp + #36
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{[0]=Oop [8]=Oop [24]=Oop [32]=NarrowOop off=1740}
6cc   	int3	# ShouldNotReachHere
6cc
6d1   B59: #	N778 &lt;- B37  Freq: 3.41996e-10
6d1   	movl    RSI, #-28	# int
6d6   	movl    [rsp + #16], R11	# spill
6db   	movl    [rsp + #20], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
6e3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$GroupTail::match @ bci:88  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #12 STK[0]=rsp + #16 STK[1]=rsp + #20 STK[2]=rsp + #8
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop off=1768}
6e8   	int3	# ShouldNotReachHere
6e8
6ed   B60: #	N778 &lt;- B38  Freq: 3.41996e-10
6ed   	movl    RSI, #-28	# int
6f2   	movl    [rsp + #0], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
6f7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$GroupTail::match @ bci:101  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #0 STK[1]=RBP STK[2]=rsp + #12
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{[0]=NarrowOop off=1788}
6fc   	int3	# ShouldNotReachHere
6fc
701   B61: #	N778 &lt;- B1  Freq: 1.01328e-06
701   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
707   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1804}
70c   	int3	# ShouldNotReachHere
70c
711   B62: #	N778 &lt;- B3  Freq: 9.94231e-07
711   	movl    RSI, #-10	# int
716   	movl    RBP, RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
71b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=1824}
720   	int3	# ShouldNotReachHere
720
725   B63: #	N778 &lt;- B6  Freq: 9.94228e-07
      	nop 	# 2 bytes pad for loops and calls
727   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=1836}
72c   	int3	# ShouldNotReachHere
72c
731   B64: #	N778 &lt;- B15  Freq: 9.94223e-07
731   	movq    RBP, RDX	# spill
734   	movl    RSI, #-10	# int
739   	movl    [rsp + #0], R11	# spill
73d   	movq    [rsp + #8], RAX	# spill
      	nop 	# 1 bytes pad for loops and calls
743   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=1864}
748   	int3	# ShouldNotReachHere
748
74d   B65: #	N778 &lt;- B17  Freq: 9.87382e-07
74d   	movl    RSI, #-10	# int
752   	movl    RBP, RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
757   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=1884}
75c   	int3	# ShouldNotReachHere
75c
761   B66: #	N778 &lt;- B28  Freq: 6.84011e-09
761   	movl    RBP, RCX	# spill
763   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$GroupTail::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=1896}
768   	int3	# ShouldNotReachHere
768
76d   B67: #	B69 &lt;- B41  Freq: 6.75036e-09
76d   	# exception oop is in rax; no code emitted
76d   	jmp,s   B69
76d
76f   B68: #	B69 &lt;- B24  Freq: 6.75049e-08
76f   	# exception oop is in rax; no code emitted
76f
76f   B69: #	B71 &lt;- B68 B67  Freq: 7.42552e-08
76f   	movq    RSI, RAX	# spill
772   	jmp,s   B71
772
774   B70: #	B71 &lt;- B34  Freq: 3.37522e-08
774   	# exception oop is in rax; no code emitted
774   	movq    RSI, RAX	# spill
774
777   B71: #	N778 &lt;- B69 B70  Freq: 1.08007e-07
777   	addq    rsp, 80	# Destroy frame
	popq   rbp

77c   	jmp     rethrow_stub
77c
781   B72: #	N778 &lt;- B31  Freq: 3.42005e-09
781   	movl    RSI, #-10	# int
786   	movl    RBP, R8	# spill
      	nop 	# 2 bytes pad for loops and calls
78b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$GroupTail::match @ bci:24  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=1936}
790   	int3	# ShouldNotReachHere
790
795   B73: #	N778 &lt;- B36  Freq: 3.41997e-10
795   	movl    RSI, #-10	# int
79a   	movl    RBP, R10	# spill
      	nop 	# 2 bytes pad for loops and calls
79f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$GroupTail::match @ bci:88  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #8
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=1956}
7a4   	int3	# ShouldNotReachHere
7a4

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='494'>
{method}
 - this oop:          0x00007f3755945aa8
 - method holder:     &apos;java/util/regex/Pattern$LastNode&apos;
 - constants:         0x00007f3755945758 constant pool [48] {0x00007f3755945758} for &apos;java/util/regex/Pattern$LastNode&apos; cache=0x00007f3755945b28
 - access:            0x81000000  
 - name:              &apos;match&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z&apos;
 - max stack:         4
 - max locals:        4
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      7
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37681c7d78: 0xbbab0000 i2c: 0x00007f3758b26ce0 c2i: 0x00007f3758b26e25 c2iUV: 0x00007f3758b26df8
 - compiled entry     0x00007f3758c7b660
 - code size:         45
 - code start:        0x00007f3755945a38
 - code end (excl):   0x00007f3755945a65
 - method data:       0x00007f3755b22788
 - checked ex length: 0
 - linenumber start:  0x00007f3755945a65
 - localvar length:   4
 - localvar start:    0x00007f3755945a76
 - compiled code: nmethod   7044  262       3       java.util.regex.Pattern$LastNode::match (45 bytes)
#
#  bool ( java/util/regex/Pattern$LastNode:NotNull *, java/util/regex/Matcher:exact *, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$LastNode:NotNull *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/CharSequence *
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N87: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B8 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (144 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    RSI, #-10	# int
031   	movl    R10, [RDX + #24 (8-bit)]	# int ! Field: java/util/regex/Matcher.acceptMode
035   	NullCheck RDX
035
035   B2: #	B7 B3 &lt;- B1  Freq: 0.999999
035   	movl    R9, [RDX + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
039   	movl    RBP, [RDX + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
03c   	cmpl    R10, #1
040   	je,s   B7  P=0.000000 C=11827.000000
040
042   B3: #	B9 B4 &lt;- B2  Freq: 0.999999
042   	movl    [RDX + #32 (8-bit)], RCX	# int ! Field: java/util/regex/Matcher.last
045   	movl    R11, [R9 + #12 (8-bit)]	# range
049   	NullCheck R9
049
049   B4: #	B6 B5 &lt;- B3  Freq: 0.999997
049   	movl    RAX, #1	# int
04e   	movl    RSI, #-28	# int
053   	cmpl    R11, #1	# unsigned
057   	jbe,us  B6  P=0.000001 C=-1.000000
057
059   B5: #	N87 &lt;- B4  Freq: 0.999996
059   	movl    [R9 + #16 (8-bit)], RBP	# int
05d   	movl    [R9 + #20 (8-bit)], RCX	# int
061   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

06c   	ret
06c
06d   B6: #	N87 &lt;- B4  Freq: 9.99997e-07
06d   	movq    [rsp + #0], RDX	# spill
071   	movl    [rsp + #8], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
077   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=_ STK[0]=rsp + #8 STK[1]=#0 STK[2]=RBP
        # OopMap{[0]=Oop [8]=NarrowOop off=124}
07c   	int3	# ShouldNotReachHere
07c
081   B7: #	N87 &lt;- B2  Freq: 4.76837e-07
081   	movl    RSI, #-155	# int
086   	movq    RBP, RDX	# spill
089   	movl    [rsp + #0], RCX	# spill
08c   	movl    [rsp + #4], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
093   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:5  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=_ STK[0]=rsp + #4 STK[1]=#1
        # OopMap{rbp=Oop off=152}
098   	int3	# ShouldNotReachHere
098
09d   B8: #	N87 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
09f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap{off=164}
0a4   	int3	# ShouldNotReachHere
0a4
0a9   B9: #	N87 &lt;- B3  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
0ab   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # OopMap{off=176}
0b0   	int3	# ShouldNotReachHere
0b0

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='518'>
{method}
 - this oop:          0x00007f375593d4c0
 - method holder:     &apos;java/util/regex/Pattern&apos;
 - constants:         0x00007f3755938540 constant pool [1383]/operands[7] {0x00007f3755938540} for &apos;java/util/regex/Pattern&apos; cache=0x00007f37559429f0
 - access:            0x81000002  private 
 - name:              &apos;has&apos;
 - signature:         &apos;(I)Z&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758c6a1a0
 - code size:         15
 - code start:        0x00007f375593d490
 - code end (excl):   0x00007f375593d49f
 - method data:       0x00007f3755b215c8
 - checked ex length: 0
 - linenumber start:  0x00007f375593d49f
 - localvar length:   2
 - localvar start:    0x00007f375593d4a6
 - compiled code: nmethod   7257  253       3       java.util.regex.Pattern::has (15 bytes)
#
#  bool ( java/util/regex/Pattern:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N20: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	N20 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	andl    RDX, [RSI + #12 (8-bit)]	# int
02f   	testl   RDX, RDX	# ci2b
	setnz   RAX
	movzbl  RAX, RAX
037   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

042   	ret
042

</opto_assembly>
<writer thread='139875533833984'/>
<opto_assembly compile_id='489'>
{method}
 - this oop:          0x00007f3755948ca8
 - method holder:     &apos;java/util/regex/Pattern$Curly&apos;
 - constants:         0x00007f3755948538 constant pool [101] {0x00007f3755948538} for &apos;java/util/regex/Pattern$Curly&apos; cache=0x00007f3755949100
 - access:            0xc1000000  
 - name:              &apos;match0&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)Z&apos;
 - max stack:         6
 - max locals:        7
 - size of params:    5
 - method size:       12
 - highest level:     4
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680efb48: 0xbbaab000 i2c: 0x00007f3758b14de0 c2i: 0x00007f3758b14f29 c2iUV: 0x00007f3758b14efc
 - compiled entry     0x00007f3758b14f29
 - code size:         174
 - code start:        0x00007f3755948b88
 - code end (excl):   0x00007f3755948c36
 - method data:       0x00007f3755b43058
 - checked ex length: 0
 - linenumber start:  0x00007f3755948c36
 - localvar length:   7
 - localvar start:    0x00007f3755948c52
#
#  bool ( java/util/regex/Pattern$Curly:NotNull:exact *, java/util/regex/Matcher:exact *, int, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$Curly:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8   : parm 3: int
#r006 r9:r9   : parm 4: java/lang/CharSequence *
# -- Old rsp -- Framesize: 128 --
#r191 rsp+124: in_preserve
#r190 rsp+120: return address
#r189 rsp+116: in_preserve
#r188 rsp+112: saved fp register
#r187 rsp+108: pad2, stack alignment
#r186 rsp+104: pad2, stack alignment
#r185 rsp+100: Fixed slot 1
#r184 rsp+96: Fixed slot 0
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N2779: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B159 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (496 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

02c   	movq    [rsp + #16], R9	# spill
031   	movl    [rsp + #24], RCX	# spill
035   	movq    [rsp + #8], RDX	# spill
03a   	movq    [rsp + #32], RSI	# spill
03f   	movl    RBP, [RSI + #24 (8-bit)]	# int ! Field: java/util/regex/Pattern$Curly.cmax
042   	movl    R14, R8	# spill
045   	cmpl    R8, RBP
048   	jge     B159  P=0.000000 C=46719.000000
048
04e   B2: #	B186 B3 &lt;- B1  Freq: 1
04e   	movl    R10, [RSI + #28 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Curly.atom
052   	decode_heap_oop_not_null RAX,R10
055   	movl    RSI, #-10	# int
05a   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
05e   	NullCheck R10
05e
05e   B3: #	B108 B4 &lt;- B2  Freq: 0.999999
05e   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Dot: 0x00007f37242fac70:Constant:exact *	# compressed klass ptr
065   	jne,u  B108  P=0.002097 C=-1.000000
065
06b   B4: #	B188 B5 &lt;- B3  Freq: 0.997901
06b   	movq    R11, RDX	# spill
06e   	movl    R8, [RDX + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
072   	NullCheck RDX
072
072   B5: #	B104 B6 &lt;- B4  Freq: 0.9979
072   	movl    R10, RCX	# spill
075   	cmpl    RCX, R8
078   	jge     B104  P=0.018883 C=2693497.000000
078
07e   B6: #	B189 B7 &lt;- B5  Freq: 0.979056
07e   	# checkcastPP of RAX
07e   	movq    R13, R9	# spill
081   	movl    R8, [R9 + #8 (8-bit)]	# compressed klass ptr
085   	NullCheck R9
085
085   B7: #	B156 B8 &lt;- B6  Freq: 0.979055
085   	cmpl    R8, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
08c   	jne,u  B156  P=0.000001 C=-1.000000
08c
092   B8: #	B158 B9 &lt;- B7  Freq: 0.979054
092   	movq    RCX, R9	# spill
095   	# checkcastPP of RCX
095   	movl    RDI, [RCX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
098   	movl    RDX, [RAX + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
09b   	decode_heap_oop_not_null R8,RDX
09e   	testl   R10, R10
0a1   	jl     B158  P=0.000000 C=7895.000000
0a1
0a7   B9: #	B190 B10 &lt;- B8  Freq: 0.979054
0a7   	movl    R9, [R11 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
0ab   	movl    RBP, [RDI + #12 (8-bit)]	# range
0ae   	NullCheck RDI
0ae
0ae   B10: #	B162 B11 &lt;- B9  Freq: 0.979053
0ae   	cmpl    R10, RBP
0b1   	jge     B162  P=0.000000 C=7895.000000
0b1
0b7   B11: #	B154 B12 &lt;- B10  Freq: 0.979052
0b7   	movdq   XMM0, R8	# spill
0bc   	movl    R8, R10	# spill
0bf   	incl    R8	# int
0c2   	cmpl    R10, RBP	# unsigned
0c5   	jnb,u  B154  P=0.000001 C=-1.000000
0c5
0cb   B12: #	B163 B13 &lt;- B11  Freq: 0.979051
0cb   	movzwl  RBX, [RDI + #16 + R10 &lt;&lt; #1]	# ushort/char
0d1   	movl    RSI, #-155	# int
0d6   	cmpl    RBX, #55296
0dc   	jge     B163  P=0.000000 C=613346.000000
0dc
0e2   B13: #	B164 B14 &lt;- B12  Freq: 0.979051
0e2   	cmpl    RBX, #10
0e5   	je     B164  P=0.000000 C=2643348.000000
0e5
0eb   B14: #	B165 B15 &lt;- B13  Freq: 0.97905
0eb   	cmpl    RBX, #13
0ee   	je     B165  P=0.000000 C=2643348.000000
0ee
0f4   B15: #	B166 B16 &lt;- B14  Freq: 0.97905
0f4   	movl    RDI, RBX	# spill
0f6   	orl     RDI, #1	# int
0f9   	movl    RBP, [R11 + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
0fd   	cmpl    RDI, #8233
103   	je     B166  P=0.000000 C=2643348.000000
103
109   B16: #	B167 B17 &lt;- B15  Freq: 0.97905
109   	movl    RSI, #-10	# int
10e   	cmpl    RBX, #133
114   	je     B167  P=0.000000 C=2643348.000000
114
11a   B17: #	B191 B18 &lt;- B16  Freq: 0.979049
11a   	movl    RDI, [RDX + #8 (8-bit)]	# compressed klass ptr
11d   	NullCheck RDX
11d
11d   B18: #	B105 B19 &lt;- B17  Freq: 0.979048
11d   	cmpl    RDI, narrowklass: precise klass java/util/regex/Pattern$Node: 0x00007f37242fdc60:Constant:exact *	# compressed klass ptr
123   	jne,u  B105  P=0.002267 C=-1.000000
123
129   B19: #	B192 B20 &lt;- B18  Freq: 0.976828
129   	movl    [R11 + #32 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.last
12d   	movl    RCX, [R9 + #12 (8-bit)]	# range
131   	NullCheck R9
131
131   B20: #	B157 B21 &lt;- B19  Freq: 0.976827
131   	cmpl    RCX, #1	# unsigned
134   	jbe,u  B157  P=0.000001 C=-1.000000
134
13a   B21: #	B22 &lt;- B20  Freq: 0.976826
13a   	movl    [R9 + #16 (8-bit)], RBP	# int
13e   	movl    [R9 + #20 (8-bit)], R8	# int
13e
142   B22: #	B23 &lt;- B21 B107  Freq: 0.979046
142   	movl    RAX, #1	# int
142
147   B23: #	B110 B24 &lt;- B22 B104 B109  Freq: 0.999987
147   	testl   RAX, RAX
149   	je     B110  P=0.001327 C=46723.000000
149
14f   B24: #	B187 B25 &lt;- B23  Freq: 0.99866
14f   	movl    R9, R14	# spill
152   	incl    R9	# int
155   	movl    RBX, [R11 + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
159   	NullCheck R11
159
159   B25: #	B160 B26 &lt;- B24  Freq: 0.998659
159   	movl    R8, RBX	# spill
15c   	subl    R8, R10	# int
15f   	movl    RSI, #-155	# int
164   	cmpl    RBX, R10
167   	je     B160  P=0.000000 C=46661.000000
167
16d   B26: #	B161 B27 &lt;- B25  Freq: 0.998658
16d   	movq    R10, [rsp + #32]	# spill
172   	movl    RBP, [R10 + #24 (8-bit)]	# int ! Field: java/util/regex/Pattern$Curly.cmax
176   	cmpl    R9, RBP
179   	jge     B161  P=0.000000 C=2462722.000000
179
17f   B27: #	B34 &lt;- B26  Freq: 0.998658
17f   	movl    [rsp + #40], R8	# spill
184   	movl    [rsp + #64], RBX	# spill
188   	movl    [rsp + #20], R9	# spill
18d   	movq    [rsp + #72], R13	# spill
192   	movq    [rsp + #48], R11	# spill
197   	movl    [rsp + #80], R14	# spill
19c   	decl    R14	# int
19f   	movl    [rsp + #4], R14	# spill
1a4   	xorl    R10, R10	# int
1a7   	movl    [rsp + #44], R10	# spill
1ac   	jmp,s   B34
      	nop 	# 2 bytes pad for loops and calls

1b0   B28: #	B29 &lt;- B51  top-of-loop Freq: 51.5584
1b0   	movl    [RBP + #16 (8-bit)], RDX	# int
1b3   	movl    [RBP + #20 (8-bit)], RCX	# int
1b3
1b6   B29: #	B30 &lt;- B28 B102  Freq: 51.6755
1b6   	movl    RAX, #1	# int
1b6
1bb   B30: #	B53 B31 &lt;- B29 B56 B115  Freq: 52.6709
1bb   	testl   RAX, RAX
1bd   	je     B53  P=0.018948 C=2462722.000000
1bd
1c3   B31: #	B152 B32 &lt;- B30  Freq: 51.6729
1c3   	movq    R10, [rsp + #48]	# spill
1c8   	movl    R8, [R10 + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
1cc   	movl    R11, [rsp + #20]	# spill
1d1   	incl    R11	# int
1d4   	movq    R10, [rsp + #32]	# spill
1d9   	movl    RBP, [R10 + #24 (8-bit)]	# int ! Field: java/util/regex/Pattern$Curly.cmax
1dd   	movl    R10, [rsp + #28]	# spill
1e2   	cmpl    R10, R8
1e5   	jne     B152  P=0.000000 C=2416058.000000
1e5
1eb   B32: #	B153 B33 &lt;- B31  Freq: 51.6729
1eb   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$Curly::match0 @ bci:124  L[0]=rsp + #32 L[1]=rsp + #48 L[2]=R10 L[3]=R11 L[4]=rsp + #72 L[5]=rsp + #80 L[6]=rsp + #40
        # OopMap{[32]=Oop [48]=Oop [72]=Oop off=491}
1f1   	cmpl    R11, RBP
1f4   	jge     B153  P=0.000000 C=2416061.000000
1f4
1fa   B33: #	B34 &lt;- B32  Freq: 51.6728
1fa   	movl    [rsp + #20], R11	# spill
1ff   	movl    [rsp + #64], R10	# spill
1ff
204   B34: #	B181 B35 &lt;- B27 B33 	Loop: B34-B33 inner  Freq: 52.6715
204   	movl    R10, [rsp + #64]	# spill
209   	addl    R10, [RSP + #40 (32-bit)]	# int
20e   	movl    [rsp + #28], R10	# spill
213   	movq    R10, [rsp + #32]	# spill
218   	movl    R11, [R10 + #28 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Curly.atom
21c   	decode_heap_oop_not_null RDI,R11
21f   	movl    R11, [R11 + #8 (8-bit)]	# compressed klass ptr
223   	NullCheck R11
223
223   B35: #	B114 B36 &lt;- B34  Freq: 52.6715
223   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$Dot: 0x00007f37242fac70:Constant:exact *	# compressed klass ptr
22a   	jne,u  B114  P=0.000015 C=-1.000000
22a
230   B36: #	B56 B37 &lt;- B35  Freq: 52.6707
230   	movq    R10, [rsp + #48]	# spill
235   	movl    R11, [R10 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
239   	movl    RCX, [rsp + #64]	# spill
23d   	incl    RCX	# int
23f   	movl    R8, [rsp + #64]	# spill
244   	cmpl    R8, R11
247   	jge     B56  P=0.018883 C=2693497.000000
247
24d   B37: #	B182 B38 &lt;- B36  Freq: 51.6761
24d   	movq    R10, [rsp + #72]	# spill
252   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
256   	NullCheck R10
256
256   B38: #	B140 B39 &lt;- B37  Freq: 51.676
256   	# checkcastPP of RDI
256   	cmpl    R10, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
25d   	jne,u  B140  P=0.000001 C=-1.000000
25d
263   B39: #	B143 B40 &lt;- B38  Freq: 51.676
263   	movq    RAX, [rsp + #72]	# spill
268   	# checkcastPP of RAX
268   	testl   R8, R8
26b   	jl     B143  P=0.000000 C=7895.000000
26b
271   B40: #	B183 B41 &lt;- B39  Freq: 51.6759
271   	movl    R10, [RAX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
275   	movl    R11, [R10 + #12 (8-bit)]	# range
279   	NullCheck R10
279
279   B41: #	B146 B42 &lt;- B40  Freq: 51.6759
279   	movl    R8, [RDI + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
27d   	movl    R9, [rsp + #64]	# spill
282   	cmpl    R9, R11
285   	jge     B146  P=0.000000 C=7895.000000
285
28b   B42: #	B139 B43 &lt;- B41  Freq: 51.6759
28b   	decode_heap_oop_not_null RSI,R8
28e   	movq    R9, [rsp + #48]	# spill
293   	movl    R9, [R9 + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
297   	movl    RDX, R9	# spill
29a   	movl    RBX, [rsp + #64]	# spill
29e   	cmpl    RBX, R11	# unsigned
2a1   	jnb,u  B139  P=0.000001 C=-1.000000
2a1
2a7   B43: #	B147 B44 &lt;- B42  Freq: 51.6758
2a7   	movzwl  R9, [R10 + #16 + RBX &lt;&lt; #1]	# ushort/char
2ad   	cmpl    R9, #55296
2b4   	jge     B147  P=0.000000 C=613346.000000
2b4
2ba   B44: #	B148 B45 &lt;- B43  Freq: 51.6758
2ba   	cmpl    R9, #10
2be   	je     B148  P=0.000000 C=2643348.000000
2be
2c4   B45: #	B149 B46 &lt;- B44  Freq: 51.6758
2c4   	movl    RBP, R9	# spill
2c7   	orl     RBP, #1	# int
2ca   	cmpl    R9, #13
2ce   	je     B149  P=0.000000 C=2643348.000000
2ce
2d4   B46: #	B150 B47 &lt;- B45  Freq: 51.6757
2d4   	cmpl    RBP, #8233
2da   	je     B150  P=0.000000 C=2643348.000000
2da
2e0   B47: #	B151 B48 &lt;- B46  Freq: 51.6757
2e0   	cmpl    R9, #133
2e7   	je     B151  P=0.000000 C=2643348.000000
2e7
2ed   B48: #	B184 B49 &lt;- B47  Freq: 51.6757
2ed   	movl    R11, [R8 + #8 (8-bit)]	# compressed klass ptr
2f1   	NullCheck R8
2f1
2f1   B49: #	B101 B50 &lt;- B48  Freq: 51.6756
2f1   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$Node: 0x00007f37242fdc60:Constant:exact *	# compressed klass ptr
2f8   	jne,u  B101  P=0.002267 C=-1.000000
2f8
2fe   B50: #	B185 B51 &lt;- B49  Freq: 51.5585
2fe   	movq    R10, [rsp + #48]	# spill
303   	movl    [R10 + #32 (8-bit)], RCX	# int ! Field: java/util/regex/Matcher.last
307   	movl    RBP, [R10 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
30b   	movl    R11, [RBP + #12 (8-bit)]	# range
30f   	NullCheck RBP
30f
30f   B51: #	B28 B52 &lt;- B50  Freq: 51.5584
30f   	cmpl    R11, #1	# unsigned
313   	jnbe,u  B28  P=0.999999 C=-1.000000
313
319   B52: #	N2779 &lt;- B51  Freq: 5.15584e-05
319   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
322   	movq    [rsp + #8], R10	# spill
327   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
339   	movl    RSI, #-28	# int
33e   	movl    [rsp + #48], RDX	# spill
      	nop 	# 1 bytes pad for loops and calls
343   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=rsp + #8 L[2]=_ L[3]=_ STK[0]=RBP STK[1]=#0 STK[2]=rsp + #48
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #64 L[3]=rsp + #20 L[4]=rsp + #72 L[5]=rsp + #80 L[6]=rsp + #32
        # OopMap{rbp=NarrowOop [0]=Oop [8]=Oop [72]=Oop off=840}
348   	int3	# ShouldNotReachHere
348
34d   B53: #	B99 B54 &lt;- B30  Freq: 0.998015
34d   	movl    R11, [rsp + #20]	# spill
352   	cmpl    R11, [RSP + #80 (32-bit)]
357   	jl     B99  P=0.018248 C=2556124.000000
357
35d   B54: #	B155 B55 &lt;- B53  Freq: 0.979804
35d   	movl    R8, [rsp + #80]	# spill
362   	cmpl    R8, #-2147483647
369   	jl     B155  P=0.000001 C=-1.000000
369
36f   B55: #	B63 &lt;- B54  Freq: 0.979803
36f   	movl    [rsp + #92], R8	# spill
374   	jmp,s   B63
374
376   B56: #	B30 &lt;- B36  Freq: 0.994592
376   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
37b   	xorl    RAX, RAX	# int
37d   	jmp     B30
      	nop 	# 14 bytes pad for loops and calls

390   B57: #	B58 &lt;- B89  top-of-loop Freq: 2.13711e-06
390   	# castII of RDI
390
390   B58: #	B170 B59 &lt;- B57 B170 	Loop: B58-B170 inner main of N703 Freq: 2.14882e-06
390   	movdl   RBX, XMM3	# spill
394   	movl    R10, [RBX + #16 + RDI &lt;&lt; #2]	# int
399   	movl    RBX, RDI	# spill
39b   	addl    RBX, [RSP + #64 (32-bit)]	# int
39f   	movzwl  RDX, [R11 + #16 + RBX &lt;&lt; #1]	# ushort/char
3a5   	incl    RDI	# int
3a7   	cmpl    R10, RDX
3aa   	je     B170  P=0.005446 C=2399209.000000
3aa
3b0   B59: #	B60 &lt;- B125 B58 B76 B82 B94 B87  top-of-loop Freq: 52.6501
3b0   	xorl    RAX, RAX	# int
3b2
3b2   B60: #	B116 B61 &lt;- B98 B59 B133 B113  Freq: 53.6429
3b2   	testl   RAX, RAX
3b4   	jne     B116  P=0.000010 C=2509481.000000
3b4
3ba   B61: #	B99 B62 &lt;- B60  Freq: 53.6424
3ba   	movl    R10, [rsp + #20]	# spill
3bf   	decl    R10	# int
3c2   	movl    [rsp + #20], R10	# spill
3c7   	cmpl    R10, [RSP + #4 (32-bit)]
3cc   	jle     B99	# loop end  P=0.018248 C=2509460.000000
3cc
3d2   B62: #	B63 &lt;- B61  Freq: 52.6635
3d2   	movl    R10, [rsp + #8]	# spill
3d7   	movl    [rsp + #64], R10	# spill
3d7
3dc   B63: #	B177 B64 &lt;- B55 B62 	Loop: B63-B62  Freq: 53.6433
3dc   	movq    R10, [rsp + #32]	# spill
3e1   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
3e5   	decode_heap_oop_not_null RBP,R10
3e8   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
3ec   	NullCheck R10
3ec
3ec   B64: #	B112 B65 &lt;- B63  Freq: 53.6433
3ec   	movl    R9, [rsp + #64]	# spill
3f1   	sarl    R9, #31
3f5   	movl    R8, #1	# int
3fb   	subl    R8, [RSP + #64 (32-bit)]	# int
400   	movl    RBX, R8	# spill
403   	sarl    RBX, #31
406   	andl    RBX, R8	# int
409   	movl    R11, [rsp + #64]	# spill
40e   	subl    R11, [RSP + #40 (32-bit)]	# int
413   	movl    [rsp + #8], R11	# spill
418   	addl    RBX, #2147483647	# int
41e   	andl    R9, [RSP + #64 (32-bit)]	# int
423   	movl    R8, #-2147483647	# int
429   	subl    R8, R9	# int
42c   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Slice: 0x00007f37242faee0:Constant:exact *	# compressed klass ptr
433   	jne,u  B112  P=0.000020 C=-1.000000
433
439   B65: #	B178 B66 &lt;- B64  Freq: 53.6422
439   	# checkcastPP of RBP
439   	movl    RCX, [RBP + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
43c   	movl    R9, [RBP + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$SliceNode.buffer
440   	movl    RAX, [R9 + #12 (8-bit)]	# range
444   	NullCheck R9
444
444   B66: #	B130 B67 &lt;- B65  Freq: 53.6422
444   	movl    R10, [rsp + #64]	# spill
449   	addl    R10, RAX	# int
44c   	movq    R11, [rsp + #48]	# spill
451   	movl    RDI, [R11 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
455   	testl   RAX, RAX
457   	jle     B130  P=0.000001 C=2444278.000000
457
45d   B67: #	B68 &lt;- B66  Freq: 53.6421
45d   	movl    R11, [rsp + #64]	# spill
462   	negl    R11	# int
465   	movl    R14, RDI	# spill
468   	subl    R14, [RSP + #64 (32-bit)]	# int
46d   	cmpl    R8, R11
470   	movl    RSI, R8	# spill
473   	cmovllt RSI, R11	# max
477   	xorl    RDX, RDX	# int
479
479   B68: #	B98 B69 &lt;- B67 B78 	Loop: B68-B78 inner pre of N1706 Freq: 53.7859
479   	movl    R13, RDX	# spill
47c   	addl    R13, [RSP + #64 (32-bit)]	# int
481   	cmpl    R13, RDI
484   	jge     B98  P=0.018438 C=2444276.000000
484
48a   B69: #	B134 B70 &lt;- B68  Freq: 52.7942
48a   	movl    [rsp + #16], R11	# spill
48f   	movl    [rsp + #12], RDI	# spill
493   	movdl   XMM2, R10	# spill
498   	movdl   XMM3, R9	# spill
49d   	movdl   XMM1, RCX	# spill
4a1   	movl    [rsp + #0], R8	# spill
4a5   	movdq   XMM0, RBP	# spill
4aa   	movl    R11, #1	# int
4b0   	cmpl    RSI, R11
4b3   	movl    R10, RSI	# spill
4b6   	movl    R8, #1	# int
4bc   	cmovllt R10, R8	# max
4c0   	cmpl    RDX, RAX	# unsigned
4c2   	jnb,u  B134  P=0.000001 C=-1.000000
4c2
4c8   B70: #	B179 B71 &lt;- B69  Freq: 52.7941
4c8   	movl    R11, [R9 + #16 + RDX &lt;&lt; #2]	# int
4cd   	movdl   XMM4, R11	# spill
4d2   	cmpl    R14, RBX
4d5   	movl    R8, R14	# spill
4d8   	cmovlgt R8, RBX	# min
4dc   	cmpl    R8, RAX
4df   	cmovlgt R8, RAX	# min
4e3   	movq    R11, [rsp + #72]	# spill
4e8   	movl    R9, [R11 + #8 (8-bit)]	# compressed klass ptr
4ec   	NullCheck R11
4ec
4ec   B71: #	B138 B72 &lt;- B70  Freq: 52.7941
4ec   	cmpl    R10, RAX
4ef   	cmovlgt R10, RAX	# min
4f3   	cmpl    R9, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
4fa   	jne,u  B138  P=0.000001 C=-1.000000
4fa
500   B72: #	B141 B73 &lt;- B71  Freq: 52.794
500   	movq    RBP, R11	# spill
503   	# checkcastPP of RBP
503   	movl    R11, [RBP + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
507   	testl   R13, R13
50a   	jl     B141  P=0.000000 C=7895.000000
50a
510   B73: #	B180 B74 &lt;- B72  Freq: 52.794
510   	movl    RCX, [R11 + #12 (8-bit)]	# range
514   	NullCheck R11
514
514   B74: #	B144 B75 &lt;- B73  Freq: 52.7939
514   	movl    R9, RCX	# spill
517   	subl    R9, [RSP + #64 (32-bit)]	# int
51c   	movl    RDI, RDX	# spill
51e   	incl    RDI	# int
520   	cmpl    R9, RBX
523   	cmovlgt R9, RBX	# min
527   	cmpl    R13, RCX
52a   	jge     B144  P=0.000000 C=7895.000000
52a
530   B75: #	B136 B76 &lt;- B74  Freq: 52.7939
530   	cmpl    R13, RCX	# unsigned
533   	jnb,u  B136  P=0.000001 C=-1.000000
533
539   B76: #	B59 B77 &lt;- B75  Freq: 52.7939
539   	movzwl  RDX, [R11 + #16 + R13 &lt;&lt; #1]	# ushort/char
53f   	movdl   R13, XMM4	# spill
544   	cmpl    R13, RDX
547   	jne     B59  P=0.994554 C=2399209.000000
547
54d   B77: #	B79 B78 &lt;- B76  Freq: 0.287491
54d   	cmpl    R9, R14
550   	cmovlgt R9, R14	# min
554   	cmpl    RDI, R10
557   	jge,s   B79	# loop end  P=0.500000 C=13065.000000
557
559   B78: #	B68 &lt;- B77  Freq: 0.143746
559   	movl    RDX, RDI	# spill
55b   	movdq   RBP, XMM0	# spill
560   	movl    R8, [rsp + #0]	# spill
564   	movdl   RCX, XMM1	# spill
568   	movdl   R9, XMM3	# spill
56d   	movdl   R10, XMM2	# spill
572   	movl    RDI, [rsp + #12]	# spill
576   	movl    R11, [rsp + #16]	# spill
57b   	jmp     B68
57b
580   B79: #	B117 B80 &lt;- B77  Freq: 0.143746
580   	cmpl    RDI, R8
583   	jge     B117  P=0.000001 C=-1.000000
583
589   B80: #	B169 B81 &lt;- B79  Freq: 0.143745
589   	# castII of RDI
589   	movdl   R10, XMM3	# spill
58e   	movl    R10, [R10 + #16 + RDI &lt;&lt; #2]	# int
593   	movdl   XMM5, R10	# spill
598   	movl    R13, [rsp + #64]	# spill
59d   	addl    R13, RDI	# int
5a0   	cmpl    R13, RCX
5a3   	jge     B169  P=0.000000 C=7895.000000
5a3
5a9   B81: #	B168 B82 &lt;- B80  Freq: 0.143745
5a9   	movl    RSI, RDI	# spill
5ab   	addl    RSI, #2	# int
5ae   	cmpl    RSI, [RSP + #0 (32-bit)]
5b1   	movl    R10, [rsp + #0]	# spill
5b5   	cmovllt RSI, R10	# max
5b9   	cmpl    RSI, [RSP + #16 (32-bit)]
5bd   	movl    R10, [rsp + #16]	# spill
5c2   	cmovllt RSI, R10	# max
5c6   	cmpl    R13, RCX	# unsigned
5c9   	jnb,u  B168  P=0.000001 C=-1.000000
5c9
5cf   B82: #	B59 B83 &lt;- B81  Freq: 0.143745
5cf   	movzwl  RDX, [R11 + #16 + R13 &lt;&lt; #1]	# ushort/char
5d5   	incl    RDI	# int
5d7   	cmpl    RSI, RBX
5d9   	cmovlgt RSI, RBX	# min
5dc   	movdl   R10, XMM5	# spill
5e1   	cmpl    R10, RDX
5e4   	jne     B59  P=0.994554 C=2399209.000000
5e4
5ea   B83: #	B174 B84 &lt;- B82  Freq: 0.00078277
5ea   	cmpl    R9, RAX
5ed   	cmovlgt R9, RAX	# min
5f1   	cmpl    RDI, R8
5f4   	jge     B174	# loop end  P=0.000001 C=13065.000000
5f4
5fa   B84: #	B85 &lt;- B83  Freq: 0.000782769
5fa   	cmpl    RSI, R14
5fd   	cmovlgt RSI, R14	# min
5fd
601   B85: #	B175 B86 &lt;- B84 B88 	Loop: B85-B88 inner pre of N1706 Freq: 0.000784907
601   	movl    R13, RDI	# spill
604   	addl    R13, [RSP + #64 (32-bit)]	# int
609   	movdl   R10, XMM3	# spill
60e   	movl    R10, [R10 + #16 + RDI &lt;&lt; #2]	# int
613   	movl    RBX, R10	# spill
616   	cmpl    R13, RCX
619   	jge     B175  P=0.000000 C=7895.000000
619
61f   B86: #	B173 B87 &lt;- B85  Freq: 0.000784906
61f   	cmpl    R13, RCX	# unsigned
622   	jnb,u  B173  P=0.000001 C=-1.000000
622
628   B87: #	B59 B88 &lt;- B86  Freq: 0.000784905
628   	movzwl  R10, [R11 + #16 + R13 &lt;&lt; #1]	# ushort/char
62e   	incl    RDI	# int
630   	cmpl    RBX, R10
633   	jne     B59  P=0.994554 C=2399209.000000
633
639   B88: #	B85 B89 &lt;- B87  Freq: 4.27423e-06
639   	cmpl    RSI, RAX
63b   	movl    R10, RSI	# spill
63e   	cmovlgt R10, RAX	# min
642   	cmpl    RDI, R10
645   	jl,s   B85	# loop end  P=0.500000 C=13065.000000
645
647   B89: #	B57 B90 &lt;- B88  Freq: 2.13712e-06
647   	cmpl    RDI, R9
64a   	jl     B57  P=0.999999 C=-1.000000
64a
650   B90: #	B97 B91 &lt;- B89 B171  Freq: 2.17735e-12
650   	cmpl    RDI, R8
653   	jge,s   B97  P=0.500000 C=-1.000000
653
655   B91: #	B92 &lt;- B90  Freq: 1.08868e-12
655   	# castII of RDI
      	nop 	# 3 bytes pad for loops and calls

658   B92: #	B145 B93 &lt;- B91 B95 	Loop: B92-B95 inner post of N1706 Freq: 1.09165e-12
658   	movl    R13, RDI	# spill
65b   	addl    R13, [RSP + #64 (32-bit)]	# int
660   	movdl   R9, XMM3	# spill
665   	movl    RDX, [R9 + #16 + RDI &lt;&lt; #2]	# int
66a   	cmpl    R13, RCX
66d   	jge     B145  P=0.000000 C=7895.000000
66d
673   B93: #	B137 B94 &lt;- B92  Freq: 1.09165e-12
673   	cmpl    R13, RCX	# unsigned
676   	jnb,u  B137  P=0.000001 C=-1.000000
676
67c   B94: #	B59 B95 &lt;- B93  Freq: 1.09165e-12
67c   	incl    RDI	# int
67e   	movzwl  R10, [R11 + #16 + R13 &lt;&lt; #1]	# ushort/char
684   	cmpl    RDX, R10
687   	jne     B59  P=0.994554 C=2399209.000000
687
68d   B95: #	B92 B96 &lt;- B94  Freq: 5.94461e-15
68d   	cmpl    RDI, R8
690   	jl,s   B92	# loop end  P=0.500000 C=13065.000000
690
692   B96: #	B118 &lt;- B95  Freq: 2.9723e-15
692   	jmp     B118
692
697   B97: #	B118 &lt;- B90  Freq: 1.08868e-12
697   	movdl   R9, XMM3	# spill
69c   	jmp     B118
69c
6a1   B98: #	B60 &lt;- B120 B68  Freq: 0.99169
6a1   	movq    R10, [rsp + #48]	# spill
6a6   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
6ab   	xorl    RAX, RAX	# int
6ad   	jmp     B60
6ad
6b2   B99: #	B100 &lt;- B61 B53  Freq: 0.997053
6b2   	movl    RAX, [rsp + #44]	# spill
6b2
6b6   B100: #	N2779 &lt;- B116 B99 B111  Freq: 0.998914
6b6   	addq    rsp, 112	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

6c1   	ret
6c1
6c2   B101: #	B199 B102 &lt;- B49  Freq: 0.117152
6c2   	movq    RDX, [rsp + #48]	# spill
6c7   	movq    R8, RAX	# spill
6ca   	movl    RBP, [rsp + #80]	# spill
      	nop 	# 3 bytes pad for loops and calls
6d1   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$Node::match
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #32 L[1]=rsp + #48 L[2]=rsp + #64 L[3]=rsp + #20 L[4]=rsp + #72 L[5]=RBP L[6]=rsp + #40
        # OopMap{[32]=Oop [48]=Oop [72]=Oop off=1760}
6e0
6e0   B102: #	B29 B103 &lt;- B101  Freq: 0.11715
        # Block is sole successor of call
6e0   	testl   RAX, RAX
6e2   	jne     B29  P=1.000000 C=2643220.000000
6e2
6e8   B103: #	N2779 &lt;- B102  Freq: 5.58613e-08
6e8   	movl    RSI, #-155	# int
6ed   	movq    RBP, [rsp + #32]	# spill
6f2   	movl    R10, [rsp + #20]	# spill
6f7   	movl    [rsp + #12], R10	# spill
6fc   	movl    [rsp + #32], RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
703   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:40  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #32
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #64 L[3]=rsp + #12 L[4]=rsp + #72 L[5]=rsp + #80 L[6]=rsp + #40
        # OopMap{rbp=Oop [48]=Oop [72]=Oop off=1800}
708   	int3	# ShouldNotReachHere
708
70d   B104: #	B23 &lt;- B5  Freq: 0.0188436
70d   	movb    [RDX + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
711   	xorl    RAX, RAX	# int
713   	movq    R13, R9	# spill
716   	jmp     B23
716
71b   B105: #	B198 B106 &lt;- B18  Freq: 0.00221956
71b   	movl    RBX, R8	# spill
71e   	movq    R8, RCX	# spill
721   	movq    [rsp + #8], R13	# spill
726   	movl    [rsp + #20], R10	# spill
72b   	movq    [rsp + #0], R11	# spill
72f   	movq    RBP, [rsp + #32]	# spill
734   	movl    [rsp + #16], R14	# spill
739   	movq    RDX, R11	# spill
73c   	movl    RCX, RBX	# spill
73e   	movdq   RSI, XMM0	# spill
      	nop 	# 2 bytes pad for loops and calls
745   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$Node::match
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #20 L[3]=rsp + #16 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=_
        # OopMap{rbp=Oop [0]=Oop [8]=Oop [32]=Oop off=1876}
754
754   B106: #	B172 B107 &lt;- B105  Freq: 0.00221952
        # Block is sole successor of call
754   	testl   RAX, RAX
756   	je     B172  P=0.000000 C=2643220.000000
756
75c   B107: #	B22 &lt;- B106  Freq: 0.00221952
75c   	movl    R14, [rsp + #16]	# spill
761   	movq    R11, [rsp + #0]	# spill
765   	movl    R10, [rsp + #20]	# spill
76a   	movq    R13, [rsp + #8]	# spill
76f   	jmp     B22
76f
774   B108: #	B197 B109 &lt;- B3  Freq: 0.00209748
774   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
77d   	movl    RBP, R8	# spill
780   	movq    RSI, RAX	# spill
783   	movq    R8, R9	# spill
      	nop 	# 3 bytes pad for loops and calls
789   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$Node::match
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #24 L[3]=RBP L[4]=rsp + #16 L[5]=RBP L[6]=_
        # OopMap{[0]=Oop [8]=Oop [16]=Oop [32]=Oop off=1944}
798
798   B109: #	B23 &lt;- B108  Freq: 0.00209744
        # Block is sole successor of call
798   	movl    R14, RBP	# spill
79b   	movq    R11, [rsp + #8]	# spill
7a0   	movl    R10, [rsp + #24]	# spill
7a5   	movq    R13, [rsp + #16]	# spill
7aa   	jmp     B23
7aa
7af   B110: #	B196 B111 &lt;- B23  Freq: 0.00132696
7af   	movq    R8, [rsp + #32]	# spill
7b4   	movl    R9, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
7b8   	decode_heap_oop RSI,R9
843   	movq    RDX, R11	# spill
846   	movl    RCX, R10	# spill
849   	movq    R8, R13	# spill
      	nop 	# 1 bytes pad for loops and calls
84d   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$Node::match
        # java.util.regex.Pattern$Curly::match0 @ bci:170  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=2140}
85c
85c   B111: #	B100 &lt;- B110  Freq: 0.00132693
        # Block is sole successor of call
85c   	jmp     B100
85c
861   B112: #	B195 B113 &lt;- B64  Freq: 0.00106793
861   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #64]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
872   	movq    RDX, [rsp + #48]	# spill
877   	movl    RCX, [rsp + #64]	# spill
87b   	movq    R8, [rsp + #72]	# spill
880   	movq    RSI, RBP	# spill
      	nop 	# 2 bytes pad for loops and calls
885   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$Node::match
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #32 L[1]=rsp + #48 L[2]=rsp + #0 L[3]=rsp + #20 L[4]=rsp + #72 L[5]=rsp + #92 L[6]=rsp + #40
        # OopMap{[32]=Oop [48]=Oop [72]=Oop off=2196}
894
894   B113: #	B60 &lt;- B112  Freq: 0.00106791
        # Block is sole successor of call
894   	jmp     B60
894
899   B114: #	B194 B115 &lt;- B35  Freq: 0.000791145
899   	movq    RSI, RDI	# spill
89c   	movq    RDX, [rsp + #48]	# spill
8a1   	movl    RCX, [rsp + #64]	# spill
8a5   	movq    R8, [rsp + #72]	# spill
8aa   	movq    RBP, R10	# spill
8ad   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$Node::match
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #64 L[3]=rsp + #20 L[4]=rsp + #72 L[5]=rsp + #80 L[6]=rsp + #40
        # OopMap{rbp=Oop [32]=Oop [48]=Oop [72]=Oop off=2236}
8bc
8bc   B115: #	B30 &lt;- B114  Freq: 0.000791129
        # Block is sole successor of call
8bc   	jmp     B30
8bc
8c1   B116: #	B100 &lt;- B60  Freq: 0.00053396
8c1   	movl    RAX, #1	# int
8c6   	jmp     B100
8c6
8cb   B117: #	B118 &lt;- B79  Freq: 1.45654e-07
8cb   	movdl   R9, XMM3	# spill
8cb
8d0   B118: #	B129 B119 &lt;- B117 B174 B96 B97  Freq: 1.46449e-07
8d0   	cmpl    RDI, RAX
8d2   	jge,s   B129  P=0.500000 C=-1.000000
8d2
8d4   B119: #	B120 &lt;- B118  Freq: 7.32243e-08
8d4   	# castII of RDI
8d4
8d4   B120: #	B98 B121 &lt;- B119 B127 	Loop: B120-B127 inner post of N1706 Freq: 7.34205e-08
8d4   	movl    R13, RDI	# spill
8d7   	addl    R13, [RSP + #64 (32-bit)]	# int
8dc   	cmpl    R13, [RSP + #12 (32-bit)]
8e1   	jge     B98  P=0.018438 C=2444276.000000
8e1
8e7   B121: #	B135 B122 &lt;- B120  Freq: 7.20668e-08
8e7   	cmpl    RDI, RAX	# unsigned
8e9   	jnb,u  B135  P=0.000001 C=-1.000000
8e9
8ef   B122: #	B142 B123 &lt;- B121  Freq: 7.20667e-08
8ef   	movl    RDX, [R9 + #16 + RDI &lt;&lt; #2]	# int
8f4   	testl   R13, R13
8f7   	jl     B142  P=0.000000 C=7895.000000
8f7
8fd   B123: #	B145 B124 &lt;- B122  Freq: 7.20667e-08
8fd   	movl    RBX, RDI	# spill
8ff   	incl    RBX	# int
901   	cmpl    R13, RCX
904   	jge     B145  P=0.000000 C=7895.000000
904
90a   B124: #	B137 B125 &lt;- B123  Freq: 7.20667e-08
90a   	cmpl    R13, RCX	# unsigned
90d   	jnb,u  B137  P=0.000001 C=-1.000000
90d
913   B125: #	B59 B126 &lt;- B124  Freq: 7.20666e-08
913   	movzwl  R10, [R11 + #16 + R13 &lt;&lt; #1]	# ushort/char
919   	cmpl    RDX, R10
91c   	jne     B59  P=0.994554 C=2399209.000000
91c
922   B126: #	B128 B127 &lt;- B125  Freq: 3.92442e-10
922   	cmpl    RBX, RAX
924   	jge,s   B128	# loop end  P=0.500000 C=13065.000000
924
926   B127: #	B120 &lt;- B126  Freq: 1.96221e-10
926   	movl    RDI, RBX	# spill
928   	jmp,s   B120
928
92a   B128: #	B130 &lt;- B126  Freq: 1.96221e-10
92a   	movdl   RCX, XMM1	# spill
92e   	movdl   R10, XMM2	# spill
933   	jmp,s   B130
933
935   B129: #	B130 &lt;- B118  Freq: 7.32243e-08
935   	movdl   RCX, XMM1	# spill
939   	movdl   R10, XMM2	# spill
939
93e   B130: #	B201 B131 &lt;- B129 B66 B128  Freq: 5.37156e-05
93e   	movl    RSI, #-10	# int
943   	movl    R11, [RCX + #8 (8-bit)]	# compressed klass ptr
947   	NullCheck RCX
947
947   B131: #	B176 B132 &lt;- B130  Freq: 5.37155e-05
947   	decode_heap_oop_not_null RSI,RCX
94a   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$Curly: 0x00007f37242fa370:Constant:exact *	# compressed klass ptr
951   	jne,u  B176  P=0.000001 C=-1.000000
951
957   B132: #	B193 B133 &lt;- B131  Freq: 5.37155e-05
957   	# checkcastPP of RSI
957   	movl    RBP, [rsp + #64]	# spill
95b   	movq    RDX, [rsp + #48]	# spill
960   	movq    R8, [rsp + #72]	# spill
965   	movl    RCX, R10	# spill
      	nop 	# 3 bytes pad for loops and calls
96b   	call,static  java.util.regex.Pattern$Curly::match
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #32 L[1]=rsp + #48 L[2]=RBP L[3]=rsp + #20 L[4]=rsp + #72 L[5]=rsp + #92 L[6]=rsp + #40
        # OopMap{[32]=Oop [48]=Oop [72]=Oop off=2416}
970
970   B133: #	B60 &lt;- B132  Freq: 5.37144e-05
        # Block is sole successor of call
970   	jmp     B60
970
975   B134: #	B135 &lt;- B69  Freq: 5.34952e-05
975   	movl    RDI, RDX	# spill
975
977   B135: #	N2779 &lt;- B121 B134  Freq: 5.34952e-05
977   	movq    RBP, [rsp + #32]	# spill
97c   	movq    R10, [rsp + #48]	# spill
981   	movq    [rsp + #0], R10	# spill
985   	movl    R11, [rsp + #64]	# spill
98a   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
99c   	movq    R10, [rsp + #72]	# spill
9a1   	movq    [rsp + #16], R10	# spill
9a6   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #24], rax
	movq    rax, [rsp - #8]
9b8   	movsd   [rsp + #32], XMM0	# spill
9be   	movl    [rsp + #28], R11	# spill
9c3   	movl    [rsp + #60], RAX	# spill
9c7   	movl    [rsp + #68], R9	# spill
9cc   	movl    [rsp + #72], RDI	# spill
9d0   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
9d7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:43  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=rsp + #28 L[3]=rsp + #16 L[4]=rsp + #68 L[5]=rsp + #60 L[6]=rsp + #72 STK[0]=rsp + #68 STK[1]=rsp + #72
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #28 L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #92 L[6]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop [68]=NarrowOop off=2524}
9dc   	int3	# ShouldNotReachHere
9dc
9e1   B136: #	B137 &lt;- B75  Freq: 5.3495e-05
9e1   	movl    RDI, RDX	# spill
9e3   	movdl   R9, XMM3	# spill
9e8   	movdl   RDX, XMM4	# spill
9e8
9ec   B137: #	N2779 &lt;- B124 B136 B168 B93 B173  Freq: 5.36414e-05
9ec   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
9f5   	movq    R10, [rsp + #72]	# spill
9fa   	movq    [rsp + #24], R10	# spill
9ff   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
a11   	movsd   [rsp + #40], XMM0	# spill
a17   	movl    R10, [rsp + #64]	# spill
a1c   	movl    [rsp + #36], R10	# spill
a21   	movl    [rsp + #56], R9	# spill
a26   	movl    [rsp + #60], RAX	# spill
a2a   	movl    [rsp + #64], RDI	# spill
a2e   	movl    [rsp + #68], RDX	# spill
a32   	movl    [rsp + #72], R11	# spill
a37   	movl    [rsp + #76], R13	# spill
a3c   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
a43   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #72 STK[1]=rsp + #76
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #36 L[3]=RBP L[4]=rsp + #56 L[5]=rsp + #60 L[6]=rsp + #64 STK[0]=rsp + #68
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #0 L[1]=rsp + #48 L[2]=rsp + #36 L[3]=rsp + #20 L[4]=rsp + #24 L[5]=rsp + #92 L[6]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [40]=Oop [48]=Oop [56]=NarrowOop [72]=NarrowOop off=2632}
a48   	int3	# ShouldNotReachHere
a48
a4d   B138: #	N2779 &lt;- B71  Freq: 5.27941e-05
a4d   	movq    RBP, [rsp + #32]	# spill
a52   	movq    R10, [rsp + #48]	# spill
a57   	movq    [rsp + #0], R10	# spill
a5b   	movl    R11, [rsp + #64]	# spill
a60   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
a72   	movq    R10, [rsp + #72]	# spill
a77   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #24], rax
	movq    rax, [rsp - #8]
a89   	movsd   [rsp + #32], XMM0	# spill
a8f   	movl    [rsp + #28], R11	# spill
a94   	movq    [rsp + #48], R10	# spill
a99   	movss   [rsp + #56], XMM3	# spill
a9f   	movl    [rsp + #60], RAX	# spill
aa3   	movl    [rsp + #64], RDX	# spill
aa7   	movss   [rsp + #68], XMM4	# spill
aad   	movl    [rsp + #80], R13	# spill
ab2   	movl    RSI, #-34	# int
ab7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=rsp + #28 L[3]=rsp + #72 L[4]=rsp + #56 L[5]=rsp + #60 L[6]=rsp + #64 STK[0]=rsp + #68 STK[1]=rsp + #48 STK[2]=rsp + #80
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #28 L[3]=rsp + #12 L[4]=rsp + #48 L[5]=rsp + #92 L[6]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [48]=Oop [56]=NarrowOop [72]=Oop off=2748}
abc   	int3	# ShouldNotReachHere
abc
ac1   B139: #	N2779 &lt;- B42  Freq: 5.23621e-05
ac1   	movq    RBP, [rsp + #32]	# spill
ac6   	movq    R11, [rsp + #48]	# spill
acb   	movq    [rsp + #0], R11	# spill
acf   	movl    R8, [rsp + #20]	# spill
ad4   	movl    [rsp + #12], R8	# spill
ad9   	movq    R11, [rsp + #72]	# spill
ade   	movq    [rsp + #16], R11	# spill
ae3   	movl    R11, [rsp + #40]	# spill
ae8   	movl    [rsp + #24], R11	# spill
aed   	movq    [rsp + #32], RDI	# spill
af2   	movl    [rsp + #28], RBX	# spill
af6   	movl    [rsp + #56], RBX	# spill
afa   	movl    RSI, #-28	# int
aff   	movq    [rsp + #72], RAX	# spill
b04   	movl    [rsp + #68], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
b0b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #68 STK[1]=rsp + #28
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #72 L[1]=rsp + #28 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=rsp + #56 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #28 L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #80 L[6]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop [68]=NarrowOop [72]=Oop off=2832}
b10   	int3	# ShouldNotReachHere
b10
b15   B140: #	N2779 &lt;- B38  Freq: 5.1676e-05
b15   	movq    RBP, [rsp + #32]	# spill
b1a   	movq    R10, [rsp + #48]	# spill
b1f   	movq    [rsp + #0], R10	# spill
b23   	movl    R11, [rsp + #20]	# spill
b28   	movl    [rsp + #12], R11	# spill
b2d   	movq    R10, [rsp + #72]	# spill
b32   	movq    [rsp + #16], R10	# spill
b37   	movl    R10, [rsp + #40]	# spill
b3c   	movl    [rsp + #24], R10	# spill
b41   	movq    [rsp + #32], RDI	# spill
b46   	movl    RSI, #-34	# int
b4b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #16 L[1]=rsp + #64 L[2]=_ L[3]=_ STK[0]=rsp + #16 STK[1]=rsp + #64
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=rsp + #64 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #64 L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #80 L[6]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop off=2896}
b50   	int3	# ShouldNotReachHere
b50
b55   B141: #	B142 &lt;- B72  Freq: 2.6397e-05
b55   	movl    RDI, RDX	# spill
b57   	movdl   R9, XMM3	# spill
b5c   	movdl   RDX, XMM4	# spill
b5c
b60   B142: #	N2779 &lt;- B122 B141  Freq: 2.6397e-05
b60   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
b69   	movq    R10, [rsp + #72]	# spill
b6e   	movq    [rsp + #24], R10	# spill
b73   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
b85   	movsd   [rsp + #40], XMM0	# spill
b8b   	movl    R10, [rsp + #64]	# spill
b90   	movl    [rsp + #36], R10	# spill
b95   	movl    [rsp + #56], R9	# spill
b9a   	movl    [rsp + #60], RAX	# spill
b9e   	movl    [rsp + #64], RDI	# spill
ba2   	movl    [rsp + #68], RDX	# spill
ba6   	movl    [rsp + #84], R13	# spill
bab   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
bb3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=RBP L[1]=rsp + #84 STK[0]=rsp + #84
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #36 L[3]=RBP L[4]=rsp + #56 L[5]=rsp + #60 L[6]=rsp + #64 STK[0]=rsp + #68
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #0 L[1]=rsp + #48 L[2]=rsp + #36 L[3]=rsp + #20 L[4]=rsp + #24 L[5]=rsp + #92 L[6]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [40]=Oop [48]=Oop [56]=NarrowOop off=3000}
bb8   	int3	# ShouldNotReachHere
bb8
bbd   B143: #	N2779 &lt;- B39  Freq: 2.5838e-05
bbd   	movl    RSI, #-155	# int
bc2   	movq    RBP, [rsp + #32]	# spill
bc7   	movq    R10, [rsp + #48]	# spill
bcc   	movq    [rsp + #0], R10	# spill
bd0   	movl    R11, [rsp + #20]	# spill
bd5   	movl    [rsp + #12], R11	# spill
bda   	movq    R10, [rsp + #72]	# spill
bdf   	movq    [rsp + #16], R10	# spill
be4   	movl    R10, [rsp + #40]	# spill
be9   	movl    [rsp + #24], R10	# spill
bee   	movq    [rsp + #32], RDI	# spill
bf3   	movl    R11, [rsp + #80]	# spill
bf8   	movl    [rsp + #68], R11	# spill
bfd   	movq    [rsp + #80], RAX	# spill
      	nop 	# 1 bytes pad for loops and calls
c03   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #80 L[1]=rsp + #64 STK[0]=rsp + #64
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #80 L[1]=rsp + #64 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=rsp + #64 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #64 L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #68 L[6]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop [80]=Oop off=3080}
c08   	int3	# ShouldNotReachHere
c08
c0d   B144: #	B145 &lt;- B74  Freq: 2.51741e-05
c0d   	movl    RDI, RDX	# spill
c0f   	movdl   R9, XMM3	# spill
c14   	movdl   RDX, XMM4	# spill
c14
c18   B145: #	N2779 &lt;- B123 B144 B169 B92 B175  Freq: 2.5243e-05
c18   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
c21   	movl    R11, [rsp + #64]	# spill
c26   	movq    R10, [rsp + #72]	# spill
c2b   	movq    [rsp + #24], R10	# spill
c30   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
c42   	movsd   [rsp + #40], XMM0	# spill
c48   	movl    [rsp + #36], R11	# spill
c4d   	movl    [rsp + #56], R9	# spill
c52   	movl    [rsp + #60], RAX	# spill
c56   	movl    [rsp + #64], RDI	# spill
c5a   	movl    [rsp + #68], RDX	# spill
c5e   	movl    [rsp + #84], R13	# spill
c63   	movl    [rsp + #88], RCX	# spill
c67   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
c6f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=RBP L[1]=rsp + #84 STK[0]=rsp + #84 STK[1]=rsp + #88
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #36 L[3]=RBP L[4]=rsp + #56 L[5]=rsp + #60 L[6]=rsp + #64 STK[0]=rsp + #68
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=rsp + #0 L[1]=rsp + #48 L[2]=rsp + #36 L[3]=rsp + #20 L[4]=rsp + #24 L[5]=rsp + #92 L[6]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [40]=Oop [48]=Oop [56]=NarrowOop off=3188}
c74   	int3	# ShouldNotReachHere
c74
c79   B146: #	N2779 &lt;- B41  Freq: 2.4641e-05
c79   	movq    RBP, [rsp + #32]	# spill
c7e   	movq    R10, [rsp + #48]	# spill
c83   	movq    [rsp + #0], R10	# spill
c87   	movl    R8, [rsp + #20]	# spill
c8c   	movl    [rsp + #12], R8	# spill
c91   	movq    R10, [rsp + #72]	# spill
c96   	movq    [rsp + #16], R10	# spill
c9b   	movl    R10, [rsp + #40]	# spill
ca0   	movl    [rsp + #24], R10	# spill
ca5   	movq    [rsp + #32], RDI	# spill
caa   	movl    RSI, #-155	# int
caf   	movl    R10, [rsp + #80]	# spill
cb4   	movl    [rsp + #68], R10	# spill
cb9   	movq    [rsp + #80], RAX	# spill
cbe   	movl    [rsp + #88], R11	# spill
cc3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #80 L[1]=rsp + #64 STK[0]=rsp + #64 STK[1]=rsp + #88
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #80 L[1]=rsp + #64 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=rsp + #64 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #64 L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #68 L[6]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop [80]=Oop off=3272}
cc8   	int3	# ShouldNotReachHere
cc8
ccd   B147: #	N2779 &lt;- B43  Freq: 2.46409e-05
ccd   	movq    RBP, [rsp + #32]	# spill
cd2   	movq    R10, [rsp + #48]	# spill
cd7   	movq    [rsp + #0], R10	# spill
cdb   	movl    R11, [rsp + #20]	# spill
ce0   	movl    [rsp + #12], R11	# spill
ce5   	movq    R10, [rsp + #72]	# spill
cea   	movq    [rsp + #16], R10	# spill
cef   	movl    R11, [rsp + #40]	# spill
cf4   	movl    [rsp + #24], R11	# spill
cf9   	movq    [rsp + #32], RDI	# spill
cfe   	movl    [rsp + #28], RBX	# spill
d02   	movl    [rsp + #56], RBX	# spill
d06   	movl    RSI, #-155	# int
d0b   	movl    R10, [rsp + #80]	# spill
d10   	movl    [rsp + #60], R10	# spill
d15   	movq    [rsp + #64], RAX	# spill
d1a   	movl    [rsp + #76], R9	# spill
d1f   	movl    [rsp + #80], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
d27   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #80 STK[0]=rsp + #76 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #64 L[1]=rsp + #28 L[2]=rsp + #76 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=rsp + #56 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #28 L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #60 L[6]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop [64]=Oop off=3372}
d2c   	int3	# ShouldNotReachHere
d2c
d31   B148: #	N2779 &lt;- B44  Freq: 2.46409e-05
d31   	movq    RBP, [rsp + #32]	# spill
d36   	movq    R10, [rsp + #48]	# spill
d3b   	movq    [rsp + #0], R10	# spill
d3f   	movl    R11, [rsp + #20]	# spill
d44   	movl    [rsp + #12], R11	# spill
d49   	movl    R11, [rsp + #40]	# spill
d4e   	movl    [rsp + #24], R11	# spill
d53   	movq    [rsp + #32], RDI	# spill
d58   	movl    [rsp + #28], RBX	# spill
d5c   	movl    RSI, #-155	# int
d61   	movq    [rsp + #56], RAX	# spill
d66   	movl    [rsp + #64], R9	# spill
d6b   	movl    [rsp + #68], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
d73   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #68 STK[0]=rsp + #64 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=rsp + #28 L[3]=rsp + #56 L[4]=rsp + #64
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #28 L[3]=rsp + #12 L[4]=rsp + #72 L[5]=rsp + #80 L[6]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [56]=Oop [72]=Oop off=3448}
d78   	int3	# ShouldNotReachHere
d78
d7d   B149: #	N2779 &lt;- B45  Freq: 2.46409e-05
d7d   	movq    RBP, [rsp + #32]	# spill
d82   	movq    R10, [rsp + #48]	# spill
d87   	movq    [rsp + #0], R10	# spill
d8b   	movl    R11, [rsp + #20]	# spill
d90   	movl    [rsp + #12], R11	# spill
d95   	movl    R10, [rsp + #40]	# spill
d9a   	movl    [rsp + #24], R10	# spill
d9f   	movq    [rsp + #32], RDI	# spill
da4   	movl    [rsp + #28], RBX	# spill
da8   	movl    RSI, #-155	# int
dad   	movq    [rsp + #56], RAX	# spill
db2   	movl    [rsp + #64], R9	# spill
db7   	movl    [rsp + #68], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
dbf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #68 STK[0]=rsp + #64 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=rsp + #28 L[3]=rsp + #56 L[4]=rsp + #64
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #28 L[3]=rsp + #12 L[4]=rsp + #72 L[5]=rsp + #80 L[6]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [56]=Oop [72]=Oop off=3524}
dc4   	int3	# ShouldNotReachHere
dc4
dc9   B150: #	N2779 &lt;- B46  Freq: 2.46409e-05
dc9   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
dd2   	movq    R10, [rsp + #72]	# spill
dd7   	movq    [rsp + #24], R10	# spill
ddc   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
dee   	movq    [rsp + #40], RDI	# spill
df3   	movl    [rsp + #36], RBX	# spill
df7   	movl    RSI, #-155	# int
dfc   	movq    [rsp + #64], RAX	# spill
e01   	movl    [rsp + #72], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
e07   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #72 STK[0]=RBP STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #36 L[3]=rsp + #64 L[4]=rsp + #72
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=rsp + #0 L[1]=rsp + #48 L[2]=rsp + #36 L[3]=rsp + #20 L[4]=rsp + #24 L[5]=rsp + #80 L[6]=rsp + #32
        # OopMap{[0]=Oop [24]=Oop [40]=Oop [48]=Oop [64]=Oop off=3596}
e0c   	int3	# ShouldNotReachHere
e0c
e11   B151: #	N2779 &lt;- B47  Freq: 2.46409e-05
e11   	movq    RBP, [rsp + #32]	# spill
e16   	movq    R10, [rsp + #48]	# spill
e1b   	movq    [rsp + #0], R10	# spill
e1f   	movl    R10, [rsp + #20]	# spill
e24   	movl    [rsp + #12], R10	# spill
e29   	movl    R11, [rsp + #40]	# spill
e2e   	movl    [rsp + #24], R11	# spill
e33   	movq    [rsp + #32], RDI	# spill
e38   	movl    [rsp + #28], RBX	# spill
e3c   	movl    RSI, #-155	# int
e41   	movq    [rsp + #56], RAX	# spill
e46   	movl    [rsp + #64], R9	# spill
e4b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #64 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=rsp + #28 L[3]=rsp + #56 L[4]=rsp + #64
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #28 L[3]=rsp + #12 L[4]=rsp + #72 L[5]=rsp + #80 L[6]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [56]=Oop [72]=Oop off=3664}
e50   	int3	# ShouldNotReachHere
e50
e55   B152: #	N2779 &lt;- B31  Freq: 2.46396e-05
e55   	movq    RBP, [rsp + #32]	# spill
e5a   	movl    R10, [rsp + #20]	# spill
e5f   	movl    [rsp + #12], R10	# spill
e64   	movl    RSI, #-155	# int
e69   	movl    [rsp + #36], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
e6f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:94  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #64 L[3]=rsp + #12 L[4]=rsp + #72 L[5]=rsp + #80 L[6]=rsp + #40 STK[0]=rsp + #28 STK[1]=rsp + #36
        # OopMap{rbp=Oop [48]=Oop [72]=Oop off=3700}
e74   	int3	# ShouldNotReachHere
e74
e79   B153: #	N2779 &lt;- B32  Freq: 2.46395e-05
e79   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
e82   	movl    R10, [rsp + #28]	# spill
e87   	movl    [rsp + #16], R10	# spill
e8c   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
e9e   	movl    [rsp + #36], R11	# spill
ea3   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
eab   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:66  L[0]=rsp + #0 L[1]=rsp + #48 L[2]=rsp + #16 L[3]=rsp + #36 L[4]=rsp + #72 L[5]=rsp + #80 L[6]=rsp + #32 STK[0]=rsp + #36 STK[1]=RBP
        # OopMap{[0]=Oop [48]=Oop [72]=Oop off=3760}
eb0   	int3	# ShouldNotReachHere
eb0
eb5   B154: #	N2779 &lt;- B11  Freq: 9.92053e-07
eb5   	movl    RSI, #-28	# int
eba   	movq    RBP, [rsp + #32]	# spill
ebf   	movq    [rsp + #16], R11	# spill
ec4   	movq    [rsp + #24], R13	# spill
ec9   	movl    [rsp + #40], R14	# spill
ece   	movq    [rsp + #48], RAX	# spill
ed3   	movl    [rsp + #44], R10	# spill
ed8   	movq    [rsp + #56], RCX	# spill
edd   	movl    [rsp + #64], R10	# spill
ee2   	movl    [rsp + #68], RDI	# spill
      	nop 	# 1 bytes pad for loops and calls
ee7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #68 STK[1]=rsp + #44
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #56 L[1]=rsp + #44 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #48 L[1]=rsp + #16 L[2]=rsp + #64 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #44 L[3]=rsp + #40 L[4]=rsp + #24 L[5]=rsp + #40 L[6]=_
        # OopMap{rbp=Oop [16]=Oop [24]=Oop [48]=Oop [56]=Oop [68]=NarrowOop off=3820}
eec   	int3	# ShouldNotReachHere
eec
ef1   B155: #	N2779 &lt;- B54  Freq: 9.79804e-07
ef1   	movq    RBP, [rsp + #32]	# spill
ef6   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
f08   	movl    RSI, #-130	# int
      	nop 	# 2 bytes pad for loops and calls
f0f   	call,static  wrapper for: uncommon_trap(reason=&apos;loop_limit_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:133  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #64 L[3]=rsp + #12 L[4]=rsp + #72 L[5]=rsp + #80 L[6]=rsp + #40
        # OopMap{rbp=Oop [48]=Oop [72]=Oop off=3860}
f14   	int3	# ShouldNotReachHere
f14
f19   B156: #	N2779 &lt;- B7  Freq: 9.79055e-07
f19   	movl    RSI, #-34	# int
f1e   	movq    RBP, [rsp + #32]	# spill
f23   	movq    [rsp + #16], RDX	# spill
f28   	movq    [rsp + #24], R9	# spill
f2d   	movq    [rsp + #32], R9	# spill
f32   	movl    [rsp + #56], R14	# spill
f37   	movq    [rsp + #64], RAX	# spill
f3c   	movl    [rsp + #60], RCX	# spill
f40   	movl    [rsp + #72], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
f47   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #24 L[1]=rsp + #60 L[2]=_ L[3]=_ STK[0]=rsp + #24 STK[1]=rsp + #60
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #64 L[1]=rsp + #16 L[2]=rsp + #72 L[3]=rsp + #32 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #60 L[3]=rsp + #56 L[4]=rsp + #24 L[5]=rsp + #56 L[6]=_
        # OopMap{rbp=Oop [16]=Oop [24]=Oop [32]=Oop [64]=Oop off=3916}
f4c   	int3	# ShouldNotReachHere
f4c
f51   B157: #	N2779 &lt;- B20  Freq: 9.76827e-07
f51   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
f5a   	movl    RSI, #-28	# int
f5f   	movl    [rsp + #32], R10	# spill
f64   	movl    [rsp + #40], R14	# spill
f69   	movl    [rsp + #44], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
f6f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=rsp + #8 L[2]=_ L[3]=_ STK[0]=rsp + #44 STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=rsp + #16 L[5]=rsp + #40 L[6]=_
        # OopMap{[0]=Oop [8]=Oop [16]=Oop [44]=NarrowOop off=3956}
f74   	int3	# ShouldNotReachHere
f74
f79   B158: #	N2779 &lt;- B8  Freq: 4.89527e-07
f79   	movl    RSI, #-155	# int
f7e   	movq    RBP, [rsp + #32]	# spill
f83   	movq    [rsp + #16], R11	# spill
f88   	movq    [rsp + #24], R9	# spill
f8d   	movl    [rsp + #40], R14	# spill
f92   	movq    [rsp + #48], RAX	# spill
f97   	movl    [rsp + #44], R10	# spill
f9c   	movl    [rsp + #64], R10	# spill
fa1   	movq    [rsp + #72], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
fa7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #72 L[1]=rsp + #44 STK[0]=rsp + #44
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #72 L[1]=rsp + #44 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #48 L[1]=rsp + #16 L[2]=rsp + #64 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #44 L[3]=rsp + #40 L[4]=rsp + #24 L[5]=rsp + #40 L[6]=_
        # OopMap{rbp=Oop [16]=Oop [24]=Oop [48]=Oop [72]=Oop off=4012}
fac   	int3	# ShouldNotReachHere
fac
fb1   B159: #	N2779 &lt;- B1  Freq: 4.76837e-07
fb1   	movl    RSI, #-155	# int
fb6   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
fbf   	movl    [rsp + #32], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
fc7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:5  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #24 L[3]=rsp + #32 L[4]=rsp + #16 L[5]=_ L[6]=_ STK[0]=rsp + #32 STK[1]=RBP
        # OopMap{[0]=Oop [8]=Oop [16]=Oop off=4044}
fcc   	int3	# ShouldNotReachHere
fcc
fd1   B160: #	N2779 &lt;- B25  Freq: 4.76198e-07
fd1   	movq    RBP, [rsp + #32]	# spill
fd6   	movq    [rsp + #0], R11	# spill
fda   	movq    [rsp + #8], R13	# spill
fdf   	movl    [rsp + #20], R8	# spill
fe4   	movl    [rsp + #24], R10	# spill
fe9   	movl    [rsp + #32], R14	# spill
      	nop 	# 1 bytes pad for loops and calls
fef   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:47  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #24 L[3]=rsp + #32 L[4]=rsp + #8 L[5]=rsp + #32 L[6]=rsp + #20 STK[0]=rsp + #20
        # OopMap{rbp=Oop [0]=Oop [8]=Oop off=4084}
ff4   	int3	# ShouldNotReachHere
ff4
ff9   B161: #	N2779 &lt;- B26  Freq: 4.76197e-07
ff9   	movq    [rsp + #0], R10	# spill
ffd   	movq    [rsp + #8], R11	# spill
1002   	movl    [rsp + #16], RBX	# spill
1006   	movq    [rsp + #24], R13	# spill
100b   	movl    [rsp + #32], R8	# spill
1010   	movl    [rsp + #36], R9	# spill
1015   	movl    [rsp + #40], R14	# spill
      	nop 	# 1 bytes pad for loops and calls
101b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:66  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #36 L[4]=rsp + #24 L[5]=rsp + #40 L[6]=rsp + #32 STK[0]=rsp + #36 STK[1]=RBP
        # OopMap{[0]=Oop [8]=Oop [24]=Oop off=4128}
1020   	int3	# ShouldNotReachHere
1020
1025   B162: #	N2779 &lt;- B10  Freq: 4.66849e-07
1025   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
102e   	movl    RSI, #-155	# int
1033   	movl    [rsp + #48], R14	# spill
1038   	movq    [rsp + #56], RAX	# spill
103d   	movl    [rsp + #52], R10	# spill
1042   	movl    [rsp + #72], R10	# spill
1047   	movq    [rsp + #80], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
104f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #80 L[1]=rsp + #52 STK[0]=rsp + #52 STK[1]=RBP
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #80 L[1]=rsp + #52 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #56 L[1]=rsp + #8 L[2]=rsp + #72 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #52 L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #48 L[6]=_
        # OopMap{[0]=Oop [8]=Oop [16]=Oop [56]=Oop [80]=Oop off=4180}
1054   	int3	# ShouldNotReachHere
1054
1059   B163: #	N2779 &lt;- B12  Freq: 4.66848e-07
1059   	movq    RBP, [rsp + #32]	# spill
105e   	movq    [rsp + #16], R11	# spill
1063   	movq    [rsp + #24], R13	# spill
1068   	movl    [rsp + #40], R14	# spill
106d   	movq    [rsp + #48], RAX	# spill
1072   	movl    [rsp + #44], R10	# spill
1077   	movq    [rsp + #56], RCX	# spill
107c   	movl    [rsp + #64], R10	# spill
1081   	movl    [rsp + #72], RBX	# spill
1085   	movl    [rsp + #76], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
108b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #76 STK[0]=rsp + #72 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #56 L[1]=rsp + #44 L[2]=rsp + #72 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #48 L[1]=rsp + #16 L[2]=rsp + #64 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #44 L[3]=rsp + #40 L[4]=rsp + #24 L[5]=rsp + #40 L[6]=_
        # OopMap{rbp=Oop [16]=Oop [24]=Oop [48]=Oop [56]=Oop off=4240}
1090   	int3	# ShouldNotReachHere
1090
1095   B164: #	N2779 &lt;- B13  Freq: 4.66848e-07
1095   	movq    RBP, [rsp + #32]	# spill
109a   	movq    [rsp + #8], R13	# spill
109f   	movq    [rsp + #16], R11	# spill
10a4   	movl    [rsp + #32], R14	# spill
10a9   	movq    [rsp + #40], RAX	# spill
10ae   	movq    [rsp + #48], RCX	# spill
10b3   	movl    [rsp + #60], RBX	# spill
10b7   	movl    [rsp + #64], RBX	# spill
10bb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #64 STK[0]=rsp + #60 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #40 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #48 L[4]=rsp + #60
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #32 L[4]=rsp + #8 L[5]=rsp + #32 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop [48]=Oop off=4288}
10c0   	int3	# ShouldNotReachHere
10c0
10c5   B165: #	N2779 &lt;- B14  Freq: 4.66848e-07
10c5   	movq    RBP, [rsp + #32]	# spill
10ca   	movq    [rsp + #8], R13	# spill
10cf   	movq    [rsp + #16], R11	# spill
10d4   	movl    [rsp + #32], R14	# spill
10d9   	movq    [rsp + #40], RAX	# spill
10de   	movq    [rsp + #48], RCX	# spill
10e3   	movl    [rsp + #60], RBX	# spill
10e7   	movl    [rsp + #64], RBX	# spill
10eb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #64 STK[0]=rsp + #60 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #40 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #48 L[4]=rsp + #60
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #32 L[4]=rsp + #8 L[5]=rsp + #32 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop [48]=Oop off=4336}
10f0   	int3	# ShouldNotReachHere
10f0
10f5   B166: #	N2779 &lt;- B15  Freq: 4.66847e-07
10f5   	movq    RBP, [rsp + #32]	# spill
10fa   	movq    [rsp + #8], R13	# spill
10ff   	movq    [rsp + #16], R11	# spill
1104   	movl    [rsp + #32], R14	# spill
1109   	movq    [rsp + #40], RAX	# spill
110e   	movq    [rsp + #48], RCX	# spill
1113   	movl    [rsp + #60], RBX	# spill
1117   	movl    [rsp + #64], RDI	# spill
111b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #60 STK[0]=rsp + #64 STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #40 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #48 L[4]=rsp + #60
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #32 L[4]=rsp + #8 L[5]=rsp + #32 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop [48]=Oop off=4384}
1120   	int3	# ShouldNotReachHere
1120
1125   B167: #	N2779 &lt;- B16  Freq: 4.66847e-07
1125   	movq    RBP, [rsp + #32]	# spill
112a   	movq    [rsp + #8], R13	# spill
112f   	movq    [rsp + #16], R11	# spill
1134   	movl    [rsp + #32], R14	# spill
1139   	movq    [rsp + #40], RAX	# spill
113e   	movq    [rsp + #48], RCX	# spill
1143   	movl    [rsp + #60], RBX	# spill
1147   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
114f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #60 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #40 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #48 L[4]=rsp + #60
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #32 L[4]=rsp + #8 L[5]=rsp + #32 L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop [48]=Oop off=4436}
1154   	int3	# ShouldNotReachHere
1154
1159   B168: #	B137 &lt;- B81  Freq: 1.45654e-07
1159   	movdl   R9, XMM3	# spill
115e   	movdl   RDX, XMM5	# spill
1162   	jmp     B137
1162
1167   B169: #	B145 &lt;- B80  Freq: 6.85431e-08
1167   	movdl   R9, XMM3	# spill
116c   	movl    RDX, R10	# spill
116f   	jmp     B145
116f
1174   B170: #	B58 B171 &lt;- B58  Freq: 1.17015e-08
1174   	cmpl    RDI, R9
1177   	jl     B58	# loop end  P=0.999999 C=13065.000000
1177
117d   B171: #	B90 &lt;- B170  Freq: 1.18568e-14
117d   	jmp     B90
117d
1182   B172: #	N2779 &lt;- B106  Freq: 1.05835e-09
1182   	movl    RSI, #-155	# int
1187   	movl    [rsp + #28], RAX	# spill
118b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:40  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #28
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #20 L[3]=rsp + #16 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=_
        # OopMap{rbp=Oop [0]=Oop [8]=Oop off=4496}
1190   	int3	# ShouldNotReachHere
1190
1195   B173: #	B137 &lt;- B86  Freq: 7.95329e-10
1195   	movdl   R9, XMM3	# spill
119a   	movl    RDX, R10	# spill
119d   	jmp     B137
119d
11a2   B174: #	B118 &lt;- B83  Freq: 7.93164e-10
11a2   	movdl   R9, XMM3	# spill
11a7   	jmp     B118
11a7
11ac   B175: #	B145 &lt;- B85  Freq: 3.74273e-10
11ac   	movdl   R9, XMM3	# spill
11b1   	movl    RDX, R10	# spill
11b4   	jmp     B145
11b4
11b9   B176: #	N2779 &lt;- B131  Freq: 5.37155e-11
11b9   	movq    RBP, [rsp + #32]	# spill
11be   	movq    R11, [rsp + #48]	# spill
11c3   	movq    [rsp + #0], R11	# spill
11c7   	movl    R11, [rsp + #20]	# spill
11cc   	movl    [rsp + #12], R11	# spill
11d1   	movq    R11, [rsp + #72]	# spill
11d6   	movq    [rsp + #16], R11	# spill
11db   	movl    R8, [rsp + #40]	# spill
11e0   	movl    [rsp + #24], R8	# spill
11e5   	movl    [rsp + #28], RCX	# spill
11e9   	movl    [rsp + #40], R10	# spill
11ee   	movl    RSI, #-34	# int
11f3   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #28 STK[1]=rsp + #0 STK[2]=rsp + #40 STK[3]=rsp + #16
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #64 L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #92 L[6]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [28]=NarrowOop off=4600}
11f8   	int3	# ShouldNotReachHere
11f8
11fd   B177: #	N2779 &lt;- B63  Freq: 5.43557e-05
11fd   	movq    RBP, [rsp + #48]	# spill
1202   	movl    RSI, #-10	# int
1207   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #64 STK[3]=rsp + #72
        # OopMap{rbp=Oop [72]=Oop off=4620}
120c   	int3	# ShouldNotReachHere
120c
1211   B178: #	N2779 &lt;- B65  Freq: 5.43545e-05
1211   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1217   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4636}
121c   	int3	# ShouldNotReachHere
121c
1221   B179: #	N2779 &lt;- B70  Freq: 5.34952e-05
1221   	movl    RBP, R13	# spill
1224   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
122b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL STK[2]=RBP
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4656}
1230   	int3	# ShouldNotReachHere
1230
1235   B180: #	N2779 &lt;- B73  Freq: 5.3495e-05
1235   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
123b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4672}
1240   	int3	# ShouldNotReachHere
1240
1245   B181: #	N2779 &lt;- B34  Freq: 5.33709e-05
1245   	movq    RBP, [rsp + #48]	# spill
124a   	movl    RSI, #-10	# int
124f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #64 STK[3]=rsp + #72
        # OopMap{rbp=Oop [72]=Oop off=4692}
1254   	int3	# ShouldNotReachHere
1254
1259   B182: #	N2779 &lt;- B37  Freq: 5.23623e-05
1259   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
125f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=rsp + #64
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4708}
1264   	int3	# ShouldNotReachHere
1264
1269   B183: #	N2779 &lt;- B40  Freq: 5.23621e-05
1269   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
126f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4724}
1274   	int3	# ShouldNotReachHere
1274
1279   B184: #	N2779 &lt;- B48  Freq: 5.23619e-05
1279   	movq    RBP, [rsp + #48]	# spill
127e   	movl    RSI, #-10	# int
1283   	movl    [rsp + #0], RCX	# spill
1286   	movq    [rsp + #8], RAX	# spill
128b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop off=4752}
1290   	int3	# ShouldNotReachHere
1290
1295   B185: #	N2779 &lt;- B50  Freq: 5.22431e-05
1295   	movl    RSI, #-10	# int
129a   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
129f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:77  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4772}
12a4   	int3	# ShouldNotReachHere
12a4
12a9   B186: #	N2779 &lt;- B2  Freq: 1.01328e-06
12a9   	movq    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
12af   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #24 STK[3]=rsp + #16
        # OopMap{rbp=Oop [16]=Oop off=4788}
12b4   	int3	# ShouldNotReachHere
12b4
12b9   B187: #	N2779 &lt;- B24  Freq: 1.01192e-06
12b9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
12bf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Curly::match0 @ bci:38  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=4804}
12c4   	int3	# ShouldNotReachHere
12c4
12c9   B188: #	N2779 &lt;- B4  Freq: 1.01115e-06
      	nop 	# 2 bytes pad for loops and calls
12cb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4816}
12d0   	int3	# ShouldNotReachHere
12d0
12d5   B189: #	N2779 &lt;- B6  Freq: 9.92057e-07
12d5   	movl    RBP, RCX	# spill
12d7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4828}
12dc   	int3	# ShouldNotReachHere
12dc
12e1   B190: #	N2779 &lt;- B9  Freq: 9.92055e-07
      	nop 	# 2 bytes pad for loops and calls
12e3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4840}
12e8   	int3	# ShouldNotReachHere
12e8
12ed   B191: #	N2779 &lt;- B17  Freq: 9.9205e-07
12ed   	movq    RBP, R11	# spill
12f0   	movl    [rsp + #0], R8	# spill
12f4   	movq    [rsp + #8], RCX	# spill
      	nop 	# 2 bytes pad for loops and calls
12fb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop off=4864}
1300   	int3	# ShouldNotReachHere
1300
1305   B192: #	N2779 &lt;- B19  Freq: 9.898e-07
      	nop 	# 2 bytes pad for loops and calls
1307   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Node::match @ bci:14  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Curly::match0 @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=4876}
130c   	int3	# ShouldNotReachHere
130c
1311   B193: #	B200 &lt;- B132  Freq: 5.37155e-10
1311   	# exception oop is in rax; no code emitted
1311   	movq    RSI, RAX	# spill
1314   	jmp,s   B200
1314
1316   B194: #	B200 &lt;- B114  Freq: 7.91145e-09
1316   	# exception oop is in rax; no code emitted
1316   	movq    RSI, RAX	# spill
1319   	jmp,s   B200
1319
131b   B195: #	B200 &lt;- B112  Freq: 1.06793e-08
131b   	# exception oop is in rax; no code emitted
131b   	movq    RSI, RAX	# spill
131e   	jmp,s   B200
131e
1320   B196: #	B200 &lt;- B110  Freq: 1.32696e-08
1320   	# exception oop is in rax; no code emitted
1320   	movq    RSI, RAX	# spill
1323   	jmp,s   B200
1323
1325   B197: #	B200 &lt;- B108  Freq: 2.09748e-08
1325   	# exception oop is in rax; no code emitted
1325   	movq    RSI, RAX	# spill
1328   	jmp,s   B200
1328
132a   B198: #	B200 &lt;- B105  Freq: 2.21956e-08
132a   	# exception oop is in rax; no code emitted
132a   	movq    RSI, RAX	# spill
132d   	jmp,s   B200
132d
132f   B199: #	B200 &lt;- B101  Freq: 1.17152e-06
132f   	# exception oop is in rax; no code emitted
132f   	movq    RSI, RAX	# spill
132f
1332   B200: #	N2779 &lt;- B197 B198 B194 B199 B195 B193 B196  Freq: 1.24709e-06
1332   	addq    rsp, 112	# Destroy frame
	popq   rbp

1337   	jmp     rethrow_stub
1337
133c   B201: #	N2779 &lt;- B130  Freq: 5.44289e-11
133c   	movq    RBP, [rsp + #48]	# spill
1341   	movl    [rsp + #0], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
1347   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #72
        # java.util.regex.Pattern$Curly::match0 @ bci:141  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [72]=Oop off=4940}
134c   	int3	# ShouldNotReachHere
134c

</opto_assembly>
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='524'>
{method}
 - this oop:          0x00007f375593e320
 - method holder:     &apos;java/util/regex/Pattern&apos;
 - constants:         0x00007f3755938540 constant pool [1383]/operands[7] {0x00007f3755938540} for &apos;java/util/regex/Pattern&apos; cache=0x00007f37559429f0
 - access:            0x8100001a  private static final 
 - name:              &apos;isSupplementary&apos;
 - signature:         &apos;(I)Z&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef998: 0xa0000000 i2c: 0x00007f3758b13ba0 c2i: 0x00007f3758b13cd9 c2iUV: 0x00007f3758b13cac
 - compiled entry     0x00007f3758c7a7c0
 - code size:         20
 - code start:        0x00007f375593e2f0
 - code end (excl):   0x00007f375593e304
 - method data:       0x00007f3755b21b58
 - checked ex length: 0
 - linenumber start:  0x00007f375593e304
 - localvar length:   1
 - localvar start:    0x00007f375593e312
 - compiled code: nmethod   7863  265       3       java.util.regex.Pattern::isSupplementary (20 bytes)
#
#  bool ( int )
#
#r018 rsi   : parm 0: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B4 B5 B3  Freq: 1
abababab
000   B1: #	B4 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (200 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c   	movl    R10, RSI	# spill
00f   	movzwl  R10, R10	# int &amp; 0xFFFF
013   	cmpl    RSI, #65536
019   	jge,s   B4  P=0.000000 C=12808.000000
019
01b   B2: #	B5 B3 &lt;- B1  Freq: 1
01b   	cmpl    R10, #55296
022   	jge,s   B5  P=0.000000 C=12808.000000
022
024   B3: #	N1 &lt;- B2  Freq: 0.999999
024   	xorl    RAX, RAX	# int
026   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

031   	ret
031
032   B4: #	N1 &lt;- B1  Freq: 4.76837e-07
032   	movl    [rsp + #0], RSI	# spill
035   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
03b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern::isSupplementary @ bci:3  L[0]=rsp + #0 STK[0]=rsp + #0 STK[1]=#65536
        # OopMap{off=64}
040   	int3	# ShouldNotReachHere
040
045   B5: #	N1 &lt;- B2  Freq: 4.76837e-07
045   	movl    [rsp + #0], R10	# spill
049   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
04f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isSurrogate @ bci:3  L[0]=rsp + #0 STK[0]=rsp + #0 STK[1]=#55296
        # java.util.regex.Pattern::isSupplementary @ bci:8  L[0]=_
        # OopMap{off=84}
054   	int3	# ShouldNotReachHere
054

</opto_assembly>
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
<opto_assembly compile_id='544'>
{method}
 - this oop:          0x00007f3755946b30
 - method holder:     &apos;java/util/regex/Pattern$BmpCharProperty&apos;
 - constants:         0x00007f3755946748 constant pool [65] {0x00007f3755946748} for &apos;java/util/regex/Pattern$BmpCharProperty&apos; cache=0x00007f37559476b0
 - access:            0x81000000  
 - name:              &apos;match&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z&apos;
 - max stack:         5
 - max locals:        4
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      11
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37681c7d78: 0xbbab0000 i2c: 0x00007f3758b26ce0 c2i: 0x00007f3758b26e25 c2iUV: 0x00007f3758b26df8
 - compiled entry     0x00007f3758d04760
 - code size:         50
 - code start:        0x00007f3755946ac0
 - code end (excl):   0x00007f3755946af2
 - method data:       0x00007f3755c8e890
 - checked ex length: 0
 - linenumber start:  0x00007f3755946af2
 - localvar length:   4
 - localvar start:    0x00007f3755946afe
 - compiled code: nmethod   8309  475       3       java.util.regex.Pattern$BmpCharProperty::match (50 bytes)
#
#  bool ( java/util/regex/Pattern$BmpCharProperty:NotNull *, java/util/regex/Matcher:exact *, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$BmpCharProperty:NotNull *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/CharSequence *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N268: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B23 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (248 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movq    [rsp + #24], RSI	# spill
031   	movl    [rsp + #40], RCX	# spill
035   	movl    RSI, #-10	# int
03a   	movq    [rsp + #8], RDX	# spill
03f   	movl    R11, [RDX + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
043   	NullCheck RDX
043
043   B2: #	B18 B3 &lt;- B1  Freq: 0.999999
043   	movl    RSI, #-155	# int
048   	cmpl    RCX, R11
04b   	jge     B18  P=0.000000 C=5521.000000
04b
051   B3: #	B24 B4 &lt;- B2  Freq: 0.999999
051   	movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
055   	NullCheck R8
055
055   B4: #	B16 B5 &lt;- B3  Freq: 0.999997
055   	cmpl    R10, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
05c   	jne,u  B16  P=0.000001 C=-1.000000
05c
062   B5: #	B17 B6 &lt;- B4  Freq: 0.999996
062   	# checkcastPP of R8
062   	movq    [rsp + #48], R8	# spill
067   	testl   RCX, RCX
069   	jl     B17  P=0.000000 C=7895.000000
069
06f   B6: #	B25 B7 &lt;- B5  Freq: 0.999996
06f   	movl    R10, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
073   	movl    RBP, [R10 + #12 (8-bit)]	# range
077   	NullCheck R10
077
077   B7: #	B19 B8 &lt;- B6  Freq: 0.999995
077   	cmpl    RCX, RBP
079   	jge     B19  P=0.000000 C=7895.000000
079
07f   B8: #	B15 B9 &lt;- B7  Freq: 0.999995
07f   	cmpl    RCX, RBP	# unsigned
081   	jnb,u  B15  P=0.000001 C=-1.000000
081
087   B9: #	B21 B10 &lt;- B8  Freq: 0.999994
087   	movzwl  RDX, [R10 + #16 + RCX &lt;&lt; #1]	# ushort/char
08d   	movq    RSI, [rsp + #24]	# spill
      	nop 	# 3 bytes pad for loops and calls
095   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$CharProperty::isSatisfiedBy
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:16  L[0]=rsp + #24 L[1]=rsp + #8 L[2]=rsp + #40 L[3]=rsp + #48
        # OopMap{[8]=Oop [24]=Oop [48]=Oop off=164}
0a4
0a4   B10: #	B12 B11 &lt;- B9  Freq: 0.999973
        # Block is sole successor of call
0a4   	movl    R8, RAX	# spill
0a7   	movq    R10, [rsp + #24]	# spill
0ac   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
0b0   	decode_heap_oop RSI,R10
13b   	xorl    RAX, RAX	# int
13d   	testl   R8, R8
140   	jne,s   B12  P=0.190907 C=5521.000000
140
142   B11: #	N268 &lt;- B10 B13  Freq: 0.99997
142   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

14d   	ret
14d
14e   B12: #	B20 B13 &lt;- B10  Freq: 0.190902
14e   	movl    RCX, [rsp + #40]	# spill
152   	incl    RCX	# int
154   	movq    RDX, [rsp + #8]	# spill
159   	movq    R8, [rsp + #48]	# spill
      	nop 	# 3 bytes pad for loops and calls
161   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$Node::match
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:31  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap{off=368}
170
170   B13: #	B11 B14 &lt;- B12  Freq: 0.190899
        # Block is sole successor of call
170   	movl    R10, RAX	# spill
173   	movl    RAX, #1	# int
178   	testl   R10, R10
17b   	jne,s   B11  P=1.000000 C=1054.000000
17b
17d   B14: #	N268 &lt;- B13  Freq: 9.10275e-08
17d   	movl    RSI, #-155	# int
182   	movl    RBP, R10	# spill
      	nop 	# 2 bytes pad for loops and calls
187   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:34  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP
        # OopMap{off=396}
18c   	int3	# ShouldNotReachHere
18c
191   B15: #	N268 &lt;- B8  Freq: 1.01327e-06
191   	movq    RBP, [rsp + #24]	# spill
196   	movq    [rsp + #0], RDX	# spill
19a   	movl    [rsp + #12], RCX	# spill
19e   	movl    [rsp + #32], R10	# spill
1a3   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
1ab   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #40
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:11  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #48 STK[0]=RBP
        # OopMap{rbp=Oop [0]=Oop [32]=NarrowOop [48]=Oop off=432}
1b0   	int3	# ShouldNotReachHere
1b0
1b5   B16: #	N268 &lt;- B4  Freq: 9.99997e-07
1b5   	movq    RBP, [rsp + #24]	# spill
1ba   	movq    [rsp + #0], RDX	# spill
1be   	movq    [rsp + #32], R8	# spill
1c3   	movl    [rsp + #12], RCX	# spill
1c7   	movl    RSI, #-34	# int
      	nop 	# 3 bytes pad for loops and calls
1cf   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:11  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #32 STK[0]=RBP STK[1]=rsp + #32 STK[2]=rsp + #40
        # OopMap{rbp=Oop [0]=Oop [32]=Oop off=468}
1d4   	int3	# ShouldNotReachHere
1d4
1d9   B17: #	N268 &lt;- B5  Freq: 4.99998e-07
1d9   	movq    RBP, [rsp + #24]	# spill
1de   	movq    [rsp + #0], RDX	# spill
1e2   	movl    [rsp + #12], RCX	# spill
1e6   	movl    [rsp + #24], RCX	# spill
1ea   	movq    [rsp + #40], R8	# spill
1ef   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #48 L[1]=rsp + #24 STK[0]=rsp + #12
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:11  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #40 STK[0]=RBP
        # OopMap{rbp=Oop [0]=Oop [40]=Oop [48]=Oop off=500}
1f4   	int3	# ShouldNotReachHere
1f4
1f9   B18: #	N268 &lt;- B2  Freq: 4.76837e-07
1f9   	movq    RBP, [rsp + #24]	# spill
1fe   	movq    [rsp + #0], RDX	# spill
202   	movq    [rsp + #16], R8	# spill
207   	movl    [rsp + #12], RCX	# spill
20b   	movl    [rsp + #24], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
213   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:5  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #16 STK[0]=rsp + #40 STK[1]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=536}
218   	int3	# ShouldNotReachHere
218
21d   B19: #	N268 &lt;- B7  Freq: 4.76835e-07
21d   	movl    [rsp + #20], RCX	# spill
221   	movl    [rsp + #32], RCX	# spill
      	nop 	# 2 bytes pad for loops and calls
227   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #48 L[1]=rsp + #32 STK[0]=rsp + #20 STK[1]=RBP
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:11  L[0]=rsp + #24 L[1]=rsp + #8 L[2]=rsp + #20 L[3]=rsp + #48 STK[0]=rsp + #24
        # OopMap{[8]=Oop [24]=Oop [48]=Oop off=556}
22c   	int3	# ShouldNotReachHere
22c
231   B20: #	B22 &lt;- B12  Freq: 1.90902e-06
231   	# exception oop is in rax; no code emitted
231   	movq    RSI, RAX	# spill
234   	jmp,s   B22
234
236   B21: #	B22 &lt;- B9  Freq: 9.99994e-06
236   	# exception oop is in rax; no code emitted
236   	movq    RSI, RAX	# spill
236
239   B22: #	N268 &lt;- B21 B20  Freq: 1.1909e-05
239   	addq    rsp, 80	# Destroy frame
	popq   rbp

23e   	jmp     rethrow_stub
23e
243   B23: #	N268 &lt;- B1  Freq: 1.01328e-06
243   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=584}
248   	int3	# ShouldNotReachHere
248
24d   B24: #	N268 &lt;- B3  Freq: 1.01328e-06
24d   	movl    RSI, #-10	# int
252   	movl    RBP, RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
257   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:11  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL STK[2]=RBP
        # OopMap{off=604}
25c   	int3	# ShouldNotReachHere
25c
261   B25: #	N268 &lt;- B6  Freq: 1.01327e-06
261   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
267   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Pattern$BmpCharProperty::match @ bci:11  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # OopMap{off=620}
26c   	int3	# ShouldNotReachHere
26c

</opto_assembly>
<writer thread='139875534886656'/>
<opto_assembly compile_id='545'>
{method}
 - this oop:          0x00007f3755688da8
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f37556850e8 constant pool [680] {0x00007f37556850e8} for &apos;java/lang/String&apos; cache=0x00007f375574e5e0
 - access:            0x81000001  public 
 - name:              &apos;getChars&apos;
 - signature:         &apos;(II[CI)V&apos;
 - max stack:         7
 - max locals:        5
 - size of params:    5
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef878: 0xbaaba000 i2c: 0x00007f3758b12ee0 c2i: 0x00007f3758b13028 c2iUV: 0x00007f3758b12ffb
 - compiled entry     0x00007f3758c00d40
 - code size:         62
 - code start:        0x00007f3755688d20
 - code end (excl):   0x00007f3755688d5e
 - method data:       0x00007f3755928fd0
 - checked ex length: 0
 - linenumber start:  0x00007f3755688d5e
 - localvar length:   5
 - localvar start:    0x00007f3755688d6a
 - compiled code: nmethod   8351   21       3       java.lang.String::getChars (62 bytes)
#
#  void ( java/lang/String:NotNull:exact *, int, int, char[int:&gt;=0]:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: char[int:&gt;=0]:exact *
#r006 r9   : parm 4: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N203: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B15 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (176 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	movq    R10, RSI	# spill
02f   	movl    R11, R9	# spill
032   	movq    RBX, R8	# spill
035   	movl    R8, RDX	# spill
038   	movl    RDI, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
03b   	movl    R9, RCX	# spill
03e   	subl    R9, RDX	# int
041   	movl    RSI, #-10	# int
046   	movslq  RDX, R9	# i2l
049   	testl   R8, R8
04c   	jl,s   B15  P=0.000000 C=5549.000000
04c
04e   B2: #	B18 B3 &lt;- B1  Freq: 1
04e   	movl    RBP, [RDI + #12 (8-bit)]	# range
051   	NullCheck RDI
051
051   B3: #	B16 B4 &lt;- B2  Freq: 0.999999
051   	movl    RSI, #-155	# int
056   	cmpl    RCX, RBP
058   	jg     B16  P=0.000000 C=5549.000000
058
05e   B4: #	B17 B5 &lt;- B3  Freq: 0.999998
05e   	cmpl    R8, RCX
061   	jg     B17  P=0.000000 C=5549.000000
061
067   B5: #	B19 B6 &lt;- B4  Freq: 0.999998
067   	movl    RSI, #-10	# int
06c   	movl    R13, [RBX + #12 (8-bit)]	# range
070   	NullCheck RBX
070
070   B6: #	B13 B7 &lt;- B5  Freq: 0.999997
070   	decode_heap_oop_not_null RAX,RDI
073   	testl   R11, R11
076   	jl,s   B13  P=0.000001 C=-1.000000
076
078   B7: #	B13 B8 &lt;- B6  Freq: 0.999996
078   	movl    R10, R11	# spill
07b   	addl    R10, R9	# int
07e   	cmpl    RBP, RCX	# unsigned
080   	jb,us  B13  P=0.000001 C=-1.000000
080
082   B8: #	B13 B9 &lt;- B7  Freq: 0.999995
082   	cmpl    R13, R10	# unsigned
085   	jb,us  B13  P=0.000001 C=-1.000000
085
087   B9: #	B12 B10 &lt;- B8  Freq: 0.999994
087   	leaq    RDI, [RDI + #16 + R8 &lt;&lt; #1]	# ptr posidxscaleoffnarrow
08c   	leaq    RSI, [RBX + #16 + R11 &lt;&lt; #1]	# ptr posidxscaleoff
091   	testl   R9, R9
094   	jle,s   B12  P=0.000001 C=-1.000000
094
096   B10: #	B11 &lt;- B9  Freq: 0.999992
096   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
0a3
0a3   B11: #	N203 &lt;- B10 B12 B14  Freq: 0.999996
0a3   	
0a3   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0ae   	ret
0ae
0af   B12: #	B11 B13 &lt;- B9  Freq: 9.99994e-07
0af   	testl   R9, R9
0b2   	jge,s   B11  P=0.999999 C=-1.000000
0b2
0b4   B13: #	B20 B14 &lt;- B12 B6 B7 B8  Freq: 2.99999e-06
0b4   	movq    RSI, RAX	# spill
0b7   	movl    RDX, R8	# spill
0ba   	movq    RCX, RBX	# spill
0bd   	movl    R8, R11	# spill
      	nop 	# 3 bytes pad for loops and calls
0c3   	call,static  wrapper for: slow_arraycopy
        # java.lang.String::getChars @ bci:58  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=200}
0c8
0c8   B14: #	B11 &lt;- B13  Freq: 2.99993e-06
        # Block is sole successor of call
0c8   	jmp,s   B11
0c8
0ca   B15: #	N203 &lt;- B1  Freq: 4.76837e-07
0ca   	movl    RSI, #-155	# int
0cf   	movq    RBP, R10	# spill
0d2   	movl    [rsp + #4], RCX	# spill
0d6   	movq    [rsp + #8], RBX	# spill
0db   	movl    [rsp + #16], R11	# spill
0e0   	movl    [rsp + #20], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
0e7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::getChars @ bci:1  L[0]=RBP L[1]=rsp + #20 L[2]=rsp + #4 L[3]=rsp + #8 L[4]=rsp + #16 STK[0]=rsp + #20
        # OopMap{rbp=Oop [8]=Oop off=236}
0ec   	int3	# ShouldNotReachHere
0ec
0f1   B16: #	N203 &lt;- B3  Freq: 4.76836e-07
0f1   	movq    [rsp + #0], R10	# spill
0f5   	movl    [rsp + #8], R8	# spill
0fa   	movq    [rsp + #16], RBX	# spill
0ff   	movl    [rsp + #24], R11	# spill
104   	movl    [rsp + #28], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
10b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::getChars @ bci:19  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #28 L[3]=rsp + #16 L[4]=rsp + #24 STK[0]=rsp + #28 STK[1]=RBP
        # OopMap{[0]=Oop [16]=Oop off=272}
110   	int3	# ShouldNotReachHere
110
115   B17: #	N203 &lt;- B4  Freq: 4.76836e-07
115   	movq    RBP, R10	# spill
118   	movq    [rsp + #8], RBX	# spill
11d   	movl    [rsp + #16], R11	# spill
122   	movl    [rsp + #20], R8	# spill
127   	movl    [rsp + #24], RCX	# spill
12b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::getChars @ bci:33  L[0]=RBP L[1]=rsp + #20 L[2]=rsp + #24 L[3]=rsp + #8 L[4]=rsp + #16 STK[0]=rsp + #20 STK[1]=rsp + #24
        # OopMap{rbp=Oop [8]=Oop off=304}
130   	int3	# ShouldNotReachHere
130
135   B18: #	N203 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
137   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::getChars @ bci:18  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=316}
13c   	int3	# ShouldNotReachHere
13c
141   B19: #	N203 &lt;- B5  Freq: 1.01328e-06
141   	movl    RBP, RDI	# spill
143   	movl    [rsp + #0], R8	# spill
147   	movl    [rsp + #4], R11	# spill
14c   	movl    [rsp + #8], R9	# spill
      	nop 	# 2 bytes pad for loops and calls
153   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::getChars @ bci:58  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=#NULL STK[3]=rsp + #4 STK[4]=rsp + #8
        # OopMap{rbp=NarrowOop off=344}
158   	int3	# ShouldNotReachHere
158
15d   B20: #	N203 &lt;- B13  Freq: 2.99999e-11
15d   	# exception oop is in rax; no code emitted
15d   	movq    RSI, RAX	# spill
160   	addq    rsp, 48	# Destroy frame
	popq   rbp

165   	jmp     rethrow_stub
165

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
<opto_assembly compile_id='557'>
{method}
 - this oop:          0x00007f375570d478
 - method holder:     &apos;java/lang/AbstractStringBuilder&apos;
 - constants:         0x00007f375570ab80 constant pool [365] {0x00007f375570ab80} for &apos;java/lang/AbstractStringBuilder&apos; cache=0x00007f37557cbc80
 - access:            0x81000001  public 
 - name:              &apos;append&apos;
 - signature:         &apos;(C)Ljava/lang/AbstractStringBuilder;&apos;
 - max stack:         6
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      8
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758c3e040
 - code size:         29
 - code start:        0x00007f375570d438
 - code end (excl):   0x00007f375570d455
 - method data:       0x00007f3755a81ff0
 - checked ex length: 0
 - linenumber start:  0x00007f375570d455
 - localvar length:   2
 - localvar start:    0x00007f375570d45e
 - compiled code: nmethod   8922  129       3       java.lang.AbstractStringBuilder::append (29 bytes)
#
#  java/lang/AbstractStringBuilder * ( java/lang/AbstractStringBuilder:NotNull *, char )
#
#r018 rsi:rsi   : parm 0: java/lang/AbstractStringBuilder:NotNull *
#r016 rdx   : parm 1: char
# -- Old rsp -- Framesize: 128 --
#r191 rsp+124: in_preserve
#r190 rsp+120: return address
#r189 rsp+116: in_preserve
#r188 rsp+112: saved fp register
#r187 rsp+108: pad2, stack alignment
#r186 rsp+104: pad2, stack alignment
#r185 rsp+100: Fixed slot 1
#r184 rsp+96: Fixed slot 0
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N433: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B28 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (464 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

02c   	movl    [rsp + #12], RDX	# spill
030   	movq    R8, RSI	# spill
033   	movl    R11, [RSI + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
037   	movl    RSI, #-10	# int
03c   	movl    R10, R11	# spill
03f   	incl    R10	# int
042   	movl    RDI, [R8 + #16 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
046   	movl    R9, [RDI + #12 (8-bit)]	# range
04a   	NullCheck RDI
04a
04a   B2: #	B15 B3 &lt;- B1  Freq: 0.999999
04a   	decode_heap_oop RBP,RDI
0d5   	movl    RBX, R11	# spill
0d8   	subl    RBX, R9	# int
0db   	decode_heap_oop_not_null RDX,RDI
0de   	incl    RBX	# int
0e0   	movl    RAX, R9	# spill
0e3   	sall    RAX, #1
0e5   	movl    RCX, RAX	# spill
0e7   	subl    RCX, R11	# int
0ea   	incl    RCX	# int
0ec   	testl   RBX, RBX
0ee   	jle     B15  P=0.745262 C=5751.000000
0ee
0f4   B3: #	B18 B4 &lt;- B2  Freq: 0.254738
0f4   	movl    RSI, #-155	# int
0f9   	testl   RCX, RCX
0fb   	jl     B18  P=0.192787 C=1525.000000
0fb
101   B4: #	B5 &lt;- B3  Freq: 0.205628
101   	addl    RAX, #2	# int
104   	movl    [rsp + #56], RAX	# spill
104
108   B5: #	B27 B6 &lt;- B18 B4  Freq: 0.254738
108   	movq    [rsp + #0], RDX	# spill
10c   	movq    [rsp + #16], R8	# spill
111   	movslq  RCX, [RSP + #56 (32-bit)]	# int -&gt; long
116   	cmpl    R9, [RSP + #56 (32-bit)]
11b   	movl    R11, [rsp + #56]	# spill
120   	cmovll R11, R9	# signed, int
124   	movl    [rsp + #8], R11	# spill
129   	movslq  R11, R11	# i2l
12c   	salq    RCX, #1
12f   	movq    [rsp + #24], R11	# spill
134   	salq    R11, #1
137   	addq    R11, #16	# long
13b   	addq    RCX, #23	# long
13f   	movq    RDX, R11	# spill
142   	andq    RDX, #-7	# long
146   	movq    R8, RCX	# spill
149   	andq    R8, #-8	# long
14d   	movq    [rsp + #32], R8	# spill
152   	movl    R8, [rsp + #56]	# spill
157   	testl   R8, R8
15a   	jl     B27  P=0.000000 C=1525.000000
15a
160   B6: #	B20 B7 &lt;- B5  Freq: 0.254738
160   	shrq    RCX, #3
164   	movq    [rsp + #40], RCX	# spill
169   	# TLS is in R15
169   	shrq    R11, #3
16d   	movq    RBX, [R15 + #112 (8-bit)]	# ptr
171   	movq    R8, RBX	# spill
174   	movq    R10, [rsp + #32]	# spill
179   	addq    R8, R10	# ptr
17c   	movl    R10, [rsp + #56]	# spill
181   	cmpl    R10, #524288	# unsigned
188   	jnbe,u  B20  P=0.000001 C=-1.000000
188
18e   B7: #	B20 B8 &lt;- B6  Freq: 0.254738
18e   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
195   	jnb,u  B20  P=0.000100 C=-1.000000
195
19b   B8: #	B9 &lt;- B7  Freq: 0.254712
19b   	movq    [R15 + #112 (8-bit)], R8	# ptr
19f   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1a7   	movq    [RBX], 0x0000000000000001	# ptr
1ae   	PREFETCHNTA [R8 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1b6   	PREFETCHNTA [R8 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1be   	movl    [RBX + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f37682141b0:Constant:exact *	# compressed klass ptr
1c5   	PREFETCHNTA [R8 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1cd   	movl    R8, [rsp + #56]	# spill
1d2   	movl    [RBX + #12 (8-bit)], R10	# int
1d2
1d6   B9: #	B24 B10 &lt;- B21 B8  Freq: 0.254738
1d6   	movq    RCX, [rsp + #40]	# spill
1db   	addq    RCX, #-2	# long
1df   	
1df   	# checkcastPP of RBX
1df   	encode_heap_oop_not_null RBP,RBX
2ea   	movq    R10, RBX	# spill
2ed   	addq    R10, #16	# ptr
2f1   	cmpl    R9, [RSP + #8 (32-bit)]	# unsigned
2f6   	jb,u  B24  P=0.000001 C=-1.000000
2f6
2fc   B10: #	B24 B11 &lt;- B9  Freq: 0.254738
2fc   	leaq    RSI, [RDI + #16 (8-bit)]	# ptr off8narrow
300   	cmpl    R8, [RSP + #8 (32-bit)]	# unsigned
305   	jb,u  B24  P=0.000001 C=-1.000000
305
30b   B11: #	B26 B12 &lt;- B10  Freq: 0.254737
30b   	movq    RDI, RBX	# spill
30e   	addq    RDI, RDX	# ptr
311   	movl    R9, [rsp + #8]	# spill
316   	testl   R9, R9
319   	jle     B26  P=0.000001 C=-1.000000
319
31f   B12: #	B19 B13 &lt;- B11  Freq: 0.254737
31f   	movq    RCX, [rsp + #32]	# spill
324   	addq    RCX, #-16	# long
328   	cmpl    R9, R8
32b   	jl     B19  P=0.001000 C=-1.000000
32b
331   B13: #	B14 &lt;- B12  Freq: 0.254482
331   	shrq    RCX, #3
335   	movq    RDI, RSI	# spill
338   	movq    RSI, R10	# spill
33b   	movq    RDX, RCX	# spill
33e   	call_leaf_nofp,runtime  jlong_disjoint_arraycopy
        No JVM State Info
        # 
34b
34b   B14: #	B15 &lt;- B19 B13 B25 B26  Freq: 0.254738
34b   	MEMBAR-storestore (empty encoding)
34b   	movq    R8, [rsp + #16]	# spill
350   	movq    R10, R8	# ptr -&gt; long
353   	movl    [R8 + #16 (8-bit)], RBP	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
357   	shrq    R10, #9
35b   	movl    R11, [R8 + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
35f   	movq    R9, 0x00007f3757e0b000	# ptr
369   	movb    [R9 + R10], R12	# short/char (R12_heapbase==0)
36d   	movl    R10, R11	# spill
370   	incl    R10	# int
373   	movq    RBP, RBX	# spill
373
376   B15: #	B22 B16 &lt;- B14 B2  Freq: 0.999999
376   	movl    [R8 + #12 (8-bit)], R10	# int ! Field: java/lang/AbstractStringBuilder.count
37a   	testq   RBP, RBP	# ptr
37d   	je     B22  P=0.000001 C=-1.000000
37d
383   B16: #	B23 B17 &lt;- B15  Freq: 0.999998
383   	# castPP of RBP
383   	movl    R10, [RBP + #12 (8-bit)]	# range
387   	cmpl    R11, R10	# unsigned
38a   	jnb,u  B23  P=0.000001 C=-1.000000
38a
390   B17: #	N433 &lt;- B16  Freq: 0.999997
390   	movl    R10, [rsp + #12]	# spill
395   	movw    [RBP + #16 + R11 &lt;&lt; #1], R10	# char/short
39b   	movq    RAX, R8	# spill
39e   	addq    rsp, 112	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

3a9   	ret
3a9
3aa   B18: #	B5 &lt;- B3  Freq: 0.0491102
3aa   	movl    [rsp + #56], R10	# spill
3af   	jmp     B5
3af
3b4   B19: #	B14 &lt;- B12  Freq: 0.000254737
3b4   	movq    R8, [rsp + #40]	# spill
3b9   	subq    R8, R11	# long
3bc   	movq    RCX, R8	# spill
3bf   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
3c9   	movq    RDI, RSI	# spill
3cc   	movq    RSI, R10	# spill
3cf   	movq    RDX, [rsp + #24]	# spill
3d4   	call_leaf_nofp,runtime  arrayof_jshort_disjoint_arraycopy
        No JVM State Info
        # 
3e1   	jmp     B14
3e1
3e6   B20: #	B30 B21 &lt;- B6 B7  Freq: 2.57361e-05
3e6   	movq    [rsp + #80], RDX	# spill
3eb   	movq    [rsp + #72], R11	# spill
3f0   	movl    [rsp + #64], R9	# spill
3f5   	movl    [rsp + #60], RDI	# spill
3f9   	movl    RDX, [rsp + #56]	# spill
3fd   	movq    RSI, precise klass [C: 0x00007f37682141b0:Constant:exact *	# ptr
407   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOf @ bci:1  L[0]=RBP L[1]=rsp + #56 L[2]=_
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #16
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=rsp + #16 L[1]=rsp + #12
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [60]=NarrowOop off=1036}
40c
40c   B21: #	B9 &lt;- B20  Freq: 2.57356e-05
        # Block is sole successor of call
40c   	movl    R8, [rsp + #56]	# spill
411   	movq    RBX, RAX	# spill
414   	movl    RDI, [rsp + #60]	# spill
418   	movl    R9, [rsp + #64]	# spill
41d   	movq    R11, [rsp + #72]	# spill
422   	movq    RDX, [rsp + #80]	# spill
427   	jmp     B9
427
42c   B22: #	N433 &lt;- B15  Freq: 1.01328e-06
42c   	movl    RBP, R11	# spill
42f   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
437   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.AbstractStringBuilder::append @ bci:26  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #12
        # OopMap{off=1084}
43c   	int3	# ShouldNotReachHere
43c
441   B23: #	N433 &lt;- B16  Freq: 1.01328e-06
441   	movl    RSI, #-28	# int
446   	movq    [rsp + #0], R8	# spill
44a   	movl    [rsp + #8], R11	# spill
44f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.AbstractStringBuilder::append @ bci:26  L[0]=rsp + #0 L[1]=_ STK[0]=RBP STK[1]=rsp + #8 STK[2]=rsp + #12
        # OopMap{rbp=Oop [0]=Oop off=1108}
454   	int3	# ShouldNotReachHere
454
459   B24: #	B29 B25 &lt;- B9 B10  Freq: 5.09476e-07
459   	movq    [rsp + #24], RBX	# spill
45e   	movq    RDI, R10	# spill
461   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
46b   	movq    RSI, [rsp + #0]	# spill
46f   	xorl    RDX, RDX	# int
471   	movq    RCX, RBX	# spill
474   	xorl    R8, R8	# int
477   	movl    R9, [rsp + #8]	# spill
      	nop 	# 3 bytes pad for loops and calls
47f   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOf @ bci:14  L[0]=_ L[1]=_ L[2]=rsp + #24
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #16
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=rsp + #16 L[1]=rsp + #12
        # OopMap{rbp=NarrowOop [16]=Oop [24]=Oop off=1156}
484
484   B25: #	B14 &lt;- B24  Freq: 5.09465e-07
        # Block is sole successor of call
484   	movq    RBX, [rsp + #24]	# spill
489   	jmp     B14
489
48e   B26: #	B14 &lt;- B11  Freq: 2.54737e-07
48e   	movq    RDI, R10	# spill
491   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
49b   	
49b   	jmp     B14
49b
4a0   B27: #	N433 &lt;- B5  Freq: 1.21469e-07
4a0   	movq    RBP, [rsp + #16]	# spill
4a5   	movl    R11, [rsp + #12]	# spill
4aa   	movl    [rsp + #0], R11	# spill
4ae   	movl    [rsp + #4], R10	# spill
4b3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:19  L[0]=RBP L[1]=rsp + #4 L[2]=rsp + #56 STK[0]=rsp + #56
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop off=1208}
4b8   	int3	# ShouldNotReachHere
4b8
4bd   B28: #	N433 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
4bf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:5  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=_ L[1]=_
        # OopMap{off=1220}
4c4   	int3	# ShouldNotReachHere
4c4
4c9   B29: #	B31 &lt;- B24  Freq: 5.09476e-12
4c9   	# exception oop is in rax; no code emitted
4c9   	movq    RSI, RAX	# spill
4cc   	jmp,s   B31
4cc
4ce   B30: #	B31 &lt;- B20  Freq: 2.57361e-10
4ce   	# exception oop is in rax; no code emitted
4ce   	movq    RSI, RAX	# spill
4ce
4d1   B31: #	N433 &lt;- B30 B29  Freq: 2.62456e-10
4d1   	addq    rsp, 112	# Destroy frame
	popq   rbp

4d6   	jmp     rethrow_stub
4d6

</opto_assembly>
<writer thread='139875533833984'/>
<opto_assembly compile_id='568'>
{method}
 - this oop:          0x00007f375568b1c0
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f37556850e8 constant pool [680] {0x00007f37556850e8} for &apos;java/lang/String&apos; cache=0x00007f375574e5e0
 - access:            0x81000001  public 
 - name:              &apos;substring&apos;
 - signature:         &apos;(II)Ljava/lang/String;&apos;
 - max stack:         6
 - max locals:        4
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef6c8: 0xbaa00000 i2c: 0x00007f3758b11ca0 c2i: 0x00007f3758b11de0 c2iUV: 0x00007f3758b11db3
 - compiled entry     0x00007f3758c0ea20
 - code size:         79
 - code start:        0x00007f375568b130
 - code end (excl):   0x00007f375568b17f
 - method data:       0x00007f37559a1190
 - checked ex length: 0
 - linenumber start:  0x00007f375568b17f
 - localvar length:   4
 - localvar start:    0x00007f375568b18e
 - compiled code: nmethod   8946   42       3       java.lang.String::substring (79 bytes)
#
#  java/lang/String:exact * ( java/lang/String:NotNull:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N589: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B36 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (416 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movl    R10, RDX	# spill
02f   	movq    R9, RSI	# spill
032   	movl    RBX, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
035   	movl    R8, RCX	# spill
038   	subl    R8, RDX	# int
03b   	movslq  RDX, R8	# i2l
03e   	salq    RDX, #1
041   	addq    RDX, #23	# long
045   	movl    R11, R10	# spill
048   	testl   R10, R10
04b   	jl     B36  P=0.000000 C=15705.000000
04b
051   B2: #	B41 B3 &lt;- B1  Freq: 1
051   	movl    RSI, #-10	# int
056   	movl    RBP, [RBX + #12 (8-bit)]	# range
059   	NullCheck RBX
059
059   B3: #	B37 B4 &lt;- B2  Freq: 0.999999
059   	cmpl    RCX, RBP
05b   	jg     B37  P=0.000000 C=15705.000000
05b
061   B4: #	B38 B5 &lt;- B3  Freq: 0.999998
061   	movq    R10, RDX	# spill
064   	andq    R10, #-8	# long
068   	movq    [rsp + #32], R10	# spill
06d   	testl   R8, R8
070   	jl     B38  P=0.000000 C=15705.000000
070
076   B5: #	B22 B6 &lt;- B4  Freq: 0.999998
076   	testl   R11, R11
079   	je     B22  P=0.103343 C=15705.000000
079
07f   B6: #	B28 B7 &lt;- B22 B5  Freq: 0.990765
07f   	# TLS is in R15
07f   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
083   	movl    R10, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
089   	movq    RCX, RAX	# spill
08c   	addq    RCX, #24	# ptr
090   	# TLS is in R15
090   	cmpq    RCX, [R15 + #128 (32-bit)]	# raw ptr
097   	jnb,u  B28  P=0.000100 C=-1.000000
097
09d   B7: #	B8 &lt;- B6  Freq: 0.990666
09d   	# TLS is in R15
09d   	movq    [R15 + #112 (8-bit)], RCX	# ptr
0a1   	decode_klass_not_null R10,R10
0a5   	movq    R10, [R10 + #176 (32-bit)]	# ptr
0ac   	movq    [RAX], R10	# ptr
0af   	PREFETCHNTA [RCX + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0b6   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
0bd   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
0c1   	movq    [RAX + #16 (8-bit)], R12	# long (R12_heapbase==0)
0c1
0c5   B8: #	B24 B9 &lt;- B29 B7  Freq: 0.990765
0c5   	movl    RSI, #-155	# int
0ca   	
0ca   	MEMBAR-storestore (empty encoding)
0ca   	# checkcastPP of RAX
0ca   	movl    R10, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
0ce   	testl   R8, R8
0d1   	jle     B24  P=0.004700 C=9999.000000
0d1
0d7   B9: #	B42 B10 &lt;- B8  Freq: 0.986108
0d7   	movl    RSI, #-10	# int
0dc   	movl    RBX, [R10 + #12 (8-bit)]	# range
0e0   	NullCheck R10
0e0
0e0   B10: #	B39 B11 &lt;- B9  Freq: 0.986107
0e0   	movl    RBP, RBX	# spill
0e2   	subl    RBP, R8	# int
0e5   	movl    RCX, RBX	# spill
0e7   	subl    RCX, R11	# int
0ea   	cmpl    RCX, R8
0ed   	movl    R9, R8	# spill
0f0   	cmovll R9, RCX	# signed, int
0f4   	movslq  R13, R9	# i2l
0f7   	movq    RDI, R13	# spill
0fa   	salq    RDI, #1
0fd   	addq    RDI, #16	# long
101   	movq    RCX, RDI	# spill
104   	shrq    RCX, #3
108   	cmpl    R11, RBP
10b   	jg     B39  P=0.000000 C=9952.000000
10b
111   B11: #	B30 B12 &lt;- B10  Freq: 0.986106
111   	movq    [rsp + #8], RAX	# spill
116   	movq    [rsp + #56], RCX	# spill
11b   	movl    [rsp + #28], RBX	# spill
11f   	movq    RCX, [rsp + #32]	# spill
124   	# TLS is in R15
124   	movq    RBP, [R15 + #112 (8-bit)]	# ptr
128   	decode_heap_oop_not_null RSI,R10
12b   	movq    RBX, RBP	# spill
12e   	addq    RBX, RCX	# ptr
131   	movl    RCX, R11	# spill
134   	addl    RCX, R9	# int
137   	movl    [rsp + #64], RCX	# spill
13b   	andq    RDI, #-7	# long
13f   	movq    [rsp + #72], RDI	# spill
144   	cmpl    R8, #524288	# unsigned
14b   	jnbe,u  B30  P=0.000001 C=-1.000000
14b
151   B12: #	B30 B13 &lt;- B11  Freq: 0.986105
151   	# TLS is in R15
151   	cmpq    RBX, [R15 + #128 (32-bit)]	# raw ptr
158   	jnb,u  B30  P=0.000100 C=-1.000000
158
15e   B13: #	B14 &lt;- B12  Freq: 0.986007
15e   	# TLS is in R15
15e   	movq    [R15 + #112 (8-bit)], RBX	# ptr
162   	PREFETCHNTA [RBX + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
169   	PREFETCHNTA [RBX + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
170   	movq    [RBP], 0x0000000000000001	# ptr
178   	PREFETCHNTA [RBX + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
17f   	movl    [RBP + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f37682141b0:Constant:exact *	# compressed klass ptr
186   	PREFETCHNTA [RBX + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
18d   	movl    [RBP + #12 (8-bit)], R8	# int
18d
191   B14: #	B32 B15 &lt;- B31 B13  Freq: 0.986106
191   	leaq    R14, [R10 + #16 + R11 &lt;&lt; #1]	# ptr posidxscaleoffnarrow
196   	shrq    RDX, #3
19a   	
19a   	# checkcastPP of RBP
19a   	movq    R10, RBP	# spill
19d   	addq    R10, #16	# ptr
1a1   	movq    RCX, RDX	# spill
1a4   	addq    RCX, #-2	# long
1a8   	movl    RBX, [rsp + #28]	# spill
1ac   	cmpl    RBX, [RSP + #64 (32-bit)]	# unsigned
1b0   	jb,u  B32  P=0.000001 C=-1.000000
1b0
1b6   B15: #	B32 B16 &lt;- B14  Freq: 0.986105
1b6   	movq    RDI, RBP	# spill
1b9   	movq    RBX, [rsp + #72]	# spill
1be   	addq    RDI, RBX	# ptr
1c1   	cmpl    R8, R9	# unsigned
1c4   	jb,u  B32  P=0.000001 C=-1.000000
1c4
1ca   B16: #	B34 B17 &lt;- B15  Freq: 0.986104
1ca   	testl   R9, R9
1cd   	jle     B34  P=0.000001 C=-1.000000
1cd
1d3   B17: #	B27 B18 &lt;- B16  Freq: 0.986103
1d3   	cmpl    R9, R8
1d6   	jl     B27  P=0.001000 C=-1.000000
1d6
1dc   B18: #	B19 &lt;- B17 B27  Freq: 0.986103
1dc   	movq    RDI, R14	# spill
1df   	movq    RSI, R10	# spill
1e2   	movq    RDX, R13	# spill
1e5   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
1f2
1f2   B19: #	B20 &lt;- B18 B35 B33  Freq: 0.986106
1f2   	encode_heap_oop_not_null R11,RBP
2fd   	MEMBAR-storestore (empty encoding)
2fd   	movq    RAX, [rsp + #8]	# spill
302   	movq    R10, RAX	# ptr -&gt; long
305   	movl    [RAX + #12 (8-bit)], R11	# compressed ptr ! Field: java/lang/String.value
309   	shrq    R10, #9
30d   	movq    R11, 0x00007f3757e0b000	# ptr
317   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
317
31b   B20: #	B21 &lt;- B26 B19  Freq: 0.990763
31b   	MEMBAR-release ! (empty encoding)
31b
31b   B21: #	N589 &lt;- B20 B23  Freq: 0.999996
31b   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

326   	ret
326
327   B22: #	B6 B23 &lt;- B5  Freq: 0.103343
327   	cmpl    RCX, RBP
329   	jne     B6  P=0.910659 C=1623.000000
329
32f   B23: #	B21 &lt;- B22  Freq: 0.00923271
32f   	movq    RAX, R9	# spill
332   	jmp,s   B21
332
334   B24: #	B43 B25 &lt;- B8  Freq: 0.00465707
334   	movl    RBP, [R10 + #12 (8-bit)]	# range
338   	NullCheck R10
338
338   B25: #	B40 B26 &lt;- B24  Freq: 0.00465707
338   	cmpl    R11, RBP
33b   	jg     B40  P=0.000000 C=47.000000
33b
341   B26: #	B20 &lt;- B25  Freq: 0.00465707
341   	movl    [RAX + #12 (8-bit)], narrowoop: char[int:0]&lt;ciTypeArray length=0 type=&lt;ciTypeArrayKlass name=[C ident=807 address=0x00007f37682141b0&gt; ident=828 SCAVENGABLE address=0x00007f3720195270&gt; *	# compressed ptr ! Field: java/lang/String.value
348   	movq    R10, RAX	# ptr -&gt; long
34b   	shrq    R10, #9
34f   	movq    R11, 0x00007f3757e0b000	# ptr
359   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
35d   	jmp,s   B20
35d
35f   B27: #	B18 &lt;- B17  Freq: 0.000986103
35f   	subq    RDX, [RSP + #56 (32-bit)]	# long
364   	movq    RCX, RDX	# spill
367   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
371   	jmp     B18
371
376   B28: #	B47 B29 &lt;- B6  Freq: 9.90929e-05
376   	movq    [rsp + #16], RDX	# spill
37b   	movl    [rsp + #8], R8	# spill
380   	movq    [rsp + #0], R9	# spill
384   	movl    RBP, R11	# spill
387   	movq    RSI, precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
393   	call,static  wrapper for: _new_instance_Java
        # java.lang.String::substring @ bci:65  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=rsp + #8
        # OopMap{[0]=Oop off=920}
398
398   B29: #	B8 &lt;- B28  Freq: 9.90909e-05
        # Block is sole successor of call
398   	movl    R11, RBP	# spill
39b   	movq    R9, [rsp + #0]	# spill
39f   	movl    R8, [rsp + #8]	# spill
3a4   	movq    RDX, [rsp + #16]	# spill
3a9   	jmp     B8
3a9
3ae   B30: #	B45 B31 &lt;- B11 B12  Freq: 9.96261e-05
3ae   	movq    [rsp + #40], RSI	# spill
3b3   	movq    [rsp + #32], R13	# spill
3b8   	movl    [rsp + #24], R9	# spill
3bd   	movl    [rsp + #4], R10	# spill
3c2   	movq    [rsp + #16], RAX	# spill
3c7   	movq    [rsp + #8], RDX	# spill
3cc   	movl    [rsp + #0], R8	# spill
3d0   	movl    RBP, R11	# spill
3d3   	movq    RSI, precise klass [C: 0x00007f37682141b0:Constant:exact *	# ptr
3dd   	movl    RDX, R8	# spill
      	nop 	# 3 bytes pad for loops and calls
3e3   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOfRange @ bci:40  L[0]=rsp + #40 L[1]=RBP L[2]=_ L[3]=rsp + #0 L[4]=_
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #16
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #16
        # OopMap{[4]=NarrowOop [16]=Oop [40]=Oop off=1000}
3e8
3e8   B31: #	B14 &lt;- B30  Freq: 9.96241e-05
        # Block is sole successor of call
3e8   	movl    R11, RBP	# spill
3eb   	movl    R8, [rsp + #0]	# spill
3ef   	movq    RDX, [rsp + #8]	# spill
3f4   	movq    R10, [rsp + #16]	# spill
3f9   	movq    [rsp + #8], R10	# spill
3fe   	movl    R10, [rsp + #4]	# spill
403   	movl    R9, [rsp + #24]	# spill
408   	movq    R13, [rsp + #32]	# spill
40d   	movq    RBP, RAX	# spill
410   	movq    RSI, [rsp + #40]	# spill
415   	jmp     B14
415
41a   B32: #	B44 B33 &lt;- B34 B14 B15  Freq: 1.97221e-06
41a   	movq    RDI, R10	# spill
41d   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
427   	xorl    R8, R8	# int
42a   	movl    RDX, R11	# spill
42d   	movq    RCX, RBP	# spill
      	nop 	# 3 bytes pad for loops and calls
433   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOfRange @ bci:57  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=RBP
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #8
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=1080}
438
438   B33: #	B19 &lt;- B32  Freq: 1.97217e-06
        # Block is sole successor of call
438   	jmp     B19
438
43d   B34: #	B32 B35 &lt;- B16  Freq: 9.86104e-07
43d   	testl   R9, R9
440   	jl,s   B32  P=0.000001 C=-1.000000
440
442   B35: #	B19 &lt;- B34  Freq: 9.86103e-07
442   	movq    RDI, R10	# spill
445   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
44f   	
44f   	jmp     B19
44f
454   B36: #	N589 &lt;- B1  Freq: 4.76837e-07
454   	movl    RSI, #-155	# int
459   	movq    RBP, R9	# spill
45c   	movl    [rsp + #4], RCX	# spill
460   	movl    [rsp + #8], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
467   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::substring @ bci:1  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{rbp=Oop off=1132}
46c   	int3	# ShouldNotReachHere
46c
471   B37: #	N589 &lt;- B3  Freq: 4.76836e-07
471   	movq    [rsp + #0], R9	# spill
475   	movl    [rsp + #8], R10	# spill
47a   	movl    [rsp + #16], RCX	# spill
47e   	movl    RSI, #-155	# int
483   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::substring @ bci:19  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=_ STK[0]=rsp + #16 STK[1]=RBP
        # OopMap{[0]=Oop off=1160}
488   	int3	# ShouldNotReachHere
488
48d   B38: #	N589 &lt;- B4  Freq: 4.76836e-07
48d   	movl    RSI, #-155	# int
492   	movq    RBP, R9	# spill
495   	movl    [rsp + #0], R11	# spill
499   	movl    [rsp + #4], RCX	# spill
49d   	movl    [rsp + #12], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
4a3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::substring @ bci:36  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #12 STK[0]=rsp + #12
        # OopMap{rbp=Oop off=1192}
4a8   	int3	# ShouldNotReachHere
4a8
4ad   B39: #	N589 &lt;- B10  Freq: 4.70212e-07
4ad   	movl    [rsp + #4], R8	# spill
4b2   	movl    [rsp + #8], R11	# spill
4b7   	movl    RSI, #-155	# int
4bc   	movq    [rsp + #24], RAX	# spill
4c1   	movl    [rsp + #12], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
4c7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:55  L[0]=rsp + #24 L[1]=rsp + #12 L[2]=rsp + #8 L[3]=rsp + #4 STK[0]=rsp + #8 STK[1]=RBP
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # OopMap{[12]=NarrowOop [24]=Oop off=1228}
4cc   	int3	# ShouldNotReachHere
4cc
4d1   B40: #	N589 &lt;- B25  Freq: 2.22066e-09
4d1   	movl    [rsp + #4], R8	# spill
4d6   	movl    [rsp + #8], R11	# spill
4db   	movq    [rsp + #24], RAX	# spill
4e0   	movl    [rsp + #12], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
4e7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:37  L[0]=rsp + #24 L[1]=rsp + #12 L[2]=rsp + #8 L[3]=rsp + #4 STK[0]=rsp + #8 STK[1]=RBP
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # OopMap{[12]=NarrowOop [24]=Oop off=1260}
4ec   	int3	# ShouldNotReachHere
4ec
4f1   B41: #	N589 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
4f3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::substring @ bci:18  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1272}
4f8   	int3	# ShouldNotReachHere
4f8
4fd   B42: #	N589 &lt;- B9  Freq: 9.99202e-07
      	nop 	# 2 bytes pad for loops and calls
4ff   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:52  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # OopMap{off=1284}
504   	int3	# ShouldNotReachHere
504
509   B43: #	N589 &lt;- B24  Freq: 4.71891e-09
509   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
50f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # OopMap{off=1300}
514   	int3	# ShouldNotReachHere
514
519   B44: #	B46 &lt;- B32  Freq: 1.97221e-11
519   	# exception oop is in rax; no code emitted
519   	jmp,s   B46
519
51b   B45: #	B46 &lt;- B30  Freq: 9.96261e-10
51b   	# exception oop is in rax; no code emitted
51b
51b   B46: #	B48 &lt;- B45 B44  Freq: 1.01598e-09
51b   	movq    RSI, RAX	# spill
51e   	jmp,s   B48
51e
520   B47: #	B48 &lt;- B28  Freq: 9.90929e-10
520   	# exception oop is in rax; no code emitted
520   	movq    RSI, RAX	# spill
520
523   B48: #	N589 &lt;- B47 B46  Freq: 2.00691e-09
523   	addq    rsp, 96	# Destroy frame
	popq   rbp

528   	jmp     rethrow_stub
528

</opto_assembly>
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='582'>
{method}
 - this oop:          0x00007f375570cad8
 - method holder:     &apos;java/lang/AbstractStringBuilder&apos;
 - constants:         0x00007f375570ab80 constant pool [365] {0x00007f375570ab80} for &apos;java/lang/AbstractStringBuilder&apos; cache=0x00007f37557cbc80
 - access:            0x81000001  public 
 - name:              &apos;append&apos;
 - signature:         &apos;(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;&apos;
 - max stack:         6
 - max locals:        3
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      20
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef710: 0xbb000000 i2c: 0x00007f3758b11fa0 c2i: 0x00007f3758b120de c2iUV: 0x00007f3758b120b1
 - compiled entry     0x00007f3758c02160
 - code size:         50
 - code start:        0x00007f375570ca70
 - code end (excl):   0x00007f375570caa2
 - method data:       0x00007f3755931ff8
 - checked ex length: 0
 - linenumber start:  0x00007f375570caa2
 - localvar length:   3
 - localvar start:    0x00007f375570cab2
 - compiled code: nmethod   9354   27       3       java.lang.AbstractStringBuilder::append (50 bytes)
#
#  java/lang/AbstractStringBuilder * ( java/lang/AbstractStringBuilder:NotNull *, java/lang/String:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/AbstractStringBuilder:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/String:exact *
# -- Old rsp -- Framesize: 144 --
#r191 rsp+140: in_preserve
#r190 rsp+136: return address
#r189 rsp+132: in_preserve
#r188 rsp+128: saved fp register
#r187 rsp+124: pad2, stack alignment
#r186 rsp+120: pad2, stack alignment
#r185 rsp+116: Fixed slot 1
#r184 rsp+112: Fixed slot 0
#r219 rsp+108: spill
#r218 rsp+104: spill
#r217 rsp+100: spill
#r216 rsp+96: spill
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N593: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B40 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (472 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #128	# Create frame

02f   	movq    [rsp + #0], RSI	# spill
033   	movq    [rsp + #96], RDX	# spill
038   	movl    R9, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
03c   	NullCheck RDX
03c
03c   B2: #	B36 B3 &lt;- B1  Freq: 1
03c   	movl    R8, [RSI + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
040   	movl    R11, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
044   	movl    RSI, #-10	# int
049   	movl    RBX, [R9 + #12 (8-bit)]	# range
04d   	NullCheck R9
04d
04d   B3: #	B37 B4 &lt;- B2  Freq: 0.999999
04d   	movl    RBP, RBX	# spill
04f   	addl    RBP, R8	# int
052   	movl    RDI, [R11 + #12 (8-bit)]	# range
056   	NullCheck R11
056
056   B4: #	B16 B5 &lt;- B3  Freq: 0.999997
056   	movl    R10, RDI	# spill
059   	sall    R10, #1
05c   	movl    RCX, R10	# spill
05f   	subl    RCX, RBP	# int
061   	movl    RDX, RBP	# spill
063   	subl    RDX, RDI	# int
065   	addl    RCX, #2	# int
068   	testl   RDX, RDX
06a   	jle     B16  P=0.745262 C=5751.000000
06a
070   B5: #	B25 B6 &lt;- B4  Freq: 0.254738
070   	addl    R10, #2	# int
074   	# TLS is in R15
074   	testl   RCX, RCX
076   	jl     B25  P=0.192787 C=1525.000000
076
07c   B6: #	B35 B7 &lt;- B25 B5  Freq: 0.254738
07c   	movl    [rsp + #64], RBX	# spill
080   	movslq  RCX, R10	# i2l
083   	cmpl    RDI, R10
086   	movl    R9, R10	# spill
089   	movl    [rsp + #72], RDI	# spill
08d   	cmovll R9, RDI	# signed, int
091   	salq    RCX, #1
094   	addq    RCX, #23	# long
098   	movslq  R13, R9	# i2l
09b   	movq    R8, RCX	# spill
09e   	andq    R8, #-8	# long
0a2   	shrq    RCX, #3
0a6   	movq    RBX, R13	# spill
0a9   	salq    RBX, #1
0ac   	addq    RBX, #16	# long
0b0   	movq    [rsp + #80], RBX	# spill
0b5   	andq    RBX, #-7	# long
0b9   	movq    [rsp + #88], RBX	# spill
0be   	movq    RDX, R8	# spill
0c1   	addq    RDX, #-16	# long
0c5   	testl   R10, R10
0c8   	jl     B35  P=0.000000 C=1525.000000
0c8
0ce   B7: #	B27 B8 &lt;- B6  Freq: 0.254738
0ce   	decode_heap_oop_not_null RSI,R11
0d1   	movq    RAX, RCX	# spill
0d4   	addq    RAX, #-2	# long
0d8   	cmpl    R10, #524288	# unsigned
0df   	jnbe,u  B27  P=0.000001 C=-1.000000
0df
0e5   B8: #	B27 B9 &lt;- B7  Freq: 0.254737
0e5   	movq    RBX, [R15 + #112 (8-bit)]	# ptr
0e9   	movq    RDI, RBX	# spill
0ec   	addq    RDI, R8	# ptr
0ef   	cmpq    RDI, [R15 + #128 (32-bit)]	# raw ptr
0f6   	jnb,u  B27  P=0.000100 C=-1.000000
0f6
0fc   B9: #	B10 &lt;- B8  Freq: 0.254712
0fc   	PREFETCHNTA [RDI + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
103   	movq    [R15 + #112 (8-bit)], RDI	# ptr
107   	PREFETCHNTA [RDI + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
10e   	movq    [RBX], 0x0000000000000001	# ptr
115   	PREFETCHNTA [RDI + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
11c   	movl    [RBX + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f37682141b0:Constant:exact *	# compressed klass ptr
123   	PREFETCHNTA [RDI + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
12a   	movl    [RBX + #12 (8-bit)], R10	# int
12a
12e   B10: #	B32 B11 &lt;- B28 B9  Freq: 0.254738
12e   	movq    R8, [rsp + #80]	# spill
133   	shrq    R8, #3
137   	
137   	# checkcastPP of RBX
137   	subq    RCX, R8	# long
13a   	movq    R8, RBX	# spill
13d   	addq    R8, #16	# ptr
141   	encode_heap_oop_not_null RBP,RBX
24c   	movl    RDI, [rsp + #72]	# spill
250   	cmpl    RDI, R9	# unsigned
253   	jb,u  B32  P=0.000001 C=-1.000000
253
259   B11: #	B32 B12 &lt;- B10  Freq: 0.254737
259   	cmpl    R10, R9	# unsigned
25c   	jb,u  B32  P=0.000001 C=-1.000000
25c
262   B12: #	B34 B13 &lt;- B11  Freq: 0.254737
262   	movq    RDI, [rsp + #88]	# spill
267   	addq    RBX, RDI	# ptr
26a   	shrq    RDX, #3
26e   	testl   R9, R9
271   	jle     B34  P=0.000001 C=-1.000000
271
277   B13: #	B26 B14 &lt;- B12  Freq: 0.254737
277   	leaq    R11, [R11 + #16 (8-bit)]	# ptr off8narrow
27b   	cmpl    R9, R10
27e   	jl     B26  P=0.001000 C=-1.000000
27e
284   B14: #	B15 &lt;- B13  Freq: 0.254482
284   	movq    RDI, R11	# spill
287   	movq    RSI, R8	# spill
28a   	call_leaf_nofp,runtime  jlong_disjoint_arraycopy
        No JVM State Info
        # 
297
297   B15: #	B16 &lt;- B26 B14 B33 B34  Freq: 0.254738
297   	movq    R10, 0x00007f3757e0b000	# ptr
2a1   	MEMBAR-storestore (empty encoding)
2a1   	movq    R11, [rsp + #0]	# spill
2a5   	movq    R11, R11	# ptr -&gt; long
2a5   	movq    R8, [rsp + #96]	# spill
2aa   	movl    R9, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
2ae   	movq    R8, [rsp + #0]	# spill
2b2   	movl    [R8 + #16 (8-bit)], RBP	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
2b6   	movl    R8, [R8 + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
2ba   	shrq    R11, #9
2be   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
2c2   	movl    R11, RBP	# spill
2c5   	movl    RBX, [rsp + #64]	# spill
2c5
2c9   B16: #	B38 B17 &lt;- B15 B4  Freq: 0.999997
2c9   	movl    RSI, #-10	# int
2ce   	movl    RBP, [R9 + #12 (8-bit)]	# range
2d2   	NullCheck R9
2d2
2d2   B17: #	B31 B18 &lt;- B16  Freq: 0.999996
2d2   	movl    RSI, #-155	# int
2d7   	cmpl    RBX, RBP
2d9   	jg     B31  P=0.000000 C=5550.000000
2d9
2df   B18: #	B39 B19 &lt;- B17  Freq: 0.999996
2df   	decode_heap_oop_not_null RAX,R9
2e2   	decode_heap_oop_not_null RCX,R11
2e5   	movl    RDI, [R11 + #12 (8-bit)]	# range
2e9   	NullCheck R11
2e9
2e9   B19: #	B29 B20 &lt;- B18  Freq: 0.999995
2e9   	movslq  RDX, RBX	# i2l
2ec   	testl   R8, R8
2ef   	jl     B29  P=0.000001 C=-1.000000
2ef
2f5   B20: #	B29 B21 &lt;- B19  Freq: 0.999994
2f5   	movl    R10, R8	# spill
2f8   	addl    R10, RBX	# int
2fb   	cmpl    RBP, RBX	# unsigned
2fd   	jb,u  B29  P=0.000001 C=-1.000000
2fd
303   B21: #	B29 B22 &lt;- B20  Freq: 0.999993
303   	leaq    RSI, [R11 + #16 + R8 &lt;&lt; #1]	# ptr posidxscaleoffnarrow
308   	cmpl    RDI, R10	# unsigned
30b   	jb,u  B29  P=0.000001 C=-1.000000
30b
311   B22: #	B24 B23 &lt;- B21  Freq: 0.999992
311   	testl   RBX, RBX
313   	jle,s   B24  P=0.000001 C=-1.000000
313
315   B23: #	B24 &lt;- B22  Freq: 0.999991
315   	leaq    RDI, [R9 + #16 (8-bit)]	# ptr off8narrow
319   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
326
326   B24: #	N593 &lt;- B23 B22 B30  Freq: 0.999995
326   	
326   	movq    R10, [rsp + #0]	# spill
32a   	movl    R10, [R10 + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
32e   	addl    R10, RBX	# int
331   	movq    R11, [rsp + #0]	# spill
335   	movl    [R11 + #12 (8-bit)], R10	# int ! Field: java/lang/AbstractStringBuilder.count
339   	movq    RAX, R11	# spill
33c   	addq    rsp, 128	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

34a   	ret
34a
34b   B25: #	B6 &lt;- B5  Freq: 0.0491101
34b   	movl    R10, RBP	# spill
34e   	jmp     B6
34e
353   B26: #	B15 &lt;- B13  Freq: 0.000254737
353   	movq    RDI, RBX	# spill
356   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
360   	movq    RDI, R11	# spill
363   	movq    RSI, R8	# spill
366   	movq    RDX, R13	# spill
369   	call_leaf_nofp,runtime  arrayof_jshort_disjoint_arraycopy
        No JVM State Info
        # 
376   	jmp     B15
376
37b   B27: #	B43 B28 &lt;- B7 B8  Freq: 2.57361e-05
37b   	movq    [rsp + #56], RAX	# spill
380   	movq    [rsp + #48], RSI	# spill
385   	movq    [rsp + #40], RDX	# spill
38a   	movq    [rsp + #32], R13	# spill
38f   	movl    [rsp + #20], R9	# spill
394   	movq    [rsp + #24], RCX	# spill
399   	movl    [rsp + #16], R10	# spill
39e   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #64]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
3b0   	movl    [rsp + #8], R11	# spill
3b5   	movq    RBP, [rsp + #96]	# spill
3ba   	movq    RSI, precise klass [C: 0x00007f37682141b0:Constant:exact *	# ptr
3c4   	movl    RDX, R10	# spill
3c7   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOf @ bci:1  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=_
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #0
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # java.lang.AbstractStringBuilder::append @ bci:21  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12
        # OopMap{rbp=Oop [0]=Oop [8]=NarrowOop [48]=Oop [96]=Oop off=972}
3cc
3cc   B28: #	B10 &lt;- B27  Freq: 2.57356e-05
        # Block is sole successor of call
3cc   	movq    R8, RAX	# spill
3cf   	movl    R11, [rsp + #8]	# spill
3d4   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #64], rax
	movq    rax, [rsp - #8]
3e6   	movl    R10, [rsp + #16]	# spill
3eb   	movq    RCX, [rsp + #24]	# spill
3f0   	movl    R9, [rsp + #20]	# spill
3f5   	movq    R13, [rsp + #32]	# spill
3fa   	movq    RDX, [rsp + #40]	# spill
3ff   	movq    RSI, [rsp + #48]	# spill
404   	movq    RAX, [rsp + #56]	# spill
409   	movq    RBX, R8	# spill
40c   	jmp     B10
40c
411   B29: #	B42 B30 &lt;- B19 B20 B21  Freq: 2.99998e-06
411   	movq    RSI, RAX	# spill
414   	xorl    RDX, RDX	# int
416   	movl    R9, RBX	# spill
419   	movq    RBP, [rsp + #0]	# spill
41d   	movl    [rsp + #12], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
423   	call,static  wrapper for: slow_arraycopy
        # java.lang.String::getChars @ bci:58  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.lang.AbstractStringBuilder::append @ bci:35  L[0]=RBP L[1]=_ L[2]=rsp + #12
        # OopMap{rbp=Oop [0]=Oop off=1064}
428
428   B30: #	B24 &lt;- B29  Freq: 2.99992e-06
        # Block is sole successor of call
428   	movl    RBX, [rsp + #12]	# spill
42c   	jmp     B24
42c
431   B31: #	N593 &lt;- B17  Freq: 4.76835e-07
431   	movl    [rsp + #20], RBX	# spill
435   	movl    [rsp + #24], R11	# spill
43a   	movl    [rsp + #28], R8	# spill
43f   	movl    [rsp + #32], RBX	# spill
443   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::getChars @ bci:19  L[0]=rsp + #96 L[1]=#0 L[2]=rsp + #32 L[3]=rsp + #24 L[4]=rsp + #28 STK[0]=rsp + #20 STK[1]=RBP
        # java.lang.AbstractStringBuilder::append @ bci:35  L[0]=rsp + #0 L[1]=_ L[2]=rsp + #20
        # OopMap{[0]=Oop [24]=NarrowOop [96]=Oop off=1096}
448   	int3	# ShouldNotReachHere
448
44d   B32: #	B41 B33 &lt;- B10 B11  Freq: 5.09475e-07
44d   	movq    RCX, RAX	# spill
450   	movq    RDI, R8	# spill
453   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
45d   	xorl    RDX, RDX	# int
45f   	movq    RCX, RBX	# spill
462   	xorl    R8, R8	# int
465   	movq    [rsp + #32], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
46b   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOf @ bci:14  L[0]=_ L[1]=_ L[2]=rsp + #32
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #0
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # java.lang.AbstractStringBuilder::append @ bci:21  L[0]=rsp + #0 L[1]=rsp + #96 L[2]=rsp + #64
        # OopMap{rbp=NarrowOop [0]=Oop [32]=Oop [96]=Oop off=1136}
470
470   B33: #	B15 &lt;- B32  Freq: 5.09465e-07
        # Block is sole successor of call
470   	jmp     B15
470
475   B34: #	B15 &lt;- B12  Freq: 2.54737e-07
475   	movq    RCX, RAX	# spill
478   	movq    RDI, R8	# spill
47b   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
485   	
485   	jmp     B15
485
48a   B35: #	N593 &lt;- B6  Freq: 1.21468e-07
48a   	movl    RSI, #-155	# int
48f   	movl    [rsp + #32], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
497   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:19  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #32 STK[0]=rsp + #32
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # java.lang.AbstractStringBuilder::append @ bci:21  L[0]=rsp + #0 L[1]=rsp + #96 L[2]=rsp + #64
        # OopMap{[0]=Oop [96]=Oop off=1180}
49c   	int3	# ShouldNotReachHere
49c
4a1   B36: #	N593 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
4a3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # java.lang.AbstractStringBuilder::append @ bci:10  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1192}
4a8   	int3	# ShouldNotReachHere
4a8
4ad   B37: #	N593 &lt;- B3  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
4af   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:5  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.AbstractStringBuilder::append @ bci:21  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1204}
4b4   	int3	# ShouldNotReachHere
4b4
4b9   B38: #	N593 &lt;- B16  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
4bb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::getChars @ bci:18  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.AbstractStringBuilder::append @ bci:35  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1216}
4c0   	int3	# ShouldNotReachHere
4c0
4c5   B39: #	N593 &lt;- B18  Freq: 1.01327e-06
4c5   	movl    RBP, R9	# spill
4c8   	movl    RSI, #-10	# int
4cd   	movl    [rsp + #0], R8	# spill
4d1   	movl    [rsp + #4], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
4d7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::getChars @ bci:58  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP STK[1]=#0 STK[2]=#NULL STK[3]=rsp + #0 STK[4]=rsp + #4
        # java.lang.AbstractStringBuilder::append @ bci:35  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=NarrowOop off=1244}
4dc   	int3	# ShouldNotReachHere
4dc
4e1   B40: #	N593 &lt;- B1  Freq: 4.76837e-07
4e1   	movl    RSI, #-155	# int
4e6   	movq    RBP, [rsp + #0]	# spill
4ea   	movq    [rsp + #8], RDX	# spill
4ef   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.AbstractStringBuilder::append @ bci:1  L[0]=RBP L[1]=rsp + #8 L[2]=_ STK[0]=rsp + #96
        # OopMap{rbp=Oop [8]=Oop [96]=Oop off=1268}
4f4   	int3	# ShouldNotReachHere
4f4
4f9   B41: #	B44 &lt;- B32  Freq: 5.09475e-12
4f9   	# exception oop is in rax; no code emitted
4f9   	jmp,s   B44
4f9
4fb   B42: #	B45 &lt;- B29  Freq: 2.99998e-11
4fb   	# exception oop is in rax; no code emitted
4fb   	movq    RSI, RAX	# spill
4fe   	jmp,s   B45
4fe
500   B43: #	B44 &lt;- B27  Freq: 2.57361e-10
500   	# exception oop is in rax; no code emitted
500
500   B44: #	B45 &lt;- B43 B41  Freq: 2.62456e-10
500   	movq    RSI, RAX	# spill
500
503   B45: #	N593 &lt;- B44 B42  Freq: 2.92455e-10
503   	addq    rsp, 128	# Destroy frame
	popq   rbp

50b   	jmp     rethrow_stub
50b

</opto_assembly>
<writer thread='139875534886656'/>
<opto_assembly compile_id='577'>
{method}
 - this oop:          0x00007f375568ab30
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f37556850e8 constant pool [680] {0x00007f37556850e8} for &apos;java/lang/String&apos; cache=0x00007f375574e5e0
 - access:            0xc1000008  static 
 - name:              &apos;indexOf&apos;
 - signature:         &apos;([CII[CIII)I&apos;
 - max stack:         4
 - max locals:        13
 - size of params:    7
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef830: 0xbaabaaa0 i2c: 0x00007f3758b12ba0 c2i: 0x00007f3758b12cf8 c2iUV: 0x00007f3758b12ccb
 - compiled entry     0x00007f3758c2ab20
 - code size:         166
 - code start:        0x00007f375568a9d0
 - code end (excl):   0x00007f375568aa76
 - method data:       0x00007f3755a090a8
 - checked ex length: 0
 - linenumber start:  0x00007f375568aa76
 - localvar length:   13
 - localvar start:    0x00007f375568aa92
 - compiled code: nmethod   9501  103       3       java.lang.String::indexOf (166 bytes)
#
#  int ( char[int:&gt;=0]:exact *, int, int, char[int:&gt;=0]:exact *, int, int, int )
#
#r018 rsi:rsi   : parm 0: char[int:&gt;=0]:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: char[int:&gt;=0]:exact *
#r006 r9   : parm 4: int
#r014 rdi   : parm 5: int
#r193 rsp+84: pad0, owned by CALLER
#r192 rsp+80: parm 6: int
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r205 rsp+44: spill
#r204 rsp+40: spill
#r203 rsp+36: spill
#r202 rsp+32: spill
#r201 rsp+28: spill
#r200 rsp+24: spill
#r199 rsp+20: spill
#r198 rsp+16: spill
#r197 rsp+12: spill
#r196 rsp+ 8: spill
#r195 rsp+ 4: spill
#r194 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B73 B74 B75 B72 B76 B71 B29 B67 B68 B69  Freq: 1
abababab
000   B1: #	B60 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (216 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

00c   	movdq   XMM1, RSI	# spill
011   	movl    RAX, RDI	# spill
013   	movl    RDI, R9	# spill
016   	movl    [rsp + #16], RDX	# spill
01a   	movl    R9, RCX	# spill
01d   	movl    R11, RCX	# spill
020   	subl    R11, RAX	# int
023   	movl    RBX, #-1	# int
028   	addl    R11, RDX	# int
02b   	movl    RCX, RDX	# spill
02d   	addl    RCX, [RSP + #80 (32-bit)]	# int
031   	movl    R10, [rsp + #80]	# spill
036   	cmpl    R10, R9
039   	jge     B60  P=0.012587 C=715.000000
039
03f   B2: #	B73 B3 &lt;- B1  Freq: 0.987413
03f   	movl    RDX, R11	# spill
042   	addl    RDX, #-2	# int
045   	movl    RSI, #-155	# int
04a   	testl   R10, R10
04d   	jl     B73  P=0.000000 C=706.000000
04d
053   B3: #	B74 B4 &lt;- B2  Freq: 0.987412
053   	movl    R13, RAX	# spill
056   	testl   RAX, RAX
058   	je     B74  P=0.000000 C=706.000000
058
05e   B4: #	B75 B5 &lt;- B3  Freq: 0.987412
05e   	movq    RAX, R8	# spill
061   	movl    R8, [R8 + #12 (8-bit)]	# range
065   	NullCheck R8
065
065   B5: #	B72 B6 &lt;- B4  Freq: 0.987411
065   	movl    RSI, #-2147483648	# int
06a   	movl    R14, RDI	# spill
06d   	cmpl    RDI, R8	# unsigned
070   	jnb,u  B72  P=0.000001 C=-1.000000
070
076   B6: #	B26 B7 &lt;- B5  Freq: 0.98741
076   	movzwl  RBX, [RAX + #16 + RDI &lt;&lt; #1]	# ushort/char
07b   	cmpl    RCX, R11
07e   	jg     B26  P=0.229255 C=2133.000000
07e
084   B7: #	B76 B8 &lt;- B6  Freq: 0.761041
084   	movl    RDI, R11	# spill
087   	incl    RDI	# int
089   	movdq   R10, XMM1	# spill
08e   	movl    R9, [R10 + #12 (8-bit)]	# range
092   	NullCheck R10
092
092   B8: #	B31 &lt;- B7  Freq: 0.761041
092   	cmpl    RDI, RDX
094   	cmovll RDX, RSI	# signed, int
097   	movl    R10, R14	# spill
09a   	incl    R10	# int
09d   	jmp     B31
09d
0a2   B9: #	B42 &lt;- B46  top-of-loop Freq: 5.18654
0a2   	movl    RAX, RCX	# spill
0a4   	jmp     B42
0a4
0a9   B10: #	B11 &lt;- B42  Freq: 0.477914
0a9   	movl    RBP, RAX	# spill
0a9
0ab   B11: #	B14 &lt;- B10 B44  Freq: 0.893392
0ab   	movl    RCX, RBP	# spill
0ad   	incl    RCX	# int
0af   	movl    RAX, RBP	# spill
0b1   	jmp,s   B14
0b1
0b3   B12: #	B13 &lt;- B45  Freq: 0.38739
0b3   	addl    RAX, #2	# int
0b6
0b6   B13: #	B14 &lt;- B43 B12  Freq: 0.832994
0b6   	incl    RAX	# int
0b8
0b8   B14: #	B15 &lt;- B55 B11 B13  Freq: 1.99939
0b8   	movdq   RSI, XMM1	# spill
0b8
0bd   B15: #	B25 B16 &lt;- B62 B14  Freq: 2.00928
0bd   	cmpl    RAX, [RSP + #24 (32-bit)]
0c1   	jg,s   B25  P=0.295012 C=1644.000000
0c1
0c3   B16: #	B27 B17 &lt;- B54 B15 B58  Freq: 1.58925
0c3   	movl    RBP, RAX	# spill
0c5   	addl    RBP, [RSP + #20 (32-bit)]	# int
0c9   	cmpl    RCX, RBP
0cb   	jge     B27  P=0.187069 C=1160.000000
0cb
0d1   B17: #	B71 B18 &lt;- B16  Freq: 1.29195
0d1   	movl    R10, RBP	# spill
0d4   	decl    R10	# int
0d7   	cmpl    RCX, R9	# unsigned
0da   	jnb,u  B71  P=0.000001 C=-1.000000
0da
0e0   B18: #	B71 B19 &lt;- B17  Freq: 1.29195
0e0   	movdl   R13, XMM2	# spill
0e5   	subl    R13, RCX	# int
0e8   	cmpl    R10, R9	# unsigned
0eb   	jnb,u  B71  P=0.000001 C=-1.000000
0eb
0f1   B19: #	B71 B20 &lt;- B18  Freq: 1.29195
0f1   	movl    R10, RBP	# spill
0f4   	addl    R10, R13	# int
0f7   	movdl   R11, XMM3	# spill
0fc   	cmpl    R11, R8	# unsigned
0ff   	jnb,u  B71  P=0.000001 C=-1.000000
0ff
105   B20: #	B71 B21 &lt;- B19  Freq: 1.29195
105   	cmpl    R10, R8	# unsigned
108   	jnb,u  B71  P=0.000001 C=-1.000000
108
10e   B21: #	B22 &lt;- B20  Freq: 1.29195
10e   	movl    R10, RCX	# spill
111   	movdl   XMM1, RDI	# spill
111
115   B22: #	B63 B23 &lt;- B21 B63 	Loop: B22-B63 inner  Freq: 1.29306
115   	movzwl  RDI, [RSI + #16 + R10 &lt;&lt; #1]	# ushort/char
11b   	movl    R11, R10	# spill
11e   	addl    R11, R13	# int
121   	movslq  R11, R11	# i2l
124   	movdq   R14, XMM0	# spill
129   	movzwl  R14, [R14 + #18 + R11 &lt;&lt; #1]	# ushort/char
12f   	cmpl    RDI, R14
132   	je     B63  P=0.001060 C=943.000000
132
138   B23: #	B28 B24 &lt;- B22  Freq: 1.29169
138   	cmpl    R10, RBP
13b   	je,s   B28  P=0.187230 C=1159.000000
13b
13d   B24: #	B25 &lt;- B23  Freq: 1.04985
13d   	movdl   RDI, XMM1	# spill
13d
141   B25: #	B30 B26 &lt;- B65 B24 B27 B53 B15 B59 B57  Freq: 2.02164
141   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.lang.String::indexOf @ bci:161  L[0]=RSI L[1]=rsp + #16 L[2]=_ L[3]=XMM0 L[4]=XMM2 L[5]=rsp + #20 L[6]=_ L[7]=RBX L[8]=rsp + #24 L[9]=RCX L[10]=_ L[11]=_ L[12]=_
        # OopMap{rsi=Oop xmm0=Oop off=321}
147   	cmpl    RCX, [RSP + #24 (32-bit)]
14b   	jle,s   B30  P=0.770745 C=1427.000000
14b
14d   B26: #	B29 &lt;- B25 B6  Freq: 0.689839
14d   	movl    RAX, #-1	# int
152   	jmp,s   B29
152
154   B27: #	B25 B28 &lt;- B16  Freq: 0.2973
154   	cmpl    RCX, RBP
156   	jne,s   B25  P=0.812770 C=1159.000000
156
158   B28: #	B29 &lt;- B64 B23 B27  Freq: 0.297556
158   	subl    RAX, [RSP + #16 (32-bit)]	# int
15c
15c   B29: #	N1 &lt;- B61 B28 B26  Freq: 0.999982
15c   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

167   	ret
167
168   B30: #	B31 &lt;- B25  Freq: 1.55817
168   	movdq   XMM1, RSI	# spill
16d   	movdq   RAX, XMM0	# spill
172   	movdl   R14, XMM2	# spill
177   	movl    R13, [rsp + #20]	# spill
17c   	movl    R11, [rsp + #24]	# spill
181   	movdl   R10, XMM3	# spill
181
186   B31: #	B67 B32 &lt;- B8 B30 	Loop: B31-B30  Freq: 2.31921
186   	cmpl    RCX, R9	# unsigned
189   	jnb,u  B67  P=0.000001 C=-1.000000
189
18f   B32: #	B56 B33 &lt;- B31  Freq: 2.31921
18f   	movdl   XMM3, R10	# spill
194   	movl    [rsp + #24], R11	# spill
199   	movl    [rsp + #20], R13	# spill
19e   	movdl   XMM2, R14	# spill
1a3   	movdq   XMM0, RAX	# spill
1a8   	movdq   R10, XMM1	# spill
1ad   	movzwl  RSI, [R10 + #16 + RCX &lt;&lt; #1]	# ushort/char
1b3   	movl    R10, RCX	# spill
1b6   	incl    R10	# int
1b9   	cmpl    RSI, RBX
1bb   	je     B56  P=0.042579 C=1644.000000
1bb
1c1   B33: #	B59 B34 &lt;- B32  Freq: 2.22046
1c1   	addl    RCX, #2	# int
1c4   	cmpl    R10, R11
1c7   	jg     B59  P=0.029229 C=16593.000000
1c7
1cd   B34: #	B68 B35 &lt;- B33  Freq: 2.15556
1cd   	cmpl    R10, R9	# unsigned
1d0   	jnb,u  B68  P=0.000001 C=-1.000000
1d0
1d6   B35: #	B68 B36 &lt;- B34  Freq: 2.15556
1d6   	cmpl    R11, R9	# unsigned
1d9   	jnb,u  B68  P=0.000001 C=-1.000000
1d9
1df   B36: #	B69 B37 &lt;- B35  Freq: 2.15555
1df   	cmpl    R11, #2147483646
1e6   	jg     B69  P=0.000001 C=-1.000000
1e6
1ec   B37: #	B55 B38 &lt;- B36 B39 	Loop: B37-B39 inner pre of N436 Freq: 4.0381
1ec   	movdq   R11, XMM1	# spill
1f1   	movzwl  R11, [R11 + #16 + R10 &lt;&lt; #1]	# ushort/char
1f7   	movl    RAX, R10	# spill
1fa   	incl    RAX	# int
1fc   	cmpl    R11, RBX
1ff   	je     B55  P=0.067606 C=16108.000000
1ff
205   B38: #	B40 B39 &lt;- B37  Freq: 3.7651
205   	cmpl    RAX, RCX
207   	jge,s   B40	# loop end  P=0.500000 C=15019.000000
207
209   B39: #	B37 &lt;- B38  Freq: 1.88255
209   	movl    R10, RAX	# spill
20c   	jmp,s   B37
20c
20e   B40: #	B70 B41 &lt;- B38  Freq: 1.88255
20e   	cmpl    RAX, RDX
210   	jge     B70  P=0.000001 C=-1.000000
210
216   B41: #	B42 &lt;- B40  Freq: 1.88255
216   	# castII of RAX
216
216   B42: #	B10 B43 &lt;- B41 B9 	Loop: B42-B9 inner main of N195 Freq: 7.06909
216   	movdq   R10, XMM1	# spill
21b   	movzwl  RCX, [R10 + #16 + RAX &lt;&lt; #1]	# ushort/char
221   	movl    RBP, RAX	# spill
223   	addl    RBP, #2	# int
226   	movl    R10, RAX	# spill
229   	addl    R10, #3	# int
22d   	cmpl    RCX, RBX
22f   	je     B10  P=0.067606 C=16108.000000
22f
235   B43: #	B13 B44 &lt;- B42  Freq: 6.59118
235   	movslq  R11, RAX	# i2l
238   	movdq   RCX, XMM1	# spill
23d   	movzwl  RSI, [RCX + #22 + R11 &lt;&lt; #1]	# ushort/char
243   	movl    RCX, RAX	# spill
245   	addl    RCX, #2	# int
248   	movdq   R13, XMM1	# spill
24d   	movzwl  R14, [R13 + #20 + R11 &lt;&lt; #1]	# ushort/char
253   	movzwl  R11, [R13 + #18 + R11 &lt;&lt; #1]	# ushort/char
259   	cmpl    R11, RBX
25c   	je     B13  P=0.067606 C=16108.000000
25c
262   B44: #	B11 B45 &lt;- B43  Freq: 6.14557
262   	cmpl    R14, RBX
265   	je     B11  P=0.067606 C=16108.000000
265
26b   B45: #	B12 B46 &lt;- B44  Freq: 5.73009
26b   	movl    RCX, RAX	# spill
26d   	addl    RCX, #4	# int
270   	cmpl    RSI, RBX
272   	je     B12  P=0.067606 C=16108.000000
272
278   B46: #	B9 B47 &lt;- B45  Freq: 5.3427
278   	cmpl    RCX, RDX
27a   	jl     B9	# loop end  P=0.970771 C=15019.000000
27a
280   B47: #	B52 B48 &lt;- B70 B46  Freq: 0.156165
280   	cmpl    RCX, RDI
282   	jge,s   B52  P=0.500000 C=-1.000000
282
284   B48: #	B49 &lt;- B47  Freq: 0.0780823
284   	# castII of RCX
284
284   B49: #	B62 B50 &lt;- B48 B51 	Loop: B49-B51 inner post of N436 Freq: 0.146276
284   	movdq   RSI, XMM1	# spill
289   	movzwl  R11, [RSI + #16 + RCX &lt;&lt; #1]	# ushort/char
28f   	movl    RAX, RCX	# spill
291   	incl    RAX	# int
293   	cmpl    R11, RBX
296   	je,s   B62  P=0.067606 C=16108.000000
296
298   B50: #	B53 B51 &lt;- B49  Freq: 0.136386
298   	cmpl    RAX, RDI
29a   	jge,s   B53	# loop end  P=0.500000 C=15019.000000
29a
29c   B51: #	B49 &lt;- B50  Freq: 0.0681932
29c   	movl    RCX, RAX	# spill
29e   	jmp,s   B49
29e
2a0   B52: #	B53 &lt;- B47  Freq: 0.0780823
2a0   	movl    RAX, RCX	# spill
2a2   	movl    RCX, R10	# spill
2a5   	movdq   RSI, XMM1	# spill
2a5
2aa   B53: #	B25 B54 &lt;- B50 B52  Freq: 0.146276
2aa   	addl    RCX, #2	# int
2ad   	cmpl    RAX, [RSP + #24 (32-bit)]
2b1   	jg     B25  P=0.295012 C=1644.000000
2b1
2b7   B54: #	B16 &lt;- B53  Freq: 0.103122
2b7   	jmp     B16
2b7
2bc   B55: #	B14 &lt;- B37  Freq: 0.273
2bc   	movl    RCX, RAX	# spill
2be   	movl    RAX, R10	# spill
2c1   	jmp     B14
2c1
2c6   B56: #	B58 B57 &lt;- B32  Freq: 0.0987497
2c6   	cmpl    RCX, R11
2c9   	jle,s   B58  P=0.704988 C=1644.000000
2c9
2cb   B57: #	B25 &lt;- B56  Freq: 0.0291324
2cb   	movl    RCX, R10	# spill
2ce   	movdq   RSI, XMM1	# spill
2d3   	jmp     B25
2d3
2d8   B58: #	B16 &lt;- B56  Freq: 0.0696174
2d8   	movl    RAX, RCX	# spill
2da   	movl    RCX, R10	# spill
2dd   	movdq   RSI, XMM1	# spill
2e2   	jmp     B16
2e2
2e7   B59: #	B25 &lt;- B33  Freq: 0.0649022
2e7   	movdq   RSI, XMM1	# spill
2ec   	jmp     B25
2ec
2f1   B60: #	B66 B61 &lt;- B1  Freq: 0.0125874
2f1   	testl   RAX, RAX
2f3   	je,s   B66  P=0.100000 C=-1.000000
2f3
2f5   B61: #	B29 &lt;- B60 B66  Freq: 0.0125874
2f5   	movl    RAX, RBX	# spill
2f7   	jmp     B29
2f7
2fc   B62: #	B15 &lt;- B49  Freq: 0.00988912
2fc   	movl    R11, RAX	# spill
2ff   	movl    RAX, RCX	# spill
301   	movl    RCX, R11	# spill
304   	jmp     B15
304
309   B63: #	B22 B64 &lt;- B22  Freq: 0.0013712
309   	incl    R10	# int
30c   	cmpl    R10, RBP
30f   	jl     B22	# loop end  P=0.812931 C=1.000000
30f
315   B64: #	B28 B65 &lt;- B63  Freq: 0.000256509
315   	cmpl    R10, RBP
318   	je     B28  P=0.187230 C=1159.000000
318
31e   B65: #	B25 &lt;- B64  Freq: 0.000208483
31e   	movdl   RDI, XMM1	# spill
322   	jmp     B25
322
327   B66: #	B61 &lt;- B60  Freq: 0.00125874
327   	movl    RBX, R9	# spill
32a   	jmp,s   B61
32a
32c   B67: #	N1 &lt;- B31  Freq: 2.35001e-06
32c   	movl    [rsp + #80], RBX	# spill
330   	movsd   [rsp + #8], XMM1	# spill
336   	movl    [rsp + #4], RCX	# spill
33a   	movq    [rsp + #24], RAX	# spill
33f   	movl    [rsp + #20], R14	# spill
344   	movl    [rsp + #32], R13	# spill
349   	movl    [rsp + #36], R11	# spill
34e   	movl    RSI, #-28	# int
353   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::indexOf @ bci:63  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #24 L[4]=rsp + #20 L[5]=rsp + #32 L[6]=_ L[7]=rsp + #80 L[8]=rsp + #36 L[9]=rsp + #4 L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #8 STK[1]=rsp + #4
        # OopMap{[8]=Oop [24]=Oop off=856}
358   	int3	# ShouldNotReachHere
358
35d   B68: #	N1 &lt;- B35 B34  Freq: 4.36836e-06
35d   	movdq   RBP, XMM1	# spill
362   	movl    [rsp + #80], RBX	# spill
366   	movl    [rsp + #0], R10	# spill
36a   	movl    R11, [rsp + #16]	# spill
36f   	movl    [rsp + #4], R11	# spill
374   	movq    [rsp + #8], RAX	# spill
379   	movl    [rsp + #16], R14	# spill
37e   	movl    RSI, #-122	# int
383   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:79  L[0]=RBP L[1]=rsp + #4 L[2]=_ L[3]=rsp + #8 L[4]=rsp + #16 L[5]=rsp + #20 L[6]=_ L[7]=rsp + #80 L[8]=rsp + #24 L[9]=rsp + #0 L[10]=_ L[11]=_ L[12]=_
        # OopMap{rbp=Oop [8]=Oop off=904}
388   	int3	# ShouldNotReachHere
388
38d   B69: #	N1 &lt;- B36  Freq: 2.18418e-06
38d   	movdq   RBP, XMM1	# spill
392   	movl    [rsp + #80], RBX	# spill
396   	movl    [rsp + #0], R10	# spill
39a   	movl    R11, [rsp + #16]	# spill
39f   	movl    [rsp + #4], R11	# spill
3a4   	movq    [rsp + #8], RAX	# spill
3a9   	movl    [rsp + #16], R14	# spill
3ae   	movl    RSI, #-130	# int
3b3   	call,static  wrapper for: uncommon_trap(reason=&apos;loop_limit_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:79  L[0]=RBP L[1]=rsp + #4 L[2]=_ L[3]=rsp + #8 L[4]=rsp + #16 L[5]=rsp + #20 L[6]=_ L[7]=rsp + #80 L[8]=rsp + #24 L[9]=rsp + #0 L[10]=_ L[11]=_ L[12]=_
        # OopMap{rbp=Oop [8]=Oop off=952}
3b8   	int3	# ShouldNotReachHere
3b8
3bd   B70: #	B47 &lt;- B40  Freq: 1.90755e-06
3bd   	movl    RCX, RAX	# spill
3bf   	jmp     B47
3bf
3c4   B71: #	N1 &lt;- B20 B17 B18 B19  Freq: 5.23643e-06
3c4   	movq    [rsp + #0], RSI	# spill
3c8   	movl    [rsp + #80], RBX	# spill
3cc   	movl    [rsp + #8], RAX	# spill
3d0   	movl    [rsp + #12], RCX	# spill
3d4   	movsd   [rsp + #32], XMM0	# spill
3da   	movss   [rsp + #28], XMM2	# spill
3e0   	movss   [rsp + #40], XMM3	# spill
3e6   	movl    RSI, #-122	# int
3eb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:126  L[0]=rsp + #0 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #28 L[5]=rsp + #20 L[6]=_ L[7]=rsp + #80 L[8]=rsp + #24 L[9]=rsp + #8 L[10]=rsp + #12 L[11]=RBP L[12]=rsp + #40
        # OopMap{[0]=Oop [32]=Oop off=1008}
3f0   	int3	# ShouldNotReachHere
3f0
3f5   B72: #	N1 &lt;- B5  Freq: 1.00052e-06
3f5   	movl    RSI, #-28	# int
3fa   	movdq   RBP, XMM1	# spill
3ff   	movl    R8, [rsp + #16]	# spill
404   	movl    [rsp + #80], R8	# spill
409   	movl    [rsp + #0], R9	# spill
40d   	movl    [rsp + #16], R13	# spill
412   	movl    [rsp + #20], R10	# spill
417   	movq    [rsp + #24], RAX	# spill
41c   	movl    [rsp + #32], RDI	# spill
      	nop 	# 3 bytes pad for loops and calls
423   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::indexOf @ bci:36  L[0]=RBP L[1]=rsp + #80 L[2]=rsp + #0 L[3]=rsp + #24 L[4]=rsp + #32 L[5]=rsp + #16 L[6]=rsp + #20 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #24 STK[1]=rsp + #32
        # OopMap{rbp=Oop [24]=Oop off=1064}
428   	int3	# ShouldNotReachHere
428
42d   B73: #	N1 &lt;- B2  Freq: 4.70835e-07
42d   	movdq   RBP, XMM1	# spill
432   	movl    RCX, [rsp + #16]	# spill
436   	movl    [rsp + #80], RCX	# spill
43a   	movl    [rsp + #0], R9	# spill
43e   	movq    [rsp + #8], R8	# spill
443   	movl    [rsp + #4], RDI	# spill
447   	movl    [rsp + #16], RAX	# spill
44b   	movl    [rsp + #24], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
453   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::indexOf @ bci:19  L[0]=RBP L[1]=rsp + #80 L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #4 L[5]=rsp + #16 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #24
        # OopMap{rbp=Oop [8]=Oop off=1112}
458   	int3	# ShouldNotReachHere
458
45d   B74: #	N1 &lt;- B3  Freq: 4.70835e-07
45d   	movdq   RBP, XMM1	# spill
462   	movl    R11, [rsp + #16]	# spill
467   	movl    [rsp + #80], R11	# spill
46c   	movl    [rsp + #0], R9	# spill
470   	movq    [rsp + #8], R8	# spill
475   	movl    [rsp + #4], RDI	# spill
479   	movl    [rsp + #20], R10	# spill
47e   	movl    [rsp + #24], RAX	# spill
      	nop 	# 1 bytes pad for loops and calls
483   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::indexOf @ bci:27  L[0]=RBP L[1]=rsp + #80 L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #20 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #24
        # OopMap{rbp=Oop [8]=Oop off=1160}
488   	int3	# ShouldNotReachHere
488
48d   B75: #	N1 &lt;- B4  Freq: 1.00052e-06
48d   	movl    RSI, #-10	# int
492   	movl    RBP, RDI	# spill
      	nop 	# 3 bytes pad for loops and calls
497   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=1180}
49c   	int3	# ShouldNotReachHere
49c
4a1   B76: #	N1 &lt;- B7  Freq: 7.71147e-07
4a1   	movq    RBP, R10	# spill
4a4   	movl    [rsp + #80], RBX	# spill
4a8   	movl    [rsp + #0], RCX	# spill
4ab   	movl    R8, [rsp + #16]	# spill
4b0   	movl    [rsp + #4], R8	# spill
4b5   	movq    [rsp + #8], RAX	# spill
4ba   	movl    [rsp + #16], R14	# spill
4bf   	movl    [rsp + #20], R13	# spill
4c4   	movl    [rsp + #24], R11	# spill
4c9   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
4cf   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:60  L[0]=RBP L[1]=rsp + #4 L[2]=_ L[3]=rsp + #8 L[4]=rsp + #16 L[5]=rsp + #20 L[6]=_ L[7]=rsp + #80 L[8]=rsp + #24 L[9]=rsp + #0 L[10]=_ L[11]=_ L[12]=_
        # OopMap{rbp=Oop [8]=Oop off=1236}
4d4   	int3	# ShouldNotReachHere
4d4

</opto_assembly>
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='585'>
{method}
 - this oop:          0x00007f3755946678
 - method holder:     &apos;java/util/regex/Pattern$Single&apos;
 - constants:         0x00007f37559463d0 constant pool [32] {0x00007f37559463d0} for &apos;java/util/regex/Pattern$Single&apos; cache=0x00007f37559477c0
 - access:            0x81000000  
 - name:              &apos;isSatisfiedBy&apos;
 - signature:         &apos;(I)Z&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      8
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758d0c020
 - code size:         14
 - code start:        0x00007f3755946648
 - code end (excl):   0x00007f3755946656
 - method data:       0x00007f3755ca6b20
 - checked ex length: 0
 - linenumber start:  0x00007f3755946656
 - localvar length:   2
 - localvar start:    0x00007f375594665e
 - compiled code: nmethod   9570  479       3       java.util.regex.Pattern$Single::isSatisfiedBy (14 bytes)
#
#  bool ( java/util/regex/Pattern$Single:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$Single:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N30: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	movl    R11, [RSI + #16 (8-bit)]	# int ! Field: java/util/regex/Pattern$Single.c
030   	movl    RAX, #1	# int
035   	cmpl    RDX, R11
038   	je,s   B3  P=0.080696 C=5688.000000
038
03a   B2: #	B3 &lt;- B1  Freq: 0.919304
03a   	xorl    RAX, RAX	# int
03c
03c   B3: #	N30 &lt;- B2 B1  Freq: 1
03c   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

047   	ret
047

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
<opto_assembly compile_id='592'>
{method}
 - this oop:          0x00007f375568b288
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f37556850e8 constant pool [680] {0x00007f37556850e8} for &apos;java/lang/String&apos; cache=0x00007f375574e5e0
 - access:            0x81000001  public 
 - name:              &apos;subSequence&apos;
 - signature:         &apos;(II)Ljava/lang/CharSequence;&apos;
 - max stack:         4
 - max locals:        3
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef6c8: 0xbaa00000 i2c: 0x00007f3758b11ca0 c2i: 0x00007f3758b11de0 c2iUV: 0x00007f3758b11db3
 - compiled entry     0x00007f3758c78a60
 - code size:         7
 - code start:        0x00007f375568b250
 - code end (excl):   0x00007f375568b257
 - method data:       0x00007f3755b22028
 - checked ex length: 0
 - linenumber start:  0x00007f375568b257
 - localvar length:   3
 - localvar start:    0x00007f375568b262
 - compiled code: nmethod   9967  257       3       java.lang.String::subSequence (7 bytes)
#
#  java/lang/CharSequence * ( java/lang/String:NotNull:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N597: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B36 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (520 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movq    RBX, RSI	# spill
02f   	movl    RDI, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
032   	movl    R11, RCX	# spill
035   	subl    R11, RDX	# int
038   	movslq  R10, R11	# i2l
03b   	salq    R10, #1
03e   	addq    R10, #23	# long
042   	movq    [rsp + #32], R10	# spill
047   	movq    R8, R10	# spill
04a   	shrq    R8, #3
04e   	movq    RAX, R8	# spill
051   	addq    RAX, #-2	# long
055   	movl    R10, RDX	# spill
058   	testl   RDX, RDX
05a   	jl     B36  P=0.000000 C=15705.000000
05a
060   B2: #	B41 B3 &lt;- B1  Freq: 1
060   	movl    RSI, #-155	# int
065   	movl    RBP, [RDI + #12 (8-bit)]	# range
068   	NullCheck RDI
068
068   B3: #	B37 B4 &lt;- B2  Freq: 0.999999
068   	movl    RDX, narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
06d   	movl    R9, RCX	# spill
070   	cmpl    RCX, RBP
072   	jg     B37  P=0.000000 C=15705.000000
072
078   B4: #	B38 B5 &lt;- B3  Freq: 0.999998
078   	decode_klass_not_null RCX,RDX
086   	testl   R11, R11
089   	jl     B38  P=0.000000 C=15705.000000
089
08f   B5: #	B22 B6 &lt;- B4  Freq: 0.999998
08f   	testl   R10, R10
092   	je     B22  P=0.103343 C=15705.000000
092
098   B6: #	B28 B7 &lt;- B22 B5  Freq: 0.990765
098   	# TLS is in R15
098   	movq    R9, [R15 + #112 (8-bit)]	# ptr
09c   	movq    RSI, precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# ptr
0a6   	movq    RDI, R9	# spill
0a9   	addq    RDI, #24	# ptr
0ad   	# TLS is in R15
0ad   	cmpq    RDI, [R15 + #128 (32-bit)]	# raw ptr
0b4   	jnb,u  B28  P=0.000100 C=-1.000000
0b4
0ba   B7: #	B8 &lt;- B6  Freq: 0.990666
0ba   	# TLS is in R15
0ba   	movq    [R15 + #112 (8-bit)], RDI	# ptr
0be   	PREFETCHNTA [RDI + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0c5   	movq    RCX, [RCX + #176 (32-bit)]	# ptr
0cc   	movq    [R9], RCX	# ptr
0cf   	movl    [R9 + #8 (8-bit)], narrowklass: precise klass java/lang/String: 0x00007f37681ed7f0:Constant:exact *	# compressed klass ptr
0d7   	movl    [R9 + #12 (8-bit)], R12	# int (R12_heapbase==0)
0db   	movq    [R9 + #16 (8-bit)], R12	# long (R12_heapbase==0)
0db
0df   B8: #	B24 B9 &lt;- B29 B7  Freq: 0.990765
0df   	movq    RDI, [rsp + #32]	# spill
0e4   	andq    RDI, #-8	# long
0e8   	
0e8   	MEMBAR-storestore (empty encoding)
0e8   	# checkcastPP of R9
0e8   	movl    RBX, [RBX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
0eb   	testl   R11, R11
0ee   	jle     B24  P=0.004700 C=9999.000000
0ee
0f4   B9: #	B42 B10 &lt;- B8  Freq: 0.986108
0f4   	movl    RCX, [RBX + #12 (8-bit)]	# range
0f7   	NullCheck RBX
0f7
0f7   B10: #	B39 B11 &lt;- B9  Freq: 0.986107
0f7   	movq    [rsp + #16], R9	# spill
0fc   	movl    RBP, RCX	# spill
0fe   	subl    RBP, R11	# int
101   	movl    RSI, #-155	# int
106   	movl    [rsp + #44], RCX	# spill
10a   	subl    RCX, R10	# int
10d   	decode_heap_oop_not_null R13,RBX
110   	cmpl    RCX, R11
113   	movl    R9, R11	# spill
116   	cmovll R9, RCX	# signed, int
11a   	movslq  RDX, R9	# i2l
11d   	movl    RCX, R10	# spill
120   	addl    RCX, R9	# int
123   	movl    [rsp + #64], RCX	# spill
127   	cmpl    R10, RBP
12a   	jg     B39  P=0.000000 C=9952.000000
12a
130   B11: #	B30 B12 &lt;- B10  Freq: 0.986106
130   	# TLS is in R15
130   	movq    RBP, [R15 + #112 (8-bit)]	# ptr
134   	movq    RCX, RBP	# spill
137   	addq    RCX, RDI	# ptr
13a   	cmpl    R11, #524288	# unsigned
141   	jnbe,u  B30  P=0.000001 C=-1.000000
141
147   B12: #	B30 B13 &lt;- B11  Freq: 0.986105
147   	# TLS is in R15
147   	cmpq    RCX, [R15 + #128 (32-bit)]	# raw ptr
14e   	jnb,u  B30  P=0.000100 C=-1.000000
14e
154   B13: #	B14 &lt;- B12  Freq: 0.986007
154   	# TLS is in R15
154   	movq    [R15 + #112 (8-bit)], RCX	# ptr
158   	PREFETCHNTA [RCX + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
15f   	PREFETCHNTA [RCX + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
166   	movq    [RBP], 0x0000000000000001	# ptr
16e   	PREFETCHNTA [RCX + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
175   	movl    [RBP + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f37682141b0:Constant:exact *	# compressed klass ptr
17c   	movl    [RBP + #12 (8-bit)], R11	# int
180   	PREFETCHNTA [RCX + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
180
187   B14: #	B32 B15 &lt;- B31 B13  Freq: 0.986106
187   	
187   	# checkcastPP of RBP
187   	movq    R14, RBP	# spill
18a   	addq    R14, #16	# ptr
18e   	movl    RSI, [rsp + #44]	# spill
192   	cmpl    RSI, [RSP + #64 (32-bit)]	# unsigned
196   	jb,u  B32  P=0.000001 C=-1.000000
196
19c   B15: #	B32 B16 &lt;- B14  Freq: 0.986105
19c   	cmpl    R11, R9	# unsigned
19f   	jb,u  B32  P=0.000001 C=-1.000000
19f
1a5   B16: #	B34 B17 &lt;- B15  Freq: 0.986104
1a5   	movq    RCX, RDX	# spill
1a8   	salq    RCX, #1
1ab   	addq    RCX, #16	# long
1af   	movq    RSI, RCX	# spill
1b2   	andq    RSI, #-7	# long
1b6   	shrq    RCX, #3
1ba   	movq    RDI, RBP	# spill
1bd   	addq    RDI, RSI	# ptr
1c0   	testl   R9, R9
1c3   	jle     B34  P=0.000001 C=-1.000000
1c3
1c9   B17: #	B27 B18 &lt;- B16  Freq: 0.986103
1c9   	subq    R8, RCX	# long
1cc   	cmpl    R9, R11
1cf   	jl     B27  P=0.001000 C=-1.000000
1cf
1d5   B18: #	B19 &lt;- B17 B27  Freq: 0.986103
1d5   	leaq    RDI, [RBX + #16 + R10 &lt;&lt; #1]	# ptr posidxscaleoffnarrow
1da   	movq    RSI, R14	# spill
1dd   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
1ea
1ea   B19: #	B20 &lt;- B18 B35 B33  Freq: 0.986106
1ea   	encode_heap_oop_not_null R10,RBP
2f5   	MEMBAR-storestore (empty encoding)
2f5   	movq    R9, [rsp + #16]	# spill
2fa   	movq    R11, R9	# ptr -&gt; long
2fd   	movl    [R9 + #12 (8-bit)], R10	# compressed ptr ! Field: java/lang/String.value
301   	shrq    R11, #9
305   	movq    R10, 0x00007f3757e0b000	# ptr
30f   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
30f
313   B20: #	B21 &lt;- B26 B19  Freq: 0.990763
313   	MEMBAR-release ! (empty encoding)
313
313   B21: #	N597 &lt;- B20 B23  Freq: 0.999996
313   	# checkcastPP of R9
313   	movq    RAX, R9	# spill
316   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

321   	ret
321
322   B22: #	B6 B23 &lt;- B5  Freq: 0.103343
322   	cmpl    R9, RBP
325   	jne     B6  P=0.910659 C=1623.000000
325
32b   B23: #	B21 &lt;- B22  Freq: 0.00923271
32b   	movq    R9, RBX	# spill
32e   	jmp,s   B21
32e
330   B24: #	B43 B25 &lt;- B8  Freq: 0.00465707
330   	movl    RSI, #-10	# int
335   	movl    RBP, [RBX + #12 (8-bit)]	# range
338   	NullCheck RBX
338
338   B25: #	B40 B26 &lt;- B24  Freq: 0.00465707
338   	cmpl    R10, RBP
33b   	jg     B40  P=0.000000 C=47.000000
33b
341   B26: #	B20 &lt;- B25  Freq: 0.00465707
341   	movl    [R9 + #12 (8-bit)], narrowoop: char[int:0]&lt;ciTypeArray length=0 type=&lt;ciTypeArrayKlass name=[C ident=807 address=0x00007f37682141b0&gt; ident=831 SCAVENGABLE address=0x00007f37201b65b0&gt; *	# compressed ptr ! Field: java/lang/String.value
349   	movq    R10, R9	# ptr -&gt; long
34c   	shrq    R10, #9
350   	movq    R11, 0x00007f3757e0b000	# ptr
35a   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
35e   	jmp,s   B20
35e
360   B27: #	B18 &lt;- B17  Freq: 0.000986103
360   	movq    RCX, R8	# spill
363   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
36d   	jmp     B18
36d
372   B28: #	B47 B29 &lt;- B6  Freq: 9.90929e-05
372   	movq    [rsp + #24], RAX	# spill
377   	movq    [rsp + #16], R8	# spill
37c   	movl    [rsp + #8], R11	# spill
381   	movq    [rsp + #0], RBX	# spill
385   	movl    RBP, R10	# spill
      	nop 	# 3 bytes pad for loops and calls
38b   	call,static  wrapper for: _new_instance_Java
        # java.lang.String::substring @ bci:65  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=rsp + #8
        # java.lang.String::subSequence @ bci:3  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=Oop off=912}
390
390   B29: #	B8 &lt;- B28  Freq: 9.90909e-05
        # Block is sole successor of call
390   	movq    R9, RAX	# spill
393   	movl    R10, RBP	# spill
396   	movq    RBX, [rsp + #0]	# spill
39a   	movl    R11, [rsp + #8]	# spill
39f   	movq    R8, [rsp + #16]	# spill
3a4   	movq    RAX, [rsp + #24]	# spill
3a9   	jmp     B8
3a9
3ae   B30: #	B45 B31 &lt;- B11 B12  Freq: 9.96261e-05
3ae   	movq    [rsp + #48], RDX	# spill
3b3   	movl    [rsp + #40], R9	# spill
3b8   	movq    [rsp + #32], R13	# spill
3bd   	movl    [rsp + #4], RBX	# spill
3c1   	movq    R9, [rsp + #16]	# spill
3c6   	movq    [rsp + #24], R9	# spill
3cb   	movq    [rsp + #16], RAX	# spill
3d0   	movq    [rsp + #8], R8	# spill
3d5   	movl    [rsp + #0], R11	# spill
3d9   	movl    RBP, R10	# spill
3dc   	movq    RSI, precise klass [C: 0x00007f37682141b0:Constant:exact *	# ptr
3e6   	movl    RDX, R11	# spill
      	nop 	# 2 bytes pad for loops and calls
3eb   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOfRange @ bci:40  L[0]=rsp + #32 L[1]=RBP L[2]=_ L[3]=rsp + #0 L[4]=_
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # java.lang.String::subSequence @ bci:3  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [24]=Oop [32]=Oop off=1008}
3f0
3f0   B31: #	B14 &lt;- B30  Freq: 9.96241e-05
        # Block is sole successor of call
3f0   	movq    RCX, RAX	# spill
3f3   	movl    R10, RBP	# spill
3f6   	movl    R11, [rsp + #0]	# spill
3fa   	movq    R8, [rsp + #8]	# spill
3ff   	movq    RAX, [rsp + #16]	# spill
404   	movq    R9, [rsp + #24]	# spill
409   	movq    [rsp + #16], R9	# spill
40e   	movl    RBX, [rsp + #4]	# spill
412   	movq    R13, [rsp + #32]	# spill
417   	movl    R9, [rsp + #40]	# spill
41c   	movq    RDX, [rsp + #48]	# spill
421   	movq    RBP, RCX	# spill
424   	jmp     B14
424
429   B32: #	B44 B33 &lt;- B34 B14 B15  Freq: 1.97221e-06
429   	movq    RCX, RAX	# spill
42c   	movq    RDI, R14	# spill
42f   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
439   	movq    RSI, R13	# spill
43c   	movl    RDX, R10	# spill
43f   	movq    RCX, RBP	# spill
442   	xorl    R8, R8	# int
      	nop 	# 2 bytes pad for loops and calls
447   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOfRange @ bci:57  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=RBP
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #16
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #16
        # java.lang.String::subSequence @ bci:3  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=Oop [16]=Oop off=1100}
44c
44c   B33: #	B19 &lt;- B32  Freq: 1.97217e-06
        # Block is sole successor of call
44c   	jmp     B19
44c
451   B34: #	B32 B35 &lt;- B16  Freq: 9.86104e-07
451   	testl   R9, R9
454   	jl,s   B32  P=0.000001 C=-1.000000
454
456   B35: #	B19 &lt;- B34  Freq: 9.86103e-07
456   	movq    RCX, RAX	# spill
459   	movq    RDI, R14	# spill
45c   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
466   	
466   	jmp     B19
466
46b   B36: #	N597 &lt;- B1  Freq: 4.76837e-07
46b   	movl    RSI, #-155	# int
470   	movq    RBP, RBX	# spill
473   	movl    [rsp + #4], RCX	# spill
477   	movl    [rsp + #8], RDX	# spill
47b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::substring @ bci:1  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # java.lang.String::subSequence @ bci:3  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=Oop off=1152}
480   	int3	# ShouldNotReachHere
480
485   B37: #	N597 &lt;- B3  Freq: 4.76836e-07
485   	movq    [rsp + #0], RBX	# spill
489   	movl    [rsp + #8], R10	# spill
48e   	movl    [rsp + #16], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
493   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::substring @ bci:19  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=_ STK[0]=rsp + #16 STK[1]=RBP
        # java.lang.String::subSequence @ bci:3  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=Oop off=1176}
498   	int3	# ShouldNotReachHere
498
49d   B38: #	N597 &lt;- B4  Freq: 4.76836e-07
49d   	movq    RBP, RBX	# spill
4a0   	movl    [rsp + #0], R10	# spill
4a4   	movl    [rsp + #4], R9	# spill
4a9   	movl    [rsp + #12], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
4af   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::substring @ bci:36  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #12 STK[0]=rsp + #12
        # java.lang.String::subSequence @ bci:3  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=Oop off=1204}
4b4   	int3	# ShouldNotReachHere
4b4
4b9   B39: #	N597 &lt;- B10  Freq: 4.70212e-07
4b9   	movl    [rsp + #4], R11	# spill
4be   	movl    [rsp + #8], R10	# spill
4c3   	movl    [rsp + #12], RBX	# spill
4c7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:55  L[0]=rsp + #16 L[1]=rsp + #12 L[2]=rsp + #8 L[3]=rsp + #4 STK[0]=rsp + #8 STK[1]=RBP
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #16
        # java.lang.String::subSequence @ bci:3  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[12]=NarrowOop [16]=Oop off=1228}
4cc   	int3	# ShouldNotReachHere
4cc
4d1   B40: #	N597 &lt;- B25  Freq: 2.22066e-09
4d1   	movl    [rsp + #4], R11	# spill
4d6   	movl    [rsp + #8], R10	# spill
4db   	movl    RSI, #-155	# int
4e0   	movq    [rsp + #24], R9	# spill
4e5   	movl    [rsp + #12], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
4eb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:37  L[0]=rsp + #24 L[1]=rsp + #12 L[2]=rsp + #8 L[3]=rsp + #4 STK[0]=rsp + #8 STK[1]=RBP
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # java.lang.String::subSequence @ bci:3  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[12]=NarrowOop [24]=Oop off=1264}
4f0   	int3	# ShouldNotReachHere
4f0
4f5   B41: #	N597 &lt;- B2  Freq: 1.01328e-06
4f5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
4fb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::substring @ bci:18  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.String::subSequence @ bci:3  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1280}
500   	int3	# ShouldNotReachHere
500
505   B42: #	N597 &lt;- B9  Freq: 9.99202e-07
505   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
50b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:52  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # java.lang.String::subSequence @ bci:3  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1296}
510   	int3	# ShouldNotReachHere
510
515   B43: #	N597 &lt;- B24  Freq: 4.71891e-09
      	nop 	# 2 bytes pad for loops and calls
517   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # java.lang.String::subSequence @ bci:3  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1308}
51c   	int3	# ShouldNotReachHere
51c
521   B44: #	B46 &lt;- B32  Freq: 1.97221e-11
521   	# exception oop is in rax; no code emitted
521   	jmp,s   B46
521
523   B45: #	B46 &lt;- B30  Freq: 9.96261e-10
523   	# exception oop is in rax; no code emitted
523
523   B46: #	B48 &lt;- B45 B44  Freq: 1.01598e-09
523   	movq    RSI, RAX	# spill
526   	jmp,s   B48
526
528   B47: #	B48 &lt;- B28  Freq: 9.90929e-10
528   	# exception oop is in rax; no code emitted
528   	movq    RSI, RAX	# spill
528
52b   B48: #	N597 &lt;- B47 B46  Freq: 2.00691e-09
52b   	addq    rsp, 96	# Destroy frame
	popq   rbp

530   	jmp     rethrow_stub
530

</opto_assembly>
<writer thread='139875534886656'/>
<opto_assembly compile_id='601'>
{method}
 - this oop:          0x00007f37557108d8
 - method holder:     &apos;java/lang/StringBuilder&apos;
 - constants:         0x00007f375570f640 constant pool [359] {0x00007f375570f640} for &apos;java/lang/StringBuilder&apos; cache=0x00007f37557cc4d0
 - access:            0x81000001  public 
 - name:              &apos;append&apos;
 - signature:         &apos;(Ljava/lang/String;)Ljava/lang/StringBuilder;&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - intrinsic id:      164 _StringBuilder_append_String
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef710: 0xbb000000 i2c: 0x00007f3758b11fa0 c2i: 0x00007f3758b120de c2iUV: 0x00007f3758b120b1
 - compiled entry     0x00007f3758c01ce0
 - code size:         8
 - code start:        0x00007f37557108b0
 - code end (excl):   0x00007f37557108b8
 - method data:       0x00007f375592b628
 - checked ex length: 0
 - linenumber start:  0x00007f37557108b8
 - localvar length:   2
 - localvar start:    0x00007f37557108be
 - compiled code: nmethod  10059   25       3       java.lang.StringBuilder::append (8 bytes)
#
#  java/lang/StringBuilder:exact * ( java/lang/StringBuilder:NotNull:exact *, java/lang/String:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/StringBuilder:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/lang/String:exact *
# -- Old rsp -- Framesize: 144 --
#r191 rsp+140: in_preserve
#r190 rsp+136: return address
#r189 rsp+132: in_preserve
#r188 rsp+128: saved fp register
#r187 rsp+124: pad2, stack alignment
#r186 rsp+120: pad2, stack alignment
#r185 rsp+116: Fixed slot 1
#r184 rsp+112: Fixed slot 0
#r219 rsp+108: spill
#r218 rsp+104: spill
#r217 rsp+100: spill
#r216 rsp+96: spill
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N631: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B40 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (568 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #128	# Create frame

02f   	movq    [rsp + #16], RDX	# spill
034   	movq    [rsp + #0], RSI	# spill
038   	movl    R10, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
03c   	movl    RSI, #-155	# int
041   	decode_heap_oop_not_null R14,R10
044   	movl    RDI, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
047   	NullCheck RDX
047
047   B2: #	B36 B3 &lt;- B1  Freq: 1
047   	movq    R11, [rsp + #0]	# spill
04b   	movl    R11, [R11 + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
04f   	movl    RSI, #-10	# int
054   	movl    RBP, [RDI + #12 (8-bit)]	# range
057   	NullCheck RDI
057
057   B3: #	B37 B4 &lt;- B2  Freq: 0.999999
057   	movl    RCX, [R10 + #12 (8-bit)]	# range
05b   	NullCheck R10
05b
05b   B4: #	B16 B5 &lt;- B3  Freq: 0.999997
05b   	movl    [rsp + #60], RCX	# spill
05f   	sall    RCX, #1
061   	movl    R9, RCX	# spill
064   	addl    R9, #2	# int
068   	leaq    R13, [R10 + #16 (8-bit)]	# ptr off8narrow
06c   	movl    [rsp + #88], RBP	# spill
070   	addl    RBP, R11	# int
073   	subl    RCX, RBP	# int
075   	movl    R8, RBP	# spill
078   	subl    R8, [RSP + #60 (32-bit)]	# int
07d   	testl   R8, R8
080   	jle     B16  P=0.745262 C=5751.000000
080
086   B5: #	B25 B6 &lt;- B4  Freq: 0.254738
086   	addl    RCX, #2	# int
089   	testl   RCX, RCX
08b   	jl     B25  P=0.192787 C=1525.000000
08b
091   B6: #	B35 B7 &lt;- B25 B5  Freq: 0.254738
091   	movslq  RAX, R9	# i2l
094   	movl    R11, [rsp + #60]	# spill
099   	cmpl    R11, R9
09c   	movl    RCX, R9	# spill
09f   	cmovll RCX, R11	# signed, int
0a3   	salq    RAX, #1
0a6   	addq    RAX, #23	# long
0aa   	movslq  R8, RCX	# i2l
0ad   	movq    R11, RAX	# spill
0b0   	shrq    R11, #3
0b4   	movq    RBX, R8	# spill
0b7   	salq    RBX, #1
0ba   	addq    RBX, #16	# long
0be   	movq    [rsp + #96], RBX	# spill
0c3   	shrq    RBX, #3
0c7   	movq    RDX, R11	# spill
0ca   	subq    RDX, RBX	# long
0cd   	testl   R9, R9
0d0   	jl     B35  P=0.000000 C=1525.000000
0d0
0d6   B7: #	B27 B8 &lt;- B6  Freq: 0.254738
0d6   	andq    RAX, #-8	# long
0da   	# TLS is in R15
0da   	movq    RBX, [R15 + #112 (8-bit)]	# ptr
0de   	movq    RDI, RBX	# spill
0e1   	addq    RDI, RAX	# ptr
0e4   	addq    R11, #-2	# long
0e8   	cmpl    R9, #524288	# unsigned
0ef   	jnbe,u  B27  P=0.000001 C=-1.000000
0ef
0f5   B8: #	B27 B9 &lt;- B7  Freq: 0.254737
0f5   	cmpq    RDI, [R15 + #128 (32-bit)]	# raw ptr
0fc   	jnb,u  B27  P=0.000100 C=-1.000000
0fc
102   B9: #	B10 &lt;- B8  Freq: 0.254712
102   	PREFETCHNTA [RDI + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
109   	PREFETCHNTA [RDI + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
110   	movq    [R15 + #112 (8-bit)], RDI	# ptr
114   	PREFETCHNTA [RDI + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
11b   	movq    [RBX], 0x0000000000000001	# ptr
122   	PREFETCHNTA [RDI + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
129   	movl    [RBX + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f37682141b0:Constant:exact *	# compressed klass ptr
130   	movl    [RBX + #12 (8-bit)], R9	# int
130
134   B10: #	B32 B11 &lt;- B28 B9  Freq: 0.254738
134   	movq    RBP, 0x00007f3757e0b000	# ptr
13e   	
13e   	# checkcastPP of RBX
13e   	movq    RSI, RBX	# spill
141   	addq    RSI, #16	# ptr
145   	movq    R10, [rsp + #96]	# spill
14a   	andq    R10, #-7	# long
14e   	movq    RDI, RBX	# spill
151   	addq    RDI, R10	# ptr
154   	movl    R10, [rsp + #60]	# spill
159   	cmpl    R10, RCX	# unsigned
15c   	jb,u  B32  P=0.000001 C=-1.000000
15c
162   B11: #	B32 B12 &lt;- B10  Freq: 0.254737
162   	cmpl    R9, RCX	# unsigned
165   	jb,u  B32  P=0.000001 C=-1.000000
165
16b   B12: #	B34 B13 &lt;- B11  Freq: 0.254737
16b   	testl   RCX, RCX
16d   	jle     B34  P=0.000001 C=-1.000000
16d
173   B13: #	B26 B14 &lt;- B12  Freq: 0.254737
173   	addq    RAX, #-16	# long
177   	cmpl    RCX, R9
17a   	jl     B26  P=0.001000 C=-1.000000
17a
180   B14: #	B15 &lt;- B13  Freq: 0.254482
180   	shrq    RAX, #3
184   	movq    RDI, R13	# spill
187   	movq    RDX, RAX	# spill
18a   	call_leaf_nofp,runtime  jlong_disjoint_arraycopy
        No JVM State Info
        # 
197
197   B15: #	B16 &lt;- B26 B14 B33 B34  Freq: 0.254738
197   	encode_heap_oop_not_null R10,RBX
2a2   	MEMBAR-storestore (empty encoding)
2a2   	movq    R11, [rsp + #0]	# spill
2a6   	movq    R8, R11	# ptr -&gt; long
2a9   	movl    R11, [R11 + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
2ad   	movq    R9, [rsp + #0]	# spill
2b1   	movl    [R9 + #16 (8-bit)], R10	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
2b5   	shrq    R8, #9
2b9   	movq    R9, [rsp + #16]	# spill
2be   	movl    RDI, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
2c2   	movb    [RBP + R8], R12	# short/char (R12_heapbase==0)
2c2
2c7   B16: #	B38 B17 &lt;- B15 B4  Freq: 0.999997
2c7   	movl    RSI, #-10	# int
2cc   	movl    RBP, [RDI + #12 (8-bit)]	# range
2cf   	NullCheck RDI
2cf
2cf   B17: #	B31 B18 &lt;- B16  Freq: 0.999996
2cf   	movl    RBX, [rsp + #88]	# spill
2d3   	cmpl    RBX, RBP
2d5   	jg     B31  P=0.000000 C=5550.000000
2d5
2db   B18: #	B39 B19 &lt;- B17  Freq: 0.999996
2db   	decode_heap_oop_not_null RDX,RDI
2de   	decode_heap_oop_not_null RCX,R10
2e1   	movl    R9, [R10 + #12 (8-bit)]	# range
2e5   	NullCheck R10
2e5
2e5   B19: #	B29 B20 &lt;- B18  Freq: 0.999995
2e5   	movl    R8, R11	# spill
2e8   	addl    R8, [RSP + #88 (32-bit)]	# int
2ed   	testl   R11, R11
2f0   	jl     B29  P=0.000001 C=-1.000000
2f0
2f6   B20: #	B29 B21 &lt;- B19  Freq: 0.999994
2f6   	cmpl    RBP, [RSP + #88 (32-bit)]	# unsigned
2fa   	jb,u  B29  P=0.000001 C=-1.000000
2fa
300   B21: #	B29 B22 &lt;- B20  Freq: 0.999993
300   	leaq    RSI, [R10 + #16 + R11 &lt;&lt; #1]	# ptr posidxscaleoffnarrow
305   	leaq    RDI, [RDI + #16 (8-bit)]	# ptr off8narrow
309   	cmpl    R9, R8	# unsigned
30c   	jb,u  B29  P=0.000001 C=-1.000000
30c
312   B22: #	B24 B23 &lt;- B21  Freq: 0.999992
312   	movslq  RDX, [RSP + #88 (32-bit)]	# int -&gt; long
317   	testl   RBX, RBX
319   	jle,s   B24  P=0.000001 C=-1.000000
319
31b   B23: #	B24 &lt;- B22  Freq: 0.999991
31b   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
328
328   B24: #	N631 &lt;- B23 B22 B30  Freq: 0.999995
328   	
328   	movq    R10, [rsp + #0]	# spill
32c   	movl    R10, [R10 + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
330   	addl    R10, RBX	# int
333   	movq    R11, [rsp + #0]	# spill
337   	movl    [R11 + #12 (8-bit)], R10	# int ! Field: java/lang/AbstractStringBuilder.count
33b   	movq    RAX, [rsp + #0]	# spill
33f   	addq    rsp, 128	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

34d   	ret
34d
34e   B25: #	B6 &lt;- B5  Freq: 0.0491101
34e   	movl    R9, RBP	# spill
351   	jmp     B6
351
356   B26: #	B15 &lt;- B13  Freq: 0.000254737
356   	movq    RCX, RDX	# spill
359   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
363   	movq    RDI, R13	# spill
366   	movq    RDX, R8	# spill
369   	call_leaf_nofp,runtime  arrayof_jshort_disjoint_arraycopy
        No JVM State Info
        # 
376   	jmp     B15
376
37b   B27: #	B43 B28 &lt;- B7 B8  Freq: 2.57361e-05
37b   	movq    [rsp + #80], RDX	# spill
380   	movq    [rsp + #72], R11	# spill
385   	movq    [rsp + #64], R8	# spill
38a   	movl    [rsp + #56], RCX	# spill
38e   	movq    [rsp + #48], RAX	# spill
393   	movq    [rsp + #40], R13	# spill
398   	movl    [rsp + #36], R9	# spill
39d   	movl    R11, [rsp + #88]	# spill
3a2   	movl    [rsp + #32], R11	# spill
3a7   	movq    [rsp + #24], R14	# spill
3ac   	movq    R11, [rsp + #0]	# spill
3b0   	movq    [rsp + #8], R11	# spill
3b5   	pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #0]
3be   	movq    RSI, precise klass [C: 0x00007f37682141b0:Constant:exact *	# ptr
3c8   	movl    RBP, R10	# spill
3cb   	movl    RDX, R9	# spill
      	nop 	# 1 bytes pad for loops and calls
3cf   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOf @ bci:1  L[0]=RBP L[1]=rsp + #36 L[2]=_
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #8
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # java.lang.AbstractStringBuilder::append @ bci:21  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #32
        # java.lang.StringBuilder::append @ bci:2  L[0]=rsp + #8 L[1]=_
        # OopMap{rbp=NarrowOop [0]=Oop [8]=Oop [24]=Oop [40]=Derived_oop_[24] off=980}
3d4
3d4   B28: #	B10 &lt;- B27  Freq: 2.57356e-05
        # Block is sole successor of call
3d4   	movq    RBX, RAX	# spill
3d7   	pushq   [rsp + #0]	# 64-bit mem-mem spill
	popq    [rsp + #16]
3e0   	movq    R10, [rsp + #8]	# spill
3e5   	movq    [rsp + #0], R10	# spill
3e9   	movq    R14, [rsp + #24]	# spill
3ee   	movl    R10, [rsp + #32]	# spill
3f3   	movl    [rsp + #88], R10	# spill
3f8   	movl    R9, [rsp + #36]	# spill
3fd   	movq    R13, [rsp + #40]	# spill
402   	movq    RAX, [rsp + #48]	# spill
407   	movl    RCX, [rsp + #56]	# spill
40b   	movq    R8, [rsp + #64]	# spill
410   	movq    R11, [rsp + #72]	# spill
415   	movq    RDX, [rsp + #80]	# spill
41a   	jmp     B10
41a
41f   B29: #	B42 B30 &lt;- B19 B20 B21  Freq: 2.99998e-06
41f   	movq    RSI, RDX	# spill
422   	xorl    RDX, RDX	# int
424   	movl    R8, R11	# spill
427   	movl    R9, [rsp + #88]	# spill
      	nop 	# 3 bytes pad for loops and calls
42f   	call,static  wrapper for: slow_arraycopy
        # java.lang.String::getChars @ bci:58  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.lang.AbstractStringBuilder::append @ bci:35  L[0]=rsp + #0 L[1]=_ L[2]=rsp + #88
        # java.lang.StringBuilder::append @ bci:2  L[0]=rsp + #0 L[1]=_
        # OopMap{[0]=Oop off=1076}
434
434   B30: #	B24 &lt;- B29  Freq: 2.99992e-06
        # Block is sole successor of call
434   	movl    RBX, [rsp + #88]	# spill
438   	jmp     B24
438
43d   B31: #	N631 &lt;- B17  Freq: 4.76835e-07
43d   	movl    [rsp + #24], R10	# spill
442   	movl    [rsp + #36], R11	# spill
447   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
44f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::getChars @ bci:19  L[0]=rsp + #16 L[1]=#0 L[2]=rsp + #88 L[3]=rsp + #24 L[4]=rsp + #36 STK[0]=rsp + #88 STK[1]=RBP
        # java.lang.AbstractStringBuilder::append @ bci:35  L[0]=rsp + #0 L[1]=_ L[2]=rsp + #88
        # java.lang.StringBuilder::append @ bci:2  L[0]=rsp + #0 L[1]=_
        # OopMap{[0]=Oop [16]=Oop [24]=NarrowOop off=1108}
454   	int3	# ShouldNotReachHere
454
459   B32: #	B41 B33 &lt;- B10 B11  Freq: 5.09475e-07
459   	movq    [rsp + #32], RBX	# spill
45e   	movl    RBX, RCX	# spill
460   	movq    R8, [rsp + #0]	# spill
464   	movq    [rsp + #8], R8	# spill
469   	pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #0]
472   	movq    RCX, R11	# spill
475   	movq    RDI, RSI	# spill
478   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
482   	movq    RSI, R14	# spill
485   	xorl    RDX, RDX	# int
487   	movq    RCX, [rsp + #32]	# spill
48c   	xorl    R8, R8	# int
48f   	movl    R9, RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
493   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOf @ bci:14  L[0]=_ L[1]=_ L[2]=rsp + #32
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #8
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # java.lang.AbstractStringBuilder::append @ bci:21  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #88
        # java.lang.StringBuilder::append @ bci:2  L[0]=rsp + #8 L[1]=_
        # OopMap{[0]=Oop [8]=Oop [32]=Oop off=1176}
498
498   B33: #	B15 &lt;- B32  Freq: 5.09465e-07
        # Block is sole successor of call
498   	pushq   [rsp + #0]	# 64-bit mem-mem spill
	popq    [rsp + #16]
4a1   	movq    R10, [rsp + #8]	# spill
4a6   	movq    [rsp + #0], R10	# spill
4aa   	movq    RBX, [rsp + #32]	# spill
4af   	jmp     B15
4af
4b4   B34: #	B15 &lt;- B12  Freq: 2.54737e-07
4b4   	movq    RCX, R11	# spill
4b7   	movq    RDI, RSI	# spill
4ba   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
4c4   	
4c4   	jmp     B15
4c4
4c9   B35: #	N631 &lt;- B6  Freq: 1.21468e-07
4c9   	movl    [rsp + #40], R9	# spill
4ce   	movl    RSI, #-155	# int
4d3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:19  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #40 STK[0]=rsp + #40
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # java.lang.AbstractStringBuilder::append @ bci:21  L[0]=rsp + #0 L[1]=rsp + #16 L[2]=rsp + #88
        # java.lang.StringBuilder::append @ bci:2  L[0]=rsp + #0 L[1]=_
        # OopMap{[0]=Oop [16]=Oop off=1240}
4d8   	int3	# ShouldNotReachHere
4d8
4dd   B36: #	N631 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
4df   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # java.lang.AbstractStringBuilder::append @ bci:10  L[0]=_ L[1]=_ L[2]=_
        # java.lang.StringBuilder::append @ bci:2  L[0]=_ L[1]=_
        # OopMap{off=1252}
4e4   	int3	# ShouldNotReachHere
4e4
4e9   B37: #	N631 &lt;- B3  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
4eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:5  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.AbstractStringBuilder::append @ bci:21  L[0]=_ L[1]=_ L[2]=_
        # java.lang.StringBuilder::append @ bci:2  L[0]=_ L[1]=_
        # OopMap{off=1264}
4f0   	int3	# ShouldNotReachHere
4f0
4f5   B38: #	N631 &lt;- B16  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
4f7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::getChars @ bci:18  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.AbstractStringBuilder::append @ bci:35  L[0]=_ L[1]=_ L[2]=_
        # java.lang.StringBuilder::append @ bci:2  L[0]=_ L[1]=_
        # OopMap{off=1276}
4fc   	int3	# ShouldNotReachHere
4fc
501   B39: #	N631 &lt;- B18  Freq: 1.01327e-06
501   	movl    RBP, RDI	# spill
503   	movl    [rsp + #0], R11	# spill
507   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::getChars @ bci:58  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP STK[1]=#0 STK[2]=#NULL STK[3]=rsp + #0 STK[4]=rsp + #88
        # java.lang.AbstractStringBuilder::append @ bci:35  L[0]=_ L[1]=_ L[2]=_
        # java.lang.StringBuilder::append @ bci:2  L[0]=_ L[1]=_
        # OopMap{rbp=NarrowOop off=1292}
50c   	int3	# ShouldNotReachHere
50c
511   B40: #	N631 &lt;- B1  Freq: 4.76837e-07
511   	movq    RBP, [rsp + #0]	# spill
      	nop 	# 2 bytes pad for loops and calls
517   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.AbstractStringBuilder::append @ bci:1  L[0]=RBP L[1]=rsp + #16 L[2]=_ STK[0]=rsp + #16
        # java.lang.StringBuilder::append @ bci:2  L[0]=RBP L[1]=_
        # OopMap{rbp=Oop [16]=Oop off=1308}
51c   	int3	# ShouldNotReachHere
51c
521   B41: #	B44 &lt;- B32  Freq: 5.09475e-12
521   	# exception oop is in rax; no code emitted
521   	jmp,s   B44
521
523   B42: #	B45 &lt;- B29  Freq: 2.99998e-11
523   	# exception oop is in rax; no code emitted
523   	movq    RSI, RAX	# spill
526   	jmp,s   B45
526
528   B43: #	B44 &lt;- B27  Freq: 2.57361e-10
528   	# exception oop is in rax; no code emitted
528
528   B44: #	B45 &lt;- B43 B41  Freq: 2.62456e-10
528   	movq    RSI, RAX	# spill
528
52b   B45: #	N631 &lt;- B44 B42  Freq: 2.92455e-10
52b   	addq    rsp, 128	# Destroy frame
	popq   rbp

533   	jmp     rethrow_stub
533

</opto_assembly>
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='610'>
{method}
 - this oop:          0x00007f3755736158
 - method holder:     &apos;java/lang/Character&apos;
 - constants:         0x00007f3755733b58 constant pool [502] {0x00007f3755733b58} for &apos;java/lang/Character&apos; cache=0x00007f375583cce8
 - access:            0x81000008  static 
 - name:              &apos;codePointAtImpl&apos;
 - signature:         &apos;([CII)I&apos;
 - max stack:         3
 - max locals:        5
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef6c8: 0xbaa00000 i2c: 0x00007f3758b11ca0 c2i: 0x00007f3758b11de0 c2iUV: 0x00007f3758b11db3
 - compiled entry     0x00007f3758c804e0
 - code size:         41
 - code start:        0x00007f37557360e0
 - code end (excl):   0x00007f3755736109
 - method data:       0x00007f3755b230f0
 - checked ex length: 0
 - linenumber start:  0x00007f3755736109
 - localvar length:   5
 - localvar start:    0x00007f375573611a
 - compiled code: nmethod  10319  275       3       java.lang.Character::codePointAtImpl (41 bytes)
#
#  int ( char[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: char[int:&gt;=0]:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B7 B5 B6 B4  Freq: 1
abababab
000   B1: #	B7 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (232 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c   	movl    R11, [RSI + #12 (8-bit)]	# range
010   	NullCheck RSI
010
010   B2: #	B5 B3 &lt;- B1  Freq: 0.999999
010   	cmpl    RDX, R11	# unsigned
013   	jnb,us  B5  P=0.000001 C=-1.000000
013
015   B3: #	B6 B4 &lt;- B2  Freq: 0.999998
015   	movzwl  RAX, [RSI + #16 + RDX &lt;&lt; #1]	# ushort/char
01a   	cmpl    RAX, #55296
020   	jge,s   B6  P=0.000000 C=613346.000000
020
022   B4: #	N1 &lt;- B3  Freq: 0.999997
022   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

02d   	ret
02d
02e   B5: #	N1 &lt;- B2  Freq: 1.01328e-06
02e   	movl    [rsp + #4], RCX	# spill
032   	movq    [rsp + #8], RSI	# spill
037   	movl    [rsp + #16], RDX	# spill
03b   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
043   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.Character::codePointAtImpl @ bci:2  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #4 L[3]=_ L[4]=_ STK[0]=rsp + #8 STK[1]=rsp + #16
        # OopMap{[8]=Oop off=72}
048   	int3	# ShouldNotReachHere
048
04d   B6: #	N1 &lt;- B3  Freq: 4.76836e-07
04d   	movq    RBP, RSI	# spill
050   	movl    [rsp + #0], RDX	# spill
053   	movl    [rsp + #4], RCX	# spill
057   	movl    RSI, #-155	# int
05c   	movl    [rsp + #12], RAX	# spill
060   	movl    [rsp + #16], RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
067   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #16 STK[0]=rsp + #12 STK[1]=#55296
        # java.lang.Character::codePointAtImpl @ bci:5  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #12 L[4]=_
        # OopMap{rbp=Oop off=108}
06c   	int3	# ShouldNotReachHere
06c
071   B7: #	N1 &lt;- B1  Freq: 1.01328e-06
071   	movl    RSI, #-10	# int
076   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
07b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAtImpl @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=128}
080   	int3	# ShouldNotReachHere
080

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139875533833984'/>
<opto_assembly compile_id='609'>
{method}
 - this oop:          0x00007f3755688908
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f37556850e8 constant pool [680] {0x00007f37556850e8} for &apos;java/lang/String&apos; cache=0x00007f375574e5e0
 - access:            0x81000001  public 
 - name:              &apos;codePointAt&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758c7cda0
 - code size:         36
 - code start:        0x00007f37556888c0
 - code end (excl):   0x00007f37556888e4
 - method data:       0x00007f3755b22f18
 - checked ex length: 0
 - linenumber start:  0x00007f37556888e4
 - localvar length:   2
 - localvar start:    0x00007f37556888ee
 - compiled code: nmethod  10338  274       3       java.lang.String::codePointAt (36 bytes)
#
#  int ( java/lang/String:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N102: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B8 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (328 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	testl   RDX, RDX
02e   	jl,s   B8  P=0.000000 C=6669.000000
02e
030   B2: #	B11 B3 &lt;- B1  Freq: 1
030   	movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
034   	movl    RBP, [R10 + #12 (8-bit)]	# range
038   	NullCheck R10
038
038   B3: #	B9 B4 &lt;- B2  Freq: 0.999999
038   	cmpl    RDX, RBP
03a   	jge,s   B9  P=0.000000 C=6669.000000
03a
03c   B4: #	B7 B5 &lt;- B3  Freq: 0.999998
03c   	movl    RSI, #-155	# int
041   	cmpl    RDX, RBP	# unsigned
043   	jnb,us  B7  P=0.000001 C=-1.000000
043
045   B5: #	B10 B6 &lt;- B4  Freq: 0.999997
045   	movzwl  RAX, [R10 + #16 + RDX &lt;&lt; #1]	# ushort/char
04b   	cmpl    RAX, #55296
051   	jge,s   B10  P=0.000000 C=613346.000000
051
053   B6: #	N102 &lt;- B5  Freq: 0.999997
053   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

05e   	ret
05e
05f   B7: #	N102 &lt;- B4  Freq: 1.01328e-06
05f   	movl    [rsp + #4], RDX	# spill
063   	movl    [rsp + #12], R10	# spill
068   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
06f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.Character::codePointAtImpl @ bci:2  L[0]=rsp + #12 L[1]=rsp + #4 L[2]=RBP L[3]=_ L[4]=_ STK[0]=rsp + #12 STK[1]=rsp + #4
        # java.lang.String::codePointAt @ bci:32  L[0]=_ L[1]=_
        # OopMap{[12]=NarrowOop off=116}
074   	int3	# ShouldNotReachHere
074
079   B8: #	N102 &lt;- B1  Freq: 5e-07
079   	movq    RBP, RSI	# spill
07c   	movl    [rsp + #4], RDX	# spill
080   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
087   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::codePointAt @ bci:1  L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # OopMap{rbp=Oop off=140}
08c   	int3	# ShouldNotReachHere
08c
091   B9: #	N102 &lt;- B3  Freq: 4.76836e-07
091   	movq    [rsp + #0], RSI	# spill
095   	movl    [rsp + #12], RDX	# spill
099   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
09f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::codePointAt @ bci:10  L[0]=rsp + #0 L[1]=rsp + #12 STK[0]=rsp + #12 STK[1]=RBP
        # OopMap{[0]=Oop off=164}
0a4   	int3	# ShouldNotReachHere
0a4
0a9   B10: #	N102 &lt;- B5  Freq: 4.76836e-07
0a9   	movl    [rsp + #0], RDX	# spill
0ac   	movl    [rsp + #4], R10	# spill
0b1   	movl    [rsp + #12], RAX	# spill
0b5   	movl    [rsp + #16], RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
0bb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #16 STK[0]=rsp + #12 STK[1]=#55296
        # java.lang.Character::codePointAtImpl @ bci:5  L[0]=rsp + #4 L[1]=rsp + #0 L[2]=RBP L[3]=rsp + #12 L[4]=_
        # java.lang.String::codePointAt @ bci:32  L[0]=_ L[1]=_
        # OopMap{[4]=NarrowOop off=192}
0c0   	int3	# ShouldNotReachHere
0c0
0c5   B11: #	N102 &lt;- B2  Freq: 1.01328e-06
0c5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
0cb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::codePointAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=208}
0d0   	int3	# ShouldNotReachHere
0d0

</opto_assembly>
<writer thread='139875534886656'/>
<opto_assembly compile_id='616'>
{method}
 - this oop:          0x00007f37559ab3a0
 - method holder:     &apos;java/util/regex/Matcher&apos;
 - constants:         0x00007f37559a98c8 constant pool [380] {0x00007f37559a98c8} for &apos;java/util/regex/Matcher&apos; cache=0x00007f37559ad488
 - access:            0x81000001  public 
 - name:              &apos;start&apos;
 - signature:         &apos;()I&apos;
 - max stack:         4
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef680: 0xb0000000 i2c: 0x00007f3758b11620 c2i: 0x00007f3758b1175a c2iUV: 0x00007f3758b1172d
 - compiled entry     0x00007f3758c79c40
 - code size:         22
 - code start:        0x00007f37559ab370
 - code end (excl):   0x00007f37559ab386
 - method data:       0x00007f3755b21eb0
 - checked ex length: 0
 - linenumber start:  0x00007f37559ab386
 - localvar length:   1
 - localvar start:    0x00007f37559ab392
 - compiled code: nmethod  10367  256       3       java.util.regex.Matcher::start (22 bytes)
#
#  int ( java/util/regex/Matcher:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Matcher:NotNull:exact *
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N31: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    RAX, [RSI + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
02f   	testl   RAX, RAX
031   	jl,s   B3  P=0.000000 C=13889.000000
031
033   B2: #	N31 &lt;- B1  Freq: 1
033   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

03e   	ret
03e
03f   B3: #	N31 &lt;- B1  Freq: 4.76837e-07
03f   	movq    RBP, RSI	# spill
042   	movl    [rsp + #0], RAX	# spill
045   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
04b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::start @ bci:4  L[0]=RBP STK[0]=rsp + #0
        # OopMap{rbp=Oop off=80}
050   	int3	# ShouldNotReachHere
050

</opto_assembly>
<writer thread='139875533833984'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='628'>
{method}
 - this oop:          0x00007f3755710e20
 - method holder:     &apos;java/lang/StringBuilder&apos;
 - constants:         0x00007f375570f640 constant pool [359] {0x00007f375570f640} for &apos;java/lang/StringBuilder&apos; cache=0x00007f37557cc4d0
 - access:            0x81000001  public 
 - name:              &apos;append&apos;
 - signature:         &apos;(C)Ljava/lang/StringBuilder;&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - intrinsic id:      162 _StringBuilder_append_char
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef7e8: 0xba000000 i2c: 0x00007f3758b128a0 c2i: 0x00007f3758b129dd c2iUV: 0x00007f3758b129b0
 - compiled entry     0x00007f3758c40ae0
 - code size:         8
 - code start:        0x00007f3755710df8
 - code end (excl):   0x00007f3755710e00
 - method data:       0x00007f3755ab8898
 - checked ex length: 0
 - linenumber start:  0x00007f3755710e00
 - localvar length:   2
 - localvar start:    0x00007f3755710e06
 - compiled code: nmethod  10978  134       3       java.lang.StringBuilder::append (8 bytes)
#
#  java/lang/StringBuilder:exact * ( java/lang/StringBuilder:NotNull:exact *, char )
#
#r018 rsi:rsi   : parm 0: java/lang/StringBuilder:NotNull:exact *
#r016 rdx   : parm 1: char
# -- Old rsp -- Framesize: 128 --
#r191 rsp+124: in_preserve
#r190 rsp+120: return address
#r189 rsp+116: in_preserve
#r188 rsp+112: saved fp register
#r187 rsp+108: pad2, stack alignment
#r186 rsp+104: pad2, stack alignment
#r185 rsp+100: Fixed slot 1
#r184 rsp+96: Fixed slot 0
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N439: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B28 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (560 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

02c   	movl    [rsp + #12], RDX	# spill
030   	movq    RDI, RSI	# spill
033   	movl    R8, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
037   	movl    R10, [RSI + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
03b   	movl    RSI, #-10	# int
040   	movl    R9, [R8 + #12 (8-bit)]	# range
044   	NullCheck R8
044
044   B2: #	B15 B3 &lt;- B1  Freq: 0.999999
044   	decode_heap_oop RBX,R8
0cf   	movl    RSI, R10	# spill
0d2   	subl    RSI, R9	# int
0d5   	movl    RCX, R9	# spill
0d8   	sall    RCX, #1
0da   	movl    R11, R10	# spill
0dd   	incl    R11	# int
0e0   	incl    RSI	# int
0e2   	movl    RDX, RCX	# spill
0e4   	subl    RDX, R10	# int
0e7   	testl   RSI, RSI
0e9   	jle     B15  P=0.745262 C=5751.000000
0e9
0ef   B3: #	B18 B4 &lt;- B2  Freq: 0.254738
0ef   	incl    RDX	# int
0f1   	testl   RDX, RDX
0f3   	jl     B18  P=0.192787 C=1525.000000
0f3
0f9   B4: #	B5 &lt;- B3  Freq: 0.205628
0f9   	addl    RCX, #2	# int
0fc
0fc   B5: #	B27 B6 &lt;- B18 B4  Freq: 0.254738
0fc   	movslq  RDX, RCX	# i2l
0ff   	salq    RDX, #1
102   	decode_heap_oop_not_null RAX,R8
105   	addq    RDX, #23	# long
109   	movq    RSI, RDX	# spill
10c   	shrq    RSI, #3
110   	cmpl    R9, RCX
113   	movl    R10, RCX	# spill
116   	cmovll R10, R9	# signed, int
11a   	movslq  R13, R10	# i2l
11d   	movq    RBP, R13	# spill
120   	salq    RBP, #1
123   	addq    RBP, #16	# long
127   	testl   RCX, RCX
129   	jl     B27  P=0.000000 C=1525.000000
129
12f   B6: #	B20 B7 &lt;- B5  Freq: 0.254738
12f   	movq    [rsp + #40], R13	# spill
134   	movl    [rsp + #32], R10	# spill
139   	movq    [rsp + #16], RAX	# spill
13e   	movl    [rsp + #8], RCX	# spill
142   	movq    [rsp + #0], RDI	# spill
146   	# TLS is in R15
146   	movq    [rsp + #24], RSI	# spill
14b   	addq    RSI, #-2	# long
14f   	movq    [rsp + #48], RSI	# spill
154   	andq    RDX, #-8	# long
158   	movq    R10, RDX	# spill
15b   	addq    R10, #-16	# long
15f   	movq    [rsp + #56], R10	# spill
164   	movq    RSI, precise klass [C: 0x00007f37682141b0:Constant:exact *	# ptr
16e   	cmpl    RCX, #524288	# unsigned
174   	jnbe,u  B20  P=0.000001 C=-1.000000
174
17a   B7: #	B20 B8 &lt;- B6  Freq: 0.254738
17a   	movq    R11, [R15 + #112 (8-bit)]	# ptr
17e   	movq    R10, R11	# spill
181   	addq    R10, RDX	# ptr
184   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
18b   	jnb,u  B20  P=0.000100 C=-1.000000
18b
191   B8: #	B9 &lt;- B7  Freq: 0.254712
191   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
199   	movq    [R15 + #112 (8-bit)], R10	# ptr
19d   	PREFETCHNTA [R10 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1a5   	PREFETCHNTA [R10 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1ad   	movq    RBX, R11	# spill
1b0   	movq    [RBX], 0x0000000000000001	# ptr
1b7   	PREFETCHNTA [R10 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1bf   	movl    [RBX + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f37682141b0:Constant:exact *	# compressed klass ptr
1c6   	movl    R10, RCX	# spill
1c9   	movl    [RBX + #12 (8-bit)], RCX	# int
1c9
1cc   B9: #	B24 B10 &lt;- B21 B8  Freq: 0.254738
1cc   	
1cc   	# checkcastPP of RBX
1cc   	movq    RDI, RBP	# spill
1cf   	shrq    RDI, #3
1d3   	encode_heap_oop_not_null R11,RBX
2de   	movl    [rsp + #36], R11	# spill
2e3   	movq    R11, RBX	# spill
2e6   	addq    R11, #16	# ptr
2ea   	cmpl    R9, [RSP + #32 (32-bit)]	# unsigned
2ef   	jb,u  B24  P=0.000001 C=-1.000000
2ef
2f5   B10: #	B24 B11 &lt;- B9  Freq: 0.254738
2f5   	movq    RCX, [rsp + #56]	# spill
2fa   	shrq    RCX, #3
2fe   	andq    RBP, #-7	# long
302   	cmpl    R10, [RSP + #32 (32-bit)]	# unsigned
307   	jb,u  B24  P=0.000001 C=-1.000000
307
30d   B11: #	B26 B12 &lt;- B10  Freq: 0.254737
30d   	movq    RDX, [rsp + #24]	# spill
312   	subq    RDX, RDI	# long
315   	movl    R9, [rsp + #32]	# spill
31a   	testl   R9, R9
31d   	jle     B26  P=0.000001 C=-1.000000
31d
323   B12: #	B19 B13 &lt;- B11  Freq: 0.254737
323   	leaq    R8, [R8 + #16 (8-bit)]	# ptr off8narrow
327   	movq    RDI, RBX	# spill
32a   	addq    RDI, RBP	# ptr
32d   	cmpl    R9, R10
330   	jl,s   B19  P=0.001000 C=-1.000000
330
332   B13: #	B14 &lt;- B12  Freq: 0.254482
332   	movq    RDI, R8	# spill
335   	movq    RSI, R11	# spill
338   	movq    RDX, RCX	# spill
33b   	call_leaf_nofp,runtime  jlong_disjoint_arraycopy
        No JVM State Info
        # 
348
348   B14: #	B15 &lt;- B19 B13 B25 B26  Freq: 0.254738
348   	MEMBAR-storestore (empty encoding)
348   	movq    R11, 0x00007f3757e0b000	# ptr
352   	movq    RDI, [rsp + #0]	# spill
356   	movl    R8, [rsp + #36]	# spill
35b   	movl    [RDI + #16 (8-bit)], R8	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
35f   	movq    R8, RDI	# ptr -&gt; long
362   	shrq    R8, #9
366   	movl    R10, [RDI + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
36a   	movb    [R11 + R8], R12	# short/char (R12_heapbase==0)
36e   	movl    R11, R10	# spill
371   	incl    R11	# int
374
374   B15: #	B22 B16 &lt;- B14 B2  Freq: 0.999999
374   	movl    [RDI + #12 (8-bit)], R11	# int ! Field: java/lang/AbstractStringBuilder.count
378   	testq   RBX, RBX	# ptr
37b   	je     B22  P=0.000001 C=-1.000000
37b
381   B16: #	B23 B17 &lt;- B15  Freq: 0.999998
381   	# castPP of RBX
381   	movl    R11, [RBX + #12 (8-bit)]	# range
385   	cmpl    R10, R11	# unsigned
388   	jnb,u  B23  P=0.000001 C=-1.000000
388
38e   B17: #	N439 &lt;- B16  Freq: 0.999997
38e   	movl    R11, [rsp + #12]	# spill
393   	movw    [RBX + #16 + R10 &lt;&lt; #1], R11	# char/short
399   	movq    RAX, RDI	# spill
39c   	addq    rsp, 112	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

3a7   	ret
3a7
3a8   B18: #	B5 &lt;- B3  Freq: 0.0491102
3a8   	movl    RCX, R11	# spill
3ab   	jmp     B5
3ab
3b0   B19: #	B14 &lt;- B12  Freq: 0.000254737
3b0   	movq    RCX, RDX	# spill
3b3   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
3bd   	movq    RDI, R8	# spill
3c0   	movq    RSI, R11	# spill
3c3   	movq    RDX, [rsp + #40]	# spill
3c8   	call_leaf_nofp,runtime  arrayof_jshort_disjoint_arraycopy
        No JVM State Info
        # 
3d5   	jmp     B14
3d5
3da   B20: #	B30 B21 &lt;- B6 B7  Freq: 2.57361e-05
3da   	movl    [rsp + #88], R9	# spill
3df   	movl    [rsp + #36], R8	# spill
3e4   	movl    RDX, RCX	# spill
3e6   	movq    [rsp + #80], RBX	# spill
3eb   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOf @ bci:1  L[0]=rsp + #80 L[1]=rsp + #8 L[2]=_
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #0
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=rsp + #0 L[1]=rsp + #12
        # java.lang.StringBuilder::append @ bci:2  L[0]=rsp + #0 L[1]=_
        # OopMap{[0]=Oop [16]=Oop [36]=NarrowOop [80]=Oop off=1008}
3f0
3f0   B21: #	B9 &lt;- B20  Freq: 2.57356e-05
        # Block is sole successor of call
3f0   	movl    R10, [rsp + #8]	# spill
3f5   	movq    RBX, RAX	# spill
3f8   	movl    R8, [rsp + #36]	# spill
3fd   	movl    R9, [rsp + #88]	# spill
402   	jmp     B9
402
407   B22: #	N439 &lt;- B15  Freq: 1.01328e-06
407   	movl    RBP, R10	# spill
40a   	movl    RSI, #-10	# int
40f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.AbstractStringBuilder::append @ bci:26  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #12
        # java.lang.StringBuilder::append @ bci:2  L[0]=_ L[1]=_
        # OopMap{off=1044}
414   	int3	# ShouldNotReachHere
414
419   B23: #	N439 &lt;- B16  Freq: 1.01328e-06
419   	movq    [rsp + #0], RDI	# spill
41d   	movl    [rsp + #8], R10	# spill
422   	movl    RSI, #-28	# int
427   	movq    [rsp + #16], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
42f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.AbstractStringBuilder::append @ bci:26  L[0]=rsp + #0 L[1]=_ STK[0]=rsp + #16 STK[1]=rsp + #8 STK[2]=rsp + #12
        # java.lang.StringBuilder::append @ bci:2  L[0]=rsp + #0 L[1]=_
        # OopMap{[0]=Oop [16]=Oop off=1076}
434   	int3	# ShouldNotReachHere
434
439   B24: #	B29 B25 &lt;- B9 B10  Freq: 5.09476e-07
439   	movq    RBP, RBX	# spill
43c   	movq    RCX, [rsp + #48]	# spill
441   	movq    RDI, R11	# spill
444   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
44e   	movq    RSI, [rsp + #16]	# spill
453   	xorl    RDX, RDX	# int
455   	movq    RCX, RBX	# spill
458   	xorl    R8, R8	# int
45b   	movl    R9, [rsp + #32]	# spill
      	nop 	# 3 bytes pad for loops and calls
463   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOf @ bci:14  L[0]=_ L[1]=_ L[2]=RBP
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #0
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=rsp + #0 L[1]=rsp + #12
        # java.lang.StringBuilder::append @ bci:2  L[0]=rsp + #0 L[1]=_
        # OopMap{rbp=Oop [0]=Oop [36]=NarrowOop off=1128}
468
468   B25: #	B14 &lt;- B24  Freq: 5.09465e-07
        # Block is sole successor of call
468   	movq    RBX, RBP	# spill
46b   	jmp     B14
46b
470   B26: #	B14 &lt;- B11  Freq: 2.54737e-07
470   	movq    RCX, [rsp + #48]	# spill
475   	movq    RDI, R11	# spill
478   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
482   	
482   	jmp     B14
482
487   B27: #	N439 &lt;- B5  Freq: 1.21469e-07
487   	movq    [rsp + #0], RDI	# spill
48b   	movl    R10, [rsp + #12]	# spill
490   	movl    [rsp + #8], R10	# spill
495   	movq    [rsp + #16], RDI	# spill
49a   	movl    RSI, #-155	# int
49f   	movl    [rsp + #12], R11	# spill
4a4   	movl    [rsp + #28], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
4ab   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:19  L[0]=rsp + #0 L[1]=rsp + #12 L[2]=rsp + #28 STK[0]=rsp + #28
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=rsp + #16 L[1]=rsp + #8
        # java.lang.StringBuilder::append @ bci:2  L[0]=rsp + #0 L[1]=_
        # OopMap{[0]=Oop [16]=Oop off=1200}
4b0   	int3	# ShouldNotReachHere
4b0
4b5   B28: #	N439 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
4b7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:5  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=_ L[1]=_
        # java.lang.StringBuilder::append @ bci:2  L[0]=_ L[1]=_
        # OopMap{off=1212}
4bc   	int3	# ShouldNotReachHere
4bc
4c1   B29: #	B31 &lt;- B24  Freq: 5.09476e-12
4c1   	# exception oop is in rax; no code emitted
4c1   	movq    RSI, RAX	# spill
4c4   	jmp,s   B31
4c4
4c6   B30: #	B31 &lt;- B20  Freq: 2.57361e-10
4c6   	# exception oop is in rax; no code emitted
4c6   	movq    RSI, RAX	# spill
4c6
4c9   B31: #	N439 &lt;- B30 B29  Freq: 2.62456e-10
4c9   	addq    rsp, 112	# Destroy frame
	popq   rbp

4ce   	jmp     rethrow_stub
4ce

</opto_assembly>
<writer thread='139875534886656'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='649'>
{method}
 - this oop:          0x00007f37559bb3c8
 - method holder:     &apos;java/util/Formatter$Flags&apos;
 - constants:         0x00007f37559bacb0 constant pool [127] {0x00007f37559bacb0} for &apos;java/util/Formatter$Flags&apos; cache=0x00007f37559bbcd0
 - access:            0x81000001  public 
 - name:              &apos;contains&apos;
 - signature:         &apos;(Ljava/util/Formatter$Flags;)Z&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      9
 - i2i entry:         0x00007f37589eab00
 - adapters:          AHE@0x00007f37680ef710: 0xbb000000 i2c: 0x00007f3758b11fa0 c2i: 0x00007f3758b120de c2iUV: 0x00007f3758b120b1
 - compiled entry     0x00007f3758d0bac0
 - code size:         22
 - code start:        0x00007f37559bb390
 - code end (excl):   0x00007f37559bb3a6
 - method data:       0x00007f3755ca6910
 - checked ex length: 0
 - linenumber start:  0x00007f37559bb3a6
 - localvar length:   2
 - localvar start:    0x00007f37559bb3ae
 - compiled code: nmethod  11301  480       3       java.util.Formatter$Flags::contains (22 bytes)
#
#  bool ( java/util/Formatter$Flags:NotNull *, java/util/Formatter$Flags * )
#
#r018 rsi:rsi   : parm 0: java/util/Formatter$Flags:NotNull *
#r016 rdx:rdx   : parm 1: java/util/Formatter$Flags *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N48: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B5 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	xorl    RAX, RAX	# int
02e   	movl    R11, [RDX + #12 (8-bit)]	# int ! Field: java/util/Formatter$Flags.flags
032   	NullCheck RDX
032
032   B2: #	B4 B3 &lt;- B1  Freq: 0.999999
032   	movl    R10, R11	# spill
035   	andl    R10, [RSI + #12 (8-bit)]	# int
039   	cmpl    R10, R11
03c   	je,s   B4  P=0.049491 C=5496.000000
03c
03e   B3: #	N48 &lt;- B2 B4  Freq: 0.999999
03e   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

049   	ret
049
04a   B4: #	B3 &lt;- B2  Freq: 0.0494905
04a   	movl    RAX, #1	# int
04f   	jmp,s   B3
04f
051   B5: #	N48 &lt;- B1  Freq: 1.01328e-06
051   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
057   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.Formatter$Flags::contains @ bci:5  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=92}
05c   	int3	# ShouldNotReachHere
05c

</opto_assembly>
<writer thread='139875514681088'/>
C1 Runtime statistics:
 _resolve_invoke_virtual_cnt:     107
 _resolve_invoke_opt_virtual_cnt: 364
 _resolve_invoke_static_cnt:      97
 _handle_wrong_method_cnt:        73
 _ic_miss_cnt:                    51
 _generic_arraycopy_cnt:          0
 _generic_arraycopystub_cnt:      0
 _byte_arraycopy_cnt:             0
 _short_arraycopy_cnt:            0
 _int_arraycopy_cnt:              0
 _long_arraycopy_cnt:             0
 _primitive_arraycopy_cnt:        0
 _oop_arraycopy_cnt (C):          0
 _oop_arraycopy_cnt (stub):       0
 _arraycopy_slowcase_cnt:         0
 _arraycopy_checkcast_cnt:        0
 _arraycopy_checkcast_attempt_cnt:0
 _new_type_array_slowcase_cnt:    1
 _new_object_array_slowcase_cnt:  0
 _new_instance_slowcase_cnt:      0
 _new_multi_array_slowcase_cnt:   0
 _monitorenter_slowcase_cnt:      0
 _monitorexit_slowcase_cnt:       0
 _patch_code_slowcase_cnt:        0
 _throw_range_check_exception_count:            0:
 _throw_index_exception_count:                  0:
 _throw_div0_exception_count:                   0:
 _throw_null_pointer_exception_count:           0:
 _throw_class_cast_exception_count:             0:
 _throw_incompatible_class_change_error_count:  0:
 _throw_array_store_exception_count:            0:
 _throw_count:                                  0:

<statistics type='deoptimization'>
Deoptimization traps recorded:
   328 (100.0%) total
  class_check/maybe_recompile/invokevirtual: 13 (4.0%)
                       constraint/none/nop: 310 (94.5%)
              unstable_if/reinterpret/ifge: 1 (0.3%)
              unstable_if/reinterpret/ifne: 2 (0.6%)
         unstable_if/reinterpret/if_icmpge: 1 (0.3%)
         unstable_if/reinterpret/if_icmple: 1 (0.3%)
</statistics>
<statistics type='SharedRuntime'>
    8 new array requires GC
   51 inline cache miss in compiled
   73 wrong method
   97 unresolved static call site
  107 unresolved virtual call site
  364 unresolved opt virtual call site
  501 slow partial subtype
119970 byte array copies
33924 short array copies
 1233 int array copies
   12 long array copies
    5 checkcast array copies
AdapterHandlerTable: empty 143 longest 4 total 208 average 1.386667
AdapterHandlerTable: lookups 12197 buckets 12496 equals 11714 hits 11714 compact 11714
</statistics>
<statistics type='nmethod'>
Statistics for 76 native nmethods:
 N. total size  = 72040
 N. relocation  = 6544
 N. main code   = 41672
Statistics for 520 bytecoded nmethods:
 total in heap  = 1331232
 relocation     = 85232
 constants      = 64
 main code      = 634880
 stub code      = 106472
 oops           = 176
 scopes data    = 105392
 scopes pcs     = 208464
 dependencies   = 4208
 handler table  = 3632
 nul chk table  = 10480
Debug Data Chunks: 21866, shared 2480+5599, non-SP&apos;s elided 348
PcDesc Statistics:  1890 queries, 7.80 comparisons per query
  caches=520 queries=1890/0, hits=0+579, tests=6381+8363, adds=1311
</statistics>
<statistics type='opto'>
--- Compiler Statistics ---
Methods seen: 235  Methods parsed: 236  Nodes created: 80957
Reasons for parse failures (NOT cumulative):
Blocks parsed: 948  Blocks seen: 1302
1152 original NULL checks - 932 elided (80%); optimizer leaves 260,
214 made implicit (82%)
CCP: 65  constants found: 0
Total frameslots = 804, Max frameslots = 32
Inserted 0 spill loads, 0 spill stores, 0 mem-mem moves and 0 copies.
Total load cost=      0, store cost =      0, mem-mem cost =  0.00, copy cost =     0.
Adjusted spill cost =       0.
Conservatively coalesced 448 copies, 0 pairs, 2665 post alloc.
Used cisc instruction  185,  remained in register 853
Average allocation trips 1.814815
High Pressure Blocks = 0, Low Pressure Blocks = 0
Nops added 0 bytes to total of 64904 bytes, for 0.00%
Peephole: peephole rules applied: 0
PhaseIdealLoop=300, sum _unique=235271
</statistics>
<statistics type='intrinsic'>
Compiler intrinsic usage:
     1 ( 2.3%) _getClass (worked)
    10 (23.3%) _min (worked)
     6 (14.0%) _max (worked)
     1 ( 2.3%) _currentTimeMillis (worked)
    18 (41.9%) _arraycopy (worked)
     2 ( 4.7%) _isInterrupted (worked)
     2 ( 4.7%) _currentThread (worked)
     1 ( 2.3%) _copyOf (worked)
     1 ( 2.3%) _getObjectVolatile (worked)
     1 ( 2.3%) _putObjectVolatile (worked)
    43 (100.0%) total (worked)
</statistics>
<tty_done stamp='12.044'/>
</tty>
<hotspot_log_done stamp='12.044'/>
</hotspot_log>
