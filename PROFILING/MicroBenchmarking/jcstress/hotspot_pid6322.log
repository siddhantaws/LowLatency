<?xml version='1.0' encoding='UTF-8'?>
<hotspot_log version='160 1' process='6322' time_ms='1451750988638'>
<vm_version>
<name>
OpenJDK 64-Bit Server VM
</name>
<release>
25.66-b00-fastdebug
</release>
<info>
OpenJDK 64-Bit Server VM (25.66-b00-fastdebug) for linux-amd64 JRE (1.8.0-internal-mohit_2016_01_02_20_06-b00), built on Jan  2 2016 20:22:16 by &quot;mohit&quot; with gcc 4.8.4
</info>
</vm_version>
<vm_arguments>
<args>
-XX:-RestrictContended -XX:+StressLCM -XX:+StressGCM -XX:+WhiteBoxAPI -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineSize=0 
</args>
<command>
org.openjdk.jcstress.ForkedMain -r results/ -minStride 10 -maxStride 10000 -time 1000 -iters 20 -yield false -c 4 -sc 4 -f 0 -v -t org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest --hostName 127.0.1.1 --hostPort 39279
</command>
<launcher>
SUN_STANDARD
</launcher>
<properties>
java.vm.specification.name=Java Virtual Machine Specification
java.vm.version=25.66-b00-fastdebug
java.vm.name=OpenJDK 64-Bit Server VM
java.vm.info=mixed mode, sharing
java.ext.dirs=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/ext:/usr/java/packages/lib/ext
java.endorsed.dirs=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/endorsed
sun.boot.library.path=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/amd64
java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib
java.home=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre
java.class.path=tests-custom/target/jcstress.jar
sun.boot.class.path=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/resources.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/rt.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/sunrsasign.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/jsse.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/jce.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/charsets.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/jfr.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/classes
java.vm.specification.vendor=Oracle Corporation
java.vm.specification.version=1.8
java.vm.vendor=Oracle Corporation
sun.java.command=org.openjdk.jcstress.ForkedMain -r results/ -minStride 10 -maxStride 10000 -time 1000 -iters 20 -yield false -c 4 -sc 4 -f 0 -v -t org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest --hostName 127.0.1.1 --hostPort 39279
sun.java.launcher=SUN_STANDARD
</properties>
</vm_arguments>
<tty>
<blob name='MethodHandlesAdapterBlob' size='182000'>
<sect index='1' size='182000' free='177714'/>
</blob>
<writer thread='139933086521088'/>
Could not load hsdis-amd64.so; library not loadable; PrintAssembly is disabled
<writer thread='139933087573760'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='53'>
{method}
 - this oop:          0x00007f44ccd3e830
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f44ccd3b0e8 constant pool [680] {0x00007f44ccd3b0e8} for &apos;java/lang/String&apos; cache=0x00007f44cce045e0
 - access:            0x81000001  public 
 - name:              &apos;charAt&apos;
 - signature:         &apos;(I)C&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b91fec60
 - code size:         29
 - code start:        0x00007f44ccd3e7f0
 - code end (excl):   0x00007f44ccd3e80d
 - method data:       0x00007f44ccef38d8
 - checked ex length: 0
 - linenumber start:  0x00007f44ccd3e80d
 - localvar length:   2
 - localvar start:    0x00007f44ccd3e816
 - compiled code: nmethod    651    3       3       java.lang.String::charAt (29 bytes)
#
#  char ( java/lang/String:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N80: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B7 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	testl   RDX, RDX
02e   	jl,s   B7  P=0.000000 C=5632.000000
02e
030   B2: #	B9 B3 &lt;- B1  Freq: 1
030   	movl    R11, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
034   	movl    RBP, [R11 + #12 (8-bit)]	# range
038   	NullCheck R11
038
038   B3: #	B8 B4 &lt;- B2  Freq: 0.999999
038   	cmpl    RDX, RBP
03a   	jge,s   B8  P=0.000000 C=5632.000000
03a
03c   B4: #	B6 B5 &lt;- B3  Freq: 0.999998
03c   	cmpl    RDX, RBP	# unsigned
03e   	jnb,us  B6  P=0.000001 C=-1.000000
03e
040   B5: #	N80 &lt;- B4  Freq: 0.999997
040   	movzwl  RAX, [R11 + #16 + RDX &lt;&lt; #1]	# ushort/char
046   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

051   	ret
051
052   B6: #	N80 &lt;- B4  Freq: 1.01328e-06
052   	movl    RBP, RDX	# spill
054   	movl    [rsp + #0], R11	# spill
058   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
05f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #0 STK[1]=RBP
        # OopMap{[0]=NarrowOop off=100}
064   	int3	# ShouldNotReachHere
064
069   B7: #	N80 &lt;- B1  Freq: 5e-07
069   	movq    RBP, RSI	# spill
06c   	movl    [rsp + #4], RDX	# spill
070   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
077   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # OopMap{rbp=Oop off=124}
07c   	int3	# ShouldNotReachHere
07c
081   B8: #	N80 &lt;- B3  Freq: 4.76836e-07
081   	movq    [rsp + #0], RSI	# spill
085   	movl    [rsp + #12], RDX	# spill
089   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
08f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #0 L[1]=rsp + #12 STK[0]=rsp + #12 STK[1]=RBP
        # OopMap{[0]=Oop off=148}
094   	int3	# ShouldNotReachHere
094
099   B9: #	N80 &lt;- B2  Freq: 1.01328e-06
099   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
09f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=164}
0a4   	int3	# ShouldNotReachHere
0a4

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='82'>
{method}
 - this oop:          0x00007f44ccd40260
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f44ccd3b0e8 constant pool [680] {0x00007f44ccd3b0e8} for &apos;java/lang/String&apos; cache=0x00007f44cce045e0
 - access:            0xc1000001  public 
 - name:              &apos;indexOf&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         4
 - max locals:        6
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef7a8: 0xbaa00000 i2c: 0x00007f44b9145ca0 c2i: 0x00007f44b9145de0 c2iUV: 0x00007f44b9145db3
 - compiled entry     0x00007f44b91ff400
 - code size:         70
 - code start:        0x00007f44ccd401b8
 - code end (excl):   0x00007f44ccd401fe
 - method data:       0x00007f44ccf76dd8
 - checked ex length: 0
 - linenumber start:  0x00007f44ccd401fe
 - localvar length:   6
 - localvar start:    0x00007f44ccd40216
 - compiled code: nmethod    779    4       3       java.lang.String::indexOf (70 bytes)
#
#  int ( java/lang/String:NotNull:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N253: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B35 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (160 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	movq    R10, RSI	# spill
02f   	movl    R13, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
033   	movl    RSI, #-155	# int
038   	movl    RBP, [R13 + #12 (8-bit)]	# range
03c   	NullCheck R13
03c
03c   B2: #	B33 B3 &lt;- B1  Freq: 0.999999
03c   	testl   RCX, RCX
03e   	jl     B33  P=0.000000 C=656.000000
03e
044   B3: #	B24 B4 &lt;- B2  Freq: 0.999999
044   	movl    RAX, #-1	# int
049   	cmpl    RCX, RBP
04b   	jge     B24  P=0.140244 C=656.000000
04b
051   B4: #	B34 B5 &lt;- B3  Freq: 0.859755
051   	cmpl    RDX, #65536
057   	jge     B34  P=0.000000 C=564.000000
057
05d   B5: #	B31 B6 &lt;- B4  Freq: 0.859754
05d   	movl    RSI, #-122	# int
062   	cmpl    RCX, RBP	# unsigned
064   	jnb,u  B31  P=0.000001 C=-1.000000
064
06a   B6: #	B31 B7 &lt;- B5  Freq: 0.859754
06a   	movl    R8, RBP	# spill
06d   	decl    R8	# int
070   	movl    R9, #-2147483648	# int
076   	movl    R11, RCX	# spill
079   	incl    R11	# int
07c   	cmpl    R8, RBP	# unsigned
07f   	jnb,u  B31  P=0.000001 C=-1.000000
07f
085   B7: #	B8 &lt;- B6  Freq: 0.859753
085   	movl    RSI, RBP	# spill
087   	addl    RSI, #-3	# int
08a
08a   B8: #	B29 B9 &lt;- B7 B10 	Loop: B8-B10 inner pre of N191 Freq: 1.7194
08a   	movl    R10, RCX	# spill
08d   	incl    R10	# int
090   	movzwl  RDI, [R13 + #16 + RCX &lt;&lt; #1]	# ushort/char
096   	cmpl    RDI, RDX
098   	je     B29  P=0.000061 C=16385.000000
098
09e   B9: #	B11 B10 &lt;- B8  Freq: 1.7193
09e   	cmpl    R10, R11
0a1   	jge,s   B11	# loop end  P=0.500000 C=16383.000000
0a1
0a3   B10: #	B8 &lt;- B9  Freq: 0.859648
0a3   	movl    RCX, R10	# spill
0a6   	jmp,s   B8
0a6
0a8   B11: #	B32 B12 &lt;- B9  Freq: 0.859648
0a8   	cmpl    R8, RSI
0ab   	cmovll RSI, R9	# signed, int
0af   	cmpl    R10, RSI
0b2   	jge     B32  P=0.000001 C=-1.000000
0b2
0b8   B12: #	B14 &lt;- B11  Freq: 0.859647
0b8   	# castII of R10
0b8   	jmp,s   B14
      	nop 	# 6 bytes pad for loops and calls

0c0   B13: #	B14 &lt;- B18  top-of-loop Freq: 24.8796
0c0   	movl    R10, RDI	# spill
0c0
0c3   B14: #	B28 B15 &lt;- B12 B13 	Loop: B14-B13 inner main of N110 Freq: 25.7393
0c3   	movzwl  R11, [R13 + #16 + R10 &lt;&lt; #1]	# ushort/char
0c9   	movslq  R8, R10	# i2l
0cc   	movzwl  R9, [R13 + #18 + R8 &lt;&lt; #1]	# ushort/char
0d2   	movzwl  RBX, [R13 + #20 + R8 &lt;&lt; #1]	# ushort/char
0d8   	cmpl    R11, RDX
0db   	je,s   B28  P=0.000061 C=16385.000000
0db
0dd   B15: #	B26 B16 &lt;- B14  Freq: 25.7377
0dd   	movl    RDI, R10	# spill
0e0   	addl    RDI, #4	# int
0e3   	movzwl  R11, [R13 + #22 + R8 &lt;&lt; #1]	# ushort/char
0e9   	cmpl    R9, RDX
0ec   	je,s   B26  P=0.000061 C=16385.000000
0ec
0ee   B16: #	B27 B17 &lt;- B15  Freq: 25.7361
0ee   	cmpl    RBX, RDX
0f0   	je,s   B27  P=0.000061 C=16385.000000
0f0
0f2   B17: #	B25 B18 &lt;- B16  Freq: 25.7346
0f2   	cmpl    R11, RDX
0f5   	je,s   B25  P=0.000061 C=16385.000000
0f5
0f7   B18: #	B13 B19 &lt;- B17  Freq: 25.733
0f7   	cmpl    RDI, RSI
0f9   	jl,s   B13	# loop end  P=0.966838 C=16383.000000
0f9
0fb   B19: #	B24 B20 &lt;- B32 B18  Freq: 0.853364
0fb   	cmpl    RDI, RBP
0fd   	jge,s   B24  P=0.500000 C=-1.000000
0fd
0ff   B20: #	B21 &lt;- B19  Freq: 0.426682
0ff   	# castII of RDI
      	nop 	# 1 bytes pad for loops and calls

100   B21: #	B30 B22 &lt;- B20 B23 	Loop: B21-B23 inner post of N191 Freq: 0.853312
100   	movl    R11, RDI	# spill
103   	incl    R11	# int
106   	movzwl  R10, [R13 + #16 + RDI &lt;&lt; #1]	# ushort/char
10c   	cmpl    R10, RDX
10f   	je,s   B30  P=0.000061 C=16385.000000
10f
111   B22: #	B24 B23 &lt;- B21  Freq: 0.85326
111   	cmpl    R11, RBP
114   	jge,s   B24	# loop end  P=0.500000 C=16383.000000
114
116   B23: #	B21 &lt;- B22  Freq: 0.42663
116   	movl    RDI, R11	# spill
119   	jmp,s   B21
119
11b   B24: #	N253 &lt;- B3 B28 B22 B19  Freq: 0.999996
11b   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

126   	ret
126
127   B25: #	B26 &lt;- B17  Freq: 0.00157071
127   	addl    R10, #2	# int
12b
12b   B26: #	B28 &lt;- B15 B25  Freq: 0.00314162
12b   	incl    R10	# int
12e   	jmp,s   B28
12e
130   B27: #	B28 &lt;- B16  Freq: 0.00157081
130   	addl    R10, #2	# int
134
134   B28: #	B24 &lt;- B30 B29 B14 B27 B26  Freq: 0.00644045
134   	movl    RAX, R10	# spill
137   	jmp,s   B24
137
139   B29: #	B28 &lt;- B8  Freq: 0.000104944
139   	movl    R10, RCX	# spill
13c   	jmp,s   B28
13c
13e   B30: #	B28 &lt;- B21  Freq: 5.2082e-05
13e   	movl    R10, RDI	# spill
141   	jmp,s   B28
141
143   B31: #	N253 &lt;- B6 B5  Freq: 1.74234e-06
143   	movl    [rsp + #0], RDX	# spill
146   	movl    [rsp + #4], R13	# spill
14b   	movl    [rsp + #8], RCX	# spill
14f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:43  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=RBP L[4]=rsp + #4 L[5]=rsp + #8
        # OopMap{[4]=NarrowOop off=340}
154   	int3	# ShouldNotReachHere
154
159   B32: #	B19 &lt;- B11  Freq: 8.71063e-07
159   	movl    RDI, R10	# spill
15c   	jmp,s   B19
15c
15e   B33: #	N253 &lt;- B2  Freq: 4.76837e-07
15e   	movl    [rsp + #0], RDX	# spill
161   	movl    [rsp + #8], RCX	# spill
165   	movq    [rsp + #16], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
16b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::indexOf @ bci:7  L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=RBP L[4]=_ L[5]=_ STK[0]=rsp + #8
        # OopMap{[16]=Oop off=368}
170   	int3	# ShouldNotReachHere
170
175   B34: #	N253 &lt;- B4  Freq: 4.09963e-07
175   	movl    [rsp + #4], RCX	# spill
179   	movl    [rsp + #8], RDX	# spill
17d   	movq    [rsp + #16], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
183   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::indexOf @ bci:25  L[0]=rsp + #16 L[1]=rsp + #8 L[2]=rsp + #4 L[3]=RBP L[4]=_ L[5]=_ STK[0]=rsp + #8 STK[1]=#65536
        # OopMap{[16]=Oop off=392}
188   	int3	# ShouldNotReachHere
188
18d   B35: #	N253 &lt;- B1  Freq: 1.01328e-06
18d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
193   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap{off=408}
198   	int3	# ShouldNotReachHere
198

</opto_assembly>
<writer thread='139933088626432'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933550098176'/>
<dependency_failed type='leaf_type' ctxk='java/util/jar/JarFile' witness='sun/net/www/protocol/jar/URLJarFile' stamp='0.824'/>
<writer thread='139933088626432'/>
<opto_assembly compile_id='86'>
{method}
 - this oop:          0x00007f44ccd40070
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f44ccd3b0e8 constant pool [680] {0x00007f44ccd3b0e8} for &apos;java/lang/String&apos; cache=0x00007f44cce045e0
 - access:            0xc1000001  public 
 - name:              &apos;hashCode&apos;
 - signature:         &apos;()I&apos;
 - max stack:         4
 - max locals:        4
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      3
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef760: 0xb0000000 i2c: 0x00007f44b9145620 c2i: 0x00007f44b914575a c2iUV: 0x00007f44b914572d
 - compiled entry     0x00007f44b91fb8a0
 - code size:         55
 - code start:        0x00007f44ccd3fff8
 - code end (excl):   0x00007f44ccd4002f
 - method data:       0x00007f44ccf42a20
 - checked ex length: 0
 - linenumber start:  0x00007f44ccd4002f
 - localvar length:   4
 - localvar start:    0x00007f44ccd4003e
 - compiled code: nmethod    834    1       3       java.lang.String::hashCode (55 bytes)
#
#  int ( java/lang/String:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N196: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B15 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (144 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movq    RBX, RSI	# spill
02f   	movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
033   	movl    RAX, [RSI + #16 (8-bit)]	# int ! Field: java/lang/String.hash
036   	testl   RAX, RAX
038   	jne     B15  P=0.357909 C=746.000000
038
03e   B2: #	B19 B3 &lt;- B1  Freq: 0.642091
03e   	movl    RSI, #-10	# int
043   	movl    R11, #-2147483648	# int
049   	movl    R8, [R10 + #12 (8-bit)]	# range
04d   	NullCheck R10
04d
04d   B3: #	B17 B4 &lt;- B2  Freq: 0.64209
04d   	movl    RCX, R8	# spill
050   	decl    RCX	# int
052   	movl    R9, R8	# spill
055   	addl    R9, #-3	# int
059   	cmpl    RCX, R9
05c   	cmovll R9, R11	# signed, int
060   	testl   R8, R8
063   	jle     B17  P=0.002088 C=479.000000
063
069   B4: #	B18 B5 &lt;- B3  Freq: 0.64075
069   	testl  R8, R8	# unsigned
06c   	jbe,u  B18  P=0.000001 C=-1.000000
06c
072   B5: #	B18 B6 &lt;- B4  Freq: 0.640749
072   	movl    RDX, #1	# int
077   	cmpl    RCX, R8	# unsigned
07a   	jnb,u  B18  P=0.000001 C=-1.000000
07a
080   B6: #	B10 B7 &lt;- B5  Freq: 0.640749
080   	movzwl  R11, [R10 + #16 (8-bit)]	# ushort/char
085   	movl    RAX, R11	# spill
088   	sall    RAX, #5
08b   	cmpl    R9, #1
08f   	jle,s   B10  P=0.000001 C=-1.000000
08f
091   B7: #	B9 &lt;- B6  Freq: 0.640748
091   	subl    RAX, R11	# int
094   	jmp,s   B9
      	nop 	# 10 bytes pad for loops and calls

0a0   B8: #	B9 &lt;- B9  top-of-loop Freq: 25.4356
0a0   	subl    RAX, R11	# int
0a3
0a3   B9: #	B8 B10 &lt;- B7 B8 	Loop: B9-B8 inner main of N68 Freq: 26.0763
0a3   	movslq  R11, RDX	# i2l
0a6   	movzwl  RDI, [R10 + #22 + R11 &lt;&lt; #1]	# ushort/char
0ac   	movzwl  RCX, [R10 + #16 + RDX &lt;&lt; #1]	# ushort/char
0b2   	movzwl  RBP, [R10 + #18 + R11 &lt;&lt; #1]	# ushort/char
0b8   	movzwl  R11, [R10 + #20 + R11 &lt;&lt; #1]	# ushort/char
0be   	addl    RAX, RCX	# int
0c0   	movl    RCX, RAX	# spill
0c2   	sall    RCX, #5
0c5   	subl    RCX, RAX	# int
0c7   	addl    RCX, RBP	# int
0c9   	movl    RSI, RCX	# spill
0cb   	sall    RSI, #5
0ce   	subl    RSI, RCX	# int
0d0   	addl    RSI, R11	# int
0d3   	movl    R11, RSI	# spill
0d6   	sall    R11, #5
0da   	subl    R11, RSI	# int
0dd   	addl    R11, RDI	# int
0e0   	movl    RAX, R11	# spill
0e3   	sall    RAX, #5
0e6   	addl    RDX, #4	# int
0e9   	cmpl    RDX, R9
0ec   	jl,s   B8	# loop end  P=0.975428 C=18975.000000
0ec
0ee   B10: #	B16 B11 &lt;- B6 B9  Freq: 0.640749
0ee   	cmpl    RDX, R8
0f1   	jge,s   B16  P=0.500000 C=-1.000000
0f1
0f3   B11: #	B12 &lt;- B10  Freq: 0.320374
0f3   	# castII of RDX
0f3
0f3   B12: #	B14 B13 &lt;- B11 B13 	Loop: B12-B13 inner post of N200 Freq: 0.640749
0f3   	movzwl  R9, [R10 + #16 + RDX &lt;&lt; #1]	# ushort/char
0f9   	subl    RAX, R11	# int
0fc   	addl    RAX, R9	# int
0ff   	incl    RDX	# int
101   	cmpl    RDX, R8
104   	jge,s   B14	# loop end  P=0.500000 C=18975.000000
104
106   B13: #	B12 &lt;- B12  Freq: 0.320374
106   	movl    RCX, RAX	# spill
108   	sall    RCX, #5
10b   	movl    R11, RAX	# spill
10e   	movl    RAX, RCX	# spill
110   	jmp,s   B12
110
112   B14: #	B15 &lt;- B12 B16  Freq: 0.640749
112   	movl    [RBX + #16 (8-bit)], RAX	# int ! Field: java/lang/String.hash
112
115   B15: #	N196 &lt;- B14 B17 B1  Freq: 0.999998
115   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

120   	ret
120
121   B16: #	B14 &lt;- B10  Freq: 0.320374
121   	movl    RAX, R11	# spill
124   	jmp,s   B14
124
126   B17: #	B15 &lt;- B3  Freq: 0.00134048
126   	xorl    RAX, RAX	# int
128   	jmp,s   B15
128
12a   B18: #	N196 &lt;- B5 B4  Freq: 1.29001e-06
12a   	movl    RBP, R10	# spill
12d   	movq    [rsp + #0], RBX	# spill
131   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
137   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::hashCode @ bci:33  L[0]=rsp + #0 L[1]=#0 L[2]=RBP L[3]=#0
        # OopMap{rbp=NarrowOop [0]=Oop off=316}
13c   	int3	# ShouldNotReachHere
13c
141   B19: #	N196 &lt;- B2  Freq: 6.50617e-07
      	nop 	# 2 bytes pad for loops and calls
143   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::hashCode @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap{off=328}
148   	int3	# ShouldNotReachHere
148

</opto_assembly>
<writer thread='139933087573760'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933088626432'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='122'>
{method}
 - this oop:          0x00007f44cce52688
 - method holder:     &apos;java/lang/Math&apos;
 - constants:         0x00007f44cce4f7e0 constant pool [324] {0x00007f44cce4f7e0} for &apos;java/lang/Math&apos; cache=0x00007f44cce54240
 - access:            0x81000009  public static 
 - name:              &apos;max&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - intrinsic id:      15 _max
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80f0378: 0xaa000000 i2c: 0x00007f44b9156560 c2i: 0x00007f44b915669c c2iUV: 0x00007f44b915666f
 - compiled entry     0x00007f44b9255900
 - code size:         11
 - code start:        0x00007f44cce52658
 - code end (excl):   0x00007f44cce52663
 - method data:       0x00007f44cd0ab508
 - checked ex length: 0
 - linenumber start:  0x00007f44cce52663
 - localvar length:   2
 - localvar start:    0x00007f44cce5266e
 - compiled code: nmethod    920   99       3       java.lang.Math::max (11 bytes)
#
#  int ( int, int )
#
#r018 rsi   : parm 0: int
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B3  Freq: 1
abababab
000   B1: #	B4 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	cmpl    RSI, RDX
00e   	jl,s   B4  P=0.014333 C=6070.000000
00e
010   B2: #	B3 &lt;- B1  Freq: 0.985667
010   	movl    RAX, RSI	# spill
010
012   B3: #	N1 &lt;- B4 B2  Freq: 1
012   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

01d   	ret
01d
01e   B4: #	B3 &lt;- B1  Freq: 0.0143328
01e   	movl    RAX, RDX	# spill
020   	jmp,s   B3
020

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933087573760'/>
<opto_assembly compile_id='119'>
{method}
 - this oop:          0x00007f44cd0a5c48
 - method holder:     &apos;java/util/regex/Matcher&apos;
 - constants:         0x00007f44cd0a25b8 constant pool [380] {0x00007f44cd0a25b8} for &apos;java/util/regex/Matcher&apos; cache=0x00007f44cd0a6178
 - access:            0xc1000000  
 - name:              &apos;search&apos;
 - signature:         &apos;(I)Z&apos;
 - max stack:         5
 - max locals:        3
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b9258060
 - code size:         109
 - code start:        0x00007f44cd0a5b90
 - code end (excl):   0x00007f44cd0a5bfd
 - method data:       0x00007f44cd0abbb0
 - checked ex length: 0
 - linenumber start:  0x00007f44cd0a5bfd
 - localvar length:   4
 - localvar start:    0x00007f44cd0a5c16
 - compiled code: nmethod   1245  104       3       java.util.regex.Matcher::search (109 bytes)
#
#  bool ( java/util/regex/Matcher:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Matcher:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1014: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B64 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (400 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movq    R10, RSI	# spill
02f   	movb    [RSI + #45 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/util/regex/Matcher.requireEnd
033   	movb    [RSI + #44 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/util/regex/Matcher.hitEnd
037   	movl    RBP, [RSI + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
03a   	decode_heap_oop_not_null R13,RBP
03d   	movl    RSI, #-155	# int
042   	leaq    R11, [RBP + #16 (8-bit)]	# ptr off8narrow
046   	movl    RCX, [R10 + #36 (8-bit)]	# int ! Field: java/util/regex/Matcher.oldLast
04a   	movl    R8, RDX	# spill
04d   	testl   RDX, RDX
04f   	jl     B64  P=0.000000 C=845.000000
04f
055   B2: #	B53 B3 &lt;- B1  Freq: 1
055   	movl    [R10 + #28 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.first
059   	testl   RCX, RCX
05b   	jl     B53  P=0.061538 C=845.000000
05b
061   B3: #	B67 B4 &lt;- B2 B53  Freq: 1
061   	movl    [R10 + #36 (8-bit)], RCX	# int ! Field: java/util/regex/Matcher.oldLast
065   	movl    RSI, #-10	# int
06a   	movl    RBX, [RBP + #12 (8-bit)]	# range
06d   	NullCheck RBP
06d
06d   B4: #	B8 B5 &lt;- B3  Freq: 0.999999
06d   	testl   RBX, RBX
06f   	jle,s   B8  P=0.047619 C=17745.000000
06f
071   B5: #	B61 B6 &lt;- B4  Freq: 0.95238
071   	movl    RSI, #-122	# int
076   	testl  RBX, RBX	# unsigned
078   	jbe,u  B61  P=0.000001 C=-1.000000
078
07e   B6: #	B61 B7 &lt;- B5  Freq: 0.952379
07e   	movslq  RDX, RBX	# i2l
081   	movl    RCX, RBX	# spill
083   	decl    RCX	# int
085   	cmpl    RCX, RBX	# unsigned
087   	jnb,u  B61  P=0.000001 C=-1.000000
087
08d   B7: #	B8 &lt;- B6  Freq: 0.952378
08d   	movq    [rsp + #8], R11	# spill
092   	movl    [rsp + #0], RBP	# spill
095   	movq    R14, R10	# spill
098   	movl    RBP, R8	# spill
09b   	movq    RDI, R11	# spill
09e   	movl    RSI, #-1	# int
0a3   	call_leaf_nofp,runtime  arrayof_jint_fill
        No JVM State Info
        # 
0b0   	movl    R8, RBP	# spill
0b3   	movq    R10, R14	# spill
0b6   	movl    RBP, [rsp + #0]	# spill
0b9   	movq    R11, [rsp + #8]	# spill
0b9
0be   B8: #	B68 B9 &lt;- B7 B4  Freq: 0.999997
0be   	movl    R9, [R10 + #48 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.parentPattern
0c2   	movl    RDX, [R10 + #56 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.text
0c6   	movl    [R10 + #24 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/util/regex/Matcher.acceptMode
0ca   	movl    RCX, [R9 + #44 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern.root
0ce   	NullCheck R9
0ce
0ce   B9: #	B69 B10 &lt;- B8  Freq: 0.999996
0ce   	movdl   XMM4, RDX	# spill
0d2   	movdq   XMM1, R11	# spill
0d7   	movdl   XMM2, RBP	# spill
0db   	movl    [rsp + #16], R8	# spill
0e0   	movl    R11, [R10 + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
0e4   	movdq   XMM0, R10	# spill
0e9   	movl    RSI, #-10	# int
0ee   	movl    R9, [RCX + #8 (8-bit)]	# compressed klass ptr
0f2   	NullCheck RCX
0f2
0f2   B10: #	B60 B11 &lt;- B9  Freq: 0.999995
0f2   	movl    R8, [R10 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
0f6   	decode_heap_oop_not_null R10,RCX
0f9   	cmpl    R9, narrowklass: precise klass java/util/regex/Pattern$BnM: 0x00007f448c020000:Constant:exact *	# compressed klass ptr
100   	jne,u  B60  P=0.000001 C=-1.000000
100
106   B11: #	B70 B12 &lt;- B10  Freq: 0.999994
106   	# checkcastPP of R10
106   	movdq   XMM3, R10	# spill
10b   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
10f   	movdl   XMM6, R10	# spill
114   	movdq   R10, XMM3	# spill
119   	movl    R9, [R10 + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.buffer
11d   	movl    R10, [R9 + #12 (8-bit)]	# range
121   	NullCheck R9
121
121   B12: #	B20 &lt;- B11  Freq: 0.999993
121   	movdl   XMM13, R9	# spill
126   	movdl   XMM14, R11	# spill
12b   	movdl   XMM12, RBX	# spill
12f   	movdq   XMM11, R13	# spill
134   	subl    R8, R10	# int
137   	movl    [rsp + #12], R8	# spill
13c   	decode_heap_oop_not_null R11,RDX
13f   	movdq   XMM9, R11	# spill
144   	movdq   R11, XMM3	# spill
149   	movl    R11, [R11 + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
14d   	movdl   XMM7, R11	# spill
152   	movl    R11, R10	# spill
155   	addl    R11, #-2	# int
159   	movdl   XMM15, R11	# spill
15e   	movl    R14, R10	# spill
161   	decl    R14	# int
164   	decode_heap_oop_not_null R11,R9
167   	movq    [rsp + #0], R11	# spill
16b   	movdq   R11, XMM3	# spill
170   	movl    R11, [R11 + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
174   	movdl   XMM5, R11	# spill
179   	movl    R11, #1	# int
17f   	movdl   XMM10, R11	# spill
184   	jmp,s   B20
      	nop 	# 10 bytes pad for loops and calls

190   B13: #	B37 &lt;- B38  top-of-loop Freq: 6.14486
190   	movl    RSI, RDI	# spill
192   	jmp     B37
192
197   B14: #	B15 &lt;- B32  Freq: 3.80722
197   	movl    RSI, RDI	# spill
197
199   B15: #	B65 B16 &lt;- B44 B14 B37  Freq: 7.34754
199   	andl    R13, #127	# int
19d   	movdl   R11, XMM5	# spill
1a2   	movl    R11, [R11 + #12 (8-bit)]	# range
1a6   	NullCheck R11
1a6
1a6   B16: #	B55 B17 &lt;- B15  Freq: 7.34754
1a6   	movl    RBP, RSI	# spill
1a8   	incl    RBP	# int
1aa   	cmpl    R13, R11	# unsigned
1ad   	jnb,u  B55  P=0.000001 C=-1.000000
1ad
1b3   B17: #	B66 B18 &lt;- B16  Freq: 7.34753
1b3   	movl    RBP, RSI	# spill
1b5   	movdl   R11, XMM5	# spill
1ba   	subl    RBP, [R11 + #16 + R13 &lt;&lt; #2]	# int
1bf   	movdl   R11, XMM7	# spill
1c4   	movl    R11, [R11 + #12 (8-bit)]	# range
1c8   	NullCheck R11
1c8
1c8   B18: #	B56 B19 &lt;- B17  Freq: 7.34752
1c8   	incl    RBP	# int
1ca   	cmpl    RSI, R11	# unsigned
1cd   	jnb,u  B56  P=0.000001 C=-1.000000
1cd
1d3   B19: #	B20 &lt;- B18  Freq: 7.34751
1d3   	movdl   R11, XMM7	# spill
1d8   	movl    R8, [R11 + #16 + RBX]	# int
1dd   	cmpl    RBP, R8
1e0   	cmovll RBP, R8	# signed, int
1e4   	movl    R11, [rsp + #16]	# spill
1e9   	addl    R11, RBP	# int
1ec   	movl    [rsp + #16], R11	# spill
1f1   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$BnM::match @ bci:87  L[0]=XMM3 L[1]=XMM0 L[2]=R11 L[3]=XMM8 L[4]=rsp + #0 L[5]=R10 L[6]=rsp + #12 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=XMM0 L[1]=_ L[2]=_
        # OopMap{xmm0=Oop xmm1=Derived_oop_xmm11 xmm2=NarrowOop xmm3=Oop xmm4=NarrowOop xmm5=NarrowOop xmm6=NarrowOop xmm7=NarrowOop xmm8=Oop xmm9=Oop xmm11=Oop xmm13=NarrowOop [0]=Oop off=497}
1f7
1f7   B20: #	B52 B21 &lt;- B12 B19 	Loop: B20-B19  Freq: 8.34751
1f7   	movl    RCX, #-1	# int
1fc   	subl    RCX, [RSP + #16 (32-bit)]	# int
200   	movl    RDX, [rsp + #16]	# spill
204   	addl    RDX, R10	# int
207   	movl    R9, [rsp + #16]	# spill
20c   	negl    R9	# int
20f   	movl    RBX, R9	# spill
212   	sarl    RBX, #31
215   	movl    R11, [rsp + #16]	# spill
21a   	cmpl    R11, [RSP + #12 (32-bit)]
21f   	jg     B52  P=0.012291 C=4312.000000
21f
225   B21: #	B47 B22 &lt;- B20  Freq: 8.24491
225   	testl   R14, R14
228   	jl     B47  P=0.075380 C=11117.000000
228
22e   B22: #	B54 B23 &lt;- B21  Freq: 7.62341
22e   	movl    R8, [rsp + #16]	# spill
233   	incl    R8	# int
236   	movl    RSI, R8	# spill
239   	sarl    RSI, #31
23c   	movdl   R11, XMM4	# spill
241   	movl    R11, [R11 + #8 (8-bit)]	# compressed klass ptr
245   	NullCheck R11
245
245   B23: #	B54 B24 &lt;- B22  Freq: 7.6234
245   	cmpl    R11, narrowklass: precise klass java/lang/String: 0x00007f44c814d2f0:Constant:exact *	# compressed klass ptr
24c   	jne,u  B54  P=0.000001 C=-1.000000
24c
252   B24: #	B54 B25 &lt;- B23  Freq: 7.62339
252   	movdq   R11, XMM9	# spill
257   	# checkcastPP of R11
257   	movdq   XMM8, R11	# spill
25c   	andl    RSI, R8	# int
25f   	andl    RBX, R9	# int
262   	movl    R8, #-2147483647	# int
268   	subl    R8, RSI	# int
26b   	movl    R11, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
26f   	cmpl    R8, RCX
272   	cmovllt R8, RCX	# max
276   	movl    RCX, [R11 + #12 (8-bit)]	# range
27a   	NullCheck R11
27a
27a   B25: #	B54 B26 &lt;- B24  Freq: 7.62338
27a   	movl    R9, [rsp + #16]	# spill
27f   	cmpl    R9, RCX	# unsigned
282   	jnb,u  B54  P=0.000001 C=-1.000000
282
288   B26: #	B54 B27 &lt;- B25  Freq: 7.62337
288   	movl    RDI, RDX	# spill
28a   	decl    RDI	# int
28c   	cmpl    RDI, RCX	# unsigned
28e   	jnb,u  B54  P=0.000001 C=-1.000000
28e
294   B27: #	B54 B28 &lt;- B26  Freq: 7.62337
294   	addl    RBX, #2147483647	# int
29a   	testl  R10, R10	# unsigned
29d   	jbe,u  B54  P=0.000001 C=-1.000000
29d
2a3   B28: #	B54 B29 &lt;- B27  Freq: 7.62336
2a3   	movl    R9, RCX	# spill
2a6   	subl    R9, [RSP + #16 (32-bit)]	# int
2ab   	decl    R9	# int
2ae   	cmpl    RBX, R9
2b1   	cmovlgt RBX, R9	# min
2b5   	movdl   R9, XMM15	# spill
2ba   	cmpl    R9, RBX
2bd   	cmovlgt R9, RBX	# min
2c1   	cmpl    R14, R10	# unsigned
2c4   	jnb,u  B54  P=0.000001 C=-1.000000
2c4
2ca   B29: #	B30 &lt;- B28  Freq: 7.62335
2ca   	movl    RDI, #-1	# int
2cf   	cmpl    R9, RDI
2d2   	movl    RBX, #-1	# int
2d7   	cmovllt R9, RBX	# max
2db   	cmpl    R8, RDI
2de   	cmovllt R8, RBX	# max
2e2   	movl    RDI, R14	# spill
2e2
2e5   B30: #	B57 B31 &lt;- B29 B34 	Loop: B30-B34 inner pre of N1011 Freq: 11.4395
2e5   	movslq  RBX, RDI	# i2l
2e8   	salq    RBX, #2
2ec   	movl    RBP, RDI	# spill
2ee   	addl    RBP, [RSP + #16 (32-bit)]	# int
2f2   	testl   RBP, RBP
2f4   	jl     B57  P=0.000000 C=5670.000000
2f4
2fa   B31: #	B58 B32 &lt;- B30  Freq: 11.4395
2fa   	movdl   RSI, XMM13	# spill
2fe   	movl    RAX, [RSI + #16 + RBX]	# int
302   	movl    RSI, RDI	# spill
304   	decl    RSI	# int
306   	movzwl  R13, [R11 + #16 + RBP &lt;&lt; #1]	# ushort/char
30c   	cmpl    RBP, RCX
30e   	jge     B58  P=0.000000 C=5670.000000
30e
314   B32: #	B14 B33 &lt;- B31  Freq: 11.4395
314   	cmpl    R13, RAX
317   	jne     B14  P=0.332814 C=10279.000000
317
31d   B33: #	B35 B34 &lt;- B32  Freq: 7.63224
31d   	cmpl    RSI, R9
320   	jle,s   B35	# loop end  P=0.500000 C=6858.000000
320
322   B34: #	B30 &lt;- B33  Freq: 3.81612
322   	movl    RDI, RSI	# spill
324   	jmp,s   B30
324
326   B35: #	B59 B36 &lt;- B33  Freq: 3.81612
326   	cmpl    RSI, R8
329   	jle     B59  P=0.000001 C=-1.000000
329
32f   B36: #	B37 &lt;- B35  Freq: 3.81612
32f   	# castII of RSI
32f
32f   B37: #	B15 B38 &lt;- B36 B13 	Loop: B37-B13 inner main of N225 Freq: 9.96097
32f   	movslq  RBX, RSI	# i2l
332   	movl    RAX, RSI	# spill
334   	addl    RAX, [RSP + #16 (32-bit)]	# int
338   	movl    RDI, RSI	# spill
33a   	decl    RDI	# int
33c   	salq    RBX, #2
340   	movzwl  R13, [R11 + #16 + RAX &lt;&lt; #1]	# ushort/char
346   	movdl   R9, XMM13	# spill
34b   	movl    RAX, [R9 + #16 + RBX]	# int
350   	cmpl    R13, RAX
353   	jne     B15  P=0.332814 C=10279.000000
353
359   B38: #	B13 B39 &lt;- B37  Freq: 6.64582
359   	cmpl    RDI, R8
35c   	jg     B13	# loop end  P=0.924620 C=6858.000000
35c
362   B39: #	B47 B40 &lt;- B59 B38  Freq: 0.500966
362   	cmpl    RDI, #-1
365   	jle,s   B47  P=0.100000 C=-1.000000
365
367   B40: #	B41 &lt;- B39  Freq: 0.450869
367   	# castII of RDI
367
367   B41: #	B57 B42 &lt;- B40 B46 	Loop: B41-B46 inner post of N1011 Freq: 0.676567
367   	movslq  RBX, RDI	# i2l
36a   	movl    RBP, RDI	# spill
36c   	addl    RBP, [RSP + #16 (32-bit)]	# int
370   	salq    RBX, #2
374   	movzwl  R13, [R11 + #16 + RBP &lt;&lt; #1]	# ushort/char
37a   	testl   RBP, RBP
37c   	jl     B57  P=0.000000 C=5670.000000
37c
382   B42: #	B58 B43 &lt;- B41  Freq: 0.676566
382   	movdl   R8, XMM13	# spill
387   	movl    R9, [R8 + #16 + RBX]	# int
38c   	movl    R8, RDI	# spill
38f   	decl    R8	# int
392   	cmpl    RBP, RCX
394   	jge     B58  P=0.000000 C=5670.000000
394
39a   B43: #	B45 B44 &lt;- B42  Freq: 0.676566
39a   	cmpl    R13, R9
39d   	je,s   B45  P=0.667186 C=10279.000000
39d
39f   B44: #	B15 &lt;- B43  Freq: 0.225171
39f   	movl    RSI, RDI	# spill
3a1   	jmp     B15
3a1
3a6   B45: #	B47 B46 &lt;- B43  Freq: 0.451395
3a6   	cmpl    R8, #-1
3aa   	jle,s   B47	# loop end  P=0.500000 C=6858.000000
3aa
3ac   B46: #	B41 &lt;- B45  Freq: 0.225698
3ac   	movl    RDI, R8	# spill
3af   	jmp,s   B41
3af
3b1   B47: #	B71 B48 &lt;- B39 B21 B45  Freq: 0.897296
3b1   	movdq   R11, XMM0	# spill
3b6   	movl    R8, [rsp + #16]	# spill
3bb   	movl    [R11 + #28 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.first
3bf   	movl    RSI, #-34	# int
3c4   	movdl   R8, XMM6	# spill
3c9   	movl    R11, [R8 + #8 (8-bit)]	# compressed klass ptr
3cd   	NullCheck R8
3cd
3cd   B48: #	B62 B49 &lt;- B47  Freq: 0.897295
3cd   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f44c8207000:Constant:exact *	# compressed klass ptr
3d4   	jne,u  B62  P=0.000001 C=-1.000000
3d4
3da   B49: #	B63 B50 &lt;- B48  Freq: 0.897294
3da   	movdq   R11, XMM0	# spill
3df   	movl    [R11 + #32 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.last
3e3   	movdl   R8, XMM12	# spill
3e8   	cmpl    R8, #1	# unsigned
3ec   	jbe,u  B63  P=0.000001 C=-1.000000
3ec
3f2   B50: #	B51 &lt;- B49  Freq: 0.897293
3f2   	movdq   R10, XMM1	# spill
3f7   	movl    R8, [rsp + #16]	# spill
3fc   	movl    [R10], R8	# int
3ff   	movdl   RCX, XMM2	# spill
403   	movl    [RCX + #20 (8-bit)], RDX	# int
406   	movl    [R10], R8	# int
409   	movl    [RCX + #20 (8-bit)], RDX	# int
40c   	movdl   R10, XMM10	# spill
40c
411   B51: #	N1014 &lt;- B52 B50  Freq: 0.999894
411   	movl    [R11 + #36 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.oldLast
415   	movl    RAX, R10	# spill
418   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

423   	ret
423
424   B52: #	B51 &lt;- B20  Freq: 0.102601
424   	movdq   R11, XMM0	# spill
429   	movl    [R11 + #28 (8-bit)], #-1	# int ! Field: java/util/regex/Matcher.first
431   	movb    [R11 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
436   	movdl   RDX, XMM14	# spill
43a   	xorl    R10, R10	# int
43d   	jmp,s   B51
43d
43f   B53: #	B3 &lt;- B2  Freq: 0.0615384
43f   	movl    RCX, RDX	# spill
441   	jmp     B3
441
446   B54: #	N1014 &lt;- B28 B22 B23 B24 B25 B26 B27  Freq: 5.38698e-05
446   	movl    RBP, [rsp + #16]	# spill
44a   	movss   [rsp + #0], XMM13	# spill
44f   	movl    [rsp + #4], R10	# spill
454   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
466   	movl    [rsp + #12], R14	# spill
46b   	movl    RSI, #-122	# int
470   	movsd   [rsp + #24], XMM3	# spill
476   	movsd   [rsp + #32], XMM0	# spill
47c   	movss   [rsp + #40], XMM4	# spill
      	nop 	# 1 bytes pad for loops and calls
483   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:37  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #40 L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=rsp + #12 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #32 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop off=1160}
488   	int3	# ShouldNotReachHere
488
48d   B55: #	N1014 &lt;- B16  Freq: 7.4451e-06
48d   	movss   [rsp + #0], XMM13	# spill
492   	movl    [rsp + #4], R10	# spill
497   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
4a9   	movl    [rsp + #12], RSI	# spill
4ad   	movl    [rsp + #20], R13	# spill
4b2   	movsd   [rsp + #32], XMM3	# spill
4b8   	movsd   [rsp + #40], XMM0	# spill
4be   	movsd   [rsp + #48], XMM8	# spill
4c4   	movss   [rsp + #56], XMM5	# spill
4ca   	movl    RSI, #-28	# int
4cf   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=rsp + #12 L[8]=_ STK[0]=rsp + #16 STK[1]=RBP STK[2]=rsp + #56 STK[3]=rsp + #20
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #40 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [32]=Oop [40]=Oop [48]=Oop [56]=NarrowOop off=1236}
4d4   	int3	# ShouldNotReachHere
4d4
4d9   B56: #	N1014 &lt;- B18  Freq: 7.44509e-06
4d9   	movss   [rsp + #0], XMM13	# spill
4de   	movl    [rsp + #4], R10	# spill
4e3   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
4f5   	movl    R10, [rsp + #16]	# spill
4fa   	movl    [rsp + #12], R10	# spill
4ff   	movl    [rsp + #16], RSI	# spill
503   	movsd   [rsp + #32], XMM3	# spill
509   	movsd   [rsp + #40], XMM0	# spill
50f   	movsd   [rsp + #48], XMM8	# spill
515   	movss   [rsp + #20], XMM7	# spill
51b   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
523   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=_ L[8]=_ STK[0]=rsp + #12 STK[1]=RBP STK[2]=rsp + #20 STK[3]=rsp + #16
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #40 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [20]=NarrowOop [32]=Oop [40]=Oop [48]=Oop off=1320}
528   	int3	# ShouldNotReachHere
528
52d   B57: #	N1014 &lt;- B41 B30  Freq: 6.05802e-06
52d   	movl    RSI, #-155	# int
532   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
543   	movss   [rsp + #4], XMM13	# spill
549   	movl    [rsp + #8], R10	# spill
54e   	movl    [rsp + #16], RDI	# spill
552   	movsd   [rsp + #32], XMM3	# spill
558   	movsd   [rsp + #40], XMM0	# spill
55e   	movsd   [rsp + #56], XMM8	# spill
      	nop 	# 3 bytes pad for loops and calls
567   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #56 L[1]=RBP STK[0]=RBP
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=rsp + #0 L[3]=rsp + #56 L[4]=rsp + #4 L[5]=rsp + #8 L[6]=rsp + #12 L[7]=rsp + #16 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #40 L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [32]=Oop [40]=Oop [56]=Oop off=1388}
56c   	int3	# ShouldNotReachHere
56c
571   B58: #	N1014 &lt;- B42 B31  Freq: 5.77737e-06
571   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
582   	movss   [rsp + #4], XMM13	# spill
588   	movl    [rsp + #8], R10	# spill
58d   	movl    [rsp + #16], RDI	# spill
591   	movl    [rsp + #24], RCX	# spill
595   	movsd   [rsp + #40], XMM3	# spill
59b   	movsd   [rsp + #48], XMM0	# spill
5a1   	movsd   [rsp + #64], XMM8	# spill
5a7   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
5af   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #64 L[1]=RBP STK[0]=RBP STK[1]=rsp + #24
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #0 L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #8 L[6]=rsp + #12 L[7]=rsp + #16 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #48 L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [40]=Oop [48]=Oop [64]=Oop off=1460}
5b4   	int3	# ShouldNotReachHere
5b4
5b9   B59: #	B39 &lt;- B35  Freq: 3.8668e-06
5b9   	movl    RDI, RSI	# spill
5bb   	jmp     B39
5bb
5c0   B60: #	N1014 &lt;- B10  Freq: 9.99995e-07
5c0   	movl    RBP, [rsp + #16]	# spill
5c4   	movl    RSI, #-34	# int
5c9   	movl    [rsp + #8], RCX	# spill
5cd   	movsd   [rsp + #16], XMM0	# spill
5d3   	movl    [rsp + #12], RDX	# spill
5d7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #16 L[1]=_ L[2]=_ STK[0]=rsp + #8 STK[1]=rsp + #16 STK[2]=RBP STK[3]=rsp + #12
        # OopMap{[8]=NarrowOop [12]=NarrowOop [16]=Oop off=1500}
5dc   	int3	# ShouldNotReachHere
5dc
5e1   B61: #	N1014 &lt;- B6 B5  Freq: 1.9174e-06
5e1   	movl    RBP, R8	# spill
5e4   	movq    [rsp + #0], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
5eb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:55  L[0]=rsp + #0 L[1]=RBP L[2]=#0
        # OopMap{[0]=Oop off=1520}
5f0   	int3	# ShouldNotReachHere
5f0
5f5   B62: #	N1014 &lt;- B48  Freq: 8.97295e-07
5f5   	movl    RBP, [rsp + #16]	# spill
5f9   	movss   [rsp + #0], XMM13	# spill
5fe   	movl    [rsp + #4], R10	# spill
603   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
615   	movl    [rsp + #12], RDX	# spill
619   	movsd   [rsp + #24], XMM3	# spill
61f   	movsd   [rsp + #32], XMM0	# spill
625   	movl    [rsp + #44], R8	# spill
62a   	movsd   [rsp + #48], XMM0	# spill
630   	movss   [rsp + #56], XMM4	# spill
      	nop 	# 1 bytes pad for loops and calls
637   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #24 L[1]=rsp + #48 L[2]=RBP L[3]=rsp + #56 L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=_ L[8]=_ STK[0]=rsp + #44 STK[1]=rsp + #32 STK[2]=rsp + #12 STK[3]=rsp + #56
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #32 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=Oop [44]=NarrowOop [48]=Oop [56]=NarrowOop off=1596}
63c   	int3	# ShouldNotReachHere
63c
641   B63: #	N1014 &lt;- B49  Freq: 8.97294e-07
641   	movl    RBP, [rsp + #16]	# spill
645   	movss   [rsp + #0], XMM13	# spill
64a   	movl    [rsp + #4], R10	# spill
64f   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
661   	movsd   [rsp + #24], XMM3	# spill
667   	movq    [rsp + #32], R11	# spill
66c   	movss   [rsp + #40], XMM4	# spill
672   	movq    [rsp + #48], R11	# spill
677   	movss   [rsp + #44], XMM2	# spill
67d   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
683   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #32 L[2]=_ L[3]=_ STK[0]=rsp + #44 STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #24 L[1]=rsp + #48 L[2]=RBP L[3]=rsp + #40 L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #32 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop [44]=NarrowOop [48]=Oop off=1672}
688   	int3	# ShouldNotReachHere
688
68d   B64: #	N1014 &lt;- B1  Freq: 4.76837e-07
68d   	movl    [rsp + #0], RDX	# spill
690   	movq    [rsp + #8], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
697   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::search @ bci:11  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #0
        # OopMap{[8]=Oop off=1692}
69c   	int3	# ShouldNotReachHere
69c
6a1   B65: #	N1014 &lt;- B15  Freq: 7.44511e-06
6a1   	movl    RBP, R13	# spill
6a4   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
6ab   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1712}
6b0   	int3	# ShouldNotReachHere
6b0
6b5   B66: #	N1014 &lt;- B17  Freq: 7.4451e-06
6b5   	movl    RBP, RSI	# spill
6b7   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
6bf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1732}
6c4   	int3	# ShouldNotReachHere
6c4
6c9   B67: #	N1014 &lt;- B3  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
6cb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:51  L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1744}
6d0   	int3	# ShouldNotReachHere
6d0
6d5   B68: #	N1014 &lt;- B8  Freq: 1.01328e-06
6d5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
6db   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:77  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap{off=1760}
6e0   	int3	# ShouldNotReachHere
6e0
6e5   B69: #	N1014 &lt;- B9  Freq: 1.01327e-06
6e5   	movl    RBP, R8	# spill
6e8   	movq    [rsp + #0], R10	# spill
6ec   	movl    [rsp + #8], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
6f3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL STK[1]=rsp + #0 STK[2]=RBP STK[3]=rsp + #8
        # OopMap{[0]=Oop [8]=NarrowOop off=1784}
6f8   	int3	# ShouldNotReachHere
6f8
6fd   B70: #	N1014 &lt;- B11  Freq: 1.01327e-06
      	nop 	# 2 bytes pad for loops and calls
6ff   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1796}
704   	int3	# ShouldNotReachHere
704
709   B71: #	N1014 &lt;- B47  Freq: 9.09211e-07
709   	movl    RBP, RDX	# spill
70b   	movsd   [rsp + #0], XMM0	# spill
710   	movss   [rsp + #8], XMM4	# spill
716   	movl    RSI, #-10	# int
71b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=rsp + #0 STK[2]=RBP STK[3]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[0]=Oop [8]=NarrowOop off=1824}
720   	int3	# ShouldNotReachHere
720

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933088626432'/>
<opto_assembly compile_id='123' compile_kind='osr'>
{method}
 - this oop:          0x00007f44ccef66a8
 - method holder:     &apos;java/io/BufferedReader&apos;
 - constants:         0x00007f44ccef5390 constant pool [214] {0x00007f44ccef5390} for &apos;java/io/BufferedReader&apos; cache=0x00007f44ccef8168
 - access:            0xf1000000  
 - name:              &apos;readLine&apos;
 - signature:         &apos;(Z)Ljava/lang/String;&apos;
 - max stack:         7
 - max locals:        11
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      16
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b925f600
 - code size:         304
 - code start:        0x00007f44ccef64a8
 - code end (excl):   0x00007f44ccef65d8
 - method data:       0x00007f44cd0aaa38
 - checked ex length: 1
 - checked ex start:  0x00007f44ccef66a4
 - linenumber start:  0x00007f44ccef65d8
 - localvar length:   10
 - localvar start:    0x00007f44ccef6608
 - compiled code: nmethod   1442   98   !   3       java.io.BufferedReader::readLine (304 bytes)
#
#  java/lang/String:exact * ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 160 --
#r191 rsp+156: in_preserve
#r190 rsp+152: return address
#r189 rsp+148: in_preserve
#r188 rsp+144: saved fp register
#r187 rsp+140: Fixed slot 3
#r186 rsp+136: Fixed slot 2
#r185 rsp+132: Fixed slot 1
#r184 rsp+128: Fixed slot 0
#r223 rsp+124: spill
#r222 rsp+120: spill
#r221 rsp+116: spill
#r220 rsp+112: spill
#r219 rsp+108: spill
#r218 rsp+104: spill
#r217 rsp+100: spill
#r216 rsp+96: spill
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N2040: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B94 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (488 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #144	# Create frame

01f   	movq    R10, [RSI + #96 (8-bit)]	# ptr
023   	movq    [rsp + #32], R10	# spill
028   	movq    R10, [RSI + #88 (8-bit)]	# ptr
02c   	leaq    R11, [rsp + #128]	# box lock
034   	movq    [R11], R10	# ptr
037   	movl    RBX, [RSI + #24 (8-bit)]	# int
03a   	movq    R10, [RSI + #48 (8-bit)]	# ptr
03e   	movq    [rsp + #40], R10	# spill
043   	movl    R11, [RSI + #40 (8-bit)]	# int
047   	movl    [rsp + #16], R11	# spill
04c   	movq    R14, [RSI + #80 (8-bit)]	# ptr
050   	movl    R13, [RSI + #32 (8-bit)]	# int
054   	movq    RBP, [RSI + #64 (8-bit)]	# ptr
058   	movl    R11, [RSI + #16 (8-bit)]	# int
05c   	movl    [rsp + #24], R11	# spill
061   	movq    RDI, RSI	# spill
064   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
071   	testq   R14, R14	# ptr
074   	je     B94  P=0.001000 C=-1.000000
074
07a   B2: #	B135 B3 &lt;- B1  Freq: 0.999
07a   	movl    R11, [R14 + #8 (8-bit)]	# compressed klass ptr
07e   	cmpl    R11, narrowklass: precise klass java/io/BufferedReader: 0x00007f448804a6b0:Constant:exact *	# compressed klass ptr
085   	jne,u  B135  P=0.000001 C=-1.000000
085
08b   B3: #	B4 &lt;- B2  Freq: 0.998999
08b   	movq    R10, R14	# spill
08e   	# checkcastPP of R10
08e
08e   B4: #	B95 B5 &lt;- B3 B94  Freq: 0.999999
08e   	testq   RBP, RBP	# ptr
091   	je     B95  P=0.001000 C=-1.000000
091
097   B5: #	B135 B6 &lt;- B4  Freq: 0.998999
097   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
09b   	cmpl    R11, narrowklass: precise klass java/lang/StringBuffer: 0x00007f44c814fb40:Constant:exact *	# compressed klass ptr
0a2   	jne,u  B135  P=0.000001 C=-1.000000
0a2
0a8   B6: #	B7 &lt;- B5  Freq: 0.998998
0a8   	# checkcastPP of RBP
0a8
0a8   B7: #	B131 B8 &lt;- B6 B95  Freq: 0.999998
0a8   	testq   R10, R10	# ptr
0ab   	je     B131  P=0.000001 C=-1.000000
0ab
0b1   B8: #	B9 &lt;- B7  Freq: 0.999997
0b1   	movq    [rsp + #0], R10	# spill
0b5   	movdq   XMM1, RBP	# spill
0ba   	movl    R11, #7	# long (unsigned 32-bit)
0c0   	movl    R10, #10	# int
0c6   	movq    [rsp + #96], R11	# spill
0cb   	movl    [rsp + #88], R10	# spill
0cb
0d0   B9: #	B50 B10 &lt;- B8 B102 	Loop: B9-B102  Freq: 1.00044
0d0   	movq    R10, [rsp + #0]	# spill
0d4   	movl    R10, [R10 + #20 (8-bit)]	# int ! Field: java/io/BufferedReader.nChars
0d8   	movq    R11, java/lang/Class:exact *	# ptr
0e2   	movl    RBP, [R11 + #116 (8-bit)]	# int ! Field: java/io/BufferedReader.defaultExpectedLineLength
0e6   	movl    [rsp + #8], RBP	# spill
0ea   	movq    R11, [rsp + #0]	# spill
0ee   	movl    R8, [R11 + #24 (8-bit)]	# int ! Field: java/io/BufferedReader.nextChar
0f2   	movl    [rsp + #12], R8	# spill
0f7   	movl    R8, [R11 + #44 (8-bit)]	# compressed ptr ! Field: java/io/BufferedReader.cb
0fb   	movl    [rsp + #80], R8	# spill
100   	movl    RBP, [rsp + #24]	# spill
104   	subl    RBP, [RSP + #12 (32-bit)]	# int
108   	movl    [rsp + #20], RBP	# spill
10c   	decode_heap_oop R11,R8
197   	movq    [rsp + #48], R11	# spill
19c   	movl    R8, [rsp + #24]	# spill
1a1   	cmpl    R8, R10
1a4   	jge     B50  P=0.000121 C=49758.000000
1a4
1aa   B10: #	B151 B11 &lt;- B9  Freq: 1.00032
1aa   	movl    R11, [rsp + #80]	# spill
1af   	movl    R8, [R11 + #12 (8-bit)]	# range
1b3   	NullCheck R11
1b3
1b3   B11: #	B130 B12 &lt;- B10  Freq: 1.00032
1b3   	movl    RCX, [rsp + #24]	# spill
1b7   	addl    RCX, #2	# int
1ba   	movl    R9, [rsp + #24]	# spill
1bf   	cmpl    R9, R8	# unsigned
1c2   	jnb,u  B130  P=0.000001 C=-1.000000
1c2
1c8   B12: #	B93 B13 &lt;- B11  Freq: 1.00032
1c8   	cmpl    R10, R8
1cb   	movl    RSI, R10	# spill
1ce   	cmovlgt RSI, R8	# min
1d2   	movzwl  RBX, [R11 + #16 + R9 &lt;&lt; #1]	# ushort/char
1d8   	xorl    R9, R9	# int
1db   	xorl    R11, R11	# int
1de   	cmpl    RCX, R9
1e1   	cmovllt RCX, R11	# max
1e5   	cmpl    RBX, #10
1e8   	je     B93  P=0.001970 C=49752.000000
1e8
1ee   B13: #	B124 B14 &lt;- B12  Freq: 0.998349
1ee   	movl    R11, RSI	# spill
1f1   	addl    R11, #-7	# int
1f5   	movl    RDI, [rsp + #24]	# spill
1f9   	incl    RDI	# int
1fb   	cmpl    RBX, #13
1fe   	je     B124  P=0.000000 C=49654.000000
1fe
204   B14: #	B103 B15 &lt;- B13  Freq: 0.998348
204   	movl    R9, #-2147483648	# int
20a   	cmpl    RDI, R10
20d   	jge     B103  P=0.000121 C=49758.000000
20d
213   B15: #	B16 &lt;- B14  Freq: 0.998228
213   	cmpl    RCX, R10
216   	cmovlgt RCX, R10	# min
21a   	cmpl    RSI, R11
21d   	cmovll R11, R9	# signed, int
21d
221   B16: #	B129 B17 &lt;- B15 B20 	Loop: B16-B20 inner pre of N1511 Freq: 1.99253
221   	cmpl    RDI, R8	# unsigned
224   	jnb,u  B129  P=0.000001 C=-1.000000
224
22a   B17: #	B88 B18 &lt;- B16  Freq: 1.99253
22a   	movl    R9, [rsp + #80]	# spill
22f   	movzwl  RBX, [R9 + #16 + RDI &lt;&lt; #1]	# ushort/char
235   	cmpl    RBX, #10
238   	je     B88  P=0.001970 C=49752.000000
238
23e   B18: #	B136 B19 &lt;- B17  Freq: 1.9886
23e   	cmpl    RBX, #13
241   	je     B136  P=0.000000 C=49654.000000
241
247   B19: #	B21 B20 &lt;- B18  Freq: 1.9886
247   	movl    R9, RDI	# spill
24a   	incl    R9	# int
24d   	cmpl    R9, RCX
250   	jge,s   B21	# loop end  P=0.500000 C=49758.000000
250
252   B20: #	B16 &lt;- B19  Freq: 0.9943
252   	movl    RDI, R9	# spill
255   	jmp,s   B16
255
257   B21: #	B132 B22 &lt;- B19  Freq: 0.9943
257   	cmpl    R9, R11
25a   	jge     B132  P=0.000001 C=-1.000000
25a
260   B22: #	B24 &lt;- B21  Freq: 0.994299
260   	# castII of R9
260   	jmp,s   B24
      	nop 	# 14 bytes pad for loops and calls

270   B23: #	B24 &lt;- B40  top-of-loop Freq: 62.0466
270   	movl    R9, RCX	# spill
270
273   B24: #	B53 B25 &lt;- B22 B23 	Loop: B24-B23 inner main of N303 Freq: 63.0409
273   	movslq  RBP, R9	# i2l
276   	movl    RCX, [rsp + #80]	# spill
27a   	movzwl  RBX, [RCX + #16 + R9 &lt;&lt; #1]	# ushort/char
280   	movl    RCX, R9	# spill
283   	addl    RCX, #4	# int
286   	movl    RDX, [rsp + #80]	# spill
28a   	movzwl  RSI, [RDX + #18 + RBP &lt;&lt; #1]	# ushort/char
28f   	cmpl    RBX, #10
292   	je     B53  P=0.001970 C=49752.000000
292
298   B25: #	B114 B26 &lt;- B24  Freq: 62.9168
298   	movzwl  RDX, [RDX + #24 + RBP &lt;&lt; #1]	# ushort/char
29d   	movl    RDI, [rsp + #80]	# spill
2a1   	movzwl  RDI, [RDI + #26 + RBP &lt;&lt; #1]	# ushort/char
2a6   	movl    RAX, R9	# spill
2a9   	addl    RAX, #4	# int
2ac   	cmpl    RBX, #13
2af   	je     B114  P=0.000000 C=49654.000000
2af
2b5   B26: #	B58 B27 &lt;- B25  Freq: 62.9167
2b5   	cmpl    RSI, #10
2b8   	je     B58  P=0.001970 C=49752.000000
2b8
2be   B27: #	B118 B28 &lt;- B26  Freq: 62.7928
2be   	movl    R14, [rsp + #80]	# spill
2c3   	movzwl  RBX, [R14 + #20 + RBP &lt;&lt; #1]	# ushort/char
2c9   	cmpl    RSI, #13
2cc   	je     B118  P=0.000000 C=49654.000000
2cc
2d2   B28: #	B54 B29 &lt;- B27  Freq: 62.7928
2d2   	cmpl    RBX, #10
2d5   	je     B54  P=0.001970 C=49752.000000
2d5
2db   B29: #	B116 B30 &lt;- B28  Freq: 62.6691
2db   	cmpl    RBX, #13
2de   	je     B116  P=0.000000 C=49654.000000
2de
2e4   B30: #	B59 B31 &lt;- B29  Freq: 62.6691
2e4   	movzwl  RBX, [R14 + #22 + RBP &lt;&lt; #1]	# ushort/char
2ea   	movl    RSI, R9	# spill
2ed   	addl    RSI, #7	# int
2f0   	cmpl    RBX, #10
2f3   	je     B59  P=0.001970 C=49752.000000
2f3
2f9   B31: #	B120 B32 &lt;- B30  Freq: 62.5456
2f9   	cmpl    RBX, #13
2fc   	je     B120  P=0.000000 C=49654.000000
2fc
302   B32: #	B52 B33 &lt;- B31  Freq: 62.5456
302   	movl    R14, R9	# spill
305   	addl    R14, #4	# int
309   	movl    RBX, R9	# spill
30c   	addl    RBX, #4	# int
30f   	movdl   XMM0, RBX	# spill
313   	cmpl    RDX, #10
316   	je     B52  P=0.001970 C=49752.000000
316
31c   B33: #	B115 B34 &lt;- B32  Freq: 62.4224
31c   	cmpl    RDX, #13
31f   	je     B115  P=0.000000 C=49654.000000
31f
325   B34: #	B57 B35 &lt;- B33  Freq: 62.4224
325   	cmpl    RDI, #10
328   	je     B57  P=0.001970 C=49752.000000
328
32e   B35: #	B119 B36 &lt;- B34  Freq: 62.2994
32e   	movl    RBX, R9	# spill
331   	addl    RBX, #4	# int
334   	cmpl    RDI, #13
337   	je     B119  P=0.000000 C=49654.000000
337
33d   B36: #	B55 B37 &lt;- B35  Freq: 62.2994
33d   	movl    RDI, [rsp + #80]	# spill
341   	movzwl  RBX, [RDI + #28 + RBP &lt;&lt; #1]	# ushort/char
346   	cmpl    RBX, #10
349   	je     B55  P=0.001970 C=49752.000000
349
34f   B37: #	B116 B38 &lt;- B36  Freq: 62.1767
34f   	movl    RCX, R9	# spill
352   	addl    RCX, #8	# int
355   	addl    R9, #4	# int
359   	cmpl    RBX, #13
35c   	je     B116  P=0.000000 C=49654.000000
35c
362   B38: #	B60 B39 &lt;- B37  Freq: 62.1766
362   	movzwl  RBX, [RDI + #30 + RBP &lt;&lt; #1]	# ushort/char
367   	cmpl    RBX, #10
36a   	je     B60  P=0.001970 C=49752.000000
36a
370   B39: #	B121 B40 &lt;- B38  Freq: 62.0542
370   	cmpl    RBX, #13
373   	je     B121  P=0.000000 C=49654.000000
373
379   B40: #	B23 B41 &lt;- B39  Freq: 62.0541
379   	cmpl    RCX, R11
37c   	jl     B23	# loop end  P=0.999879 C=49758.000000
37c
382   B41: #	B48 B42 &lt;- B132 B40  Freq: 0.00748351
382   	incl    RSI	# int
384   	cmpl    RCX, R10
387   	jge,s   B48  P=0.500000 C=-1.000000
387
389   B42: #	B43 &lt;- B41  Freq: 0.00374175
389   	movl    R11, RCX	# spill
38c   	# castII of R11
38c   	movl    [rsp + #24], R11	# spill
      	nop 	# 3 bytes pad for loops and calls

394   B43: #	B130 B44 &lt;- B42 B46 	Loop: B43-B46 inner post of N1511 Freq: 0.00746878
394   	movl    R9, [rsp + #24]	# spill
399   	cmpl    R9, R8	# unsigned
39c   	jnb,u  B130  P=0.000001 C=-1.000000
39c
3a2   B44: #	B128 B45 &lt;- B43  Freq: 0.00746878
3a2   	movl    R11, [rsp + #80]	# spill
3a7   	movzwl  RBX, [R11 + #16 + R9 &lt;&lt; #1]	# ushort/char
3ad   	cmpl    RBX, #10
3b0   	je     B128  P=0.001970 C=49752.000000
3b0
3b6   B45: #	B124 B46 &lt;- B44  Freq: 0.00745407
3b6   	cmpl    RBX, #13
3b9   	je     B124  P=0.000000 C=49654.000000
3b9
3bf   B46: #	B43 B47 &lt;- B45  Freq: 0.00745406
3bf   	movl    R11, [rsp + #24]	# spill
3c4   	incl    R11	# int
3c7   	movl    [rsp + #24], R11	# spill
3cc   	cmpl    R11, R10
3cf   	jl,s   B43	# loop end  P=0.500000 C=49758.000000
3cf
3d1   B47: #	B49 &lt;- B46  Freq: 0.00372703
3d1   	jmp,s   B49
3d1
3d3   B48: #	B49 &lt;- B41  Freq: 0.00374175
3d3   	movl    [rsp + #24], RSI	# spill
3d3
3d7   B49: #	B50 &lt;- B103 B47 B48  Freq: 0.00758917
3d7   	movl    R10, [rsp + #24]	# spill
3dc   	subl    R10, [RSP + #12 (32-bit)]	# int
3e1   	movl    [rsp + #20], R10	# spill
3e1
3e6   B50: #	B97 B51 &lt;- B9 B49  Freq: 0.0077098
3e6   	movq    R10, [rsp + #0]	# spill
3ea   	movl    R11, [rsp + #24]	# spill
3ef   	movl    [R10 + #24 (8-bit)], R11	# int ! Field: java/io/BufferedReader.nextChar
3f3   	movq    RSI, precise klass java/lang/StringBuffer: 0x00007f44c814fb40:Constant:exact *	# ptr
3fd   	movslq  RBP, [RSP + #8 (32-bit)]	# int -&gt; long
402   	salq    RBP, #1
405   	testl   R13, R13
408   	je     B97  P=0.057692 C=104.000000
408
40e   B51: #	B64 &lt;- B50  Freq: 0.007265
40e   	movl    [rsp + #88], RBX	# spill
412   	movq    R9, R10	# spill
415   	movl    R8, [rsp + #20]	# spill
41a   	movl    R10, [rsp + #24]	# spill
41f   	jmp,s   B64
41f
421   B52: #	B53 &lt;- B32  Freq: 0.123199
421   	addl    R9, #4	# int
425
425   B53: #	B56 &lt;- B24 B52  Freq: 0.247375
425   	movl    RCX, R9	# spill
428   	jmp,s   B56
428
42a   B54: #	B55 &lt;- B28  Freq: 0.123686
42a   	movl    RCX, R9	# spill
42a
42d   B55: #	B56 &lt;- B54 B36  Freq: 0.246401
42d   	addl    RCX, #2	# int
430
430   B56: #	B62 &lt;- B53 B55  Freq: 0.493776
430   	movl    R10, RCX	# spill
433   	jmp,s   B62
433
435   B57: #	B58 &lt;- B34  Freq: 0.122957
435   	addl    R9, #4	# int
439
439   B58: #	B61 &lt;- B26 B57  Freq: 0.246887
439   	movl    R10, R9	# spill
43c   	jmp,s   B61
43c
43e   B59: #	B60 &lt;- B30  Freq: 0.123443
43e   	movdl   XMM0, R9	# spill
43e
443   B60: #	B61 &lt;- B59 B38  Freq: 0.245915
443   	movdl   R10, XMM0	# spill
448   	addl    R10, #2	# int
44c
44c   B61: #	B62 &lt;- B58 B60  Freq: 0.492803
44c   	incl    R10	# int
44f
44f   B62: #	B63 &lt;- B128 B88 B56 B61  Freq: 0.990518
44f   	movl    R8, R10	# spill
452   	subl    R8, [RSP + #12 (32-bit)]	# int
457
457   B63: #	B64 &lt;- B93 B62  Freq: 0.992488
457   	movq    R9, [rsp + #0]	# spill
45b   	movl    [R9 + #24 (8-bit)], R10	# int ! Field: java/io/BufferedReader.nextChar
45b
45f   B64: #	B85 B65 &lt;- B63 B51  Freq: 0.999753
45f   	movdq   R11, XMM1	# spill
464   	testq   R11, R11	# ptr
467   	jne     B85  P=0.061224 C=98.000000
467
46d   B65: #	B104 B66 &lt;- B64  Freq: 0.938544
46d   	movl    [rsp + #8], R10	# spill
472   	movl    [rsp + #16], R8	# spill
477   	movq    [rsp + #0], R9	# spill
47b   	# TLS is in R15
47b   	movq    R9, [R15 + #112 (8-bit)]	# ptr
47f   	movq    R11, R9	# spill
482   	addq    R11, #24	# ptr
486   	# TLS is in R15
486   	cmpq    R11, [R15 + #128 (32-bit)]	# raw ptr
48d   	jnb,u  B104  P=0.000100 C=-1.000000
48d
493   B66: #	B67 &lt;- B65  Freq: 0.93845
493   	# TLS is in R15
493   	movq    [R15 + #112 (8-bit)], R11	# ptr
497   	movl    R10, narrowklass: precise klass java/lang/String: 0x00007f44c814d2f0:Constant:exact *	# compressed klass ptr
49d   	decode_klass_not_null R10,R10
4a1   	PREFETCHNTA [R11 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
4a9   	movq    R10, [R10 + #176 (32-bit)]	# ptr
4b0   	movq    [R9], R10	# ptr
4b3   	movl    [R9 + #8 (8-bit)], narrowklass: precise klass java/lang/String: 0x00007f44c814d2f0:Constant:exact *	# compressed klass ptr
4bb   	movl    [R9 + #12 (8-bit)], R12	# int (R12_heapbase==0)
4bf   	movq    [R9 + #16 (8-bit)], R12	# long (R12_heapbase==0)
4bf
4c3   B67: #	B142 B68 &lt;- B105 B66  Freq: 0.938544
4c3   	movslq  R8, [RSP + #16 (32-bit)]	# int -&gt; long
4c8   	
4c8   	movl    R11, [rsp + #80]	# spill
4cd   	decode_heap_oop_not_null R10,R11
4d0   	movq    [rsp + #48], R10	# spill
4d5   	MEMBAR-storestore (empty encoding)
4d5   	# checkcastPP of R9
4d5   	movq    [rsp + #24], R9	# spill
4da   	movl    RSI, #-10	# int
4df   	movl    R10, [rsp + #12]	# spill
4e4   	testl   R10, R10
4e7   	jl     B142  P=0.000000 C=2710.000000
4e7
4ed   B68: #	B89 B69 &lt;- B67  Freq: 0.938543
4ed   	salq    R8, #1
4f0   	addq    R8, #23	# long
4f4   	movq    RDI, R8	# spill
4f7   	shrq    RDI, #3
4fb   	movl    R11, [rsp + #16]	# spill
500   	testl   R11, R11
503   	jle     B89  P=0.004059 C=2710.000000
503
509   B69: #	B152 B70 &lt;- B91 B68  Freq: 0.936639
509   	movq    R10, RDI	# spill
50c   	addq    R10, #-2	# long
510   	movq    [rsp + #56], R10	# spill
515   	movl    R10, [rsp + #80]	# spill
51a   	movl    R9, [R10 + #12 (8-bit)]	# range
51e   	NullCheck R10
51e
51e   B70: #	B143 B71 &lt;- B69  Freq: 0.936638
51e   	movl    R10, R9	# spill
521   	subl    R10, [RSP + #12 (32-bit)]	# int
526   	movl    RBP, R9	# spill
529   	subl    RBP, [RSP + #16 (32-bit)]	# int
52d   	movq    RSI, precise klass [C: 0x00007f44c8173e10:Constant:exact *	# ptr
537   	cmpl    R10, [RSP + #16 (32-bit)]
53c   	movl    RCX, [rsp + #16]	# spill
540   	cmovll RCX, R10	# signed, int
544   	movl    [rsp + #20], RCX	# spill
548   	movslq  R10, RCX	# i2l
54b   	movq    [rsp + #64], R10	# spill
550   	movl    R11, RCX	# spill
553   	addl    R11, [RSP + #12 (32-bit)]	# int
558   	movq    RCX, R10	# spill
55b   	salq    RCX, #1
55e   	addq    RCX, #16	# long
562   	movl    R10, [rsp + #12]	# spill
567   	cmpl    R10, RBP
56a   	jg     B143  P=0.000000 C=2699.000000
56a
570   B71: #	B144 B72 &lt;- B70  Freq: 0.936637
570   	movq    R10, RCX	# spill
573   	shrq    R10, #3
577   	movl    RBX, [rsp + #16]	# spill
57b   	testl   RBX, RBX
57d   	jl     B144  P=0.000000 C=2948.000000
57d
583   B72: #	B106 B73 &lt;- B71  Freq: 0.936637
583   	# TLS is in R15
583   	movq    RBX, [R15 + #112 (8-bit)]	# ptr
587   	andq    R8, #-8	# long
58b   	subq    RDI, R10	# long
58e   	movq    [rsp + #72], RDI	# spill
593   	movl    R10, [rsp + #16]	# spill
598   	cmpl    R10, #524288	# unsigned
59f   	jnbe,u  B106  P=0.000001 C=-1.000000
59f
5a5   B73: #	B106 B74 &lt;- B72  Freq: 0.936636
5a5   	movq    R10, RBX	# spill
5a8   	addq    R10, R8	# ptr
5ab   	# TLS is in R15
5ab   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
5b2   	jnb,u  B106  P=0.000100 C=-1.000000
5b2
5b8   B74: #	B75 &lt;- B73  Freq: 0.936542
5b8   	# TLS is in R15
5b8   	movq    [R15 + #112 (8-bit)], R10	# ptr
5bc   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
5c4   	movq    [RBX], 0x0000000000000001	# ptr
5cb   	PREFETCHNTA [R10 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
5d3   	PREFETCHNTA [R10 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
5db   	movl    [RBX + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f44c8173e10:Constant:exact *	# compressed klass ptr
5e2   	PREFETCHNTA [R10 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
5ea   	movl    RBP, [rsp + #16]	# spill
5ee   	movl    [RBX + #12 (8-bit)], RBP	# int
5ee
5f1   B75: #	B137 B76 &lt;- B107 B74  Freq: 0.936637
5f1   	andq    RCX, #-7	# long
5f5   	movl    R10, [rsp + #12]	# spill
5fa   	movl    R8, [rsp + #80]	# spill
5ff   	leaq    R8, [R8 + #16 + R10 &lt;&lt; #1]	# ptr posidxscaleoffnarrow
604   	
604   	# checkcastPP of RBX
604   	movq    RSI, RBX	# spill
607   	addq    RSI, #16	# ptr
60b   	cmpl    R9, R11	# unsigned
60e   	jb,u  B137  P=0.000001 C=-1.000000
60e
614   B76: #	B137 B77 &lt;- B75  Freq: 0.936636
614   	movl    R11, [rsp + #16]	# spill
619   	cmpl    R11, [RSP + #20 (32-bit)]	# unsigned
61e   	jb,u  B137  P=0.000001 C=-1.000000
61e
624   B77: #	B139 B78 &lt;- B76  Freq: 0.936635
624   	movl    RBP, [rsp + #20]	# spill
628   	testl   RBP, RBP
62a   	jle     B139  P=0.000001 C=-1.000000
62a
630   B78: #	B96 B79 &lt;- B77  Freq: 0.936634
630   	movq    RDI, RBX	# spill
633   	addq    RDI, RCX	# ptr
636   	cmpl    RBP, R11
639   	jl     B96  P=0.001000 C=-1.000000
639
63f   B79: #	B80 &lt;- B78 B96  Freq: 0.936634
63f   	movq    RDI, R8	# spill
642   	movq    RDX, [rsp + #64]	# spill
647   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
654
654   B80: #	B81 &lt;- B79 B140 B138  Freq: 0.936637
654   	encode_heap_oop_not_null R11,RBX
75f   	MEMBAR-storestore (empty encoding)
75f   	movq    RBX, [rsp + #24]	# spill
764   	movl    [RBX + #12 (8-bit)], R11	# compressed ptr ! Field: java/lang/String.value
768   	movq    R10, RBX	# ptr -&gt; long
76b   	shrq    R10, #9
76f   	movq    R11, 0x00007f44cd651000	# ptr
779   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
779
77d   B81: #	B82 &lt;- B92 B80  Freq: 0.938542
77d   	MEMBAR-release ! (empty encoding)
77d
77d   B82: #	B141 B83 &lt;- B87 B81  Freq: 0.999748
77d   	movq    R10, [rsp + #0]	# spill
781   	incl    [R10 + #24 (8-bit)]	# int ! Field: java/io/BufferedReader.nextChar
785   	movl    RSI, #-155	# int
78a   	movl    R11, [rsp + #88]	# spill
78f   	cmpl    R11, #13
793   	je     B141  P=0.000000 C=98.000000
793
799   B83: #	B133 B84 &lt;- B82  Freq: 0.999748
799   	MEMBAR-release (a FastUnlock follows so empty encoding)
799   	movq    R11, [rsp + #32]	# spill
79e   	movq    R10, [rsp + #96]	# spill
7a3   	andq    R10, [R11]	# long
7a6   	cmpq    R10, #5
7aa   	jne     B133  P=0.000001 C=-1.000000
7aa
7b0   B84: #	N2040 &lt;- B134 B133 B83  Freq: 0.999748
7b0   	movq    RAX, RBX	# spill
7b3   	addq    rsp, 144	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

7c1   	ret
7c1
7c2   B85: #	B162 B86 &lt;- B64  Freq: 0.0612094
7c2   	movsd   [rsp + #16], XMM1	# spill
7c8   	movq    [rsp + #0], R9	# spill
7cc   	movdq   RSI, XMM1	# spill
7d1   	movq    RDX, [rsp + #48]	# spill
7d6   	movl    RCX, [rsp + #12]	# spill
7da   	movq    RBP, [rsp + #32]	# spill
7df   	call,static  java.lang.StringBuffer::append
        # java.io.BufferedReader::readLine @ bci:226  L[0]=rsp + #0 L[1]=_ L[2]=rsp + #16 L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #88 L[8]=_ L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop [40]=Oop off=2020}
7e4
7e4   B86: #	B163 B87 &lt;- B85  Freq: 0.0612082
        # Block is sole successor of call
7e4   	movq    RSI, [rsp + #16]	# spill
7e9   	movq    RBP, [rsp + #0]	# spill
      	nop 	# 2 bytes pad for loops and calls
7ef   	call,static  java.lang.StringBuffer::toString
        # java.io.BufferedReader::readLine @ bci:231  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #88 L[8]=_ L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop off=2036}
7f4
7f4   B87: #	B82 &lt;- B86  Freq: 0.0612069
        # Block is sole successor of call
7f4   	movq    RBX, RAX	# spill
7f7   	jmp,s   B82
7f7
7f9   B88: #	B62 &lt;- B17  Freq: 0.00392479
7f9   	movl    R10, RDI	# spill
7fc   	jmp     B62
7fc
801   B89: #	B149 B90 &lt;- B68  Freq: 0.00380956
801   	testl   R11, R11
804   	jl     B149  P=0.000001 C=-1.000000
804
80a   B90: #	B153 B91 &lt;- B89  Freq: 0.00380956
80a   	movl    R11, [rsp + #80]	# spill
80f   	movl    R11, [R11 + #12 (8-bit)]	# range
813   	NullCheck R11
813
813   B91: #	B69 B92 &lt;- B90  Freq: 0.00380956
813   	movl    R10, [rsp + #12]	# spill
818   	cmpl    R10, R11
81b   	jg     B69  P=0.500000 C=-1.000000
81b
821   B92: #	B81 &lt;- B91  Freq: 0.00190478
821   	movq    RBX, R9	# spill
824   	movl    [R9 + #12 (8-bit)], narrowoop: char[int:0]&lt;ciTypeArray length=0 type=&lt;ciTypeArrayKlass name=[C ident=807 address=0x00007f44c8173e10&gt; ident=836 SCAVENGABLE address=0x00007f449408d2b0&gt; *	# compressed ptr ! Field: java/lang/String.value
82c   	movq    R10, R9	# ptr -&gt; long
82f   	shrq    R10, #9
833   	movq    R11, 0x00007f44cd651000	# ptr
83d   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
841   	jmp     B81
841
846   B93: #	B63 &lt;- B12  Freq: 0.00197038
846   	movl    R8, RBP	# spill
849   	movl    R10, [rsp + #24]	# spill
84e   	jmp     B63
84e
853   B94: #	B4 &lt;- B1  Freq: 0.000999987
853   	xorl    R10, R10	# ptr
856   	jmp     B4
856
85b   B95: #	B7 &lt;- B4  Freq: 0.000999986
85b   	xorl    RBP, RBP	# ptr
85d   	jmp     B7
85d
862   B96: #	B79 &lt;- B78  Freq: 0.000936634
862   	movq    RCX, [rsp + #72]	# spill
867   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
871   	jmp     B79
871
876   B97: #	B108 B98 &lt;- B50  Freq: 0.000444796
876   	movdq   R10, XMM1	# spill
87b   	testq   R10, R10	# ptr
87e   	je     B108  P=0.100000 C=-1.000000
87e
884   B98: #	B99 &lt;- B97  Freq: 0.000400316
884   	movsd   [rsp + #56], XMM1	# spill
884
88a   B99: #	B161 B100 &lt;- B113 B98  Freq: 0.000444796
88a   	movq    RSI, [rsp + #56]	# spill
88f   	movq    RDX, [rsp + #48]	# spill
894   	movl    RCX, [rsp + #12]	# spill
898   	movl    R8, [rsp + #20]	# spill
89d   	movq    RBP, [rsp + #0]	# spill
      	nop 	# 2 bytes pad for loops and calls
8a3   	call,static  java.lang.StringBuffer::append
        # java.io.BufferedReader::readLine @ bci:289  L[0]=RBP L[1]=_ L[2]=rsp + #56 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop [56]=Oop off=2216}
8a8
8a8   B100: #	B125 B101 &lt;- B99  Freq: 0.000444787
        # Block is sole successor of call
8a8   	movq    R10, RBP	# spill
8ab   	movl    R11, [R10 + #20 (8-bit)]	# int ! Field: java/io/BufferedReader.nChars
8af   	movl    R10, [R10 + #24 (8-bit)]	# int ! Field: java/io/BufferedReader.nextChar
8b3   	movl    [rsp + #24], R10	# spill
8b8   	cmpl    R10, R11
8bb   	jge     B125  P=0.057692 C=6.000000
8bb
8c1   B101: #	B150 B102 &lt;- B126 B100  Freq: 0.000444787
8c1   	movl    R10, [rsp + #16]	# spill
8c6   	testl   R10, R10
8c9   	jne     B150  P=0.000000 C=104.000000
8c9
8cf   B102: #	B9 &lt;- B101  Freq: 0.000444786
8cf   	movq    R10, [rsp + #0]	# spill
8d3   	movb    [R10 + #36 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/io/BufferedReader.skipLF
8d7   	movsd   XMM1, [rsp + #56]	# spill
8dd   	xorl    R13, R13	# int
8e0   	xorl    RBX, RBX	# int
8e2   	xorl    R11, R11	# int
8e5   	movl    [rsp + #16], R11	# spill
8ea   	jmp     B9
8ea
8ef   B103: #	B49 &lt;- B14  Freq: 0.000120381
8ef   	movl    [rsp + #24], RDI	# spill
8f3   	jmp     B49
8f3
8f8   B104: #	B158 B105 &lt;- B65  Freq: 9.387e-05
8f8   	movq    RSI, precise klass java/lang/String: 0x00007f44c814d2f0:Constant:exact *	# ptr
902   	movq    RBP, [rsp + #0]	# spill
      	nop 	# 1 bytes pad for loops and calls
907   	call,static  wrapper for: _new_instance_Java
        # java.io.BufferedReader::readLine @ bci:195  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #88 L[8]=rsp + #8 L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop [80]=NarrowOop off=2316}
90c
90c   B105: #	B67 &lt;- B104  Freq: 9.38681e-05
        # Block is sole successor of call
90c   	movq    R9, RAX	# spill
90f   	jmp     B67
90f
914   B106: #	B159 B107 &lt;- B72 B73  Freq: 9.46282e-05
914   	movq    [rsp + #112], RCX	# spill
919   	movl    [rsp + #108], R11	# spill
91e   	movl    [rsp + #104], R9	# spill
923   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #80]
	movl    [rsp + #92], rax
	movq    rax, [rsp - #8]
935   	movl    RDX, [rsp + #16]	# spill
939   	movq    RBP, [rsp + #0]	# spill
      	nop 	# 2 bytes pad for loops and calls
93f   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOfRange @ bci:40  L[0]=rsp + #48 L[1]=rsp + #12 L[2]=_ L[3]=rsp + #16 L[4]=_
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # java.io.BufferedReader::readLine @ bci:208  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #88 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #24 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop [92]=NarrowOop off=2372}
944
944   B107: #	B75 &lt;- B106  Freq: 9.46263e-05
        # Block is sole successor of call
944   	movq    RBX, RAX	# spill
947   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #92]
	movl    [rsp + #80], rax
	movq    rax, [rsp - #8]
959   	movl    R9, [rsp + #104]	# spill
95e   	movl    R11, [rsp + #108]	# spill
963   	movq    RCX, [rsp + #112]	# spill
968   	jmp     B75
968
96d   B108: #	B145 B109 &lt;- B97  Freq: 4.44796e-05
96d   	# TLS is in R15
96d   	movq    R10, [R15 + #112 (8-bit)]	# ptr
971   	movq    R11, R10	# spill
974   	addq    R11, #24	# ptr
978   	# TLS is in R15
978   	cmpq    R11, [R15 + #128 (32-bit)]	# raw ptr
97f   	jnb,u  B145  P=0.000100 C=-1.000000
97f
985   B109: #	B110 &lt;- B108  Freq: 4.44752e-05
985   	# TLS is in R15
985   	movq    [R15 + #112 (8-bit)], R11	# ptr
989   	PREFETCHNTA [R11 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
991   	movl    R8, narrowklass: precise klass java/lang/StringBuffer: 0x00007f44c814fb40:Constant:exact *	# compressed klass ptr
997   	decode_klass_not_null R11,R8
9a5   	movq    R11, [R11 + #176 (32-bit)]	# ptr
9ac   	movq    [R10], R11	# ptr
9af   	movl    [R10 + #8 (8-bit)], narrowklass: precise klass java/lang/StringBuffer: 0x00007f44c814fb40:Constant:exact *	# compressed klass ptr
9b7   	movl    [R10 + #12 (8-bit)], R12	# int (R12_heapbase==0)
9bb   	movq    [R10 + #16 (8-bit)], R12	# long (R12_heapbase==0)
9bb
9bf   B110: #	B147 B111 &lt;- B146 B109  Freq: 4.44796e-05
9bf   	addq    RBP, #23	# long
9c3   	
9c3   	movq    RCX, RBP	# spill
9c6   	shrq    RCX, #3
9ca   	MEMBAR-storestore (empty encoding)
9ca   	# checkcastPP of R10
9ca   	movq    [rsp + #56], R10	# spill
9cf   	addq    RCX, #-2	# long
9d3   	movl    R10, [rsp + #8]	# spill
9d8   	cmpl    R10, #524288	# unsigned
9df   	jnbe,u  B147  P=0.000001 C=-1.000000
9df
9e5   B111: #	B147 B112 &lt;- B110  Freq: 4.44796e-05
9e5   	andq    RBP, #-8	# long
9e9   	# TLS is in R15
9e9   	movq    R10, [R15 + #112 (8-bit)]	# ptr
9ed   	movq    R11, R10	# spill
9f0   	movq    R8, R10	# spill
9f3   	addq    R8, RBP	# ptr
9f6   	# TLS is in R15
9f6   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
9fd   	jnb,u  B147  P=0.000100 C=-1.000000
9fd
a03   B112: #	B113 &lt;- B111  Freq: 4.44751e-05
a03   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
a0b   	# TLS is in R15
a0b   	movq    [R15 + #112 (8-bit)], R8	# ptr
a0f   	PREFETCHNTA [R8 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
a17   	movq    [R10], 0x0000000000000001	# ptr
a1e   	PREFETCHNTA [R8 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
a26   	movq    RDI, R10	# spill
a29   	addq    RDI, #16	# ptr
a2d   	movl    [R10 + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f44c8173e10:Constant:exact *	# compressed klass ptr
a35   	PREFETCHNTA [R8 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
a3d   	movl    R10, [rsp + #8]	# spill
a42   	movl    [R11 + #12 (8-bit)], R10	# int
a46   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
a50
a50   B113: #	B99 &lt;- B148 B112  Freq: 4.44796e-05
a50   	
a50   	MEMBAR-storestore (empty encoding)
a50   	movq    R10, R11	# spill
a53   	# checkcastPP of R10
a53   	movq    R11, [rsp + #56]	# spill
a58   	movq    R11, R11	# ptr -&gt; long
a58   	encode_heap_oop_not_null R10,R10
b60   	shrq    R11, #9
b64   	movq    R8, [rsp + #56]	# spill
b69   	movl    [R8 + #16 (8-bit)], R10	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
b6d   	movq    R10, 0x00007f44cd651000	# ptr
b77   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
b7b   	jmp     B99
b7b
b80   B114: #	B115 &lt;- B25  Freq: 3.00011e-05
b80   	movl    R14, R9	# spill
b83   	movl    RDX, RBX	# spill
b83
b85   B115: #	B117 &lt;- B114 B33  Freq: 5.97664e-05
b85   	movl    R9, R14	# spill
b88   	movl    RBX, RDX	# spill
b8a   	jmp,s   B117
b8a
b8c   B116: #	B117 &lt;- B29 B37  Freq: 5.95311e-05
b8c   	addl    R9, #2	# int
b90
b90   B117: #	B123 &lt;- B115 B116  Freq: 0.000119297
b90   	movl    RAX, R9	# spill
b93   	jmp,s   B123
b93
b95   B118: #	B119 &lt;- B27  Freq: 2.99419e-05
b95   	movl    RBX, R9	# spill
b98   	movl    RDI, RSI	# spill
b98
b9a   B119: #	B122 &lt;- B118 B35  Freq: 5.96486e-05
b9a   	movl    RAX, RBX	# spill
b9c   	movl    RBX, RDI	# spill
b9e   	jmp,s   B122
b9e
ba0   B120: #	B121 &lt;- B31  Freq: 2.98241e-05
ba0   	movl    RAX, R9	# spill
ba0
ba3   B121: #	B122 &lt;- B120 B39  Freq: 5.94138e-05
ba3   	addl    RAX, #2	# int
ba6
ba6   B122: #	B123 &lt;- B119 B121  Freq: 0.000119062
ba6   	incl    RAX	# int
ba8
ba8   B123: #	B124 &lt;- B136 B117 B122  Freq: 0.000239308
ba8   	movl    [rsp + #24], RAX	# spill
ba8
bac   B124: #	N2040 &lt;- B13 B45 B123  Freq: 0.000239788
bac   	movq    RBP, [rsp + #0]	# spill
bb0   	movsd   [rsp + #0], XMM1	# spill
bb5   	movl    R10, [rsp + #16]	# spill
bba   	movl    [rsp + #8], R10	# spill
bbf   	movl    [rsp + #12], R13	# spill
bc4   	movl    R11, [rsp + #24]	# spill
bc9   	movl    [rsp + #20], R11	# spill
bce   	movl    [rsp + #24], RBX	# spill
bd2   	movl    RSI, #-155	# int
bd7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedReader::readLine @ bci:160  L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #12 L[7]=rsp + #24 L[8]=rsp + #20 L[9]=_ L[10]=_ STK[0]=rsp + #24 STK[1]=#13 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop off=3036}
bdc   	int3	# ShouldNotReachHere
bdc
be1   B125: #	B157 B126 &lt;- B100  Freq: 2.56608e-05
be1   	movq    RSI, RBP	# spill
      	nop 	# 3 bytes pad for loops and calls
be7   	call,static  java.io.BufferedReader::fill
        # java.io.BufferedReader::readLine @ bci:44  L[0]=RBP L[1]=_ L[2]=rsp + #56 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop [56]=Oop off=3052}
bec
bec   B126: #	B101 B127 &lt;- B125  Freq: 2.56603e-05
        # Block is sole successor of call
bec   	movq    R10, RBP	# spill
bef   	movl    R11, [R10 + #24 (8-bit)]	# int ! Field: java/io/BufferedReader.nextChar
bf3   	movl    [rsp + #24], R11	# spill
bf8   	movl    RBP, [R10 + #20 (8-bit)]	# int ! Field: java/io/BufferedReader.nChars
bfc   	cmpl    R11, RBP
bff   	jl     B101  P=1.000000 C=104.000000
bff
c05   B127: #	N2040 &lt;- B126  Freq: 1.22358e-11
c05   	movl    [rsp + #20], R11	# spill
c0a   	movl    RSI, #-155	# int
c0f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedReader::readLine @ bci:55  L[0]=rsp + #0 L[1]=_ L[2]=rsp + #56 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #20 STK[1]=RBP MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{[0]=Oop [32]=Oop [40]=Oop [56]=Oop off=3092}
c14   	int3	# ShouldNotReachHere
c14
c19   B128: #	B62 &lt;- B44  Freq: 1.47117e-05
c19   	movl    R10, [rsp + #24]	# spill
c1e   	jmp     B62
c1e
c23   B129: #	B130 &lt;- B16  Freq: 2.01899e-06
c23   	movl    [rsp + #24], RDI	# spill
c23
c27   B130: #	N2040 &lt;- B11 B43 B129  Freq: 3.04016e-06
c27   	movl    RSI, #-28	# int
c2c   	movq    RBP, [rsp + #0]	# spill
c30   	movsd   [rsp + #0], XMM1	# spill
c35   	movl    R10, [rsp + #16]	# spill
c3a   	movl    [rsp + #8], R10	# spill
c3f   	movl    [rsp + #12], R13	# spill
      	nop 	# 3 bytes pad for loops and calls
c47   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.io.BufferedReader::readLine @ bci:146  L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #12 L[7]=_ L[8]=rsp + #24 L[9]=_ L[10]=_ STK[0]=rsp + #80 STK[1]=rsp + #24 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop [80]=NarrowOop off=3148}
c4c   	int3	# ShouldNotReachHere
c4c
c51   B131: #	N2040 &lt;- B7  Freq: 1.01328e-06
c51   	movl    RSI, #-122	# int
c56   	movq    [rsp + #0], R10	# spill
c5a   	movl    R10, [rsp + #16]	# spill
c5f   	movl    [rsp + #8], R10	# spill
c64   	movl    [rsp + #12], R13	# spill
c69   	movl    [rsp + #16], RBX	# spill
c6d   	movl    R11, [rsp + #24]	# spill
c72   	movl    [rsp + #20], R11	# spill
c77   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedReader::readLine @ bci:131  L[0]=rsp + #0 L[1]=_ L[2]=RBP L[3]=_ L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #12 L[7]=rsp + #16 L[8]=rsp + #20 L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop off=3196}
c7c   	int3	# ShouldNotReachHere
c7c
c81   B132: #	B41 &lt;- B21  Freq: 1.0075e-06
c81   	movl    RSI, RDI	# spill
c83   	movl    RCX, R9	# spill
c86   	jmp     B41
c86
c8b   B133: #	B84 B134 &lt;- B83  Freq: 9.99748e-07
c8b   	leaq    RAX, [rsp + #128]	# box lock
c93   	fastunlock R11,RAX	! kills RAX,R10
d14   	je     B84  P=0.999999 C=-1.000000
d14
d1a   B134: #	B84 &lt;- B133  Freq: 9.99748e-13
d1a   	movq    RDI, R11	# spill
d1d   	leaq    RSI, [rsp + #128]	# box lock
d25   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
d32   	jmp     B84
d32
d37   B135: #	N2040 &lt;- B2 B5  Freq: 1.998e-06
d37   	movl    R11, [rsp + #16]	# spill
d3c   	movl    [rsp + #0], R11	# spill
d40   	movl    [rsp + #4], R13	# spill
d45   	movl    [rsp + #8], RBX	# spill
d49   	movl    R10, [rsp + #24]	# spill
d4e   	movl    [rsp + #12], R10	# spill
d53   	movl    RSI, #-99	# int
d58   	movq    [rsp + #16], R14	# spill
      	nop 	# 2 bytes pad for loops and calls
d5f   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedReader::readLine @ bci:131  L[0]=rsp + #16 L[1]=_ L[2]=RBP L[3]=_ L[4]=rsp + #40 L[5]=rsp + #0 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=rsp + #12 L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [16]=Oop [32]=Oop [40]=Oop off=3428}
d64   	int3	# ShouldNotReachHere
d64
d69   B136: #	B123 &lt;- B18  Freq: 9.48239e-07
d69   	movl    RAX, RDI	# spill
d6b   	jmp     B123
d6b
d70   B137: #	B156 B138 &lt;- B139 B75 B76  Freq: 1.87327e-06
d70   	movq    RBP, RBX	# spill
d73   	movq    RCX, [rsp + #56]	# spill
d78   	movq    RDI, RSI	# spill
d7b   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
d85   	movq    RSI, [rsp + #48]	# spill
d8a   	movl    RDX, R10	# spill
d8d   	movq    RCX, RBX	# spill
d90   	xorl    R8, R8	# int
d93   	movl    R9, [rsp + #20]	# spill
      	nop 	# 3 bytes pad for loops and calls
d9b   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOfRange @ bci:57  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=RBP
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # java.io.BufferedReader::readLine @ bci:208  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #88 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #24 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [32]=Oop [40]=Oop off=3488}
da0
da0   B138: #	B80 &lt;- B137  Freq: 1.87324e-06
        # Block is sole successor of call
da0   	movq    RBX, RBP	# spill
da3   	jmp     B80
da3
da8   B139: #	B137 B140 &lt;- B77  Freq: 9.36635e-07
da8   	testl   RBP, RBP
daa   	jl,s   B137  P=0.000001 C=-1.000000
daa
dac   B140: #	B80 &lt;- B139  Freq: 9.36634e-07
dac   	movq    RCX, [rsp + #56]	# spill
db1   	movq    RDI, RSI	# spill
db4   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
dbe   	
dbe   	jmp     B80
dbe
dc3   B141: #	N2040 &lt;- B82  Freq: 4.76717e-07
dc3   	movq    RBP, [rsp + #0]	# spill
dc7   	movq    [rsp + #8], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
dcf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedReader::readLine @ bci:250  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #8 L[10]=_ STK[0]=rsp + #88 STK[1]=#13 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [8]=Oop [32]=Oop [40]=Oop off=3540}
dd4   	int3	# ShouldNotReachHere
dd4
dd9   B142: #	N2040 &lt;- B67  Freq: 4.47533e-07
dd9   	movq    RBP, [rsp + #0]	# spill
ddd   	movl    R10, [rsp + #16]	# spill
de2   	movl    [rsp + #8], R10	# spill
de7   	movl    RSI, #-155	# int
dec   	movq    R10, [rsp + #40]	# spill
df1   	movq    [rsp + #16], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
df7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:5  L[0]=rsp + #24 L[1]=rsp + #80 L[2]=rsp + #12 L[3]=rsp + #8 STK[0]=rsp + #12
        # java.io.BufferedReader::readLine @ bci:208  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #16 L[5]=_ L[6]=_ L[7]=rsp + #88 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #24 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [16]=Oop [24]=Oop [32]=Oop [80]=NarrowOop off=3580}
dfc   	int3	# ShouldNotReachHere
dfc
e01   B143: #	N2040 &lt;- B70  Freq: 4.46624e-07
e01   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
e07   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:55  L[0]=rsp + #24 L[1]=rsp + #80 L[2]=rsp + #12 L[3]=rsp + #16 STK[0]=rsp + #12 STK[1]=RBP
        # java.io.BufferedReader::readLine @ bci:208  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #88 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #24 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{[0]=Oop [24]=Oop [32]=Oop [40]=Oop [80]=NarrowOop off=3596}
e0c   	int3	# ShouldNotReachHere
e0c
e11   B144: #	N2040 &lt;- B71  Freq: 4.46623e-07
e11   	movq    RBP, [rsp + #0]	# spill
e15   	movl    R10, [rsp + #12]	# spill
e1a   	movl    [rsp + #4], R10	# spill
e1f   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
e27   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.Arrays::copyOfRange @ bci:5  L[0]=rsp + #80 L[1]=rsp + #4 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ STK[0]=rsp + #16
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # java.io.BufferedReader::readLine @ bci:208  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #88 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #24 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [24]=Oop [32]=Oop [40]=Oop [80]=NarrowOop off=3628}
e2c   	int3	# ShouldNotReachHere
e2c
e31   B145: #	B154 B146 &lt;- B108  Freq: 4.4487e-09
      	nop 	# 2 bytes pad for loops and calls
e33   	call,static  wrapper for: _new_instance_Java
        # java.io.BufferedReader::readLine @ bci:268  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=rsp + #24 L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{[0]=Oop [32]=Oop [40]=Oop [48]=Oop off=3640}
e38
e38   B146: #	B110 &lt;- B145  Freq: 4.44861e-09
        # Block is sole successor of call
e38   	movq    R10, RAX	# spill
e3b   	jmp     B110
e3b
e40   B147: #	B155 B148 &lt;- B110 B111  Freq: 4.49376e-09
e40   	movl    RBP, [rsp + #24]	# spill
e44   	movq    RSI, precise klass [C: 0x00007f44c8173e10:Constant:exact *	# ptr
e4e   	movl    RDX, [rsp + #8]	# spill
      	nop 	# 1 bytes pad for loops and calls
e53   	call,static  wrapper for: _new_array_Java
        # java.lang.AbstractStringBuilder::&lt;init&gt; @ bci:6  L[0]=_ L[1]=_ STK[0]=rsp + #56
        # java.lang.StringBuffer::&lt;init&gt; @ bci:2  L[0]=_ L[1]=_
        # java.io.BufferedReader::readLine @ bci:275  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=RBP L[9]=_ L[10]=_ STK[0]=rsp + #56 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{[0]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop off=3672}
e58
e58   B148: #	B113 &lt;- B147  Freq: 4.49367e-09
        # Block is sole successor of call
e58   	movq    R11, RAX	# spill
e5b   	jmp     B113
e5b
e60   B149: #	N2040 &lt;- B89  Freq: 3.80956e-09
e60   	movq    RBP, [rsp + #0]	# spill
e64   	movl    [rsp + #0], R11	# spill
e68   	movl    RSI, #6	# int
e6d   	movq    [rsp + #16], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
e73   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;6&apos;)
        # java.lang.String::&lt;init&gt; @ bci:25  L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #0
        # java.io.BufferedReader::readLine @ bci:208  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #88 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #16 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [16]=Oop [32]=Oop [40]=Oop off=3704}
e78   	int3	# ShouldNotReachHere
e78
e7d   B150: #	N2040 &lt;- B101  Freq: 2.12091e-10
e7d   	movq    RBP, [rsp + #0]	# spill
e81   	movl    R10, [rsp + #16]	# spill
e86   	movl    [rsp + #8], R10	# spill
e8b   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
e93   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedReader::readLine @ bci:90  L[0]=RBP L[1]=_ L[2]=rsp + #56 L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=#0 L[7]=#0 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #8 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [32]=Oop [40]=Oop [56]=Oop off=3736}
e98   	int3	# ShouldNotReachHere
e98
e9d   B151: #	N2040 &lt;- B10  Freq: 1.0136e-06
e9d   	movq    RBP, [rsp + #0]	# spill
ea1   	movsd   [rsp + #0], XMM1	# spill
ea6   	movl    R10, [rsp + #16]	# spill
eab   	movl    [rsp + #8], R10	# spill
eb0   	movl    [rsp + #12], R13	# spill
eb5   	movl    R11, [rsp + #24]	# spill
eba   	movl    [rsp + #20], R11	# spill
ebf   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
ec7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedReader::readLine @ bci:146  L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #12 L[7]=_ L[8]=rsp + #20 L[9]=_ L[10]=_ STK[0]=#NULL STK[1]=rsp + #20 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop off=3788}
ecc   	int3	# ShouldNotReachHere
ecc
ed1   B152: #	N2040 &lt;- B69  Freq: 9.49076e-07
ed1   	movq    RBP, [rsp + #0]	# spill
ed5   	movq    R10, [rsp + #24]	# spill
eda   	movq    [rsp + #16], R10	# spill
edf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:52  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.io.BufferedReader::readLine @ bci:208  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #88 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #16 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [16]=Oop [32]=Oop [40]=Oop off=3812}
ee4   	int3	# ShouldNotReachHere
ee4
ee9   B153: #	N2040 &lt;- B90  Freq: 3.86015e-09
ee9   	movq    RBP, [rsp + #0]	# spill
eed   	movq    [rsp + #16], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
ef3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.io.BufferedReader::readLine @ bci:208  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #88 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #16 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [16]=Oop [32]=Oop [40]=Oop off=3832}
ef8   	int3	# ShouldNotReachHere
ef8
efd   B154: #	B164 &lt;- B145  Freq: 4.4487e-14
efd   	# exception oop is in rax; no code emitted
efd   	movq    RBX, RAX	# spill
f00   	jmp,s   B164
f00
f02   B155: #	B164 &lt;- B147  Freq: 4.49376e-14
f02   	# exception oop is in rax; no code emitted
f02   	movq    RBX, RAX	# spill
f05   	jmp,s   B164
f05
f07   B156: #	B160 &lt;- B137  Freq: 1.87327e-11
f07   	# exception oop is in rax; no code emitted
f07   	jmp,s   B160
f07
f09   B157: #	B164 &lt;- B125  Freq: 2.56608e-10
f09   	# exception oop is in rax; no code emitted
f09   	movq    RBX, RAX	# spill
f0c   	jmp,s   B164
f0c
f0e   B158: #	B164 &lt;- B104  Freq: 9.387e-10
f0e   	# exception oop is in rax; no code emitted
f0e   	movq    RBX, RAX	# spill
f11   	jmp,s   B164
f11
f13   B159: #	B160 &lt;- B106  Freq: 9.46282e-10
f13   	# exception oop is in rax; no code emitted
f13
f13   B160: #	B164 &lt;- B159 B156  Freq: 9.65015e-10
f13   	movq    RBX, RAX	# spill
f16   	jmp,s   B164
f16
f18   B161: #	B164 &lt;- B99  Freq: 4.44796e-09
f18   	# exception oop is in rax; no code emitted
f18   	movq    RBX, RAX	# spill
f1b   	jmp,s   B164
f1b
f1d   B162: #	B164 &lt;- B85  Freq: 6.12094e-07
f1d   	# exception oop is in rax; no code emitted
f1d   	movq    RBX, RAX	# spill
f20   	jmp,s   B164
f20
f22   B163: #	B164 &lt;- B86  Freq: 6.12082e-07
f22   	# exception oop is in rax; no code emitted
f22   	movq    RBX, RAX	# spill
f22
f25   B164: #	B166 B165 &lt;- B158 B160 B162 B163 B154 B155 B161 B157  Freq: 1.23078e-06
f25   	MEMBAR-release (a FastUnlock follows so empty encoding)
f25   	movq    R11, [rsp + #32]	# spill
f2a   	movq    R10, [rsp + #96]	# spill
f2f   	andq    R10, [R11]	# long
f32   	cmpq    R10, #5
f36   	jne,s   B166  P=0.000001 C=-1.000000
f36
f38   B165: #	N2040 &lt;- B167 B166 B164  Freq: 1.23078e-06
f38   	movq    RSI, RBX	# spill
f3b   	addq    rsp, 144	# Destroy frame
	popq   rbp

f43   	jmp     rethrow_stub
f43
f48   B166: #	B165 B167 &lt;- B164  Freq: 1.23078e-12
f48   	leaq    RAX, [rsp + #128]	# box lock
f50   	fastunlock R11,RAX	! kills RAX,R10
fd1   	je     B165  P=0.999999 C=-1.000000
fd1
fd7   B167: #	B165 &lt;- B166  Freq: 1.23078e-18
fd7   	movq    RDI, R11	# spill
fda   	leaq    RSI, [rsp + #128]	# box lock
fe2   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
fef   	jmp     B165
fef

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933087573760'/>
<opto_assembly compile_id='126'>
{method}
 - this oop:          0x00007f44cd094ab8
 - method holder:     &apos;java/util/regex/Pattern$BnM&apos;
 - constants:         0x00007f44cd094248 constant pool [116] {0x00007f44cd094248} for &apos;java/util/regex/Pattern$BnM&apos; cache=0x00007f44cd094c28
 - access:            0xc1000000  
 - name:              &apos;match&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z&apos;
 - max stack:         6
 - max locals:        9
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      8
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c8127b88: 0xbbab0000 i2c: 0x00007f44b915ace0 c2i: 0x00007f44b915ae25 c2iUV: 0x00007f44b915adf8
 - compiled entry     0x00007f44b9262640
 - code size:         161
 - code start:        0x00007f44cd094980
 - code end (excl):   0x00007f44cd094a21
 - method data:       0x00007f44cd0ac178
 - checked ex length: 0
 - linenumber start:  0x00007f44cd094a21
 - localvar length:   10
 - localvar start:    0x00007f44cd094a3e
 - compiled code: nmethod   1584  107       3       java.util.regex.Pattern$BnM::match (161 bytes)
#
#  bool ( java/util/regex/Pattern$BnM:NotNull *, java/util/regex/Matcher:exact *, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$BnM:NotNull *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/CharSequence *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N831: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B60 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (296 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movdq   XMM0, R8	# spill
031   	movq    R11, RSI	# spill
034   	movl    RBX, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.buffer
037   	movl    RSI, #-10	# int
03c   	movl    R10, [RBX + #12 (8-bit)]	# range
040   	NullCheck RBX
040
040   B2: #	B61 B3 &lt;- B1  Freq: 0.999999
040   	movl    R8, [RDX + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
044   	NullCheck RDX
044
044   B3: #	B12 &lt;- B2  Freq: 0.999998
044   	movdl   XMM10, RBX	# spill
048   	movdq   XMM2, RDX	# spill
04d   	movdq   XMM1, R11	# spill
052   	movl    R11, [RDX + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
056   	movdl   XMM4, R11	# spill
05b   	movl    [rsp + #24], R10	# spill
060   	subl    R8, R10	# int
063   	movl    [rsp + #8], R8	# spill
068   	movl    R11, [RDX + #24 (8-bit)]	# int ! Field: java/util/regex/Matcher.acceptMode
06c   	movdl   XMM5, R11	# spill
071   	decl    R10	# int
074   	movdq   R11, XMM1	# spill
079   	movl    R11, [R11 + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
07d   	movdl   XMM3, R11	# spill
082   	movl    R13, [rsp + #24]	# spill
087   	addl    R13, #-2	# int
08b   	movdq   R11, XMM1	# spill
090   	movl    R11, [R11 + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
094   	movdl   XMM6, R11	# spill
099   	decode_heap_oop_not_null R11,RBX
09c   	movdq   XMM9, R11	# spill
0a1   	xorl    R11, R11	# int
0a4   	movdl   XMM11, R11	# spill
0a9   	jmp,s   B12
      	nop 	# 5 bytes pad for loops and calls

0b0   B4: #	B29 &lt;- B30  top-of-loop Freq: 5.89975
0b0   	movl    R10, RDI	# spill
0b3   	jmp     B29
0b3
0b8   B5: #	B7 &lt;- B24  Freq: 4.13673
0b8   	movl    R10, RDI	# spill
0bb   	jmp,s   B7
0bb
0bd   B6: #	B7 &lt;- B29  Freq: 3.40367
0bd   	movdl   XMM10, RBX	# spill
0bd
0c1   B7: #	B58 B8 &lt;- B37 B5 B6  Freq: 7.75564
0c1   	andl    RAX, #127	# int
0c4   	movdl   R11, XMM3	# spill
0c9   	movl    R11, [R11 + #12 (8-bit)]	# range
0cd   	NullCheck R11
0cd
0cd   B8: #	B48 B9 &lt;- B7  Freq: 7.75564
0cd   	cmpl    RAX, R11	# unsigned
0d0   	jnb,u  B48  P=0.000001 C=-1.000000
0d0
0d6   B9: #	B59 B10 &lt;- B8  Freq: 7.75563
0d6   	movdl   R11, XMM6	# spill
0db   	movl    R8, [R11 + #12 (8-bit)]	# range
0df   	NullCheck R11
0df
0df   B10: #	B49 B11 &lt;- B9  Freq: 7.75562
0df   	movl    RBP, R10	# spill
0e2   	movdl   R11, XMM3	# spill
0e7   	subl    RBP, [R11 + #16 + RAX &lt;&lt; #2]	# int
0ec   	incl    RBP	# int
0ee   	cmpl    R10, R8	# unsigned
0f1   	jnb,u  B49  P=0.000001 C=-1.000000
0f1
0f7   B11: #	B12 &lt;- B10  Freq: 7.75561
0f7   	movdl   R10, XMM6	# spill
0fc   	movl    R11, [R10 + #16 + RDX]	# int
101   	cmpl    RBP, R11
104   	cmovll RBP, R11	# signed, int
108   	addl    RCX, RBP	# int
10a   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$BnM::match @ bci:87  L[0]=XMM1 L[1]=XMM2 L[2]=RCX L[3]=XMM8 L[4]=XMM9 L[5]=rsp + #24 L[6]=rsp + #8 L[7]=_ L[8]=_
        # OopMap{xmm0=Oop xmm1=Oop xmm2=Oop xmm3=NarrowOop xmm4=NarrowOop xmm6=NarrowOop xmm8=Oop xmm9=Oop xmm10=NarrowOop off=266}
110   	movdl   R10, XMM12	# spill
110
115   B12: #	B46 B13 &lt;- B3 B11 	Loop: B12-B11  Freq: 8.75561
115   	movl    R9, RCX	# spill
118   	incl    R9	# int
11b   	movl    R8, R9	# spill
11e   	sarl    R8, #31
122   	cmpl    RCX, [RSP + #8 (32-bit)]
126   	jg     B46  P=0.014254 C=40901.000000
126
12c   B13: #	B39 B14 &lt;- B12  Freq: 8.63081
12c   	andl    R8, R9	# int
12f   	movl    R11, RCX	# spill
132   	addl    R11, [RSP + #24 (32-bit)]	# int
137   	movdl   XMM7, R11	# spill
13c   	movl    R11, #-2147483647	# int
142   	subl    R11, R8	# int
145   	testl   R10, R10
148   	jl     B39  P=0.072722 C=101840.000000
148
14e   B14: #	B47 B15 &lt;- B13  Freq: 8.00316
14e   	movdl   RBX, XMM7	# spill
152   	decl    RBX	# int
154   	movdq   R8, XMM0	# spill
159   	movl    R9, [R8 + #8 (8-bit)]	# compressed klass ptr
15d   	NullCheck R8
15d
15d   B15: #	B47 B16 &lt;- B14  Freq: 8.00315
15d   	movl    R8, #-1	# int
163   	subl    R8, RCX	# int
166   	cmpl    R9, narrowklass: precise klass java/lang/String: 0x00007f44c814d2f0:Constant:exact *	# compressed klass ptr
16d   	jne,u  B47  P=0.000001 C=-1.000000
16d
173   B16: #	B47 B17 &lt;- B15  Freq: 8.00315
173   	movdq   R9, XMM0	# spill
178   	# checkcastPP of R9
178   	movdq   XMM8, R9	# spill
17d   	movl    R14, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
181   	movl    RDX, RCX	# spill
183   	negl    RDX	# int
185   	movl    RDI, RDX	# spill
187   	sarl    RDI, #31
18a   	movl    R9, [R14 + #12 (8-bit)]	# range
18e   	NullCheck R14
18e
18e   B17: #	B47 B18 &lt;- B16  Freq: 8.00314
18e   	cmpl    RCX, R9	# unsigned
191   	jnb,u  B47  P=0.000001 C=-1.000000
191
197   B18: #	B47 B19 &lt;- B17  Freq: 8.00313
197   	andl    RDI, RDX	# int
199   	addl    RDI, #2147483647	# int
19f   	cmpl    RBX, R9	# unsigned
1a2   	jnb,u  B47  P=0.000001 C=-1.000000
1a2
1a8   B19: #	B47 B20 &lt;- B18  Freq: 8.00312
1a8   	movl    RBX, [rsp + #24]	# spill
1ac   	testl  RBX, RBX	# unsigned
1ae   	jbe,u  B47  P=0.000001 C=-1.000000
1ae
1b4   B20: #	B47 B21 &lt;- B19  Freq: 8.00311
1b4   	movl    RBX, R9	# spill
1b7   	subl    RBX, RCX	# int
1b9   	cmpl    R11, R8
1bc   	cmovllt R11, R8	# max
1c0   	decl    RBX	# int
1c2   	cmpl    RDI, RBX
1c4   	cmovlgt RDI, RBX	# min
1c7   	cmpl    R13, RDI
1ca   	movl    R8, R13	# spill
1cd   	cmovlgt R8, RDI	# min
1d1   	cmpl    R10, [RSP + #24 (32-bit)]	# unsigned
1d6   	jnb,u  B47  P=0.000001 C=-1.000000
1d6
1dc   B21: #	B22 &lt;- B20  Freq: 8.0031
1dc   	movl    RDI, #-1	# int
1e1   	cmpl    R8, RDI
1e4   	movl    RBX, #-1	# int
1e9   	cmovllt R8, RBX	# max
1ed   	cmpl    R11, RDI
1f0   	cmovllt R11, RBX	# max
1f4   	movl    RDI, R10	# spill
1f4
1f7   B22: #	B51 B23 &lt;- B21 B26 	Loop: B22-B26 inner pre of N675 Freq: 11.8695
1f7   	movl    RBX, RDI	# spill
1f9   	addl    RBX, RCX	# int
1fb   	movslq  RDX, RDI	# i2l
1fe   	movzwl  RAX, [R14 + #16 + RBX &lt;&lt; #1]	# ushort/char
204   	salq    RDX, #2
208   	movdl   RSI, XMM10	# spill
20c   	movl    RBP, [RSI + #16 + RDX]	# int
210   	testl   RBX, RBX
212   	jl     B51  P=0.000000 C=5670.000000
212
218   B23: #	B53 B24 &lt;- B22  Freq: 11.8695
218   	movdl   XMM12, R10	# spill
21d   	movl    R10, RDI	# spill
220   	decl    R10	# int
223   	cmpl    RBX, R9
226   	jge     B53  P=0.000000 C=5670.000000
226
22c   B24: #	B5 B25 &lt;- B23  Freq: 11.8695
22c   	cmpl    RAX, RBP
22e   	jne     B5  P=0.348519 C=94434.000000
22e
234   B25: #	B27 B26 &lt;- B24  Freq: 7.73273
234   	cmpl    R10, R8
237   	jle,s   B27	# loop end  P=0.500000 C=61522.000000
237
239   B26: #	B22 &lt;- B25  Freq: 3.86637
239   	movl    RDI, R10	# spill
23c   	movdl   R10, XMM12	# spill
241   	jmp,s   B22
241
243   B27: #	B54 B28 &lt;- B25  Freq: 3.86637
243   	cmpl    R10, R11
246   	jle     B54  P=0.000001 C=-1.000000
246
24c   B28: #	B29 &lt;- B27  Freq: 3.86636
24c   	# castII of R10
24c   	movdl   RBX, XMM10	# spill
24c
250   B29: #	B6 B30 &lt;- B28 B4 	Loop: B29-B4 inner main of N150 Freq: 9.76612
250   	movl    R8, R10	# spill
253   	addl    R8, RCX	# int
256   	movl    RDI, R10	# spill
259   	decl    RDI	# int
25b   	movslq  RDX, R10	# i2l
25e   	movzwl  RAX, [R14 + #16 + R8 &lt;&lt; #1]	# ushort/char
264   	salq    RDX, #2
268   	movl    RSI, [RBX + #16 + RDX]	# int
26c   	cmpl    RAX, RSI
26e   	jne     B6  P=0.348519 C=94434.000000
26e
274   B30: #	B4 B31 &lt;- B29  Freq: 6.36244
274   	cmpl    RDI, R11
277   	jg     B4	# loop end  P=0.927278 C=61522.000000
277
27d   B31: #	B32 &lt;- B30  Freq: 0.462689
27d   	movdl   XMM10, RBX	# spill
27d
281   B32: #	B39 B33 &lt;- B54 B31  Freq: 0.462693
281   	cmpl    RDI, #-1
284   	jle,s   B39  P=0.100000 C=-1.000000
284
286   B33: #	B34 &lt;- B32  Freq: 0.416424
286   	# castII of RDI
286
286   B34: #	B50 B35 &lt;- B33 B38 	Loop: B34-B38 inner post of N675 Freq: 0.617601
286   	movl    RBX, RDI	# spill
288   	addl    RBX, RCX	# int
28a   	movslq  RDX, RDI	# i2l
28d   	salq    RDX, #2
291   	testl   RBX, RBX
293   	jl     B50  P=0.000000 C=5670.000000
293
299   B35: #	B52 B36 &lt;- B34  Freq: 0.617601
299   	movdl   R10, XMM10	# spill
29e   	movl    R11, [R10 + #16 + RDX]	# int
2a3   	cmpl    RBX, R9
2a6   	jge     B52  P=0.000000 C=5670.000000
2a6
2ac   B36: #	B38 B37 &lt;- B35  Freq: 0.617601
2ac   	movzwl  RAX, [R14 + #16 + RBX &lt;&lt; #1]	# ushort/char
2b2   	cmpl    RAX, R11
2b5   	je,s   B38  P=0.651481 C=94434.000000
2b5
2b7   B37: #	B7 &lt;- B36  Freq: 0.215245
2b7   	movl    R10, RDI	# spill
2ba   	jmp     B7
2ba
2bf   B38: #	B34 B39 &lt;- B36  Freq: 0.402355
2bf   	decl    RDI	# int
2c1   	cmpl    RDI, #-1
2c4   	jg,s   B34	# loop end  P=0.500000 C=61522.000000
2c4
2c6   B39: #	B62 B40 &lt;- B32 B13 B38  Freq: 0.875096
2c6   	movdq   R10, XMM2	# spill
2cb   	movl    [R10 + #28 (8-bit)], RCX	# int ! Field: java/util/regex/Matcher.first
2cf   	movdq   R8, XMM1	# spill
2d4   	movl    RBP, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
2d8   	movl    R9, [RBP + #8 (8-bit)]	# compressed klass ptr
2dc   	NullCheck RBP
2dc
2dc   B40: #	B55 B41 &lt;- B39  Freq: 0.875095
2dc   	movl    RSI, #-34	# int
2e1   	cmpl    R9, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f448c0ed4b0:Constant:exact *	# compressed klass ptr
2e8   	jne,u  B55  P=0.000001 C=-1.000000
2e8
2ee   B41: #	B57 B42 &lt;- B40  Freq: 0.875094
2ee   	movl    RSI, #-10	# int
2f3   	movdl   R11, XMM5	# spill
2f8   	cmpl    R11, #1
2fc   	je     B57  P=0.000000 C=7712.000000
2fc
302   B42: #	B63 B43 &lt;- B41  Freq: 0.875094
302   	movdl   R9, XMM7	# spill
307   	movl    [R10 + #32 (8-bit)], R9	# int ! Field: java/util/regex/Matcher.last
30b   	movdl   R11, XMM4	# spill
310   	movl    RDI, [R11 + #12 (8-bit)]	# range
314   	NullCheck R11
314
314   B43: #	B56 B44 &lt;- B42  Freq: 0.875093
314   	cmpl    RDI, #1	# unsigned
317   	jbe,u  B56  P=0.000001 C=-1.000000
317
31d   B44: #	B45 &lt;- B43  Freq: 0.875092
31d   	movl    [R11 + #16 (8-bit)], RCX	# int
321   	movl    [R11 + #20 (8-bit)], R9	# int
325   	movl    [R11 + #16 (8-bit)], RCX	# int
329   	movl    [R11 + #20 (8-bit)], R9	# int
32d   	movl    RAX, #1	# int
32d
332   B45: #	N831 &lt;- B44 B46  Freq: 0.999894
332   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

33d   	ret
33d
33e   B46: #	B45 &lt;- B12  Freq: 0.124802
33e   	movdq   R10, XMM2	# spill
343   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
348   	movdl   RAX, XMM11	# spill
34c   	jmp,s   B45
34c
34e   B47: #	N831 &lt;- B20 B14 B15 B16 B17 B18 B19  Freq: 5.65533e-05
34e   	movl    RBP, RCX	# spill
350   	movss   [rsp + #0], XMM10	# spill
355   	movl    R11, [rsp + #8]	# spill
35a   	movl    [rsp + #4], R11	# spill
35f   	movl    [rsp + #8], R10	# spill
364   	movsd   [rsp + #16], XMM1	# spill
36a   	movsd   [rsp + #32], XMM2	# spill
370   	movsd   [rsp + #40], XMM0	# spill
376   	movl    RSI, #-122	# int
37b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:37  L[0]=rsp + #16 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #40 L[4]=rsp + #0 L[5]=rsp + #24 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # OopMap{[0]=NarrowOop [16]=Oop [32]=Oop [40]=Oop off=896}
380   	int3	# ShouldNotReachHere
380
385   B48: #	N831 &lt;- B8  Freq: 7.85862e-06
385   	movl    RBP, R10	# spill
388   	incl    RBP	# int
38a   	movss   [rsp + #0], XMM10	# spill
38f   	movl    R8, [rsp + #8]	# spill
394   	movl    [rsp + #4], R8	# spill
399   	movl    [rsp + #8], R10	# spill
39e   	movl    [rsp + #12], RCX	# spill
3a2   	movl    [rsp + #16], RAX	# spill
3a6   	movsd   [rsp + #32], XMM1	# spill
3ac   	movsd   [rsp + #40], XMM2	# spill
3b2   	movsd   [rsp + #48], XMM8	# spill
3b8   	movl    R10, [rsp + #24]	# spill
3bd   	movl    [rsp + #20], R10	# spill
3c2   	movss   [rsp + #24], XMM3	# spill
3c8   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
3cf   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_ STK[0]=rsp + #12 STK[1]=RBP STK[2]=rsp + #24 STK[3]=rsp + #16
        # OopMap{[0]=NarrowOop [24]=NarrowOop [32]=Oop [40]=Oop [48]=Oop off=980}
3d4   	int3	# ShouldNotReachHere
3d4
3d9   B49: #	N831 &lt;- B10  Freq: 7.85861e-06
3d9   	movss   [rsp + #0], XMM10	# spill
3de   	movl    R8, [rsp + #8]	# spill
3e3   	movl    [rsp + #4], R8	# spill
3e8   	movl    [rsp + #8], RCX	# spill
3ec   	movl    [rsp + #12], R10	# spill
3f1   	movsd   [rsp + #16], XMM1	# spill
3f7   	movsd   [rsp + #32], XMM2	# spill
3fd   	movsd   [rsp + #40], XMM8	# spill
403   	movss   [rsp + #28], XMM6	# spill
409   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
40f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=rsp + #16 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #0 L[5]=rsp + #24 L[6]=rsp + #4 L[7]=_ L[8]=_ STK[0]=rsp + #8 STK[1]=RBP STK[2]=rsp + #28 STK[3]=rsp + #12
        # OopMap{[0]=NarrowOop [16]=Oop [28]=NarrowOop [32]=Oop [40]=Oop off=1044}
414   	int3	# ShouldNotReachHere
414
419   B50: #	B51 &lt;- B34  Freq: 3.08801e-07
419   	movdl   RSI, XMM10	# spill
419
41d   B51: #	N831 &lt;- B50 B22  Freq: 6.24354e-06
41d   	movl    RBP, RCX	# spill
41f   	movl    [rsp + #0], RSI	# spill
422   	movl    R11, [rsp + #8]	# spill
427   	movl    [rsp + #4], R11	# spill
42c   	movl    [rsp + #8], RDI	# spill
430   	movl    [rsp + #16], RBX	# spill
434   	movsd   [rsp + #32], XMM1	# spill
43a   	movsd   [rsp + #40], XMM2	# spill
440   	movl    R10, [rsp + #24]	# spill
445   	movl    [rsp + #20], R10	# spill
44a   	movsd   [rsp + #24], XMM8	# spill
450   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
457   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #24 L[1]=rsp + #16 STK[0]=rsp + #16
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=RBP L[3]=rsp + #24 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=1116}
45c   	int3	# ShouldNotReachHere
45c
461   B52: #	B53 &lt;- B35  Freq: 2.94495e-07
461   	movdl   RSI, XMM10	# spill
461
465   B53: #	N831 &lt;- B52 B23  Freq: 5.9543e-06
465   	movl    RBP, RCX	# spill
467   	movl    [rsp + #0], RSI	# spill
46a   	movl    R10, [rsp + #8]	# spill
46f   	movl    [rsp + #4], R10	# spill
474   	movl    [rsp + #8], RDI	# spill
478   	movl    [rsp + #16], RBX	# spill
47c   	movl    [rsp + #20], R9	# spill
481   	movsd   [rsp + #32], XMM1	# spill
487   	movsd   [rsp + #40], XMM2	# spill
48d   	movsd   [rsp + #56], XMM8	# spill
493   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
49b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #56 L[1]=rsp + #16 STK[0]=rsp + #16 STK[1]=rsp + #20
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=RBP L[3]=rsp + #56 L[4]=rsp + #0 L[5]=rsp + #24 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # OopMap{[0]=NarrowOop [32]=Oop [40]=Oop [56]=Oop off=1184}
4a0   	int3	# ShouldNotReachHere
4a0
4a5   B54: #	B32 &lt;- B27  Freq: 3.91771e-06
4a5   	movl    RDI, R10	# spill
4a8   	jmp     B32
4a8
4ad   B55: #	N831 &lt;- B40  Freq: 8.75095e-07
4ad   	movl    [rsp + #0], RCX	# spill
4b0   	movss   [rsp + #4], XMM10	# spill
4b6   	movq    [rsp + #16], R8	# spill
4bb   	movl    R8, [rsp + #24]	# spill
4c0   	movl    [rsp + #12], R8	# spill
4c5   	movq    [rsp + #24], R10	# spill
4ca   	movss   [rsp + #48], XMM7	# spill
4d0   	movsd   [rsp + #56], XMM0	# spill
      	nop 	# 1 bytes pad for loops and calls
4d7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=rsp + #0 L[3]=rsp + #56 L[4]=rsp + #4 L[5]=rsp + #12 L[6]=rsp + #8 L[7]=_ L[8]=_ STK[0]=RBP STK[1]=rsp + #24 STK[2]=rsp + #48 STK[3]=rsp + #56
        # OopMap{rbp=NarrowOop [4]=NarrowOop [16]=Oop [24]=Oop [56]=Oop off=1244}
4dc   	int3	# ShouldNotReachHere
4dc
4e1   B56: #	N831 &lt;- B43  Freq: 8.75093e-07
4e1   	movl    RSI, #-28	# int
4e6   	movss   [rsp + #0], XMM10	# spill
4eb   	movl    RBX, [rsp + #8]	# spill
4ef   	movl    [rsp + #4], RBX	# spill
4f3   	movl    [rsp + #8], RCX	# spill
4f7   	movq    [rsp + #16], R8	# spill
4fc   	movsd   [rsp + #40], XMM0	# spill
502   	movl    R9, [rsp + #24]	# spill
507   	movl    [rsp + #12], R9	# spill
50c   	movq    [rsp + #24], R10	# spill
511   	movl    [rsp + #48], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
517   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_ STK[0]=rsp + #48 STK[1]=#0 STK[2]=rsp + #8
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=rsp + #8 L[3]=rsp + #40 L[4]=rsp + #0 L[5]=rsp + #12 L[6]=rsp + #4 L[7]=_ L[8]=_
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop [40]=Oop [48]=NarrowOop off=1308}
51c   	int3	# ShouldNotReachHere
51c
521   B57: #	N831 &lt;- B41  Freq: 4.17278e-07
521   	movl    RSI, #-155	# int
526   	movl    RBP, RCX	# spill
528   	movss   [rsp + #0], XMM10	# spill
52d   	movl    R9, [rsp + #8]	# spill
532   	movl    [rsp + #4], R9	# spill
537   	movq    [rsp + #8], R8	# spill
53c   	movsd   [rsp + #32], XMM0	# spill
542   	movq    [rsp + #40], R10	# spill
547   	movss   [rsp + #28], XMM7	# spill
54d   	movl    [rsp + #48], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
553   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:5  L[0]=_ L[1]=rsp + #40 L[2]=rsp + #28 L[3]=_ STK[0]=rsp + #48 STK[1]=#1
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #8 L[1]=rsp + #40 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #0 L[5]=rsp + #24 L[6]=rsp + #4 L[7]=_ L[8]=_
        # OopMap{[0]=NarrowOop [8]=Oop [32]=Oop [40]=Oop off=1368}
558   	int3	# ShouldNotReachHere
558
55d   B58: #	N831 &lt;- B7  Freq: 7.85863e-06
55d   	movl    RSI, #-10	# int
562   	movl    RBP, RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
567   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # OopMap{off=1388}
56c   	int3	# ShouldNotReachHere
56c
571   B59: #	N831 &lt;- B9  Freq: 7.85861e-06
571   	movl    RBP, R10	# spill
574   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
57b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # OopMap{off=1408}
580   	int3	# ShouldNotReachHere
580
585   B60: #	N831 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
587   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # OopMap{off=1420}
58c   	int3	# ShouldNotReachHere
58c
591   B61: #	N831 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
593   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:12  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # OopMap{off=1432}
598   	int3	# ShouldNotReachHere
598
59d   B62: #	N831 &lt;- B39  Freq: 8.86717e-07
59d   	movq    RBP, R10	# spill
5a0   	movss   [rsp + #0], XMM7	# spill
5a5   	movsd   [rsp + #8], XMM0	# spill
5ab   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
5b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=1464}
5b8   	int3	# ShouldNotReachHere
5b8
5bd   B63: #	N831 &lt;- B42  Freq: 8.86714e-07
5bd   	movl    RBP, RCX	# spill
5bf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap{off=1476}
5c4   	int3	# ShouldNotReachHere
5c4

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933088626432'/>
<opto_assembly compile_id='191' compile_kind='osr'>
{method}
 - this oop:          0x00007f44cd0a5c48
 - method holder:     &apos;java/util/regex/Matcher&apos;
 - constants:         0x00007f44cd0a25b8 constant pool [380] {0x00007f44cd0a25b8} for &apos;java/util/regex/Matcher&apos; cache=0x00007f44cd0a6178
 - access:            0xc1000000  
 - name:              &apos;search&apos;
 - signature:         &apos;(I)Z&apos;
 - max stack:         5
 - max locals:        3
 - size of params:    2
 - method size:       12
 - highest level:     4
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b91469dd
 - code size:         109
 - code start:        0x00007f44cd0a5b90
 - code end (excl):   0x00007f44cd0a5bfd
 - method data:       0x00007f44cd0abbb0
 - checked ex length: 0
 - linenumber start:  0x00007f44cd0a5bfd
 - localvar length:   4
 - localvar start:    0x00007f44cd0a5c16
#
#  bool ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1108: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B75 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (400 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01c   	xorl    R10, R10	# int
01f   	movl    R13, [RSI]	# int
022   	movq    RBP, [RSI + #16 (8-bit)]	# ptr
026   	movl    RBX, #-2147483648	# int
02b   	movl    R14, R13	# spill
02e   	incl    R14	# int
031   	movl    R11, [RSI + #8 (8-bit)]	# int
035   	movl    [rsp + #48], R11	# spill
03a   	cmpl    R14, R10
03d   	cmovllt R14, R10	# max
041   	movq    RDI, RSI	# spill
044   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
051   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
055   	NullCheck RBP
055
055   B2: #	B70 B3 &lt;- B1  Freq: 0.999999
055   	cmpl    R10, narrowklass: precise klass java/util/regex/Matcher: 0x00007f4494063010:Constant:exact *	# compressed klass ptr
05c   	jne,u  B70  P=0.000001 C=-1.000000
05c
062   B3: #	B76 B4 &lt;- B2  Freq: 0.999998
062   	# checkcastPP of RBP
062   	movl    RSI, #-28	# int
067   	movl    R10, [RBP + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
06b   	movl    R8, R10	# compressed ptr -&gt; int
06e   	shrl    R8, #2
072   	movl    R9, [R10 + #12 (8-bit)]	# range
076   	NullCheck R10
076
076   B4: #	B60 B5 &lt;- B3  Freq: 0.999997
076   	andl    R8, #3	# int
07a   	cmpl    R14, R9
07d   	cmovlgt R14, R9	# min
081   	# MachConstantBaseNode (empty encoding)
081   	addl    R8, R14	# int
084   	negl    R8	# int
087   	andl    R8, #3	# int
08b   	movl    R11, [RBP + #48 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.parentPattern
08f   	cmpl    R13, R9
092   	jge     B60  P=0.047619 C=173040.000000
092
098   B5: #	B6 &lt;- B4  Freq: 0.952378
098   	movl    RDX, R9	# spill
09b   	addl    RDX, #-3	# int
09e   	addl    R8, R14	# int
0a1   	cmpl    R8, R9
0a4   	cmovlgt R8, R9	# min
0a8   	cmpl    R9, RDX
0ab   	cmovll RDX, RBX	# signed, int
0ae   	movl    RBX, #1	# int
0ae
0b3   B6: #	B68 B7 &lt;- B5 B8 	Loop: B6-B8 inner pre of N1098 Freq: 1.90475
0b3   	movl    RCX, R13	# spill
0b6   	incl    RCX	# int
0b8   	cmpl    R13, R9	# unsigned
0bb   	jnb,u  B68  P=0.000001 C=-1.000000
0bb
0c1   B7: #	B9 B8 &lt;- B6  Freq: 1.90475
0c1   	movl    [R10 + #16 + R13 &lt;&lt; #2], #-1	# int
0ca   	cmpl    RCX, R8
0cd   	jge,s   B9	# loop end  P=0.500000 C=173040.000000
0cd
0cf   B8: #	B6 &lt;- B7  Freq: 0.952376
0cf   	movl    R13, RCX	# spill
0d2   	jmp,s   B6
0d2
0d4   B9: #	B12 B10 &lt;- B7  Freq: 0.952376
0d4   	cmpl    RCX, RDX
0d6   	jge,s   B12  P=0.000001 C=-1.000000
0d6
0d8   B10: #	B11 &lt;- B9  Freq: 0.952375
0d8   	movq    XMM0,[constant table base + #0]	! replicate4I(#-1)
	punpcklqdq XMM0,XMM0
0e4   	# castII of RCX
      	nop 	# 12 bytes pad for loops and calls

0f0   B11: #	B11 B12 &lt;- B10 B11 	Loop: B11-B11 inner main of N218 Freq: 19.9999
0f0   	movdqu  [R10 + #16 + RCX &lt;&lt; #2],XMM0	! store vector (16 bytes)
0f7   	addl    RCX, #4	# int
0fa   	cmpl    RCX, RDX
0fc   	jl,s   B11	# loop end  P=0.952381 C=173040.000000
0fc
0fe   B12: #	B17 B13 &lt;- B9 B11  Freq: 0.952376
0fe   	cmpl    RCX, R9
101   	jge,s   B17  P=0.500000 C=-1.000000
101
103   B13: #	B14 &lt;- B12  Freq: 0.476188
103   	# castII of RCX
      	nop 	# 1 bytes pad for loops and calls

104   B14: #	B69 B15 &lt;- B13 B16 	Loop: B14-B16 inner post of N1098 Freq: 0.952375
104   	movl    R8, RCX	# spill
107   	incl    R8	# int
10a   	cmpl    RCX, R9	# unsigned
10d   	jnb,u  B69  P=0.000001 C=-1.000000
10d
113   B15: #	B17 B16 &lt;- B14  Freq: 0.952374
113   	movl    [R10 + #16 + RCX &lt;&lt; #2], #-1	# int
11c   	cmpl    R8, R9
11f   	jge,s   B17	# loop end  P=0.500000 C=173040.000000
11f
121   B16: #	B14 &lt;- B15  Freq: 0.476187
121   	movl    RCX, R8	# spill
124   	jmp,s   B14
124
126   B17: #	B78 B18 &lt;- B60 B15 B12  Freq: 0.999994
126   	movl    RCX, [RBP + #56 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.text
129   	movl    [RBP + #24 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/util/regex/Matcher.acceptMode
12d   	decode_heap_oop R8,RCX
1b8   	movl    RDI, [R11 + #44 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern.root
1bc   	NullCheck R11
1bc
1bc   B18: #	B79 B19 &lt;- B17  Freq: 0.999993
1bc   	movl    R11, [RDI + #8 (8-bit)]	# compressed klass ptr
1c0   	NullCheck RDI
1c0
1c0   B19: #	B61 B20 &lt;- B18  Freq: 0.999992
1c0   	decode_heap_oop_not_null RDI,RDI
1c0   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$BnM: 0x00007f4494063580:Constant:exact *	# compressed klass ptr
1c7   	jne,u  B61  P=0.016254 C=-1.000000
1c7
1cd   B20: #	B80 B21 &lt;- B19  Freq: 0.983738
1cd   	# checkcastPP of RDI
1cd   	movl    RSI, #-10	# int
1d2   	movl    R14, [RDI + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.buffer
1d6   	movl    R8, [RBP + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
1da   	movl    R11, [R14 + #12 (8-bit)]	# range
1de   	NullCheck R14
1de
1de   B21: #	B27 &lt;- B20  Freq: 0.983737
1de   	movdq   XMM5, RDI	# spill
1e3   	movdl   XMM4, RCX	# spill
1e7   	movdl   XMM1, R9	# spill
1ec   	movdl   XMM3, R10	# spill
1f1   	movdl   XMM2, RBX	# spill
1f5   	movdq   XMM0, RBP	# spill
1fa   	movl    R10, R11	# spill
1fd   	addl    R10, #-2	# int
201   	movdl   XMM7, R10	# spill
206   	movl    RDI, R11	# spill
209   	decl    RDI	# int
20b   	decode_heap_oop_not_null R10,RCX
20e   	movdq   XMM6, R10	# spill
213   	movdq   R10, XMM5	# spill
218   	movl    R10, [R10 + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
21c   	movdl   XMM8, R10	# spill
221   	movdq   R10, XMM5	# spill
226   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
22a   	movdl   XMM10, R10	# spill
22f   	subl    R8, R11	# int
232   	movl    [rsp + #36], R8	# spill
237   	decode_heap_oop_not_null R10,R14
23a   	movdq   XMM9, R10	# spill
23f   	movdq   R10, XMM5	# spill
244   	movl    R10, [R10 + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
248   	movdl   XMM11, R10	# spill
24d   	jmp,s   B27
24d
24f   B22: #	B73 B23 &lt;- B49 B39 B43  Freq: 7.62953
24f   	andl    R13, #127	# int
253   	movdl   RCX, XMM11	# spill
257   	movl    R9, [RCX + #12 (8-bit)]	# range
25b   	NullCheck RCX
25b
25b   B23: #	B64 B24 &lt;- B22  Freq: 7.62952
25b   	movl    R10, RDX	# spill
25e   	incl    R10	# int
261   	cmpl    R13, R9	# unsigned
264   	jnb,u  B64  P=0.000001 C=-1.000000
264
26a   B24: #	B74 B25 &lt;- B23  Freq: 7.62951
26a   	movl    R10, RDX	# spill
26d   	subl    R10, [RCX + #16 + R13 &lt;&lt; #2]	# int
272   	incl    R10	# int
275   	movdl   R8, XMM8	# spill
27a   	movl    R9, [R8 + #12 (8-bit)]	# range
27e   	NullCheck R8
27e
27e   B25: #	B65 B26 &lt;- B24  Freq: 7.62951
27e   	cmpl    RDX, R9	# unsigned
281   	jnb,u  B65  P=0.000001 C=-1.000000
281
287   B26: #	B27 &lt;- B25  Freq: 7.6295
287   	movl    R9, [R8 + #16 + RAX]	# int
28c   	cmpl    R10, R9
28f   	cmovll R10, R9	# signed, int
293   	movl    R9, [rsp + #48]	# spill
298   	addl    R9, R10	# int
29b   	movl    [rsp + #48], R9	# spill
2a0   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$BnM::match @ bci:87  L[0]=XMM5 L[1]=XMM0 L[2]=R9 L[3]=RBP L[4]=XMM9 L[5]=R11 L[6]=rsp + #36 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=XMM0 L[1]=_ L[2]=_
        # OopMap{rbp=Oop r14=NarrowOop xmm0=Oop xmm3=NarrowOop xmm4=NarrowOop xmm5=Oop xmm6=Oop xmm8=NarrowOop xmm9=Oop xmm10=NarrowOop xmm11=NarrowOop off=672}
2a6
2a6   B27: #	B58 B28 &lt;- B21 B26 	Loop: B27-B26  Freq: 8.61324
2a6   	movl    RBX, [rsp + #48]	# spill
2aa   	addl    RBX, R11	# int
2ad   	movl    R8, [rsp + #48]	# spill
2b2   	negl    R8	# int
2b5   	movl    R9, [rsp + #48]	# spill
2ba   	incl    R9	# int
2bd   	movl    RCX, R9	# spill
2c0   	sarl    RCX, #31
2c3   	andl    RCX, R9	# int
2c6   	movl    R9, [rsp + #48]	# spill
2cb   	cmpl    R9, [RSP + #36 (32-bit)]
2d0   	jg     B58  P=0.014254 C=40901.000000
2d0
2d6   B28: #	B52 B29 &lt;- B27  Freq: 8.49047
2d6   	movl    RSI, R8	# spill
2d9   	sarl    RSI, #31
2dc   	movl    R10, #-2147483647	# int
2e2   	subl    R10, RCX	# int
2e5   	andl    RSI, R8	# int
2e8   	movl    R8, #-1	# int
2ee   	subl    R8, [RSP + #48 (32-bit)]	# int
2f3   	testl   RDI, RDI
2f5   	jl     B52  P=0.072722 C=101840.000000
2f5
2fb   B29: #	B63 B30 &lt;- B28  Freq: 7.87302
2fb   	movdl   R9, XMM4	# spill
300   	movl    R9, [R9 + #8 (8-bit)]	# compressed klass ptr
304   	NullCheck R9
304
304   B30: #	B63 B31 &lt;- B29  Freq: 7.87301
304   	cmpl    R9, narrowklass: precise klass java/lang/String: 0x00007f44c814d2f0:Constant:exact *	# compressed klass ptr
30b   	jne,u  B63  P=0.000001 C=-1.000000
30b
311   B31: #	B63 B32 &lt;- B30  Freq: 7.87301
311   	movdq   RBP, XMM6	# spill
316   	# checkcastPP of RBP
316   	cmpl    R10, R8
319   	cmovllt R10, R8	# max
31d   	movl    R8, [RBP + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
321   	movl    RAX, RBX	# spill
323   	decl    RAX	# int
325   	movl    R9, [R8 + #12 (8-bit)]	# range
329   	NullCheck R8
329
329   B32: #	B63 B33 &lt;- B31  Freq: 7.873
329   	movl    RCX, R9	# spill
32c   	subl    RCX, [RSP + #48 (32-bit)]	# int
330   	movl    RDX, [rsp + #48]	# spill
334   	cmpl    RDX, R9	# unsigned
337   	jnb,u  B63  P=0.000001 C=-1.000000
337
33d   B33: #	B63 B34 &lt;- B32  Freq: 7.87299
33d   	movl    RDX, #-1	# int
342   	cmpl    R10, RDX
345   	movl    R13, #-1	# int
34b   	cmovllt R10, R13	# max
34f   	decl    RCX	# int
351   	cmpl    RAX, R9	# unsigned
354   	jnb,u  B63  P=0.000001 C=-1.000000
354
35a   B34: #	B63 B35 &lt;- B33  Freq: 7.87298
35a   	addl    RSI, #2147483647	# int
360   	testl  R11, R11	# unsigned
363   	jbe,u  B63  P=0.000001 C=-1.000000
363
369   B35: #	B63 B36 &lt;- B34  Freq: 7.87297
369   	cmpl    RSI, RCX
36b   	cmovlgt RSI, RCX	# min
36e   	cmpl    RDI, R11	# unsigned
371   	jnb,u  B63  P=0.000001 C=-1.000000
371
377   B36: #	B37 &lt;- B35  Freq: 7.87297
377   	movdl   RCX, XMM7	# spill
37b   	cmpl    RCX, RSI
37d   	cmovlgt RCX, RSI	# min
380   	cmpl    RCX, RDX
382   	movl    RSI, #-1	# int
387   	cmovllt RCX, RSI	# max
38a   	movl    RDX, RDI	# spill
38a
38c   B37: #	B66 B38 &lt;- B36 B40 	Loop: B37-B40 inner pre of N955 Freq: 11.6765
38c   	movslq  RAX, RDX	# i2l
38f   	movl    RSI, RDX	# spill
391   	addl    RSI, [RSP + #48 (32-bit)]	# int
395   	salq    RAX, #2
399   	testl   RSI, RSI
39b   	jl     B66  P=0.000000 C=5670.000000
39b
3a1   B38: #	B67 B39 &lt;- B37  Freq: 11.6765
3a1   	cmpl    RSI, R9
3a4   	jge     B67  P=0.000000 C=5670.000000
3a4
3aa   B39: #	B22 B40 &lt;- B38  Freq: 11.6764
3aa   	movzwl  R13, [R8 + #16 + RSI &lt;&lt; #1]	# ushort/char
3b0   	movl    RSI, [R14 + #16 + RAX]	# int
3b5   	cmpl    R13, RSI
3b8   	jne     B22  P=0.348519 C=94434.000000
3b8
3be   B40: #	B37 B41 &lt;- B39  Freq: 7.60699
3be   	decl    RDX	# int
3c0   	cmpl    RDX, RCX
3c2   	jg,s   B37	# loop end  P=0.500000 C=61522.000000
3c2
3c4   B41: #	B45 B42 &lt;- B40  Freq: 3.80349
3c4   	cmpl    RDX, R10
3c7   	jle,s   B45  P=0.000001 C=-1.000000
3c7
3c9   B42: #	B43 &lt;- B41  Freq: 3.80349
3c9   	# castII of RDX
      	nop 	# 7 bytes pad for loops and calls

3d0   B43: #	B22 B44 &lt;- B42 B44 	Loop: B43-B44 inner main of N275 Freq: 9.60731
3d0   	movslq  RAX, RDX	# i2l
3d3   	movl    RCX, RDX	# spill
3d5   	addl    RCX, [RSP + #48 (32-bit)]	# int
3d9   	salq    RAX, #2
3dd   	movzwl  R13, [R8 + #16 + RCX &lt;&lt; #1]	# ushort/char
3e3   	movl    RSI, [R14 + #16 + RAX]	# int
3e8   	cmpl    R13, RSI
3eb   	jne     B22  P=0.348519 C=94434.000000
3eb
3f1   B44: #	B43 B45 &lt;- B43  Freq: 6.25898
3f1   	decl    RDX	# int
3f3   	cmpl    RDX, R10
3f6   	jg,s   B43	# loop end  P=0.927278 C=61522.000000
3f6
3f8   B45: #	B52 B46 &lt;- B41 B44  Freq: 0.455169
3f8   	cmpl    RDX, #-1
3fb   	jle,s   B52  P=0.100000 C=-1.000000
3fb
3fd   B46: #	B47 &lt;- B45  Freq: 0.409652
3fd   	# castII of RDX
3fd
3fd   B47: #	B66 B48 &lt;- B46 B51 	Loop: B47-B51 inner post of N955 Freq: 0.607558
3fd   	movl    RSI, RDX	# spill
3ff   	addl    RSI, [RSP + #48 (32-bit)]	# int
403   	movslq  RAX, RDX	# i2l
406   	testl   RSI, RSI
408   	jl     B66  P=0.000000 C=5670.000000
408
40e   B48: #	B67 B49 &lt;- B47  Freq: 0.607558
40e   	movzwl  R13, [R8 + #16 + RSI &lt;&lt; #1]	# ushort/char
414   	salq    RAX, #2
418   	movl    R10, [R14 + #16 + RAX]	# int
41d   	cmpl    RSI, R9
420   	jge     B67  P=0.000000 C=5670.000000
420
426   B49: #	B22 B50 &lt;- B48  Freq: 0.607558
426   	movl    RSI, RDX	# spill
428   	decl    RSI	# int
42a   	cmpl    R13, R10
42d   	jne     B22  P=0.348519 C=94434.000000
42d
433   B50: #	B52 B51 &lt;- B49  Freq: 0.395813
433   	cmpl    RSI, #-1
436   	jle,s   B52	# loop end  P=0.500000 C=61522.000000
436
438   B51: #	B47 &lt;- B50  Freq: 0.197906
438   	movl    RDX, RSI	# spill
43a   	jmp,s   B47
43a
43c   B52: #	B81 B53 &lt;- B45 B28 B50  Freq: 0.860866
43c   	movdq   R8, XMM0	# spill
441   	movl    R10, [rsp + #48]	# spill
446   	movl    [R8 + #28 (8-bit)], R10	# int ! Field: java/util/regex/Matcher.first
44a   	movl    RSI, #-10	# int
44f   	movdl   R10, XMM10	# spill
454   	movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
458   	NullCheck R10
458
458   B53: #	B71 B54 &lt;- B52  Freq: 0.860865
458   	movl    RSI, #-28	# int
45d   	cmpl    R8, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f4494026130:Constant:exact *	# compressed klass ptr
464   	jne,u  B71  P=0.000001 C=-1.000000
464
46a   B54: #	B72 B55 &lt;- B53  Freq: 0.860864
46a   	movdq   RBP, XMM0	# spill
46f   	movl    [RBP + #32 (8-bit)], RBX	# int ! Field: java/util/regex/Matcher.last
472   	movdl   R10, XMM1	# spill
477   	cmpl    R10, #1	# unsigned
47b   	jbe,u  B72  P=0.000001 C=-1.000000
47b
481   B55: #	B56 &lt;- B54  Freq: 0.860864
481   	movl    R11, [rsp + #48]	# spill
486   	movdl   R8, XMM3	# spill
48b   	movl    [R8 + #16 (8-bit)], R11	# int
48f   	movl    [R8 + #20 (8-bit)], RBX	# int
493   	movl    [R8 + #16 (8-bit)], R11	# int
497   	movl    [R8 + #20 (8-bit)], RBX	# int
49b   	movdl   RAX, XMM2	# spill
49b
49f   B56: #	B59 B57 &lt;- B55 B58 B62  Freq: 0.99989
49f   	testl   RAX, RAX
4a1   	je,s   B59  P=0.087953 C=8243.000000
4a1
4a3   B57: #	N1108 &lt;- B59 B56  Freq: 0.99989
4a3   	movl    R11, [RBP + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
4a7   	movl    [RBP + #36 (8-bit)], R11	# int ! Field: java/util/regex/Matcher.oldLast
4ab   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

4b6   	ret
4b6
4b7   B58: #	B56 &lt;- B27  Freq: 0.122772
4b7   	movdq   RBP, XMM0	# spill
4bc   	movb    [RBP + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
4c0   	xorl    RAX, RAX	# int
4c2   	jmp,s   B56
4c2
4c4   B59: #	B57 &lt;- B56  Freq: 0.0879437
4c4   	movl    [RBP + #28 (8-bit)], #-1	# int ! Field: java/util/regex/Matcher.first
4cb   	jmp,s   B57
4cb
4cd   B60: #	B17 &lt;- B4  Freq: 0.0476189
4cd   	movl    RBX, #1	# int
4d2   	jmp     B17
4d2
4d7   B61: #	B82 B62 &lt;- B19  Freq: 0.0162541
4d7   	movq    RDX, RBP	# spill
4da   	movl    RCX, [rsp + #48]	# spill
4de   	movq    RSI, RDI	# spill
4e1   	movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.regex.Pattern$Node::match
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop off=1264}
4f0
4f0   B62: #	B56 &lt;- B61  Freq: 0.0162538
        # Block is sole successor of call
4f0   	jmp,s   B56
4f0
4f2   B63: #	N1108 &lt;- B35 B29 B30 B31 B32 B33 B34  Freq: 5.56337e-05
4f2   	movl    RSI, #-122	# int
4f7   	movdq   RBP, XMM0	# spill
4fc   	movsd   [rsp + #0], XMM5	# spill
501   	movss   [rsp + #20], XMM4	# spill
507   	movl    [rsp + #24], R14	# spill
50c   	movl    [rsp + #28], R11	# spill
511   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
523   	movl    [rsp + #36], RDI	# spill
527   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:37  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #48 L[3]=rsp + #20 L[4]=rsp + #24 L[5]=rsp + #28 L[6]=rsp + #32 L[7]=rsp + #36 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [24]=NarrowOop off=1324}
52c   	int3	# ShouldNotReachHere
52c
531   B64: #	N1108 &lt;- B23  Freq: 7.73083e-06
531   	movsd   [rsp + #8], XMM5	# spill
537   	movsd   [rsp + #16], XMM0	# spill
53d   	movl    [rsp + #24], R14	# spill
542   	movl    [rsp + #28], R11	# spill
547   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
559   	movl    [rsp + #36], RDX	# spill
55d   	movl    R11, [rsp + #48]	# spill
562   	movl    [rsp + #40], R11	# spill
567   	movl    [rsp + #44], R10	# spill
56c   	movss   [rsp + #48], XMM11	# spill
572   	movl    [rsp + #52], R13	# spill
577   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
57f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=_ L[3]=RBP L[4]=rsp + #24 L[5]=rsp + #28 L[6]=rsp + #32 L[7]=rsp + #36 L[8]=_ STK[0]=rsp + #40 STK[1]=rsp + #44 STK[2]=rsp + #48 STK[3]=rsp + #52
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #16 L[1]=_ L[2]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [24]=NarrowOop [48]=NarrowOop off=1412}
584   	int3	# ShouldNotReachHere
584
589   B65: #	N1108 &lt;- B25  Freq: 7.73082e-06
589   	movsd   [rsp + #8], XMM5	# spill
58f   	movsd   [rsp + #16], XMM0	# spill
595   	movl    [rsp + #24], R14	# spill
59a   	movl    [rsp + #28], R11	# spill
59f   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
5b1   	movl    R8, [rsp + #48]	# spill
5b6   	movl    [rsp + #36], R8	# spill
5bb   	movl    [rsp + #40], R10	# spill
5c0   	movss   [rsp + #44], XMM8	# spill
5c6   	movl    [rsp + #48], RDX	# spill
5ca   	movl    RSI, #-28	# int
5cf   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=_ L[3]=RBP L[4]=rsp + #24 L[5]=rsp + #28 L[6]=rsp + #32 L[7]=_ L[8]=_ STK[0]=rsp + #36 STK[1]=rsp + #40 STK[2]=rsp + #44 STK[3]=rsp + #48
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #16 L[1]=_ L[2]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [24]=NarrowOop [44]=NarrowOop off=1492}
5d4   	int3	# ShouldNotReachHere
5d4
5d9   B66: #	N1108 &lt;- B47 B37  Freq: 6.14201e-06
5d9   	movsd   [rsp + #8], XMM5	# spill
5df   	movsd   [rsp + #16], XMM0	# spill
5e5   	movl    R8, [rsp + #48]	# spill
5ea   	movl    [rsp + #24], R8	# spill
5ef   	movl    [rsp + #28], R14	# spill
5f4   	movl    [rsp + #32], R11	# spill
5f9   	movl    [rsp + #40], RDX	# spill
5fd   	movl    [rsp + #56], RSI	# spill
601   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
607   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=RBP L[1]=rsp + #56 STK[0]=rsp + #56
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=RBP L[4]=rsp + #28 L[5]=rsp + #32 L[6]=rsp + #36 L[7]=rsp + #40 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #16 L[1]=_ L[2]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [28]=NarrowOop off=1548}
60c   	int3	# ShouldNotReachHere
60c
611   B67: #	N1108 &lt;- B48 B38  Freq: 5.85747e-06
611   	movsd   [rsp + #8], XMM5	# spill
617   	movsd   [rsp + #16], XMM0	# spill
61d   	movl    R10, [rsp + #48]	# spill
622   	movl    [rsp + #24], R10	# spill
627   	movl    [rsp + #28], R14	# spill
62c   	movl    [rsp + #32], R11	# spill
631   	movl    [rsp + #40], RDX	# spill
635   	movl    [rsp + #56], RSI	# spill
639   	movl    [rsp + #60], R9	# spill
63e   	movl    RSI, #-155	# int
643   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=RBP L[1]=rsp + #56 STK[0]=rsp + #56 STK[1]=rsp + #60
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=RBP L[4]=rsp + #28 L[5]=rsp + #32 L[6]=rsp + #36 L[7]=rsp + #40 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #16 L[1]=_ L[2]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [28]=NarrowOop off=1608}
648   	int3	# ShouldNotReachHere
648
64d   B68: #	B69 &lt;- B6  Freq: 1.93005e-06
64d   	movl    RCX, R13	# spill
64d
650   B69: #	N1108 &lt;- B14 B68  Freq: 2.89507e-06
650   	movl    [rsp + #8], R10	# spill
655   	movl    [rsp + #12], RCX	# spill
      	nop 	# 2 bytes pad for loops and calls
65b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Matcher::search @ bci:61  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #12 STK[0]=rsp + #8 STK[1]=rsp + #12 STK[2]=#-1
        # OopMap{rbp=Oop [8]=NarrowOop off=1632}
660   	int3	# ShouldNotReachHere
660
665   B70: #	N1108 &lt;- B2  Freq: 9.99999e-07
665   	movl    [rsp + #4], R13	# spill
66a   	movl    RSI, #-99	# int
66f   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::search @ bci:46  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #4
        # OopMap{rbp=Oop off=1652}
674   	int3	# ShouldNotReachHere
674
679   B71: #	N1108 &lt;- B53  Freq: 8.60865e-07
679   	movdq   RBP, XMM0	# spill
67e   	movsd   [rsp + #0], XMM5	# spill
683   	movl    R9, [rsp + #48]	# spill
688   	movl    [rsp + #16], R9	# spill
68d   	movl    [rsp + #24], R14	# spill
692   	movl    [rsp + #28], R11	# spill
697   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
6a9   	movl    [rsp + #36], RBX	# spill
6ad   	movss   [rsp + #48], XMM4	# spill
6b3   	movl    RSI, #-34	# int
6b8   	movss   [rsp + #52], XMM10	# spill
      	nop 	# 1 bytes pad for loops and calls
6bf   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #16 L[3]=rsp + #48 L[4]=rsp + #24 L[5]=rsp + #28 L[6]=rsp + #32 L[7]=_ L[8]=_ STK[0]=rsp + #52 STK[1]=RBP STK[2]=rsp + #36 STK[3]=rsp + #48
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [24]=NarrowOop [48]=NarrowOop [52]=NarrowOop off=1732}
6c4   	int3	# ShouldNotReachHere
6c4
6c9   B72: #	N1108 &lt;- B54  Freq: 8.60864e-07
6c9   	movsd   [rsp + #0], XMM5	# spill
6ce   	movss   [rsp + #20], XMM4	# spill
6d4   	movl    [rsp + #24], R14	# spill
6d9   	movl    [rsp + #28], R11	# spill
6de   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
6f0   	movss   [rsp + #36], XMM3	# spill
      	nop 	# 1 bytes pad for loops and calls
6f7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=RBP L[2]=_ L[3]=_ STK[0]=rsp + #36 STK[1]=#0 STK[2]=rsp + #48
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #48 L[3]=rsp + #20 L[4]=rsp + #24 L[5]=rsp + #28 L[6]=rsp + #32 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [24]=NarrowOop [36]=NarrowOop off=1788}
6fc   	int3	# ShouldNotReachHere
6fc
701   B73: #	N1108 &lt;- B22  Freq: 7.73084e-06
701   	movl    RBP, R13	# spill
704   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
70b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1808}
710   	int3	# ShouldNotReachHere
710
715   B74: #	N1108 &lt;- B24  Freq: 7.73083e-06
715   	movl    RBP, RDX	# spill
717   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
71f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1828}
724   	int3	# ShouldNotReachHere
724
729   B75: #	B77 &lt;- B1  Freq: 1.01328e-06
729   	xorl    R10, R10	# ptr
72c   	jmp,s   B77
72c
72e   B76: #	B77 &lt;- B3  Freq: 1.01328e-06
72e   	movq    R10, RBP	# spill
72e
731   B77: #	N1108 &lt;- B76 B75  Freq: 2.02656e-06
731   	movl    RSI, #-122	# int
736   	movl    RBP, [rsp + #48]	# spill
73a   	movl    [rsp + #0], R13	# spill
73e   	movq    [rsp + #8], R10	# spill
743   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:46  L[0]=rsp + #8 L[1]=RBP L[2]=rsp + #0
        # OopMap{[8]=Oop off=1864}
748   	int3	# ShouldNotReachHere
748
74d   B78: #	N1108 &lt;- B17  Freq: 1.01327e-06
74d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
753   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:77  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap{off=1880}
758   	int3	# ShouldNotReachHere
758
75d   B79: #	N1108 &lt;- B18  Freq: 1.01327e-06
75d   	movl    RSI, #-10	# int
762   	movl    [rsp + #4], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
767   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #48 STK[3]=rsp + #4
        # OopMap{rbp=Oop [4]=NarrowOop off=1900}
76c   	int3	# ShouldNotReachHere
76c
771   B80: #	N1108 &lt;- B20  Freq: 9.96801e-07
      	nop 	# 2 bytes pad for loops and calls
773   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1912}
778   	int3	# ShouldNotReachHere
778
77d   B81: #	N1108 &lt;- B52  Freq: 8.72298e-07
77d   	movdq   RBP, XMM0	# spill
782   	movl    [rsp + #0], RBX	# spill
785   	movss   [rsp + #4], XMM4	# spill
78b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #4
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=Oop [4]=NarrowOop off=1936}
790   	int3	# ShouldNotReachHere
790
795   B82: #	N1108 &lt;- B61  Freq: 1.62541e-07
795   	# exception oop is in rax; no code emitted
795   	movq    RSI, RAX	# spill
798   	addq    rsp, 80	# Destroy frame
	popq   rbp

79d   	jmp     rethrow_stub
79d

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='125'>
{method}
 - this oop:          0x00007f44cce529d8
 - method holder:     &apos;java/lang/Math&apos;
 - constants:         0x00007f44cce4f7e0 constant pool [324] {0x00007f44cce4f7e0} for &apos;java/lang/Math&apos; cache=0x00007f44cce54240
 - access:            0x81000009  public static 
 - name:              &apos;min&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - intrinsic id:      14 _min
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80f0378: 0xaa000000 i2c: 0x00007f44b9156560 c2i: 0x00007f44b915669c c2iUV: 0x00007f44b915666f
 - compiled entry     0x00007f44b922e000
 - code size:         11
 - code start:        0x00007f44cce529a8
 - code end (excl):   0x00007f44cce529b3
 - method data:       0x00007f44ccf77010
 - checked ex length: 0
 - linenumber start:  0x00007f44cce529b3
 - localvar length:   2
 - localvar start:    0x00007f44cce529be
 - compiled code: nmethod   1792    7       3       java.lang.Math::min (11 bytes)
#
#  int ( int, int )
#
#r018 rsi   : parm 0: int
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B1  Freq: 1
abababab
000   B1: #	N1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	cmpl    RSI, RDX
00e   	movl    RAX, RDX	# spill
010   	cmovlle RAX, RSI	# signed, int
013   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

01e   	ret
01e

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='174'>
{method}
 - this oop:          0x00007f44cce7cf38
 - method holder:     &apos;java/util/Arrays&apos;
 - constants:         0x00007f44cce730d8 constant pool [901]/operands[28] {0x00007f44cce730d8} for &apos;java/util/Arrays&apos; cache=0x00007f44cce807b0
 - access:            0x81000009  public static 
 - name:              &apos;copyOfRange&apos;
 - signature:         &apos;([CII)[C&apos;
 - max stack:         7
 - max locals:        5
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef7a8: 0xbaa00000 i2c: 0x00007f44b9145ca0 c2i: 0x00007f44b9145de0 c2iUV: 0x00007f44b9145db3
 - compiled entry     0x00007f44b9234880
 - code size:         63
 - code start:        0x00007f44cce7cea8
 - code end (excl):   0x00007f44cce7cee7
 - method data:       0x00007f44ccfdd488
 - checked ex length: 0
 - linenumber start:  0x00007f44cce7cee7
 - localvar length:   5
 - localvar start:    0x00007f44cce7cefa
 - compiled code: nmethod   1838   20       3       java.util.Arrays::copyOfRange (63 bytes)
#
#  char[int:&gt;=0]:exact * ( char[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: char[int:&gt;=0]:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B20 B21 B12 B24  Freq: 1
abababab
000   B1: #	B20 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (176 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c   	movq    [rsp + #8], RSI	# spill
011   	movl    [rsp + #0], RDX	# spill
014   	movl    R10, RCX	# spill
017   	subl    R10, RDX	# int
01a   	movl    [rsp + #16], R10	# spill
01f   	# TLS is in R15
01f   	movq    RSI, precise klass [C: 0x00007f44c8173e10:Constant:exact *	# ptr
029   	movslq  R10, R10	# i2l
02c   	salq    R10, #1
02f   	addq    R10, #23	# long
033   	movq    R11, R10	# spill
036   	shrq    R11, #3
03a   	movq    [rsp + #24], R11	# spill
03f   	andq    R10, #-8	# long
043   	movl    R8, [rsp + #16]	# spill
048   	testl   R8, R8
04b   	jl     B20  P=0.000000 C=14533.000000
04b
051   B2: #	B14 B3 &lt;- B1  Freq: 1
051   	movq    RBP, [R15 + #112 (8-bit)]	# ptr
055   	movq    R11, RBP	# spill
058   	addq    R11, R10	# ptr
05b   	movl    R10, R8	# spill
05e   	cmpl    R10, #524288	# unsigned
065   	jnbe,u  B14  P=0.000001 C=-1.000000
065
06b   B3: #	B14 B4 &lt;- B2  Freq: 0.999999
06b   	cmpq    R11, [R15 + #128 (32-bit)]	# raw ptr
072   	jnb,u  B14  P=0.000100 C=-1.000000
072
078   B4: #	B5 &lt;- B3  Freq: 0.999898
078   	movq    [R15 + #112 (8-bit)], R11	# ptr
07c   	PREFETCHNTA [R11 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
084   	movq    [RBP], 0x0000000000000001	# ptr
08c   	PREFETCHNTA [R11 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
094   	movl    [RBP + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f44c8173e10:Constant:exact *	# compressed klass ptr
09b   	PREFETCHNTA [R11 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0a3   	movl    [RBP + #12 (8-bit)], R10	# int
0a7   	PREFETCHNTA [R11 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0a7
0af   B5: #	B21 B6 &lt;- B15 B4  Freq: 1
0af   	
0af   	# checkcastPP of RBP
0af   	movq    RCX, [rsp + #24]	# spill
0b4   	addq    RCX, #-2	# long
0b8   	movq    R8, RBP	# spill
0bb   	addq    R8, #16	# ptr
0bf   	movq    RSI, [rsp + #8]	# spill
0c4   	movl    R11, [RSI + #12 (8-bit)]	# range
0c8   	NullCheck RSI
0c8
0c8   B6: #	B16 B7 &lt;- B5  Freq: 0.999999
0c8   	movl    RBX, R11	# spill
0cb   	subl    RBX, [RSP + #0 (32-bit)]	# int
0ce   	cmpl    RBX, [RSP + #16 (32-bit)]
0d2   	movl    R9, [rsp + #16]	# spill
0d7   	cmovll R9, RBX	# signed, int
0db   	movl    RBX, [rsp + #0]	# spill
0de   	addl    RBX, R9	# int
0e1   	movslq  RDX, R9	# i2l
0e4   	movl    R10, [rsp + #0]	# spill
0e8   	testl   R10, R10
0eb   	jl     B16  P=0.000001 C=-1.000000
0eb
0f1   B7: #	B16 B8 &lt;- B6  Freq: 0.999997
0f1   	movq    RDI, RDX	# spill
0f4   	salq    RDI, #1
0f7   	addq    RDI, #16	# long
0fb   	movq    RAX, RDI	# spill
0fe   	andq    RAX, #-7	# long
102   	cmpl    R11, RBX	# unsigned
105   	jb,us  B16  P=0.000001 C=-1.000000
105
107   B8: #	B16 B9 &lt;- B7  Freq: 0.999996
107   	movl    RBX, [rsp + #16]	# spill
10b   	cmpl    RBX, R9	# unsigned
10e   	jb,us  B16  P=0.000001 C=-1.000000
10e
110   B9: #	B18 B10 &lt;- B8  Freq: 0.999995
110   	leaq    R11, [RSI + #16 + R10 &lt;&lt; #1]	# ptr posidxscaleoff
115   	testl   R9, R9
118   	jle     B18  P=0.000001 C=-1.000000
118
11e   B10: #	B13 B11 &lt;- B9  Freq: 0.999994
11e   	shrq    RDI, #3
122   	movq    R10, [rsp + #24]	# spill
127   	subq    R10, RDI	# long
12a   	cmpl    R9, RBX
12d   	jl,s   B13  P=0.001000 C=-1.000000
12d
12f   B11: #	B12 &lt;- B10 B13  Freq: 0.999994
12f   	movq    RDI, R11	# spill
132   	movq    RSI, R8	# spill
135   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
142
142   B12: #	N1 &lt;- B11 B19 B17  Freq: 0.999998
142   	MEMBAR-storestore (empty encoding)
142   	movq    RAX, RBP	# spill
145   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

150   	ret
150
151   B13: #	B11 &lt;- B10  Freq: 0.000999994
151   	movq    RDI, RBP	# spill
154   	addq    RDI, RAX	# ptr
157   	movq    RCX, R10	# spill
15a   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
164   	jmp,s   B11
164
166   B14: #	B23 B15 &lt;- B2 B3  Freq: 0.00010103
166   	movl    RDX, R10	# spill
169   	movq    RBP, [rsp + #8]	# spill
      	nop 	# 1 bytes pad for loops and calls
16f   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOfRange @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #16 L[4]=_
        # OopMap{rbp=Oop [8]=Oop off=372}
174
174   B15: #	B5 &lt;- B14  Freq: 0.000101028
        # Block is sole successor of call
174   	movq    RBP, RAX	# spill
177   	jmp     B5
177
17c   B16: #	B22 B17 &lt;- B6 B7 B8 B18  Freq: 2.99999e-06
17c   	movq    RDI, R8	# spill
17f   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
189   	xorl    R8, R8	# int
18c   	movl    RDX, R10	# spill
18f   	movq    RCX, RBP	# spill
      	nop 	# 1 bytes pad for loops and calls
193   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOfRange @ bci:57  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=RBP
        # OopMap{rbp=Oop off=408}
198
198   B17: #	B12 &lt;- B16  Freq: 2.99993e-06
        # Block is sole successor of call
198   	jmp,s   B12
198
19a   B18: #	B16 B19 &lt;- B9  Freq: 9.99995e-07
19a   	testl   R9, R9
19d   	jl,s   B16  P=0.000001 C=-1.000000
19d
19f   B19: #	B12 &lt;- B18  Freq: 9.99994e-07
19f   	movq    RDI, R8	# spill
1a2   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
1ac   	
1ac   	jmp,s   B12
1ac
1ae   B20: #	N1 &lt;- B1  Freq: 4.76837e-07
1ae   	movl    RSI, #-155	# int
1b3   	movq    RBP, [rsp + #8]	# spill
1b8   	movl    [rsp + #4], RCX	# spill
1bc   	movl    [rsp + #12], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
1c3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.Arrays::copyOfRange @ bci:5  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #12 L[4]=_ STK[0]=rsp + #16
        # OopMap{rbp=Oop off=456}
1c8   	int3	# ShouldNotReachHere
1c8
1cd   B21: #	N1 &lt;- B5  Freq: 1.01328e-06
1cd   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1d3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.Arrays::copyOfRange @ bci:50  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_ STK[4]=#NULL
        # OopMap{off=472}
1d8   	int3	# ShouldNotReachHere
1d8
1dd   B22: #	B24 &lt;- B16  Freq: 2.99999e-11
1dd   	# exception oop is in rax; no code emitted
1dd   	movq    RSI, RAX	# spill
1e0   	jmp,s   B24
1e0
1e2   B23: #	B24 &lt;- B14  Freq: 1.0103e-09
1e2   	# exception oop is in rax; no code emitted
1e2   	movq    RSI, RAX	# spill
1e2
1e5   B24: #	N1 &lt;- B23 B22  Freq: 1.0403e-09
1e5   	addq    rsp, 48	# Destroy frame
	popq   rbp

1ea   	jmp     rethrow_stub
1ea

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='175'>
{method}
 - this oop:          0x00007f44ccd3d8c0
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f44ccd3b0e8 constant pool [680] {0x00007f44ccd3b0e8} for &apos;java/lang/String&apos; cache=0x00007f44cce045e0
 - access:            0x81000001  public 
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;([CII)V&apos;
 - max stack:         6
 - max locals:        4
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80efbe0: 0xbbaa0000 i2c: 0x00007f44b9148ae0 c2i: 0x00007f44b9148c25 c2iUV: 0x00007f44b9148bf8
 - compiled entry     0x00007f44b923c340
 - code size:         82
 - code start:        0x00007f44ccd3d828
 - code end (excl):   0x00007f44ccd3d87a
 - method data:       0x00007f44ccfec2f0
 - checked ex length: 0
 - linenumber start:  0x00007f44ccd3d87a
 - localvar length:   4
 - localvar start:    0x00007f44ccd3d88e
 - compiled code: nmethod   1867   35       3       java.lang.String::&lt;init&gt; (82 bytes)
#
#  void ( java/lang/String:NotNull:exact *, char[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx:rdx   : parm 1: char[int:&gt;=0]:exact *
#r010 rcx   : parm 2: int
#r004 r8   : parm 3: int
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N456: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B28 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (296 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movq    [rsp + #0], RSI	# spill
030   	movl    R11, RCX	# spill
033   	movslq  RCX, R8	# i2l
036   	salq    RCX, #1
039   	addq    RCX, #23	# long
03d   	movl    RSI, #-155	# int
042   	movl    R10, R11	# spill
045   	testl   R10, R10
048   	jl     B28  P=0.000000 C=14481.000000
048
04e   B2: #	B16 B3 &lt;- B1  Freq: 1
04e   	movl    R9, R8	# spill
051   	testl   R8, R8
054   	jle     B16  P=0.004351 C=14481.000000
054
05a   B3: #	B33 B4 &lt;- B2  Freq: 0.995649
05a   	movq    R8, RCX	# spill
05d   	andq    R8, #-8	# long
061   	shrq    RCX, #3
065   	movl    RSI, #-10	# int
06a   	movq    RBX, RDX	# spill
06d   	movl    RDI, [RDX + #12 (8-bit)]	# range
070   	NullCheck RDX
070
070   B4: #	B29 B5 &lt;- B3  Freq: 0.995648
070   	movl    RBP, RDI	# spill
072   	subl    RBP, R9	# int
075   	movl    RSI, RDI	# spill
077   	subl    RSI, R10	# int
07a   	cmpl    RSI, R9
07d   	movl    R11, R9	# spill
080   	cmovll R11, RSI	# signed, int
084   	movslq  R14, R11	# i2l
087   	movq    R13, R14	# spill
08a   	salq    R13, #1
08d   	addq    R13, #16	# long
091   	movq    RAX, R13	# spill
094   	shrq    RAX, #3
098   	cmpl    R10, RBP
09b   	jg     B29  P=0.000000 C=14418.000000
09b
0a1   B5: #	B30 B6 &lt;- B4  Freq: 0.995647
0a1   	movl    RBP, R10	# spill
0a4   	addl    RBP, R9	# int
0a7   	movl    RSI, #-155	# int
0ac   	# TLS is in R15
0ac   	testl   R9, R9
0af   	jl     B30  P=0.000000 C=14553.000000
0af
0b5   B6: #	B21 B7 &lt;- B5  Freq: 0.995647
0b5   	movl    RSI, R10	# spill
0b8   	addl    RSI, R11	# int
0bb   	leaq    RDX, [RDX + #16 + R10 &lt;&lt; #1]	# ptr posidxscaleoff
0c0   	cmpl    R9, #524288	# unsigned
0c7   	jnbe,u  B21  P=0.000001 C=-1.000000
0c7
0cd   B7: #	B22 B8 &lt;- B6  Freq: 0.995646
0cd   	movl    [rsp + #52], RSI	# spill
0d1   	movq    [rsp + #64], RAX	# spill
0d6   	movq    [rsp + #56], R13	# spill
0db   	movl    [rsp + #48], RDI	# spill
0df   	movq    RBP, [R15 + #112 (8-bit)]	# ptr
0e3   	movq    RDI, RBP	# spill
0e6   	addq    RDI, R8	# ptr
0e9   	cmpq    RDI, [R15 + #128 (32-bit)]	# raw ptr
0f0   	jnb,u  B22  P=0.000100 C=-1.000000
0f0
0f6   B8: #	B9 &lt;- B7  Freq: 0.995546
0f6   	movq    [R15 + #112 (8-bit)], RDI	# ptr
0fa   	PREFETCHNTA [RDI + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
101   	movq    [RBP], 0x0000000000000001	# ptr
109   	movl    [RBP + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f44c8173e10:Constant:exact *	# compressed klass ptr
110   	PREFETCHNTA [RDI + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
117   	movl    [RBP + #12 (8-bit)], R9	# int
11b   	PREFETCHNTA [RDI + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
122   	PREFETCHNTA [RDI + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
122
129   B9: #	B24 B10 &lt;- B23 B8  Freq: 0.995647
129   	xorl    R8, R8	# int
12c   	
12c   	# checkcastPP of RBP
12c   	movq    RAX, RCX	# spill
12f   	addq    RAX, #-2	# long
133   	movq    RSI, RBP	# spill
136   	addq    RSI, #16	# ptr
13a   	movl    RDI, [rsp + #48]	# spill
13e   	cmpl    RDI, [RSP + #52 (32-bit)]	# unsigned
142   	jb,u  B24  P=0.000001 C=-1.000000
142
148   B10: #	B24 B11 &lt;- B9  Freq: 0.995646
148   	subq    RCX, [RSP + #64 (32-bit)]	# long
14d   	cmpl    R9, R11	# unsigned
150   	jb,u  B24  P=0.000001 C=-1.000000
150
156   B11: #	B26 B12 &lt;- B10  Freq: 0.995645
156   	testl   R11, R11
159   	jle     B26  P=0.000001 C=-1.000000
159
15f   B12: #	B20 B13 &lt;- B11  Freq: 0.995644
15f   	movq    R10, [rsp + #56]	# spill
164   	andq    R10, #-7	# long
168   	movq    RDI, RBP	# spill
16b   	addq    RDI, R10	# ptr
16e   	cmpl    R11, R9
171   	jl     B20  P=0.001000 C=-1.000000
171
177   B13: #	B14 &lt;- B12 B20  Freq: 0.995644
177   	movq    RDI, RDX	# spill
17a   	movq    RDX, R14	# spill
17d   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
18a
18a   B14: #	B15 &lt;- B13 B27 B25  Freq: 0.995647
18a   	encode_heap_oop_not_null R11,RBP
295   	MEMBAR-storestore (empty encoding)
295   	movq    R8, [rsp + #0]	# spill
299   	movq    R10, R8	# ptr -&gt; long
29c   	movl    [R8 + #12 (8-bit)], R11	# compressed ptr ! Field: java/lang/String.value
2a0   	shrq    R10, #9
2a4   	movq    R11, 0x00007f44cd651000	# ptr
2ae   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
2ae
2b2   B15: #	N456 &lt;- B19 B14  Freq: 0.999997
2b2   	MEMBAR-release ! (empty encoding)
2b2   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

2bd   	ret
2bd
2be   B16: #	B31 B17 &lt;- B2  Freq: 0.00435054
2be   	movl    RSI, #-10	# int
2c3   	testl   R8, R8
2c6   	jl     B31  P=0.000000 C=63.000000
2c6
2cc   B17: #	B34 B18 &lt;- B16  Freq: 0.00435054
2cc   	movl    RBP, [RDX + #12 (8-bit)]	# range
2cf   	NullCheck RDX
2cf
2cf   B18: #	B32 B19 &lt;- B17  Freq: 0.00435054
2cf   	movl    RSI, #-155	# int
2d4   	cmpl    R10, RBP
2d7   	jg     B32  P=0.000000 C=63.000000
2d7
2dd   B19: #	B15 &lt;- B18  Freq: 0.00435053
2dd   	movq    R10, [rsp + #0]	# spill
2e1   	movl    [R10 + #12 (8-bit)], narrowoop: char[int:0]&lt;ciTypeArray length=0 type=&lt;ciTypeArrayKlass name=[C ident=807 address=0x00007f44c8173e10&gt; ident=826 SCAVENGABLE address=0x00007f4488030b20&gt; *	# compressed ptr ! Field: java/lang/String.value
2e9   	movq    R10, R10	# ptr -&gt; long
2e9   	shrq    R10, #9
2ed   	movq    R11, 0x00007f44cd651000	# ptr
2f7   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
2fb   	jmp,s   B15
2fb
2fd   B20: #	B13 &lt;- B12  Freq: 0.000995644
2fd   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
307   	jmp     B13
307
30c   B21: #	B22 &lt;- B6  Freq: 1.00887e-06
30c   	movl    [rsp + #48], RDI	# spill
310   	movq    [rsp + #56], R13	# spill
315   	movq    [rsp + #64], RAX	# spill
31a   	movl    [rsp + #52], RSI	# spill
31a
31e   B22: #	B36 B23 &lt;- B21 B7  Freq: 0.00010059
31e   	movq    [rsp + #40], RDX	# spill
323   	movq    [rsp + #32], R14	# spill
328   	movl    [rsp + #20], R11	# spill
32d   	movq    [rsp + #24], RCX	# spill
332   	movl    [rsp + #16], R9	# spill
337   	movq    [rsp + #8], RBX	# spill
33c   	movl    RBP, R10	# spill
33f   	movl    RDX, R9	# spill
342   	movq    RSI, precise klass [C: 0x00007f44c8173e10:Constant:exact *	# ptr
      	nop 	# 3 bytes pad for loops and calls
34f   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOfRange @ bci:40  L[0]=rsp + #8 L[1]=RBP L[2]=_ L[3]=rsp + #16 L[4]=_
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop [40]=Derived_oop_[8] off=852}
354
354   B23: #	B9 &lt;- B22  Freq: 0.000100588
        # Block is sole successor of call
354   	movl    R10, RBP	# spill
357   	movq    RBX, [rsp + #8]	# spill
35c   	movl    R9, [rsp + #16]	# spill
361   	movq    RCX, [rsp + #24]	# spill
366   	movl    R11, [rsp + #20]	# spill
36b   	movq    R14, [rsp + #32]	# spill
370   	movq    RDX, [rsp + #40]	# spill
375   	movq    RBP, RAX	# spill
378   	jmp     B9
378
37d   B24: #	B35 B25 &lt;- B26 B9 B10  Freq: 1.99129e-06
37d   	movq    RCX, RAX	# spill
380   	movq    RDI, RSI	# spill
383   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
38d   	movq    RSI, RBX	# spill
390   	movl    RDX, R10	# spill
393   	movq    RCX, RBP	# spill
396   	movl    R9, R11	# spill
      	nop 	# 2 bytes pad for loops and calls
39b   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOfRange @ bci:57  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=RBP
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #0
        # OopMap{rbp=Oop [0]=Oop off=928}
3a0
3a0   B25: #	B14 &lt;- B24  Freq: 1.99125e-06
        # Block is sole successor of call
3a0   	jmp     B14
3a0
3a5   B26: #	B24 B27 &lt;- B11  Freq: 9.95645e-07
3a5   	testl   R11, R11
3a8   	jl,s   B24  P=0.000001 C=-1.000000
3a8
3aa   B27: #	B14 &lt;- B26  Freq: 9.95644e-07
3aa   	movq    RCX, RAX	# spill
3ad   	movq    RDI, RSI	# spill
3b0   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
3ba   	
3ba   	jmp     B14
3ba
3bf   B28: #	N456 &lt;- B1  Freq: 4.76837e-07
3bf   	movq    RBP, [rsp + #0]	# spill
3c3   	movq    [rsp + #0], RDX	# spill
3c7   	movl    [rsp + #12], R8	# spill
3cc   	movl    [rsp + #16], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
3d3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:5  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #16 L[3]=rsp + #12 STK[0]=rsp + #16
        # OopMap{rbp=Oop [0]=Oop off=984}
3d8   	int3	# ShouldNotReachHere
3d8
3dd   B29: #	N456 &lt;- B4  Freq: 4.74762e-07
3dd   	movq    [rsp + #8], RDX	# spill
3e2   	movl    [rsp + #20], R9	# spill
3e7   	movl    [rsp + #24], R10	# spill
3ec   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
3f3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:55  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #24 L[3]=rsp + #20 STK[0]=rsp + #24 STK[1]=RBP
        # OopMap{[0]=Oop [8]=Oop off=1016}
3f8   	int3	# ShouldNotReachHere
3f8
3fd   B30: #	N456 &lt;- B5  Freq: 4.74762e-07
3fd   	movq    [rsp + #8], RDX	# spill
402   	movl    [rsp + #16], R10	# spill
407   	movl    [rsp + #24], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
40f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.Arrays::copyOfRange @ bci:5  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #24 L[4]=_ STK[0]=rsp + #24
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop off=1044}
414   	int3	# ShouldNotReachHere
414
419   B31: #	N456 &lt;- B16  Freq: 2.0745e-09
419   	movq    RBP, [rsp + #0]	# spill
41d   	movq    [rsp + #0], RDX	# spill
421   	movl    [rsp + #8], R10	# spill
426   	movl    [rsp + #16], R8	# spill
42b   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
433   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:22  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 STK[0]=rsp + #16
        # OopMap{rbp=Oop [0]=Oop off=1080}
438   	int3	# ShouldNotReachHere
438
43d   B32: #	N456 &lt;- B18  Freq: 2.0745e-09
43d   	movq    [rsp + #8], RDX	# spill
442   	movl    [rsp + #20], R8	# spill
447   	movl    [rsp + #24], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
44f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:37  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #24 L[3]=rsp + #20 STK[0]=rsp + #24 STK[1]=RBP
        # OopMap{[0]=Oop [8]=Oop off=1108}
454   	int3	# ShouldNotReachHere
454
459   B33: #	N456 &lt;- B3  Freq: 1.00887e-06
      	nop 	# 2 bytes pad for loops and calls
45b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:52  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1120}
460   	int3	# ShouldNotReachHere
460
465   B34: #	N456 &lt;- B17  Freq: 4.40831e-09
      	nop 	# 2 bytes pad for loops and calls
467   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1132}
46c   	int3	# ShouldNotReachHere
46c
471   B35: #	B37 &lt;- B24  Freq: 1.99129e-11
471   	# exception oop is in rax; no code emitted
471   	movq    RSI, RAX	# spill
474   	jmp,s   B37
474
476   B36: #	B37 &lt;- B22  Freq: 1.0059e-09
476   	# exception oop is in rax; no code emitted
476   	movq    RSI, RAX	# spill
476
479   B37: #	N456 &lt;- B36 B35  Freq: 1.02581e-09
479   	addq    rsp, 96	# Destroy frame
	popq   rbp

47e   	jmp     rethrow_stub
47e

</opto_assembly>
<writer thread='139933087573760'/>
<opto_assembly compile_id='197'>
{method}
 - this oop:          0x00007f44cd092d18
 - method holder:     &apos;java/util/regex/Pattern$Slice&apos;
 - constants:         0x00007f44cd092900 constant pool [62] {0x00007f44cd092900} for &apos;java/util/regex/Pattern$Slice&apos; cache=0x00007f44cd093268
 - access:            0xc1000000  
 - name:              &apos;match&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z&apos;
 - max stack:         5
 - max locals:        7
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c8127b88: 0xbbab0000 i2c: 0x00007f44b915ace0 c2i: 0x00007f44b915ae25 c2iUV: 0x00007f44b915adf8
 - compiled entry     0x00007f44b9288e40
 - code size:         79
 - code start:        0x00007f44cd092c60
 - code end (excl):   0x00007f44cd092caf
 - method data:       0x00007f44cd0beb90
 - checked ex length: 0
 - linenumber start:  0x00007f44cd092caf
 - localvar length:   7
 - localvar start:    0x00007f44cd092cc2
 - compiled code: nmethod   1908  192       3       java.util.regex.Pattern$Slice::match (79 bytes)
#
#  bool ( java/util/regex/Pattern$Slice:NotNull:exact *, java/util/regex/Matcher:exact *, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$Slice:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/CharSequence *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1887: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B142 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (752 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movdq   XMM1, R8	# spill
031   	movdq   XMM0, RDX	# spill
036   	movl    R8, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$SliceNode.buffer
03a   	movl    RDX, RCX	# spill
03c   	negl    RDX	# int
03e   	movl    R10, RCX	# spill
041   	sarl    R10, #31
045   	movl    RBX, #1	# int
04a   	andl    R10, RCX	# int
04d   	movl    R9, #-2147483647	# int
053   	subl    R9, R10	# int
056   	cmpl    RDX, R9
059   	cmovllt RDX, R9	# max
05d   	cmpl    RDX, R9
060   	cmovllt RDX, R9	# max
064   	cmpl    RDX, RBX
066   	cmovllt RDX, RBX	# max
069   	movl    R11, [R8 + #12 (8-bit)]	# range
06d   	NullCheck R8
06d
06d   B2: #	B24 B3 &lt;- B1  Freq: 0.999999
06d   	movdq   XMM2, RSI	# spill
072   	movl    R10, RCX	# spill
075   	movl    [rsp + #20], R11	# spill
07a   	addl    R10, R11	# int
07d   	movl    [rsp + #0], R10	# spill
081   	testl   R11, R11
084   	jle     B24  P=0.076878 C=44031.000000
084
08a   B3: #	B101 B4 &lt;- B2  Freq: 0.923121
08a   	movdq   R10, XMM0	# spill
08f   	movl    RDI, [R10 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
093   	NullCheck R10
093
093   B4: #	B101 B5 &lt;- B3  Freq: 0.92312
093   	movl    R11, #1	# int
099   	subl    R11, RCX	# int
09c   	movl    R9, R11	# spill
09f   	sarl    R9, #31
0a3   	movl    R10, [rsp + #20]	# spill
0a8   	testl  R10, R10	# unsigned
0ab   	jbe,u  B101  P=0.000001 C=-1.000000
0ab
0b1   B5: #	B101 B6 &lt;- B4  Freq: 0.923119
0b1   	movl    RSI, R10	# spill
0b4   	decl    RSI	# int
0b6   	cmpl    RDX, R10
0b9   	cmovlgt RDX, R10	# min
0bd   	cmpl    RSI, R10	# unsigned
0c0   	jnb,u  B101  P=0.000001 C=-1.000000
0c0
0c6   B6: #	B101 B7 &lt;- B5  Freq: 0.923119
0c6   	movdq   R10, XMM1	# spill
0cb   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
0cf   	NullCheck R10
0cf
0cf   B7: #	B101 B8 &lt;- B6  Freq: 0.923118
0cf   	andl    R9, R11	# int
0d2   	addl    R9, #2147483647	# int
0d9   	cmpl    R10, narrowklass: precise klass java/lang/String: 0x00007f44c814d2f0:Constant:exact *	# compressed klass ptr
0e0   	jne,u  B101  P=0.000001 C=-1.000000
0e0
0e6   B8: #	B101 B9 &lt;- B7  Freq: 0.923117
0e6   	movdq   R10, XMM1	# spill
0eb   	# checkcastPP of R10
0eb   	movdq   XMM3, R10	# spill
0f0   	movl    RAX, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
0f4   	movl    R10, [RAX + #12 (8-bit)]	# range
0f8   	NullCheck RAX
0f8
0f8   B9: #	B101 B10 &lt;- B8  Freq: 0.923116
0f8   	movl    [rsp + #24], R10	# spill
0fd   	movl    RSI, R10	# spill
100   	subl    RSI, RCX	# int
102   	movl    R10, [rsp + #0]	# spill
106   	decl    R10	# int
109   	cmpl    RCX, [RSP + #24 (32-bit)]	# unsigned
10d   	jnb,u  B101  P=0.000001 C=-1.000000
10d
113   B10: #	B101 B11 &lt;- B9  Freq: 0.923115
113   	cmpl    R9, RSI
116   	cmovlgt R9, RSI	# min
11a   	movl    R14, RDI	# spill
11d   	subl    R14, RCX	# int
120   	cmpl    R10, [RSP + #24 (32-bit)]	# unsigned
125   	jnb,u  B101  P=0.000001 C=-1.000000
125
12b   B11: #	B12 &lt;- B10  Freq: 0.923114
12b   	cmpl    R14, R9
12e   	cmovlgt R14, R9	# min
132   	movl    RSI, #-155	# int
137   	xorl    R11, R11	# int
13a   	xorl    R10, R10	# int
13d   	movl    R9, #-2147483647	# int
143   	movdl   XMM9, R10	# spill
148   	movdl   XMM4, R9	# spill
148
14d   B12: #	B104 B13 &lt;- B11 B18 	Loop: B12-B18 inner pre of N1529 Freq: 1.23559
14d   	movl    R9, [R8 + #16 + R11 &lt;&lt; #2]	# int
152   	movl    R13, R11	# spill
155   	addl    R13, RCX	# int
158   	cmpl    R13, RDI
15b   	jge     B104  P=0.000000 C=40646.000000
15b
161   B13: #	B102 B14 &lt;- B12  Freq: 1.23559
161   	movzwl  R10, [RAX + #16 + R13 &lt;&lt; #1]	# ushort/char
167   	testl   R13, R13
16a   	jl     B102  P=0.000000 C=5670.000000
16a
170   B14: #	B106 B15 &lt;- B13  Freq: 1.23559
170   	cmpl    R13, [RSP + #24 (32-bit)]
175   	jge     B106  P=0.000000 C=5670.000000
175
17b   B15: #	B18 B16 &lt;- B14  Freq: 1.23559
17b   	incl    R11	# int
17e   	cmpl    R9, R10
181   	je,s   B18  P=0.505794 C=40645.000000
181
183   B16: #	B17 &lt;- B87 B21 B15  Freq: 0.907858
183   	movdl   RAX, XMM9	# spill
183
187   B17: #	N1887 &lt;- B16 B53 B80 B100 B95  Freq: 0.999988
187   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

192   	ret
192
193   B18: #	B12 B19 &lt;- B15  Freq: 0.624953
193   	cmpl    R14, [RSP + #20 (32-bit)]
198   	movl    R10, R14	# spill
19b   	movl    R9, [rsp + #20]	# spill
1a0   	cmovlgt R10, R9	# min
1a4   	cmpl    R11, RDX
1a7   	jl,s   B12	# loop end  P=0.500000 C=20558.000000
1a7
1a9   B19: #	B81 B20 &lt;- B18  Freq: 0.312477
1a9   	cmpl    R11, R10
1ac   	jge     B81  P=0.000001 C=-1.000000
1ac
1b2   B20: #	B21 &lt;- B19  Freq: 0.312476
1b2   	# castII of R11
1b2
1b2   B21: #	B16 B22 &lt;- B20 B23 	Loop: B21-B23 inner main of N288 Freq: 0.58616
1b2   	movl    R9, R11	# spill
1b5   	addl    R9, RCX	# int
1b8   	movl    RBP, R11	# spill
1bb   	incl    RBP	# int
1bd   	movl    R13, [R8 + #16 + R11 &lt;&lt; #2]	# int
1c2   	movzwl  R11, [RAX + #16 + R9 &lt;&lt; #1]	# ushort/char
1c8   	cmpl    R13, R11
1cb   	jne,s   B16  P=0.494206 C=40645.000000
1cb
1cd   B22: #	B82 B23 &lt;- B21  Freq: 0.296476
1cd   	cmpl    RBP, R10
1d0   	jge     B82	# loop end  P=0.076878 C=20558.000000
1d0
1d6   B23: #	B21 &lt;- B22  Freq: 0.273684
1d6   	movl    R11, RBP	# spill
1d9   	jmp,s   B21
1d9
1db   B24: #	B25 &lt;- B2  Freq: 0.0768776
1db   	xorl    R10, R10	# int
1de   	movl    R11, #-2147483647	# int
1e4   	movdl   XMM9, R10	# spill
1e9   	movdl   XMM4, R11	# spill
1e9
1ee   B25: #	B143 B26 &lt;- B82 B24 B89  Freq: 0.0921316
1ee   	movl    R10, [rsp + #0]	# spill
1f2   	incl    R10	# int
1f5   	movl    RAX, R10	# spill
1f8   	movl    R8, #-1	# int
1fe   	sarl    R10, #31
202   	andl    R10, RAX	# int
205   	movdl   R11, XMM4	# spill
20a   	subl    R11, R10	# int
20d   	movl    [rsp + #4], R11	# spill
212   	movslq  R10, [RSP + #20 (32-bit)]	# int -&gt; long
217   	movdq   R11, XMM2	# spill
21c   	movl    RBP, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
220   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
224   	NullCheck RBP
224
224   B26: #	B90 B27 &lt;- B25  Freq: 0.0921315
224   	subl    R8, [RSP + #0 (32-bit)]	# int
228   	movl    RSI, #-155	# int
22d   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$Dot: 0x00007f4488042db0:Constant:exact *	# compressed klass ptr
234   	jne,u  B90  P=0.000302 C=-1.000000
234
23a   B27: #	B144 B28 &lt;- B26  Freq: 0.0921037
23a   	decode_heap_oop_not_null R11,RBP
23d   	movq    R9, R11	# spill
240   	movslq  R11, RCX	# i2l
243   	movl    RDX, [rsp + #0]	# spill
246   	negl    RDX	# int
248   	addq    R11, R10	# long
24b   	movdq   R10, XMM0	# spill
250   	movl    R10, [R10 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
254   	NullCheck R10
254
254   B28: #	B119 B29 &lt;- B27  Freq: 0.0921036
254   	movl    R13, R10	# spill
257   	movq    R10, R9	# spill
25a   	# checkcastPP of R10
25a   	movq    RBP, R10	# spill
25d   	movl    R9, RDX	# spill
260   	sarl    R9, #31
264   	movl    R10, [rsp + #0]	# spill
268   	cmpl    R10, R13
26b   	jge     B119  P=0.000000 C=3390.000000
26b
271   B29: #	B145 B30 &lt;- B28  Freq: 0.0921036
271   	movl    RCX, R13	# spill
274   	subl    RCX, R10	# int
277   	cmpl    R8, [RSP + #4 (32-bit)]
27c   	movl    RDI, [rsp + #4]	# spill
280   	cmovllt R8, RDI	# max
284   	movdq   R10, XMM1	# spill
289   	movl    RDI, [R10 + #8 (8-bit)]	# compressed klass ptr
28d   	NullCheck R10
28d
28d   B30: #	B109 B31 &lt;- B29  Freq: 0.0921035
28d   	cmpl    RDI, narrowklass: precise klass java/lang/String: 0x00007f44c814d2f0:Constant:exact *	# compressed klass ptr
293   	jne,u  B109  P=0.000001 C=-1.000000
293
299   B31: #	B118 B32 &lt;- B30  Freq: 0.0921034
299   	# checkcastPP of R10
299   	movq    R14, R10	# spill
29c   	movl    RDI, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
2a0   	movdl   XMM2, RDI	# spill
2a4   	movl    RSI, #-10	# int
2a9   	movl    R10, [rsp + #0]	# spill
2ad   	testl   R10, R10
2b0   	jl     B118  P=0.000000 C=5670.000000
2b0
2b6   B32: #	B146 B33 &lt;- B31  Freq: 0.0921033
2b6   	cmpl    R8, [RSP + #4 (32-bit)]
2bb   	movl    R10, [rsp + #4]	# spill
2c0   	cmovllt R8, R10	# max
2c4   	movl    RDI, [RDI + #12 (8-bit)]	# range
2c7   	NullCheck RDI
2c7
2c7   B33: #	B120 B34 &lt;- B32  Freq: 0.0921032
2c7   	movl    [rsp + #4], RDI	# spill
2cb   	subl    RDI, [RSP + #0 (32-bit)]	# int
2ce   	cmpl    R8, RBX
2d1   	cmovllt R8, RBX	# max
2d5   	movl    RBX, [rsp + #0]	# spill
2d8   	cmpl    RBX, [RSP + #4 (32-bit)]
2dc   	jge     B120  P=0.000000 C=5670.000000
2dc
2e2   B34: #	B108 B35 &lt;- B33  Freq: 0.0921032
2e2   	andl    R9, RDX	# int
2e5   	movl    R10, RBX	# spill
2e8   	cmpl    R10, [RSP + #4 (32-bit)]	# unsigned
2ed   	jnb,u  B108  P=0.000001 C=-1.000000
2ed
2f3   B35: #	B121 B36 &lt;- B34  Freq: 0.0921031
2f3   	movdl   R10, XMM2	# spill
2f8   	movzwl  R11, [R10 + #16 + R11 &lt;&lt; #1]	# ushort/char
2fe   	movl    RDX, R11	# spill
301   	decl    RDI	# int
303   	decl    RCX	# int
305   	cmpl    R11, #55296
30c   	jge     B121  P=0.000000 C=9671.000000
30c
312   B36: #	B122 B37 &lt;- B35  Freq: 0.0921031
312   	movl    R10, R11	# spill
315   	orl     R10, #1	# int
319   	movl    RBX, R10	# spill
31c   	cmpl    RDI, RCX
31e   	cmovlgt RDI, RCX	# min
321   	movdq   R10, XMM0	# spill
326   	movl    R10, [R10 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
32a   	movdl   XMM1, R10	# spill
32f   	movl    RSI, #-155	# int
334   	movq    R10, RBP	# spill
337   	movl    R11, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
33b   	movdl   XMM4, R11	# spill
340   	cmpl    RDX, #10
343   	je     B122  P=0.000000 C=3390.000000
343
349   B37: #	B123 B38 &lt;- B36  Freq: 0.092103
349   	movslq  RCX, [RSP + #0 (32-bit)]	# int -&gt; long
34d   	movl    R11, RDX	# spill
350   	cmpl    R11, #13
354   	je     B123  P=0.000000 C=3390.000000
354
35a   B38: #	B124 B39 &lt;- B37  Freq: 0.092103
35a   	addl    R9, #2147483647	# int
361   	cmpl    R9, RDI
364   	cmovlgt R9, RDI	# min
368   	movl    RSI, #-10	# int
36d   	cmpl    RBX, #8233
373   	je     B124  P=0.000000 C=3390.000000
373
379   B39: #	B125 B40 &lt;- B38  Freq: 0.0921029
379   	cmpl    RDX, #133
37f   	je     B125  P=0.000000 C=3390.000000
37f
385   B40: #	B147 B41 &lt;- B39  Freq: 0.0921029
385   	movdl   R10, XMM4	# spill
38a   	decode_heap_oop_not_null R10,R10
38a   	movq    RBX, R10	# spill
38d   	movdq   R10, XMM0	# spill
392   	movl    R11, [R10 + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
396   	movl    RDX, R11	# spill
399   	movdl   R11, XMM4	# spill
39e   	movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
3a2   	NullCheck R11
3a2
3a2   B41: #	B110 B42 &lt;- B40  Freq: 0.0921028
3a2   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Slice: 0x00007f4488042680:Constant:exact *	# compressed klass ptr
3a9   	jne,u  B110  P=0.000001 C=-1.000000
3a9
3af   B42: #	B148 B43 &lt;- B41  Freq: 0.0921027
3af   	movq    R10, RBX	# spill
3b2   	# checkcastPP of R10
3b2   	movq    RBP, R10	# spill
3b5   	movdq   R10, XMM0	# spill
3ba   	movl    R10, [R10 + #24 (8-bit)]	# int ! Field: java/util/regex/Matcher.acceptMode
3be   	movdl   XMM4, R10	# spill
3c3   	movq    R10, RBP	# spill
3c6   	movl    R11, [R10 + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$SliceNode.buffer
3ca   	movdl   XMM3, R11	# spill
3cf   	movl    R10, [R11 + #12 (8-bit)]	# range
3d3   	NullCheck R11
3d3
3d3   B43: #	B66 B44 &lt;- B42  Freq: 0.0921026
3d3   	movl    [rsp + #8], R10	# spill
3d8   	movslq  R11, R10	# i2l
3db   	decl    R10	# int
3de   	addq    RCX, R11	# long
3e1   	movl    RBX, [RBP + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
3e4   	movdl   XMM6, RBX	# spill
3e8   	movl    R11, [rsp + #0]	# spill
3ec   	addl    R11, [RSP + #8 (32-bit)]	# int
3f1   	movdl   XMM7, R11	# spill
3f6   	movl    RBX, [rsp + #8]	# spill
3fa   	testl   RBX, RBX
3fc   	jle     B66  P=0.076878 C=44031.000000
3fc
402   B44: #	B111 B45 &lt;- B43  Freq: 0.085022
402   	testl  RBX, RBX	# unsigned
404   	jbe,u  B111  P=0.000001 C=-1.000000
404
40a   B45: #	B111 B46 &lt;- B44  Freq: 0.0850219
40a   	cmpl    R10, RBX	# unsigned
40d   	jnb,u  B111  P=0.000001 C=-1.000000
40d
413   B46: #	B111 B47 &lt;- B45  Freq: 0.0850218
413   	cmpl    R9, RBX
416   	cmovlgt R9, RBX	# min
41a   	cmpl    RAX, [RSP + #4 (32-bit)]	# unsigned
41e   	jnb,u  B111  P=0.000001 C=-1.000000
41e
424   B47: #	B111 B48 &lt;- B46  Freq: 0.0850217
424   	movl    RSI, #-155	# int
429   	movdl   R11, XMM7	# spill
42e   	cmpl    R11, [RSP + #4 (32-bit)]	# unsigned
433   	jnb,u  B111  P=0.000001 C=-1.000000
433
439   B48: #	B49 &lt;- B47  Freq: 0.0850216
439   	cmpl    R8, RBX
43c   	movl    R10, RBX	# spill
43f   	cmovlgt R8, R10	# min
443   	xorl    RDI, RDI	# int
445
445   B49: #	B115 B50 &lt;- B48 B54 	Loop: B49-B54 inner pre of N1535 Freq: 0.113802
445   	movl    R10, RDI	# spill
448   	addl    R10, [RSP + #0 (32-bit)]	# int
44c   	movl    R11, R10	# spill
44f   	incl    R11	# int
452   	movl    RBX, R11	# spill
455   	cmpl    R11, R13
458   	jge     B115  P=0.000000 C=40646.000000
458
45e   B50: #	B113 B51 &lt;- B49  Freq: 0.113802
45e   	movdl   R11, XMM3	# spill
463   	movl    R11, [R11 + #16 + RDI &lt;&lt; #2]	# int
468   	movdl   XMM8, R11	# spill
46d   	movl    R11, RBX	# spill
470   	testl   R11, R11
473   	jl     B113  P=0.000000 C=5670.000000
473
479   B51: #	B117 B52 &lt;- B50  Freq: 0.113802
479   	movslq  R11, R10	# i2l
47c   	cmpl    RBX, [RSP + #4 (32-bit)]
480   	jge     B117  P=0.000000 C=5670.000000
480
486   B52: #	B54 B53 &lt;- B51  Freq: 0.113801
486   	movdl   R10, XMM2	# spill
48b   	movzwl  R11, [R10 + #18 + R11 &lt;&lt; #1]	# ushort/char
491   	movdl   R10, XMM8	# spill
496   	cmpl    R10, R11
499   	je,s   B54  P=0.505794 C=40645.000000
499
49b   B53: #	B17 &lt;- B64 B57 B52  Freq: 0.0836165
49b   	movdl   RAX, XMM9	# spill
49f   	jmp     B17
49f
4a4   B54: #	B49 B55 &lt;- B52  Freq: 0.0575601
4a4   	incl    RDI	# int
4a6   	cmpl    RDI, R8
4a9   	jl,s   B49	# loop end  P=0.500000 C=20558.000000
4a9
4ab   B55: #	B59 B56 &lt;- B54  Freq: 0.0287801
4ab   	cmpl    RDI, R9
4ae   	jge,s   B59  P=0.000001 C=-1.000000
4ae
4b0   B56: #	B57 &lt;- B55  Freq: 0.02878
4b0   	movl    R11, RDI	# spill
4b3   	# castII of R11
4b3   	movl    RDI, R11	# spill
      	nop 	# 10 bytes pad for loops and calls

4c0   B57: #	B53 B58 &lt;- B56 B58 	Loop: B57-B58 inner main of N401 Freq: 0.0539872
4c0   	movdl   R11, XMM3	# spill
4c5   	movl    RBX, [R11 + #16 + RDI &lt;&lt; #2]	# int
4ca   	movl    R11, RDI	# spill
4cd   	addl    R11, [RSP + #0 (32-bit)]	# int
4d1   	movl    R10, RDI	# spill
4d4   	incl    R10	# int
4d7   	movl    RDI, R10	# spill
4da   	movslq  R10, R11	# i2l
4dd   	movdl   R11, XMM2	# spill
4e2   	movzwl  R10, [R11 + #18 + R10 &lt;&lt; #1]	# ushort/char
4e8   	cmpl    RBX, R10
4eb   	jne,s   B53  P=0.494206 C=40645.000000
4eb
4ed   B58: #	B57 B59 &lt;- B57  Freq: 0.0273064
4ed   	movl    R10, RDI	# spill
4f0   	cmpl    R10, R9
4f3   	jl,s   B57	# loop end  P=0.923122 C=20558.000000
4f3
4f5   B59: #	B66 B60 &lt;- B55 B58  Freq: 0.00209928
4f5   	cmpl    RDI, [RSP + #8 (32-bit)]
4f9   	jge,s   B66  P=0.500000 C=-1.000000
4f9
4fb   B60: #	B61 &lt;- B59  Freq: 0.00104964
4fb   	movl    R11, RDI	# spill
4fe   	# castII of R11
4fe   	movl    R9, R11	# spill
      	nop 	# 3 bytes pad for loops and calls

504   B61: #	B114 B62 &lt;- B60 B65 	Loop: B61-B65 inner post of N1535 Freq: 0.00140495
504   	movl    R11, R9	# spill
507   	addl    R11, [RSP + #0 (32-bit)]	# int
50b   	movl    R8, R11	# spill
50e   	incl    R8	# int
511   	movl    RBX, R8	# spill
514   	movdl   R8, XMM3	# spill
519   	movl    R8, [R8 + #16 + R9 &lt;&lt; #2]	# int
51e   	movdl   XMM8, R8	# spill
523   	cmpl    RBX, R13
526   	jge     B114  P=0.000000 C=40646.000000
526
52c   B62: #	B112 B63 &lt;- B61  Freq: 0.00140495
52c   	movl    R8, RBX	# spill
52f   	testl   R8, R8
532   	jl     B112  P=0.000000 C=5670.000000
532
538   B63: #	B116 B64 &lt;- B62  Freq: 0.00140494
538   	movslq  R10, R11	# i2l
53b   	movdl   R11, XMM2	# spill
540   	movzwl  R8, [R11 + #18 + R10 &lt;&lt; #1]	# ushort/char
546   	cmpl    RBX, [RSP + #4 (32-bit)]
54a   	jge     B116  P=0.000000 C=5670.000000
54a
550   B64: #	B53 B65 &lt;- B63  Freq: 0.00140494
550   	movdl   R10, XMM8	# spill
555   	cmpl    R10, R8
558   	jne     B53  P=0.494206 C=40645.000000
558
55e   B65: #	B61 B66 &lt;- B64  Freq: 0.000710612
55e   	movl    R10, R9	# spill
561   	incl    R10	# int
564   	movl    R9, R10	# spill
567   	cmpl    R10, [RSP + #8 (32-bit)]
56c   	jl,s   B61	# loop end  P=0.500000 C=20558.000000
56c
56e   B66: #	B150 B67 &lt;- B59 B43 B65  Freq: 0.00848558
56e   	movdl   R11, XMM7	# spill
573   	movl    R10, R11	# spill
576   	incl    R10	# int
579   	movl    R9, R10	# spill
57c   	movdl   R10, XMM6	# spill
581   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
585   	NullCheck R10
585
585   B67: #	B96 B68 &lt;- B66  Freq: 0.00848557
585   	decode_heap_oop_not_null R10,R10
585   	movl    RSI, #-10	# int
58a   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$Dot: 0x00007f4488042db0:Constant:exact *	# compressed klass ptr
591   	jne,u  B96  P=0.000302 C=-1.000000
591
597   B68: #	B129 B69 &lt;- B67  Freq: 0.00848301
597   	# checkcastPP of R10
597   	movl    R11, R9	# spill
59a   	cmpl    R11, R13
59d   	jge     B129  P=0.000000 C=3390.000000
59d
5a3   B69: #	B128 B70 &lt;- B68  Freq: 0.008483
5a3   	testl   R11, R11
5a6   	jl     B128  P=0.000000 C=5670.000000
5a6
5ac   B70: #	B130 B71 &lt;- B69  Freq: 0.008483
5ac   	movl    RSI, #-155	# int
5b1   	cmpl    R11, [RSP + #4 (32-bit)]
5b6   	jge     B130  P=0.000000 C=5670.000000
5b6
5bc   B71: #	B126 B72 &lt;- B70  Freq: 0.00848299
5bc   	cmpl    R11, [RSP + #4 (32-bit)]	# unsigned
5c1   	jnb,u  B126  P=0.000001 C=-1.000000
5c1
5c7   B72: #	B131 B73 &lt;- B71  Freq: 0.00848299
5c7   	movdl   R9, XMM2	# spill
5cc   	movzwl  R9, [R9 + #18 + RCX &lt;&lt; #1]	# ushort/char
5d2   	movdl   R8, XMM7	# spill
5d7   	addl    R8, #2	# int
5db   	cmpl    R9, #55296
5e2   	jge     B131  P=0.000000 C=9671.000000
5e2
5e8   B73: #	B132 B74 &lt;- B72  Freq: 0.00848298
5e8   	movl    RBX, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
5ec   	cmpl    R9, #10
5f0   	je     B132  P=0.000000 C=3390.000000
5f0
5f6   B74: #	B133 B75 &lt;- B73  Freq: 0.00848298
5f6   	cmpl    R9, #13
5fa   	je     B133  P=0.000000 C=3390.000000
5fa
600   B75: #	B134 B76 &lt;- B74  Freq: 0.00848297
600   	movl    RBP, R9	# spill
603   	orl     RBP, #1	# int
606   	cmpl    RBP, #8233
60c   	je     B134  P=0.000000 C=3390.000000
60c
612   B76: #	B135 B77 &lt;- B75  Freq: 0.00848297
612   	cmpl    R9, #133
619   	je     B135  P=0.000000 C=3390.000000
619
61f   B77: #	B151 B78 &lt;- B76  Freq: 0.00848297
61f   	movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
623   	NullCheck RBX
623
623   B78: #	B127 B79 &lt;- B77  Freq: 0.00848296
623   	decode_heap_oop_not_null RSI,RBX
626   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Slice: 0x00007f4488042680:Constant:exact *	# compressed klass ptr
62d   	jne,u  B127  P=0.000001 C=-1.000000
62d
633   B79: #	B149 B80 &lt;- B78  Freq: 0.00848295
633   	# checkcastPP of RSI
633   	movdq   RDX, XMM0	# spill
638   	movl    RCX, R8	# spill
63b   	movq    R8, R14	# spill
      	nop 	# 1 bytes pad for loops and calls
63f   	call,static  java.util.regex.Pattern$Slice::match
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=1604}
644
644   B80: #	B17 &lt;- B79  Freq: 0.00848278
        # Block is sole successor of call
644   	jmp     B17
644
649   B81: #	B82 &lt;- B19  Freq: 3.16626e-07
649   	movl    RBP, R11	# spill
649
64c   B82: #	B25 B83 &lt;- B81 B22  Freq: 0.0227927
64c   	cmpl    RBP, [RSP + #20 (32-bit)]
650   	jge     B25  P=0.500000 C=-1.000000
650
656   B83: #	B84 &lt;- B82  Freq: 0.0113964
656   	# castII of RBP
      	nop 	# 2 bytes pad for loops and calls

658   B84: #	B105 B85 &lt;- B83 B88 	Loop: B84-B88 inner post of N1529 Freq: 0.0152541
658   	movl    R13, RBP	# spill
65b   	addl    R13, RCX	# int
65e   	movl    R9, [R8 + #16 + RBP &lt;&lt; #2]	# int
663   	cmpl    R13, RDI
666   	jge     B105  P=0.000000 C=40646.000000
666
66c   B85: #	B103 B86 &lt;- B84  Freq: 0.0152541
66c   	movzwl  R10, [RAX + #16 + R13 &lt;&lt; #1]	# ushort/char
672   	testl   R13, R13
675   	jl     B103  P=0.000000 C=5670.000000
675
67b   B86: #	B107 B87 &lt;- B85  Freq: 0.0152541
67b   	cmpl    R13, [RSP + #24 (32-bit)]
680   	jge     B107  P=0.000000 C=5670.000000
680
686   B87: #	B16 B88 &lt;- B86  Freq: 0.015254
686   	incl    RBP	# int
688   	cmpl    R9, R10
68b   	jne     B16  P=0.494206 C=40645.000000
68b
691   B88: #	B84 B89 &lt;- B87  Freq: 0.00771541
691   	cmpl    RBP, [RSP + #20 (32-bit)]
695   	jl,s   B84	# loop end  P=0.500000 C=20558.000000
695
697   B89: #	B25 &lt;- B88  Freq: 0.0038577
697   	jmp     B25
697
69c   B90: #	B136 B91 &lt;- B26  Freq: 2.78253e-05
69c   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f4488042e80:Constant:exact *	# compressed klass ptr
6a3   	jne,u  B136  P=0.000001 C=-1.000000
6a3
6a9   B91: #	B152 B92 &lt;- B90  Freq: 2.78252e-05
6a9   	movdq   R10, XMM0	# spill
6ae   	movl    R8, [R10 + #24 (8-bit)]	# int ! Field: java/util/regex/Matcher.acceptMode
6b2   	NullCheck R10
6b2
6b2   B92: #	B138 B93 &lt;- B91  Freq: 2.78252e-05
6b2   	movl    R9, [R10 + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
6b6   	cmpl    R8, #1
6ba   	je     B138  P=0.000000 C=7713.000000
6ba
6c0   B93: #	B153 B94 &lt;- B92  Freq: 2.78252e-05
6c0   	movl    R8, [rsp + #0]	# spill
6c4   	movl    [R10 + #32 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.last
6c8   	movl    RBP, [R10 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
6cc   	movl    R11, [RBP + #12 (8-bit)]	# range
6d0   	NullCheck RBP
6d0
6d0   B94: #	B137 B95 &lt;- B93  Freq: 2.78252e-05
6d0   	movl    RSI, #-28	# int
6d5   	cmpl    R11, #1	# unsigned
6d9   	jbe,u  B137  P=0.000001 C=-1.000000
6d9
6df   B95: #	B17 &lt;- B94  Freq: 2.78251e-05
6df   	movl    [RBP + #16 (8-bit)], R9	# int
6e3   	movl    [RBP + #20 (8-bit)], R8	# int
6e7   	movl    RAX, #1	# int
6ec   	jmp     B17
6ec
6f1   B96: #	B139 B97 &lt;- B67  Freq: 2.56278e-06
6f1   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f4488042e80:Constant:exact *	# compressed klass ptr
6f8   	jne,u  B139  P=0.000001 C=-1.000000
6f8
6fe   B97: #	B141 B98 &lt;- B96  Freq: 2.56278e-06
6fe   	movdl   R10, XMM4	# spill
703   	cmpl    R10, #1
707   	je     B141  P=0.000000 C=7713.000000
707
70d   B98: #	B154 B99 &lt;- B97  Freq: 2.56278e-06
70d   	movdq   R11, XMM0	# spill
712   	movl    [R11 + #32 (8-bit)], R9	# int ! Field: java/util/regex/Matcher.last
716   	movdl   R8, XMM1	# spill
71b   	movl    R10, [R8 + #12 (8-bit)]	# range
71f   	NullCheck R8
71f
71f   B99: #	B140 B100 &lt;- B98  Freq: 2.56278e-06
71f   	movl    RSI, #-28	# int
724   	cmpl    R10, #1	# unsigned
728   	jbe,u  B140  P=0.000001 C=-1.000000
728
72e   B100: #	B17 &lt;- B99  Freq: 2.56278e-06
72e   	movl    R11, RDX	# spill
731   	movl    [R8 + #16 (8-bit)], R11	# int
735   	movl    [R8 + #20 (8-bit)], R9	# int
739   	movl    RAX, #1	# int
73e   	jmp     B17
73e
743   B101: #	N1887 &lt;- B10 B3 B4 B5 B6 B7 B8 B9  Freq: 7.45849e-06
743   	movl    RSI, #-122	# int
748   	movl    RBP, RCX	# spill
74a   	movl    [rsp + #0], R8	# spill
74e   	movsd   [rsp + #8], XMM2	# spill
754   	movsd   [rsp + #24], XMM0	# spill
75a   	movsd   [rsp + #32], XMM1	# spill
      	nop 	# 3 bytes pad for loops and calls
763   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:21  L[0]=rsp + #8 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=#0
        # OopMap{[0]=NarrowOop [8]=Oop [24]=Oop [32]=Oop off=1896}
768   	int3	# ShouldNotReachHere
768
76d   B102: #	B103 &lt;- B13  Freq: 6.17795e-07
76d   	movl    RBP, R11	# spill
76d
770   B103: #	N1887 &lt;- B85 B102  Freq: 6.25422e-07
770   	movl    RSI, #-155	# int
775   	movl    [rsp + #0], RCX	# spill
778   	movl    [rsp + #4], R8	# spill
77d   	movl    [rsp + #8], R9	# spill
782   	movl    [rsp + #16], R13	# spill
787   	movsd   [rsp + #24], XMM2	# spill
78d   	movsd   [rsp + #32], XMM0	# spill
793   	movsd   [rsp + #48], XMM3	# spill
      	nop 	# 2 bytes pad for loops and calls
79b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #48 L[1]=rsp + #16 STK[0]=rsp + #16
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #0 L[3]=rsp + #48 L[4]=rsp + #4 L[5]=rsp + #20 L[6]=RBP STK[0]=rsp + #8
        # OopMap{[4]=NarrowOop [24]=Oop [32]=Oop [48]=Oop off=1952}
7a0   	int3	# ShouldNotReachHere
7a0
7a5   B104: #	B105 &lt;- B12  Freq: 5.89175e-07
7a5   	movl    RBP, R11	# spill
7a5
7a8   B105: #	N1887 &lt;- B84 B104  Freq: 5.96449e-07
7a8   	movl    [rsp + #0], RCX	# spill
7ab   	movl    [rsp + #4], R8	# spill
7b0   	movl    [rsp + #8], R13	# spill
7b5   	movl    [rsp + #12], RDI	# spill
7b9   	movsd   [rsp + #24], XMM2	# spill
7bf   	movsd   [rsp + #32], XMM0	# spill
7c5   	movsd   [rsp + #40], XMM1	# spill
7cb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:29  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #0 L[3]=rsp + #40 L[4]=rsp + #4 L[5]=rsp + #20 L[6]=RBP STK[0]=rsp + #8 STK[1]=rsp + #12
        # OopMap{[4]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=2000}
7d0   	int3	# ShouldNotReachHere
7d0
7d5   B106: #	B107 &lt;- B14  Freq: 5.89175e-07
7d5   	movl    RBP, R11	# spill
7d5
7d8   B107: #	N1887 &lt;- B86 B106  Freq: 5.96449e-07
7d8   	movl    [rsp + #0], RCX	# spill
7db   	movl    [rsp + #4], R8	# spill
7e0   	movl    [rsp + #8], R9	# spill
7e5   	movl    [rsp + #16], R13	# spill
7ea   	movsd   [rsp + #32], XMM2	# spill
7f0   	movsd   [rsp + #40], XMM0	# spill
7f6   	movsd   [rsp + #56], XMM3	# spill
7fc   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
803   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #56 L[1]=rsp + #16 STK[0]=rsp + #16 STK[1]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=rsp + #0 L[3]=rsp + #56 L[4]=rsp + #4 L[5]=rsp + #20 L[6]=RBP STK[0]=rsp + #8
        # OopMap{[4]=NarrowOop [32]=Oop [40]=Oop [56]=Oop off=2056}
808   	int3	# ShouldNotReachHere
808
80d   B108: #	N1887 &lt;- B34  Freq: 9.33262e-08
80d   	movsd   [rsp + #8], XMM0	# spill
813   	movsd   [rsp + #16], XMM1	# spill
819   	movq    [rsp + #24], R14	# spill
81e   	movss   [rsp + #32], XMM2	# spill
824   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
82b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #0
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #24 L[1]=rsp + #0 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [24]=Oop [32]=NarrowOop off=2096}
830   	int3	# ShouldNotReachHere
830
835   B109: #	N1887 &lt;- B30  Freq: 9.21035e-08
835   	movl    RSI, #-34	# int
83a   	movsd   [rsp + #8], XMM0	# spill
840   	movq    [rsp + #24], R10	# spill
845   	movsd   [rsp + #32], XMM1	# spill
84b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=_ L[3]=_ STK[0]=rsp + #24 STK[1]=rsp + #0
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [32]=Oop off=2128}
850   	int3	# ShouldNotReachHere
850
855   B110: #	N1887 &lt;- B41  Freq: 9.21028e-08
855   	movl    RBP, R11	# spill
858   	movsd   [rsp + #0], XMM0	# spill
85d   	movl    [rsp + #8], RAX	# spill
861   	movq    [rsp + #16], R14	# spill
866   	movl    RSI, #-34	# int
86b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #8 STK[3]=rsp + #16
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [0]=Oop [16]=Oop off=2160}
870   	int3	# ShouldNotReachHere
870
875   B111: #	N1887 &lt;- B47 B44 B45 B46  Freq: 3.43474e-07
875   	movsd   [rsp + #0], XMM0	# spill
87a   	movl    [rsp + #12], RAX	# spill
87e   	movq    [rsp + #16], R14	# spill
883   	movss   [rsp + #24], XMM3	# spill
889   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
88f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:21  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #24 L[5]=rsp + #8 L[6]=#0
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=NarrowOop off=2196}
894   	int3	# ShouldNotReachHere
894
899   B112: #	B113 &lt;- B62  Freq: 7.02473e-10
899   	movl    RDI, R9	# spill
899
89c   B113: #	N1887 &lt;- B112 B50  Freq: 5.76033e-08
89c   	movsd   [rsp + #0], XMM0	# spill
8a1   	movl    [rsp + #12], RAX	# spill
8a5   	movss   [rsp + #24], XMM3	# spill
8ab   	movl    [rsp + #28], RDI	# spill
8af   	movss   [rsp + #32], XMM8	# spill
8b5   	movq    [rsp + #40], R14	# spill
8ba   	movl    [rsp + #48], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
8bf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #40 L[1]=rsp + #48 STK[0]=rsp + #48
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #40 L[4]=rsp + #24 L[5]=rsp + #8 L[6]=rsp + #28 STK[0]=rsp + #32
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [24]=NarrowOop [40]=Oop off=2244}
8c4   	int3	# ShouldNotReachHere
8c4
8c9   B114: #	B115 &lt;- B61  Freq: 6.69931e-10
8c9   	movl    RDI, R9	# spill
8c9
8cc   B115: #	N1887 &lt;- B114 B49  Freq: 5.49348e-08
8cc   	movsd   [rsp + #0], XMM0	# spill
8d1   	movl    [rsp + #12], RAX	# spill
8d5   	movq    [rsp + #16], R14	# spill
8da   	movss   [rsp + #24], XMM3	# spill
8e0   	movl    [rsp + #28], RDI	# spill
8e4   	movl    [rsp + #32], RBX	# spill
8e8   	movl    [rsp + #36], R13	# spill
8ed   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
8f3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:29  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #24 L[5]=rsp + #8 L[6]=rsp + #28 STK[0]=rsp + #32 STK[1]=rsp + #36
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=NarrowOop off=2296}
8f8   	int3	# ShouldNotReachHere
8f8
8fd   B116: #	B117 &lt;- B63  Freq: 6.6993e-10
8fd   	movl    RDI, R9	# spill
8fd
900   B117: #	N1887 &lt;- B116 B51  Freq: 5.49347e-08
900   	movsd   [rsp + #16], XMM0	# spill
906   	movl    [rsp + #0], RAX	# spill
909   	movss   [rsp + #12], XMM3	# spill
90f   	movl    [rsp + #32], RDI	# spill
913   	movss   [rsp + #36], XMM8	# spill
919   	movq    [rsp + #40], R14	# spill
91e   	movl    [rsp + #52], RBX	# spill
922   	movl    RSI, #-155	# int
927   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #40 L[1]=rsp + #52 STK[0]=rsp + #52 STK[1]=rsp + #4
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #0 L[3]=rsp + #40 L[4]=rsp + #12 L[5]=rsp + #8 L[6]=rsp + #32 STK[0]=rsp + #36
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [12]=NarrowOop [16]=Oop [40]=Oop off=2348}
92c   	int3	# ShouldNotReachHere
92c
931   B118: #	N1887 &lt;- B31  Freq: 4.60517e-08
931   	movsd   [rsp + #8], XMM0	# spill
937   	movsd   [rsp + #16], XMM1	# spill
93d   	movq    [rsp + #32], R14	# spill
942   	movl    RSI, #-155	# int
947   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #32 L[1]=rsp + #0 STK[0]=rsp + #0
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [32]=Oop off=2380}
94c   	int3	# ShouldNotReachHere
94c
951   B119: #	N1887 &lt;- B28  Freq: 4.39184e-08
951   	movsd   [rsp + #8], XMM0	# spill
957   	movsd   [rsp + #16], XMM1	# spill
95d   	movl    [rsp + #24], R13	# spill
      	nop 	# 1 bytes pad for loops and calls
963   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:5  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=_ STK[0]=rsp + #0 STK[1]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop off=2408}
968   	int3	# ShouldNotReachHere
968
96d   B120: #	N1887 &lt;- B33  Freq: 4.39182e-08
96d   	movsd   [rsp + #8], XMM0	# spill
973   	movsd   [rsp + #16], XMM1	# spill
979   	movq    [rsp + #40], R14	# spill
97e   	movl    RSI, #-155	# int
983   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #40 L[1]=rsp + #0 STK[0]=rsp + #0 STK[1]=rsp + #4
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #40 L[1]=rsp + #0 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop off=2440}
988   	int3	# ShouldNotReachHere
988
98d   B121: #	N1887 &lt;- B35  Freq: 4.39182e-08
98d   	movsd   [rsp + #8], XMM0	# spill
993   	movsd   [rsp + #16], XMM1	# spill
999   	movq    [rsp + #24], R14	# spill
99e   	movl    [rsp + #36], R11	# spill
9a3   	movl    [rsp + #40], R11	# spill
9a8   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
9af   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #40 STK[0]=rsp + #36 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #24 L[1]=rsp + #0 L[2]=rsp + #36 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [24]=Oop off=2484}
9b4   	int3	# ShouldNotReachHere
9b4
9b9   B122: #	N1887 &lt;- B36  Freq: 4.39182e-08
9b9   	movsd   [rsp + #8], XMM0	# spill
9bf   	movq    [rsp + #16], R14	# spill
9c4   	movl    [rsp + #24], RDX	# spill
9c8   	movl    [rsp + #28], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
9cf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #24 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop off=2516}
9d4   	int3	# ShouldNotReachHere
9d4
9d9   B123: #	N1887 &lt;- B37  Freq: 4.39181e-08
9d9   	movsd   [rsp + #8], XMM0	# spill
9df   	movq    [rsp + #16], R14	# spill
9e4   	movl    [rsp + #24], R11	# spill
9e9   	movl    [rsp + #28], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
9ef   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #24 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop off=2548}
9f4   	int3	# ShouldNotReachHere
9f4
9f9   B124: #	N1887 &lt;- B38  Freq: 4.39181e-08
9f9   	movsd   [rsp + #8], XMM0	# spill
9ff   	movq    [rsp + #16], R14	# spill
a04   	movl    [rsp + #24], RDX	# spill
a08   	movl    [rsp + #28], RBX	# spill
a0c   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
a13   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #24 STK[0]=rsp + #28 STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop off=2584}
a18   	int3	# ShouldNotReachHere
a18
a1d   B125: #	N1887 &lt;- B39  Freq: 4.39181e-08
a1d   	movsd   [rsp + #8], XMM0	# spill
a23   	movq    [rsp + #16], R14	# spill
a28   	movl    [rsp + #24], RDX	# spill
a2c   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
a33   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop off=2616}
a38   	int3	# ShouldNotReachHere
a38
a3d   B126: #	N1887 &lt;- B71  Freq: 8.59564e-09
a3d   	movq    RBP, R10	# spill
a40   	movsd   [rsp + #0], XMM0	# spill
a45   	movq    [rsp + #24], R14	# spill
a4a   	movl    [rsp + #12], R11	# spill
a4f   	movss   [rsp + #32], XMM2	# spill
a55   	movl    [rsp + #36], R11	# spill
a5a   	movl    RSI, #-28	# int
a5f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #12
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #24 L[1]=rsp + #36 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [32]=NarrowOop off=2660}
a64   	int3	# ShouldNotReachHere
a64
a69   B127: #	N1887 &lt;- B78  Freq: 8.48296e-09
a69   	movl    RSI, #-34	# int
a6e   	movl    RBP, RBX	# spill
a70   	movsd   [rsp + #0], XMM0	# spill
a75   	movl    [rsp + #8], R8	# spill
a7a   	movq    [rsp + #16], R14	# spill
a7f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #8 STK[3]=rsp + #16
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [0]=Oop [16]=Oop off=2692}
a84   	int3	# ShouldNotReachHere
a84
a89   B128: #	N1887 &lt;- B69  Freq: 4.2415e-09
a89   	movq    RBP, R10	# spill
a8c   	movsd   [rsp + #0], XMM0	# spill
a91   	movq    [rsp + #24], R14	# spill
a96   	movl    [rsp + #12], R11	# spill
a9b   	movq    [rsp + #32], R14	# spill
aa0   	movl    [rsp + #40], R11	# spill
aa5   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
aab   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #24 L[1]=rsp + #12 STK[0]=rsp + #12
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [32]=Oop off=2736}
ab0   	int3	# ShouldNotReachHere
ab0
ab5   B129: #	N1887 &lt;- B68  Freq: 4.04501e-09
ab5   	movq    RBP, R10	# spill
ab8   	movsd   [rsp + #0], XMM0	# spill
abd   	movq    [rsp + #16], R14	# spill
ac2   	movl    [rsp + #12], R11	# spill
ac7   	movl    [rsp + #24], R13	# spill
acc   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
ad3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:5  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=_ STK[0]=rsp + #12 STK[1]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=2776}
ad8   	int3	# ShouldNotReachHere
ad8
add   B130: #	N1887 &lt;- B70  Freq: 4.04501e-09
add   	movq    RBP, R10	# spill
ae0   	movsd   [rsp + #8], XMM0	# spill
ae6   	movq    [rsp + #24], R14	# spill
aeb   	movl    [rsp + #32], R11	# spill
af0   	movq    [rsp + #40], R14	# spill
af5   	movl    [rsp + #36], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
afb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #24 L[1]=rsp + #32 STK[0]=rsp + #32 STK[1]=rsp + #4
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #40 L[1]=rsp + #36 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #32 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [40]=Oop off=2816}
b00   	int3	# ShouldNotReachHere
b00
b05   B131: #	N1887 &lt;- B72  Freq: 4.045e-09
b05   	movq    RBP, R10	# spill
b08   	movsd   [rsp + #0], XMM0	# spill
b0d   	movq    [rsp + #24], R14	# spill
b12   	movl    [rsp + #12], R11	# spill
b17   	movl    [rsp + #36], R9	# spill
b1c   	movl    [rsp + #40], R9	# spill
      	nop 	# 2 bytes pad for loops and calls
b23   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #40 STK[0]=rsp + #36 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #24 L[1]=rsp + #12 L[2]=rsp + #36 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [24]=Oop off=2856}
b28   	int3	# ShouldNotReachHere
b28
b2d   B132: #	N1887 &lt;- B73  Freq: 4.045e-09
b2d   	movq    RBP, R10	# spill
b30   	movsd   [rsp + #0], XMM0	# spill
b35   	movl    [rsp + #8], R11	# spill
b3a   	movq    [rsp + #16], R14	# spill
b3f   	movl    [rsp + #24], R9	# spill
b44   	movl    [rsp + #28], R9	# spill
      	nop 	# 2 bytes pad for loops and calls
b4b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #24 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=2896}
b50   	int3	# ShouldNotReachHere
b50
b55   B133: #	N1887 &lt;- B74  Freq: 4.045e-09
b55   	movq    RBP, R10	# spill
b58   	movsd   [rsp + #0], XMM0	# spill
b5d   	movl    [rsp + #8], R11	# spill
b62   	movq    [rsp + #16], R14	# spill
b67   	movl    [rsp + #24], R9	# spill
b6c   	movl    [rsp + #28], R9	# spill
      	nop 	# 2 bytes pad for loops and calls
b73   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #24 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=2936}
b78   	int3	# ShouldNotReachHere
b78
b7d   B134: #	N1887 &lt;- B75  Freq: 4.045e-09
b7d   	movq    [rsp + #0], R10	# spill
b81   	movsd   [rsp + #8], XMM0	# spill
b87   	movl    [rsp + #16], R11	# spill
b8c   	movq    [rsp + #24], R14	# spill
b91   	movl    [rsp + #32], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
b97   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #32 STK[0]=RBP STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #24 L[4]=rsp + #32
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{[0]=Oop [8]=Oop [24]=Oop off=2972}
b9c   	int3	# ShouldNotReachHere
b9c
ba1   B135: #	N1887 &lt;- B76  Freq: 4.045e-09
ba1   	movq    RBP, R10	# spill
ba4   	movsd   [rsp + #0], XMM0	# spill
ba9   	movl    [rsp + #8], R11	# spill
bae   	movq    [rsp + #16], R14	# spill
bb3   	movl    [rsp + #24], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
bbb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=3008}
bc0   	int3	# ShouldNotReachHere
bc0
bc5   B136: #	N1887 &lt;- B90  Freq: 2.78253e-11
bc5   	movl    RSI, #-58	# int
bca   	movsd   [rsp + #8], XMM0	# spill
bd0   	movsd   [rsp + #16], XMM1	# spill
      	nop 	# 1 bytes pad for loops and calls
bd7   	call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP STK[1]=rsp + #8 STK[2]=rsp + #0 STK[3]=rsp + #16
        # OopMap{rbp=NarrowOop [8]=Oop [16]=Oop off=3036}
bdc   	int3	# ShouldNotReachHere
bdc
be1   B137: #	N1887 &lt;- B94  Freq: 2.78252e-11
be1   	movq    [rsp + #0], R10	# spill
be5   	movl    [rsp + #8], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
beb   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=_ STK[0]=RBP STK[1]=#0 STK[2]=rsp + #8
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [0]=Oop off=3056}
bf0   	int3	# ShouldNotReachHere
bf0
bf5   B138: #	N1887 &lt;- B92  Freq: 1.32681e-11
bf5   	movq    RBP, R10	# spill
bf8   	movl    [rsp + #4], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
bff   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:5  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=_ STK[0]=rsp + #4 STK[1]=#1
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop off=3076}
c04   	int3	# ShouldNotReachHere
c04
c09   B139: #	N1887 &lt;- B96  Freq: 2.56278e-12
c09   	movdl   RBP, XMM6	# spill
c0d   	movsd   [rsp + #0], XMM0	# spill
c12   	movl    [rsp + #8], R9	# spill
c17   	movq    [rsp + #16], R14	# spill
c1c   	movl    RSI, #-58	# int
      	nop 	# 2 bytes pad for loops and calls
c23   	call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #8 STK[3]=rsp + #16
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [0]=Oop [16]=Oop off=3112}
c28   	int3	# ShouldNotReachHere
c28
c2d   B140: #	N1887 &lt;- B99  Freq: 2.56278e-12
c2d   	movq    RBP, R11	# spill
c30   	movl    [rsp + #0], R8	# spill
c34   	movl    [rsp + #4], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
c3b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=RBP L[2]=_ L[3]=_ STK[0]=rsp + #0 STK[1]=#0 STK[2]=rsp + #4
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=NarrowOop off=3136}
c40   	int3	# ShouldNotReachHere
c40
c45   B141: #	N1887 &lt;- B97  Freq: 1.22203e-12
c45   	movdq   RBP, XMM0	# spill
c4a   	movl    [rsp + #0], R9	# spill
c4e   	movl    [rsp + #4], R10	# spill
c53   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
c5b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:5  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=_ STK[0]=rsp + #4 STK[1]=#1
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop off=3168}
c60   	int3	# ShouldNotReachHere
c60
c65   B142: #	N1887 &lt;- B1  Freq: 1.01328e-06
c65   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
c6b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=3184}
c70   	int3	# ShouldNotReachHere
c70
c75   B143: #	N1887 &lt;- B25  Freq: 9.33551e-08
c75   	movdq   RBP, XMM0	# spill
c7a   	movsd   [rsp + #8], XMM1	# spill
c80   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
c87   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=3212}
c8c   	int3	# ShouldNotReachHere
c8c
c91   B144: #	N1887 &lt;- B27  Freq: 9.33268e-08
c91   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
c97   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3228}
c9c   	int3	# ShouldNotReachHere
c9c
ca1   B145: #	N1887 &lt;- B29  Freq: 9.33266e-08
ca1   	movl    RSI, #-10	# int
ca6   	movl    RBP, [rsp + #0]	# spill
      	nop 	# 2 bytes pad for loops and calls
cab   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3248}
cb0   	int3	# ShouldNotReachHere
cb0
cb5   B146: #	N1887 &lt;- B32  Freq: 9.33264e-08
      	nop 	# 2 bytes pad for loops and calls
cb7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3260}
cbc   	int3	# ShouldNotReachHere
cbc
cc1   B147: #	N1887 &lt;- B40  Freq: 9.33259e-08
cc1   	movdq   RBP, XMM0	# spill
cc6   	movl    [rsp + #0], RAX	# spill
cc9   	movq    [rsp + #8], R14	# spill
      	nop 	# 1 bytes pad for loops and calls
ccf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop off=3284}
cd4   	int3	# ShouldNotReachHere
cd4
cd9   B148: #	N1887 &lt;- B42  Freq: 9.33257e-08
      	nop 	# 2 bytes pad for loops and calls
cdb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3296}
ce0   	int3	# ShouldNotReachHere
ce0
ce5   B149: #	N1887 &lt;- B79  Freq: 8.48295e-08
ce5   	# exception oop is in rax; no code emitted
ce5   	movq    RSI, RAX	# spill
ce8   	addq    rsp, 80	# Destroy frame
	popq   rbp

ced   	jmp     rethrow_stub
ced
cf2   B150: #	N1887 &lt;- B66  Freq: 8.59826e-09
cf2   	movdq   RBP, XMM0	# spill
cf7   	movl    [rsp + #0], R9	# spill
cfb   	movq    [rsp + #8], R14	# spill
d00   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
d07   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop off=3340}
d0c   	int3	# ShouldNotReachHere
d0c
d11   B151: #	N1887 &lt;- B77  Freq: 8.59561e-09
d11   	movl    RSI, #-10	# int
d16   	movdq   RBP, XMM0	# spill
d1b   	movl    [rsp + #0], R8	# spill
d1f   	movq    [rsp + #8], R14	# spill
      	nop 	# 3 bytes pad for loops and calls
d27   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop off=3372}
d2c   	int3	# ShouldNotReachHere
d2c
d31   B152: #	N1887 &lt;- B91  Freq: 2.81947e-11
d31   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
d37   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3388}
d3c   	int3	# ShouldNotReachHere
d3c
d41   B153: #	N1887 &lt;- B93  Freq: 2.81947e-11
d41   	movl    RBP, R9	# spill
d44   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
d4b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3408}
d50   	int3	# ShouldNotReachHere
d50
d55   B154: #	N1887 &lt;- B98  Freq: 2.59681e-12
d55   	movl    RBP, RDX	# spill
d57   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3420}
d5c   	int3	# ShouldNotReachHere
d5c

</opto_assembly>
<writer thread='139933088626432'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='298'>
{method}
 - this oop:          0x00007f44ccd3f2e0
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f44ccd3b0e8 constant pool [680] {0x00007f44ccd3b0e8} for &apos;java/lang/String&apos; cache=0x00007f44cce045e0
 - access:            0xc1000001  public 
 - name:              &apos;equals&apos;
 - signature:         &apos;(Ljava/lang/Object;)Z&apos;
 - max stack:         4
 - max locals:        7
 - size of params:    2
 - method size:       12
 - intrinsic id:      67 _equals
 - highest level:     3
 - vtable index:      1
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef7f0: 0xbb000000 i2c: 0x00007f44b9145fa0 c2i: 0x00007f44b91460de c2iUV: 0x00007f44b91460b1
 - compiled entry     0x00007f44b922cd60
 - code size:         81
 - code start:        0x00007f44ccd3f220
 - code end (excl):   0x00007f44ccd3f271
 - method data:       0x00007f44ccf7f358
 - checked ex length: 0
 - linenumber start:  0x00007f44ccd3f271
 - localvar length:   7
 - localvar start:    0x00007f44ccd3f28a
 - compiled code: nmethod   2129    8       3       java.lang.String::equals (81 bytes)
#
#  bool ( java/lang/String:NotNull:exact *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N348: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B30 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (168 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	movq    R10, RSI	# spill
02f   	cmpq    RSI, RDX	# ptr
032   	je,u  B30  P=0.094750 C=4095.000000
032
038   B2: #	B28 B3 &lt;- B1  Freq: 0.90525
038   	testq   RDX, RDX	# ptr
03b   	je     B28  P=0.001000 C=-1.000000
03b
041   B3: #	B34 B4 &lt;- B2  Freq: 0.904345
041   	movl    R11, [RDX + #8 (8-bit)]	# compressed klass ptr
045   	movl    RSI, #-34	# int
04a   	movl    RBP, #2147483647	# int
04f   	cmpl    R11, narrowklass: precise klass java/lang/String: 0x00007f44c814d2f0:Constant:exact *	# compressed klass ptr
056   	jne,u  B34  P=0.000000 C=-1.000000
056
05c   B4: #	B35 B5 &lt;- B3  Freq: 0.904345
05c   	# checkcastPP of RDX
05c   	movl    RSI, #-10	# int
061   	movl    RAX, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
064   	movl    RDI, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
068   	movl    RBX, [RDI + #12 (8-bit)]	# range
06b   	NullCheck RDI
06b
06b   B5: #	B36 B6 &lt;- B4  Freq: 0.904344
06b   	movl    R11, #-1	# int
071   	movl    RDX, [RAX + #12 (8-bit)]	# range
074   	NullCheck RAX
074
074   B6: #	B28 B7 &lt;- B5  Freq: 0.904343
074   	movl    R8, RBX	# spill
077   	subl    R8, RDX	# int
07a   	decl    R8	# int
07d   	cmpl    R8, R11
080   	cmovllt R8, R11	# max
084   	movl    R9, R8	# spill
087   	addl    R9, #3	# int
08b   	cmpl    R8, R9
08e   	cmovlg R9, RBP	# signed, int
092   	cmpl    RBX, RDX
094   	jne     B28  P=0.328926 C=3706.000000
094
09a   B7: #	B27 B8 &lt;- B6  Freq: 0.606881
09a   	movl    RCX, RBX	# spill
09c   	addl    RCX, #-2	# int
09f   	testl   RBX, RBX
0a1   	je     B27  P=0.075645 C=32507.000000
0a1
0a7   B8: #	B9 &lt;- B7  Freq: 0.560974
0a7   	movl    R10, RBX	# spill
0aa   	decl    R10	# int
0ad   	movslq  RSI, RBX	# i2l
0b0   	cmpl    RCX, R11
0b3   	cmovllt RCX, R11	# max
0b7   	movl    R14, R10	# spill
0ba   	xorl    R8, R8	# int
0bd   	movdl   XMM1, R8	# spill
0bd
0c2   B9: #	B32 B10 &lt;- B8 B12 	Loop: B9-B12 inner pre of N329 Freq: 1.1209
0c2   	movl    R8, R10	# spill
0c5   	subl    R8, R14	# int
0c8   	movslq  RBP, R14	# i2l
0cb   	movq    R11, RSI	# spill
0ce   	subq    R11, RBP	# long
0d1   	cmpl    R8, RBX	# unsigned
0d4   	jnb,u  B32  P=0.000001 C=-1.000000
0d4
0da   B10: #	B33 B11 &lt;- B9  Freq: 1.1209
0da   	movzwl  RBP, [RDI + #14 + R11 &lt;&lt; #1]	# ushort/char
0e0   	cmpl    R8, RDX	# unsigned
0e3   	jnb,u  B33  P=0.000001 C=-1.000000
0e3
0e9   B11: #	B31 B12 &lt;- B10  Freq: 1.1209
0e9   	movzwl  R11, [RAX + #14 + R11 &lt;&lt; #1]	# ushort/char
0ef   	decl    R14	# int
0f2   	cmpl    RBP, R11
0f5   	jne     B31  P=0.000932 C=30048.000000
0f5
0fb   B12: #	B9 B13 &lt;- B11  Freq: 1.11985
0fb   	cmpl    R14, RCX
0fe   	jg,s   B9	# loop end  P=0.500000 C=30020.000000
0fe
100   B13: #	B20 B14 &lt;- B12  Freq: 0.559927
100   	cmpl    R14, R9
103   	jle,s   B20  P=0.000001 C=-1.000000
103
105   B14: #	B15 &lt;- B13  Freq: 0.559926
105   	# castII of R14
      	nop 	# 11 bytes pad for loops and calls

110   B15: #	B31 B16 &lt;- B14 B19 	Loop: B15-B19 inner main of N125 Freq: 7.07997
110   	movslq  R11, R14	# i2l
113   	movl    RCX, R14	# spill
116   	addl    RCX, #-2	# int
119   	movslq  R13, RCX	# i2l
11c   	movq    RCX, RSI	# spill
11f   	subq    RCX, R11	# long
122   	movzwl  R8, [RAX + #16 + RCX &lt;&lt; #1]	# ushort/char
128   	movzwl  R11, [RDI + #16 + RCX &lt;&lt; #1]	# ushort/char
12e   	movzwl  RBP, [RDI + #14 + RCX &lt;&lt; #1]	# ushort/char
133   	movzwl  RCX, [RAX + #14 + RCX &lt;&lt; #1]	# ushort/char
138   	cmpl    RBP, RCX
13a   	jne     B31  P=0.000932 C=30048.000000
13a
140   B16: #	B31 B17 &lt;- B15  Freq: 7.07337
140   	addl    R14, #-4	# int
144   	cmpl    R11, R8
147   	jne     B31  P=0.000932 C=30048.000000
147
14d   B17: #	B31 B18 &lt;- B16  Freq: 7.06678
14d   	movq    RBP, RSI	# spill
150   	subq    RBP, R13	# long
153   	movzwl  R8, [RDI + #16 + RBP &lt;&lt; #1]	# ushort/char
159   	movzwl  R11, [RAX + #14 + RBP &lt;&lt; #1]	# ushort/char
15f   	movzwl  RCX, [RDI + #14 + RBP &lt;&lt; #1]	# ushort/char
164   	cmpl    RCX, R11
167   	jne,s   B31  P=0.000932 C=30048.000000
167
169   B18: #	B31 B19 &lt;- B17  Freq: 7.0602
169   	movzwl  RCX, [RAX + #16 + RBP &lt;&lt; #1]	# ushort/char
16e   	cmpl    R8, RCX
171   	jne,s   B31  P=0.000932 C=30048.000000
171
173   B19: #	B15 B20 &lt;- B18  Freq: 7.05362
173   	cmpl    R14, R9
176   	jg,s   B15	# loop end  P=0.924355 C=30020.000000
176
178   B20: #	B27 B21 &lt;- B13 B19  Freq: 0.533574
178   	cmpl    R14, #-1
17c   	je,s   B27  P=0.500000 C=-1.000000
17c
17e   B21: #	B22 &lt;- B20  Freq: 0.266787
17e   	# castII of R14
      	nop 	# 2 bytes pad for loops and calls

180   B22: #	B32 B23 &lt;- B21 B26 	Loop: B22-B26 inner post of N329 Freq: 0.533076
180   	movl    R8, R10	# spill
183   	subl    R8, R14	# int
186   	movl    R11, R14	# spill
189   	decl    R11	# int
18c   	movslq  R9, R14	# i2l
18f   	movq    RCX, RSI	# spill
192   	subq    RCX, R9	# long
195   	cmpl    R8, RBX	# unsigned
198   	jnb,us  B32  P=0.000001 C=-1.000000
198
19a   B23: #	B33 B24 &lt;- B22  Freq: 0.533075
19a   	movzwl  RBP, [RDI + #14 + RCX &lt;&lt; #1]	# ushort/char
19f   	cmpl    R8, RDX	# unsigned
1a2   	jnb,us  B33  P=0.000001 C=-1.000000
1a2
1a4   B24: #	B31 B25 &lt;- B23  Freq: 0.533075
1a4   	movzwl  R8, [RAX + #14 + RCX &lt;&lt; #1]	# ushort/char
1aa   	cmpl    RBP, R8
1ad   	jne,s   B31  P=0.000932 C=30048.000000
1ad
1af   B25: #	B27 B26 &lt;- B24  Freq: 0.532578
1af   	cmpl    R11, #-1
1b3   	je,s   B27	# loop end  P=0.500000 C=30020.000000
1b3
1b5   B26: #	B22 &lt;- B25  Freq: 0.266289
1b5   	movl    R14, R11	# spill
1b8   	jmp,s   B22
1b8
1ba   B27: #	B29 &lt;- B20 B7 B25  Freq: 0.578983
1ba   	movl    RAX, #1	# int
1bf   	jmp,s   B29
1bf
1c1   B28: #	B29 &lt;- B6 B2  Freq: 0.298367
1c1   	xorl    RAX, RAX	# int
1c3
1c3   B29: #	N348 &lt;- B30 B31 B27 B28  Freq: 0.999995
1c3   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

1ce   	ret
1ce
1cf   B30: #	B29 &lt;- B1  Freq: 0.0947497
1cf   	movl    RAX, #1	# int
1d4   	jmp,s   B29
1d4
1d6   B31: #	B29 &lt;- B24 B17 B11 B15 B16 B18  Freq: 0.0278945
1d6   	movdl   RAX, XMM1	# spill
1da   	jmp,s   B29
1da
1dc   B32: #	N348 &lt;- B22 B9  Freq: 1.67594e-06
1dc   	movl    RBP, R14	# spill
1df   	movl    [rsp + #4], RAX	# spill
1e3   	movl    [rsp + #12], RDI	# spill
1e7   	movl    [rsp + #16], R8	# spill
1ec   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
1f3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::equals @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=RBP L[4]=rsp + #12 L[5]=rsp + #4 L[6]=rsp + #16 STK[0]=rsp + #12 STK[1]=rsp + #16
        # OopMap{[4]=NarrowOop [12]=NarrowOop off=504}
1f8   	int3	# ShouldNotReachHere
1f8
1fd   B33: #	N348 &lt;- B23 B10  Freq: 1.67594e-06
1fd   	movl    RSI, #-28	# int
202   	movl    [rsp + #0], R14	# spill
206   	movl    [rsp + #4], RDI	# spill
20a   	movl    [rsp + #16], RAX	# spill
20e   	movl    [rsp + #20], R8	# spill
213   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::equals @ bci:65  L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #0 L[4]=rsp + #4 L[5]=rsp + #16 L[6]=rsp + #20 STK[0]=RBP STK[1]=rsp + #16 STK[2]=rsp + #20
        # OopMap{[4]=NarrowOop [16]=NarrowOop off=536}
218   	int3	# ShouldNotReachHere
218
21d   B34: #	N348 &lt;- B3  Freq: 1e-35
21d   	movq    RBP, R10	# spill
220   	movq    [rsp + #8], RDX	# spill
      	nop 	# 2 bytes pad for loops and calls
227   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::equals @ bci:8  L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=556}
22c   	int3	# ShouldNotReachHere
22c
231   B35: #	N348 &lt;- B4  Freq: 9.16354e-07
      	nop 	# 2 bytes pad for loops and calls
233   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::equals @ bci:23  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=568}
238   	int3	# ShouldNotReachHere
238
23d   B36: #	N348 &lt;- B5  Freq: 9.16353e-07
      	nop 	# 2 bytes pad for loops and calls
23f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::equals @ bci:30  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=580}
244   	int3	# ShouldNotReachHere
244

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='329'>
{method}
 - this oop:          0x00007f44cd12a790
 - method holder:     &apos;jdk/internal/org/objectweb/asm/ByteVector&apos;
 - constants:         0x00007f44cd129a80 constant pool [90] {0x00007f44cd129a80} for &apos;jdk/internal/org/objectweb/asm/ByteVector&apos; cache=0x00007f44cd12aca0
 - access:            0xc1000001  public 
 - name:              &apos;putUTF8&apos;
 - signature:         &apos;(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/ByteVector;&apos;
 - max stack:         5
 - max locals:        7
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      7
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef7f0: 0xbb000000 i2c: 0x00007f44b9145fa0 c2i: 0x00007f44b91460de c2iUV: 0x00007f44b91460b1
 - compiled entry     0x00007f44b92b6620
 - code size:         142
 - code start:        0x00007f44cd12a690
 - code end (excl):   0x00007f44cd12a71e
 - method data:       0x00007f44cd18bc10
 - checked ex length: 0
 - linenumber start:  0x00007f44cd12a71e
 - localvar length:   7
 - localvar start:    0x00007f44cd12a73a
 - compiled code: nmethod   2263  242       3       jdk.internal.org.objectweb.asm.ByteVector::putUTF8 (142 bytes)
#
#  jdk/internal/org/objectweb/asm/ByteVector * ( jdk/internal/org/objectweb/asm/ByteVector:NotNull *, java/lang/String:exact * )
#
#r018 rsi:rsi   : parm 0: jdk/internal/org/objectweb/asm/ByteVector:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/String:exact *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N829: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B80 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (264 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movq    RBX, RSI	# spill
02f   	movl    R10, [RSI + #12 (8-bit)]	# int ! Field: jdk/internal/org/objectweb/asm/ByteVector.length
033   	movl    RSI, #-10	# int
038   	movl    R9, [RBX + #16 (8-bit)]	# compressed ptr ! Field: jdk/internal/org/objectweb/asm/ByteVector.data
03c   	movq    R11, RDX	# spill
03f   	movl    R14, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
043   	NullCheck RDX
043
043   B2: #	B81 B3 &lt;- B1  Freq: 0.999999
043   	movl    RAX, [R14 + #12 (8-bit)]	# range
047   	NullCheck R14
047
047   B3: #	B76 B4 &lt;- B2  Freq: 0.999998
047   	movl    RDI, RAX	# spill
049   	addl    RDI, R10	# int
04c   	movl    RSI, RAX	# spill
04e   	shrl    RSI, #8
051   	movsbl  RCX, RAX	# i2b
054   	movsbl  RBP, RSI	# i2b
058   	movl    R8, RDI	# spill
05b   	incl    R8	# int
05e   	movl    RDX, RAX	# spill
060   	addl    RDX, #2	# int
063   	addl    RDI, #2	# int
066   	cmpl    RAX, #65535
06c   	jg     B76  P=0.000000 C=824.000000
06c
072   B4: #	B82 B5 &lt;- B3  Freq: 0.999997
072   	movl    [rsp + #4], R8	# spill
077   	movl    [rsp + #36], RBP	# spill
07b   	movl    [rsp + #32], RCX	# spill
07f   	movl    [rsp + #0], RSI	# spill
082   	movl    [rsp + #12], RAX	# spill
086   	movl    [rsp + #8], R10	# spill
08b   	movq    [rsp + #24], RBX	# spill
090   	movq    [rsp + #16], R11	# spill
095   	movl    R11, [R9 + #12 (8-bit)]	# range
099   	NullCheck R9
099
099   B5: #	B9 B6 &lt;- B4  Freq: 0.999996
099   	movslq  R10, R10	# i2l
09c   	movq    [rsp + #40], R10	# spill
0a1   	movl    RBP, [rsp + #8]	# spill
0a5   	incl    RBP	# int
0a7   	movl    R10, [rsp + #8]	# spill
0ac   	addl    R10, #2	# int
0b0   	movl    [rsp + #48], R10	# spill
0b5   	movslq  R10, [RSP + #8 (32-bit)]	# int -&gt; long
0ba   	cmpl    RDI, R11
0bd   	jle,s   B9  P=0.794903 C=824.000000
0bd
0bf   B6: #	B79 B7 &lt;- B5  Freq: 0.205096
0bf   	movq    [rsp + #56], R10	# spill
0c4   	movq    RSI, RBX	# spill
0c7   	call,static  jdk.internal.org.objectweb.asm.ByteVector::enlarge
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:41  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #12 L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_
        # OopMap{[16]=Oop [24]=Oop off=204}
0cc
0cc   B7: #	B78 B8 &lt;- B6  Freq: 0.205092
        # Block is sole successor of call
0cc   	movq    R10, [rsp + #24]	# spill
0d1   	movl    R9, [R10 + #16 (8-bit)]	# compressed ptr ! Field: jdk/internal/org/objectweb/asm/ByteVector.data
0d5   	movq    R10, [rsp + #16]	# spill
0da   	movl    R14, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
0de   	movl    RSI, #-10	# int
0e3   	testl   R9, R9	# compressed ptr
0e6   	je     B78  P=0.000001 C=-1.000000
0e6
0ec   B8: #	B9 &lt;- B7  Freq: 0.205092
0ec   	movq    R10, [rsp + #56]	# spill
0ec
0f1   B9: #	B61 B10 &lt;- B8 B5  Freq: 0.999992
0f1   	movl    RBX, [R9 + #12 (8-bit)]	# range
0f5   	movl    R8, #-2147483648	# int
0fb   	movl    R11, [rsp + #8]	# spill
100   	cmpl    R11, RBX	# unsigned
103   	jnb,u  B61  P=0.000001 C=-1.000000
103
109   B10: #	B62 B11 &lt;- B9  Freq: 0.999991
109   	movl    RSI, #-122	# int
10e   	movl    RCX, [rsp + #0]	# spill
111   	movb    [R9 + #16 + R10], RCX	# byte
116   	cmpl    RBP, RBX	# unsigned
118   	jnb,u  B62  P=0.000001 C=-1.000000
118
11e   B11: #	B46 B12 &lt;- B10  Freq: 0.99999
11e   	movq    R11, [rsp + #40]	# spill
123   	movl    R10, [rsp + #12]	# spill
128   	movb    [R9 + #17 + R11], R10	# byte
12d   	testl   R10, R10
130   	jle     B46  P=0.029466 C=27964.000000
130
136   B12: #	B63 B13 &lt;- B11  Freq: 0.970524
136   	movl    RCX, [R14 + #12 (8-bit)]	# range
13a   	NullCheck R14
13a
13a   B13: #	B69 B14 &lt;- B12  Freq: 0.970523
13a   	movl    [rsp + #12], RCX	# spill
13e   	movl    RCX, R10	# spill
141   	decl    R10	# int
144   	movl    R11, [rsp + #12]	# spill
149   	testl  R11, R11	# unsigned
14c   	jbe,u  B69  P=0.000001 C=-1.000000
14c
152   B14: #	B64 B15 &lt;- B13  Freq: 0.970522
152   	cmpl    R10, R11	# unsigned
155   	jnb,u  B64  P=0.000001 C=-1.000000
155
15b   B15: #	B65 B16 &lt;- B14  Freq: 0.970521
15b   	movl    RDI, [rsp + #48]	# spill
15f   	cmpl    RDI, RBX	# unsigned
161   	jnb,u  B65  P=0.000001 C=-1.000000
161
167   B16: #	B66 B17 &lt;- B15  Freq: 0.97052
167   	cmpl    RCX, R11
16a   	movl    R11, RCX	# spill
16d   	movl    RDX, [rsp + #12]	# spill
171   	cmovlgt R11, RDX	# min
175   	movl    R10, [rsp + #4]	# spill
17a   	cmpl    R10, RBX	# unsigned
17d   	jnb,u  B66  P=0.000001 C=-1.000000
17d
183   B17: #	B18 &lt;- B16  Freq: 0.970519
183   	movl    R10, R11	# spill
186   	addl    R10, #-3	# int
18a   	cmpl    R11, R10
18d   	cmovll R10, R8	# signed, int
191   	movl    R11, RCX	# spill
194   	movl    R8, #1	# int
19a   	cmpl    R11, R8
19d   	movl    RDI, R11	# spill
1a0   	movl    RCX, #1	# int
1a5   	cmovlgt RDI, RCX	# min
1a8   	movl    RSI, #-155	# int
1ad   	xorl    R8, R8	# int
1b0
1b0   B18: #	B70 B19 &lt;- B17 B23 	Loop: B18-B23 inner pre of N412 Freq: 1.94103
1b0   	movl    RCX, R8	# spill
1b3   	addl    RCX, [RSP + #8 (32-bit)]	# int
1b7   	testl   R8, R8
1ba   	jl     B70  P=0.000000 C=5670.000000
1ba
1c0   B19: #	B73 B20 &lt;- B18  Freq: 1.94103
1c0   	movl    [rsp + #0], RCX	# spill
1c3   	movl    [rsp + #32], R11	# spill
1c8   	movzwl  RDX, [R14 + #16 + R8 &lt;&lt; #1]	# ushort/char
1ce   	movl    R13, RCX	# spill
1d1   	addl    R13, #2	# int
1d5   	movslq  RCX, RCX	# i2l
1d8   	movl    R11, [rsp + #0]	# spill
1dc   	addl    R11, #2	# int
1e0   	cmpl    R8, [RSP + #12 (32-bit)]
1e5   	jge     B73  P=0.000000 C=5670.000000
1e5
1eb   B20: #	B52 B21 &lt;- B19  Freq: 1.94103
1eb   	movl    R11, R8	# spill
1ee   	incl    R11	# int
1f1   	cmpl    RDX, #1
1f4   	jl     B52  P=0.000000 C=27140.000000
1f4
1fa   B21: #	B75 B22 &lt;- B20  Freq: 1.94103
1fa   	movl    R13, [rsp + #0]	# spill
1fe   	addl    R13, #2	# int
202   	cmpl    RDX, #127
205   	jg     B75  P=0.000000 C=27140.000000
205
20b   B22: #	B24 B23 &lt;- B21  Freq: 1.94103
20b   	movb    [R9 + #18 + RCX], RDX	# byte
210   	cmpl    R11, RDI
213   	jge,s   B24	# loop end  P=0.500000 C=27140.000000
213
215   B23: #	B18 &lt;- B22  Freq: 0.970515
215   	movl    R8, R11	# spill
218   	movl    R11, [rsp + #32]	# spill
21d   	jmp,s   B18
21d
21f   B24: #	B68 B25 &lt;- B22  Freq: 0.970515
21f   	cmpl    R11, R10
222   	jge     B68  P=0.000001 C=-1.000000
222
228   B25: #	B27 &lt;- B24  Freq: 0.970514
228   	# castII of R11
228   	jmp,s   B27
      	nop 	# 6 bytes pad for loops and calls

230   B26: #	B27 &lt;- B35  top-of-loop Freq: 31.9615
230   	movl    R11, RDI	# spill
230
233   B27: #	B47 B28 &lt;- B25 B26 	Loop: B27-B26 inner main of N245 Freq: 32.932
233   	movslq  RDX, R11	# i2l
236   	movzwl  RBP, [R14 + #16 + R11 &lt;&lt; #1]	# ushort/char
23c   	movl    RCX, R11	# spill
23f   	addl    RCX, [RSP + #8 (32-bit)]	# int
243   	movl    [rsp + #0], RCX	# spill
246   	addl    RCX, #2	# int
249   	cmpl    RBP, #1
24c   	jl     B47  P=0.000000 C=27140.000000
24c
252   B28: #	B54 B29 &lt;- B27  Freq: 32.932
252   	movzwl  RBX, [R14 + #20 + RDX &lt;&lt; #1]	# ushort/char
258   	movzwl  RDI, [R14 + #18 + RDX &lt;&lt; #1]	# ushort/char
25e   	movl    RCX, [rsp + #0]	# spill
261   	addl    RCX, #2	# int
264   	movslq  RAX, [RSP + #0 (32-bit)]	# int -&gt; long
268   	cmpl    RBP, #127
26b   	jg     B54  P=0.000000 C=27140.000000
26b
271   B29: #	B50 B30 &lt;- B28  Freq: 32.932
271   	movb    [R9 + #18 + RAX], RBP	# byte
276   	movl    R13, [rsp + #0]	# spill
27a   	addl    R13, #5	# int
27e   	movl    R8, [rsp + #0]	# spill
282   	addl    R8, #3	# int
286   	cmpl    RDI, #1
289   	jl     B50  P=0.000000 C=27140.000000
289
28f   B30: #	B57 B31 &lt;- B29  Freq: 32.932
28f   	cmpl    RDI, #127
292   	jg     B57  P=0.000000 C=27140.000000
292
298   B31: #	B48 B32 &lt;- B30  Freq: 32.9319
298   	movzwl  RDX, [R14 + #22 + RDX &lt;&lt; #1]	# ushort/char
29e   	movl    RCX, [rsp + #0]	# spill
2a1   	addl    RCX, #4	# int
2a4   	movb    [R9 + #19 + RAX], RDI	# byte
2a9   	cmpl    RBX, #1
2ac   	jl     B48  P=0.000000 C=27140.000000
2ac
2b2   B32: #	B55 B33 &lt;- B31  Freq: 32.9319
2b2   	movl    RDI, R11	# spill
2b5   	addl    RDI, #4	# int
2b8   	cmpl    RBX, #127
2bb   	jg     B55  P=0.000000 C=27140.000000
2bb
2c1   B33: #	B51 B34 &lt;- B32  Freq: 32.9319
2c1   	movl    R8, [rsp + #0]	# spill
2c5   	addl    R8, #3	# int
2c9   	movl    [rsp + #0], R8	# spill
2cd   	movl    R8, R11	# spill
2d0   	addl    R8, #2	# int
2d4   	movb    [R9 + #20 + RAX], RBX	# byte
2d9   	cmpl    RDX, #1
2dc   	jl     B51  P=0.000000 C=27140.000000
2dc
2e2   B34: #	B58 B35 &lt;- B33  Freq: 32.9319
2e2   	addl    R11, #2	# int
2e6   	cmpl    RDX, #127
2e9   	jg     B58  P=0.000000 C=27140.000000
2e9
2ef   B35: #	B26 B36 &lt;- B34  Freq: 32.9319
2ef   	movb    [R9 + #21 + RAX], RDX	# byte
2f4   	cmpl    RDI, R10
2f7   	jl     B26	# loop end  P=0.970534 C=27140.000000
2f7
2fd   B36: #	B44 B37 &lt;- B68 B35  Freq: 0.970387
2fd   	cmpl    RDI, [RSP + #32 (32-bit)]
301   	jge,s   B44  P=0.500000 C=-1.000000
301
303   B37: #	B38 &lt;- B36  Freq: 0.485193
303   	# castII of RDI
      	nop 	# 1 bytes pad for loops and calls

304   B38: #	B71 B39 &lt;- B37 B43 	Loop: B38-B43 inner post of N412 Freq: 0.970385
304   	movl    RBP, RDI	# spill
306   	addl    RBP, [RSP + #8 (32-bit)]	# int
30a   	movl    R11, RBP	# spill
30d   	addl    R11, #2	# int
311   	movl    [rsp + #0], RBP	# spill
314   	addl    RBP, #2	# int
317   	movl    R13, [rsp + #0]	# spill
31b   	addl    R13, #2	# int
31f   	movslq  R10, [RSP + #0 (32-bit)]	# int -&gt; long
323   	testl   RDI, RDI
325   	jl     B71  P=0.000000 C=5670.000000
325
32b   B39: #	B74 B40 &lt;- B38  Freq: 0.970384
32b   	movzwl  RDX, [R14 + #16 + RDI &lt;&lt; #1]	# ushort/char
331   	cmpl    RDI, [RSP + #12 (32-bit)]
335   	jge     B74  P=0.000000 C=5670.000000
335
33b   B40: #	B53 B41 &lt;- B39  Freq: 0.970384
33b   	movl    R11, RDI	# spill
33e   	incl    R11	# int
341   	cmpl    RDX, #1
344   	jl,s   B53  P=0.000000 C=27140.000000
344
346   B41: #	B77 B42 &lt;- B40  Freq: 0.970383
346   	cmpl    RDX, #127
349   	jg     B77  P=0.000000 C=27140.000000
349
34f   B42: #	B44 B43 &lt;- B41  Freq: 0.970383
34f   	movb    [R9 + #18 + R10], RDX	# byte
354   	cmpl    R11, [RSP + #32 (32-bit)]
359   	jge,s   B44	# loop end  P=0.500000 C=27140.000000
359
35b   B43: #	B38 &lt;- B42  Freq: 0.485191
35b   	movl    RDI, R11	# spill
35e   	jmp,s   B38
35e
360   B44: #	B45 &lt;- B42 B36  Freq: 0.970385
360   	movl    R11, [rsp + #0]	# spill
364   	addl    R11, #3	# int
368
368   B45: #	N829 &lt;- B44 B46  Freq: 0.999851
368   	movq    RAX, [rsp + #24]	# spill
36d   	movl    [RAX + #12 (8-bit)], R11	# int ! Field: jdk/internal/org/objectweb/asm/ByteVector.length
371   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

37c   	ret
37c
37d   B46: #	B45 &lt;- B11  Freq: 0.0294662
37d   	movl    R11, [rsp + #48]	# spill
382   	jmp,s   B45
382
384   B47: #	B49 &lt;- B27  Freq: 1.6466e-05
384   	movl    RBX, RBP	# spill
386   	jmp,s   B49
386
388   B48: #	B49 &lt;- B31  Freq: 1.6466e-05
388   	addl    R11, #2	# int
38c
38c   B49: #	B52 &lt;- B47 B48  Freq: 3.2932e-05
38c   	movl    RDX, RBX	# spill
38e   	movl    R8, R11	# spill
391   	movl    R13, RCX	# spill
394   	jmp,s   B52
394
396   B50: #	B51 &lt;- B29  Freq: 1.6466e-05
396   	movl    R13, [rsp + #0]	# spill
39a   	addl    R13, #3	# int
39e   	movl    RDX, RDI	# spill
3a0   	movl    R8, R11	# spill
3a0
3a3   B51: #	B52 &lt;- B50 B33  Freq: 3.29319e-05
3a3   	incl    R8	# int
3a6
3a6   B52: #	B53 &lt;- B20 B49 B51  Freq: 6.68344e-05
3a6   	movl    RDI, R8	# spill
3a6
3a9   B53: #	N829 &lt;- B40 B52  Freq: 6.73196e-05
3a9   	movl    RBP, R13	# spill
3ac   	movl    [rsp + #0], R9	# spill
3b0   	movl    [rsp + #4], RDI	# spill
3b4   	movl    [rsp + #12], RDX	# spill
3b8   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
3bf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:91  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #12 STK[0]=rsp + #12 STK[1]=#1
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=964}
3c4   	int3	# ShouldNotReachHere
3c4
3c9   B54: #	B56 &lt;- B28  Freq: 1.57032e-05
3c9   	movl    RBX, RBP	# spill
3cb   	jmp,s   B56
3cb
3cd   B55: #	B56 &lt;- B32  Freq: 1.57032e-05
3cd   	addl    R11, #2	# int
3d1
3d1   B56: #	B59 &lt;- B54 B55  Freq: 3.14064e-05
3d1   	movl    RDX, RBX	# spill
3d3   	movl    R13, RCX	# spill
3d6   	jmp,s   B59
3d6
3d8   B57: #	B58 &lt;- B30  Freq: 1.57032e-05
3d8   	movl    RDX, RDI	# spill
3da   	movl    R13, R8	# spill
3da
3dd   B58: #	B59 &lt;- B57 B34  Freq: 3.14063e-05
3dd   	incl    R11	# int
3e0
3e0   B59: #	B60 &lt;- B75 B56 B58  Freq: 6.37383e-05
3e0   	movl    RDI, R11	# spill
3e3   	movl    R10, R13	# spill
3e3
3e6   B60: #	N829 &lt;- B77 B59  Freq: 6.4201e-05
3e6   	movl    RBP, R10	# spill
3e9   	movl    [rsp + #0], R9	# spill
3ed   	movl    [rsp + #4], RDI	# spill
3f1   	movl    [rsp + #12], RDX	# spill
3f5   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
3fb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:98  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #12 STK[0]=rsp + #12 STK[1]=#127
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=1024}
400   	int3	# ShouldNotReachHere
400
405   B61: #	N829 &lt;- B9  Freq: 1.01327e-06
405   	movl    [rsp + #4], R9	# spill
40a   	movl    RSI, #-28	# int
40f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:61  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #12 L[3]=RBP L[4]=rsp + #4 L[5]=_ L[6]=_ STK[0]=rsp + #4 STK[1]=rsp + #8 STK[2]=rsp + #36
        # OopMap{[4]=NarrowOop [16]=Oop [24]=Oop off=1044}
414   	int3	# ShouldNotReachHere
414
419   B62: #	N829 &lt;- B10  Freq: 1.01327e-06
419   	movl    [rsp + #8], R9	# spill
41e   	movl    RSI, #-28	# int
423   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:70  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #12 L[3]=rsp + #48 L[4]=rsp + #8 L[5]=_ L[6]=_ STK[0]=rsp + #8 STK[1]=RBP STK[2]=rsp + #32
        # OopMap{[8]=NarrowOop [16]=Oop [24]=Oop off=1064}
428   	int3	# ShouldNotReachHere
428
42d   B63: #	B67 &lt;- B12  Freq: 9.83411e-07
42d   	movl    RDI, [rsp + #48]	# spill
431   	jmp,s   B67
431
433   B64: #	B67 &lt;- B14  Freq: 9.8341e-07
433   	movl    R10, RCX	# spill
436   	movl    RDI, [rsp + #48]	# spill
43a   	jmp,s   B67
43a
43c   B65: #	B67 &lt;- B15  Freq: 9.83409e-07
43c   	movl    R10, RCX	# spill
43f   	jmp,s   B67
43f
441   B66: #	B67 &lt;- B16  Freq: 9.83408e-07
441   	movl    R10, RCX	# spill
441
444   B67: #	N829 &lt;- B66 B63 B69 B64 B65  Freq: 4.90416e-06
444   	movl    RBP, RDI	# spill
446   	movl    [rsp + #0], R9	# spill
44a   	movl    [rsp + #4], R10	# spill
44f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:80  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #4 L[3]=RBP L[4]=rsp + #0 L[5]=#0 L[6]=_
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=1108}
454   	int3	# ShouldNotReachHere
454
459   B68: #	B36 &lt;- B24  Freq: 9.83403e-07
459   	movl    RDI, R11	# spill
45c   	jmp     B36
45c
461   B69: #	B67 &lt;- B13  Freq: 9.70523e-07
461   	movl    R10, RCX	# spill
464   	movl    RDI, [rsp + #48]	# spill
468   	jmp,s   B67
468
46a   B70: #	B72 &lt;- B18  Freq: 9.70517e-07
46a   	movl    RBP, RCX	# spill
46c   	addl    RBP, #2	# int
46f   	movl    RDI, R8	# spill
472   	jmp,s   B72
472
474   B71: #	B72 &lt;- B38  Freq: 4.85192e-07
474   	movl    R11, [rsp + #32]	# spill
474
479   B72: #	N829 &lt;- B71 B70  Freq: 1.45571e-06
479   	movl    [rsp + #0], R9	# spill
47d   	movl    [rsp + #8], RDI	# spill
481   	movl    [rsp + #12], RDI	# spill
485   	movl    [rsp + #32], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
48b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #16 L[1]=rsp + #12 STK[0]=rsp + #8
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:83  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=rsp + #0 L[5]=rsp + #8 L[6]=_
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=1168}
490   	int3	# ShouldNotReachHere
490
495   B73: #	B74 &lt;- B19  Freq: 9.25557e-07
495   	movl    RDI, R8	# spill
495
498   B74: #	N829 &lt;- B39 B73  Freq: 1.38827e-06
498   	movl    RBP, R9	# spill
49b   	movl    [rsp + #4], RDI	# spill
49f   	movl    [rsp + #8], RDI	# spill
4a3   	movl    RSI, #-155	# int
4a8   	movl    [rsp + #36], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
4af   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #16 L[1]=rsp + #8 STK[0]=rsp + #4 STK[1]=rsp + #12
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:83  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=rsp + #36 L[4]=RBP L[5]=rsp + #4 L[6]=_
        # OopMap{rbp=NarrowOop [16]=Oop [24]=Oop off=1204}
4b4   	int3	# ShouldNotReachHere
4b4
4b9   B75: #	B59 &lt;- B21  Freq: 9.25556e-07
4b9   	movl    R11, R8	# spill
4bc   	jmp     B59
4bc
4c1   B76: #	N829 &lt;- B3  Freq: 4.76836e-07
4c1   	movq    RBP, RBX	# spill
4c4   	movq    [rsp + #0], R11	# spill
4c8   	movl    [rsp + #12], RAX	# spill
4cc   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
4d3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:8  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #12 STK[1]=#65535
        # OopMap{rbp=Oop [0]=Oop off=1240}
4d8   	int3	# ShouldNotReachHere
4d8
4dd   B77: #	B60 &lt;- B41  Freq: 4.62715e-07
4dd   	movl    R10, [rsp + #0]	# spill
4e1   	addl    R10, #2	# int
4e5   	jmp     B60
4e5
4ea   B78: #	N829 &lt;- B7  Freq: 2.07816e-07
4ea   	movl    RBP, [rsp + #8]	# spill
      	nop 	# 1 bytes pad for loops and calls
4ef   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:61  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #36
        # OopMap{off=1268}
4f4   	int3	# ShouldNotReachHere
4f4
4f9   B79: #	N829 &lt;- B6  Freq: 2.05096e-06
4f9   	# exception oop is in rax; no code emitted
4f9   	movq    RSI, RAX	# spill
4fc   	addq    rsp, 80	# Destroy frame
	popq   rbp

501   	jmp     rethrow_stub
501
506   B80: #	N829 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 1 bytes pad for loops and calls
507   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=1292}
50c   	int3	# ShouldNotReachHere
50c
511   B81: #	N829 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
513   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=1304}
518   	int3	# ShouldNotReachHere
518
51d   B82: #	N829 &lt;- B4  Freq: 1.01328e-06
51d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
523   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:33  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1320}
528   	int3	# ShouldNotReachHere
528

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='342'>
{method}
 - this oop:          0x00007f44ccd40588
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f44ccd3b0e8 constant pool [680] {0x00007f44ccd3b0e8} for &apos;java/lang/String&apos; cache=0x00007f44cce045e0
 - access:            0xc1000001  public 
 - name:              &apos;lastIndexOf&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         4
 - max locals:        5
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef7a8: 0xbaa00000 i2c: 0x00007f44b9145ca0 c2i: 0x00007f44b9145de0 c2iUV: 0x00007f44b9145db3
 - compiled entry     0x00007f44b92385c0
 - code size:         52
 - code start:        0x00007f44ccd40500
 - code end (excl):   0x00007f44ccd40534
 - method data:       0x00007f44ccfdf6b0
 - checked ex length: 0
 - linenumber start:  0x00007f44ccd40534
 - localvar length:   5
 - localvar start:    0x00007f44ccd4054a
 - compiled code: nmethod   2287   26       3       java.lang.String::lastIndexOf (52 bytes)
#
#  int ( java/lang/String:NotNull:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N227: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B28 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (152 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movq    R10, RSI	# spill
02f   	movl    RSI, #-155	# int
034   	cmpl    RDX, #65536
03a   	jge     B28  P=0.000000 C=1017.000000
03a
040   B2: #	B29 B3 &lt;- B1  Freq: 1
040   	movl    RBX, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
044   	movl    R10, [RBX + #12 (8-bit)]	# range
048   	NullCheck RBX
048
048   B3: #	B20 B4 &lt;- B2  Freq: 0.999999
048   	movl    R8, R10	# spill
04b   	decl    R8	# int
04e   	cmpl    RCX, R8
051   	cmovll R8, RCX	# signed, int
055   	testl   R8, R8
058   	jl     B20  P=0.002774 C=25592.000000
058
05e   B4: #	B27 B5 &lt;- B3  Freq: 0.997224
05e   	testl  R10, R10	# unsigned
061   	jbe,u  B27  P=0.000001 C=-1.000000
061
067   B5: #	B27 B6 &lt;- B4  Freq: 0.997223
067   	cmpl    R8, R10	# unsigned
06a   	jnb,u  B27  P=0.000001 C=-1.000000
06a
070   B6: #	B7 &lt;- B5  Freq: 0.997222
070   	movl    R10, R8	# spill
073   	decl    R10	# int
076
076   B7: #	B25 B8 &lt;- B6 B8 	Loop: B7-B8 inner pre of N162 Freq: 1.92323
076   	movzwl  R11, [RBX + #16 + R8 &lt;&lt; #1]	# ushort/char
07c   	cmpl    R11, RDX
07f   	je     B25  P=0.037028 C=25521.000000
07f
085   B8: #	B7 B9 &lt;- B7  Freq: 1.85202
085   	decl    R8	# int
088   	cmpl    R8, R10
08b   	jg,s   B7	# loop end  P=0.500000 C=24575.000000
08b
08d   B9: #	B16 B10 &lt;- B8  Freq: 0.926008
08d   	cmpl    R8, #2
091   	jle,s   B16  P=0.000001 C=-1.000000
091
093   B10: #	B11 &lt;- B9  Freq: 0.926007
093   	# castII of R8
093
093   B11: #	B23 B12 &lt;- B10 B15 	Loop: B11-B15 inner main of N97 Freq: 6.4995
093   	movzwl  R11, [RBX + #16 + R8 &lt;&lt; #1]	# ushort/char
099   	cmpl    R11, RDX
09c   	je,s   B23  P=0.037028 C=25521.000000
09c
09e   B12: #	B21 B13 &lt;- B11  Freq: 6.25884
09e   	movzwl  R11, [RBX + #14 + R8 &lt;&lt; #1]	# ushort/char
0a4   	movzwl  R10, [RBX + #10 + R8 &lt;&lt; #1]	# ushort/char
0aa   	cmpl    R11, RDX
0ad   	je,s   B21  P=0.037028 C=25521.000000
0ad
0af   B13: #	B24 B14 &lt;- B12  Freq: 6.02708
0af   	movl    RAX, R8	# spill
0b2   	addl    RAX, #-2	# int
0b5   	movzwl  R9, [RBX + #12 + R8 &lt;&lt; #1]	# ushort/char
0bb   	cmpl    R9, RDX
0be   	je,s   B24  P=0.037028 C=25521.000000
0be
0c0   B14: #	B22 B15 &lt;- B13  Freq: 5.80391
0c0   	cmpl    R10, RDX
0c3   	je,s   B22  P=0.037028 C=25521.000000
0c3
0c5   B15: #	B11 B16 &lt;- B14  Freq: 5.589
0c5   	addl    R8, #-4	# int
0c9   	cmpl    R8, #2
0cd   	jg,s   B11	# loop end  P=0.997226 C=24575.000000
0cd
0cf   B16: #	B20 B17 &lt;- B9 B15  Freq: 0.0155065
0cf   	cmpl    R8, #-1
0d3   	jle,s   B20  P=0.500000 C=-1.000000
0d3
0d5   B17: #	B18 &lt;- B16  Freq: 0.00775325
0d5   	# castII of R8
      	nop 	# 3 bytes pad for loops and calls

0d8   B18: #	B26 B19 &lt;- B17 B19 	Loop: B18-B19 inner post of N162 Freq: 0.0149528
0d8   	movzwl  R10, [RBX + #16 + R8 &lt;&lt; #1]	# ushort/char
0de   	cmpl    R10, RDX
0e1   	je,s   B26  P=0.037028 C=25521.000000
0e1
0e3   B19: #	B18 B20 &lt;- B18  Freq: 0.0143991
0e3   	decl    R8	# int
0e6   	cmpl    R8, #-1
0ea   	jg,s   B18	# loop end  P=0.500000 C=24575.000000
0ea
0ec   B20: #	B24 &lt;- B16 B3 B19  Freq: 0.0177271
0ec   	movl    RAX, #-1	# int
0f1   	jmp,s   B24
0f1
0f3   B21: #	B22 &lt;- B12  Freq: 0.231754
0f3   	movl    RAX, R8	# spill
0f3
0f6   B22: #	B24 &lt;- B21 B14  Freq: 0.446663
0f6   	decl    RAX	# int
0f8   	jmp,s   B24
0f8
0fa   B23: #	B24 &lt;- B11  Freq: 0.240666
0fa   	movl    RAX, R8	# spill
0fa
0fd   B24: #	N227 &lt;- B26 B25 B23 B13 B22 B20  Freq: 0.999996
0fd   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

108   	ret
108
109   B25: #	B24 &lt;- B7  Freq: 0.071214
109   	movl    RAX, R8	# spill
10c   	jmp,s   B24
10c
10e   B26: #	B24 &lt;- B18  Freq: 0.000553678
10e   	movl    RAX, R8	# spill
111   	jmp,s   B24
111
113   B27: #	N227 &lt;- B5 B4  Freq: 2.00769e-06
113   	movl    RSI, #-122	# int
118   	movl    RBP, RDX	# spill
11a   	movl    [rsp + #0], RBX	# spill
11d   	movl    [rsp + #4], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
123   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::lastIndexOf @ bci:26  L[0]=_ L[1]=RBP L[2]=_ L[3]=rsp + #0 L[4]=rsp + #4
        # OopMap{[0]=NarrowOop off=296}
128   	int3	# ShouldNotReachHere
128
12d   B28: #	N227 &lt;- B1  Freq: 4.76837e-07
12d   	movl    [rsp + #0], RDX	# spill
130   	movq    [rsp + #8], R10	# spill
135   	movl    [rsp + #4], RCX	# spill
      	nop 	# 2 bytes pad for loops and calls
13b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::lastIndexOf @ bci:3  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ L[4]=_ STK[0]=rsp + #0 STK[1]=#65536
        # OopMap{[8]=Oop off=320}
140   	int3	# ShouldNotReachHere
140
145   B29: #	N227 &lt;- B2  Freq: 1.01328e-06
145   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
14b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::lastIndexOf @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=336}
150   	int3	# ShouldNotReachHere
150

</opto_assembly>
<writer thread='139933087573760'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='344' compile_kind='osr'>
{method}
 - this oop:          0x00007f44cd172f30
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f44cd1727d0 constant pool [84] {0x00007f44cd1727d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f44cd172fa8
 - access:            0xc1000001  public 
 - name:              &apos;postConsume&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - vtable index:      7
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b91469dd
 - code size:         33
 - code start:        0x00007f44cd172ee8
 - code end (excl):   0x00007f44cd172f09
 - method data:       0x00007f44cd175a38
 - checked ex length: 0
 - linenumber start:  0x00007f44cd172f09
 - localvar length:   2
 - localvar start:    0x00007f44cd172f16
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N79: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B7 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	movl    RBP, [RSI]	# int
01e   	movq    RBX, [RSI + #8 (8-bit)]	# ptr
022   	movq    RDI, RSI	# spill
025   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
032   	movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
036   	NullCheck RBX
036
036   B2: #	B5 B3 &lt;- B1  Freq: 0.999999
036   	movl    RSI, #-99	# int
03b   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f448c11b290:Constant:exact *	# compressed klass ptr
042   	jne,us  B5  P=0.000001 C=-1.000000
042
044   B3: #	B6 B4 &lt;- B2  Freq: 0.999998
044   	# checkcastPP of RBX
044   	movzbl  R10, [RBX + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
049   	MEMBAR-acquire ! (empty encoding)
049   	testl   R10, R10
04c   	jne,s   B6  P=0.000001 C=-1.000000
04c
04e   B4: #	N79 &lt;- B3  Freq: 0.999997
04e   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

059   	ret
059
05a   B5: #	N79 &lt;- B2  Freq: 9.99999e-07
05a   	movq    [rsp + #0], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
05f   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:15  L[0]=rsp + #0 L[1]=RBP
        # OopMap{[0]=Oop off=100}
064   	int3	# ShouldNotReachHere
064
069   B6: #	N79 &lt;- B3  Freq: 9.99998e-07
069   	movq    [rsp + #0], RBX	# spill
06d   	movl    RSI, #-83	# int
      	nop 	# 1 bytes pad for loops and calls
073   	call,static  wrapper for: uncommon_trap(reason=&apos;unreached&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=rsp + #0 L[1]=RBP STK[0]=RBP
        # OopMap{[0]=Oop off=120}
078   	int3	# ShouldNotReachHere
078
07d   B7: #	N79 &lt;- B1  Freq: 1.01328e-06
07d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
083   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:16  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap{off=136}
088   	int3	# ShouldNotReachHere
088

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='350' compile_kind='osr'>
{method}
 - this oop:          0x00007f44cd172f30
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f44cd1727d0 constant pool [84] {0x00007f44cd1727d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f44cd172fa8
 - access:            0xc1000001  public 
 - name:              &apos;postConsume&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      7
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b92e92c0
 - code size:         33
 - code start:        0x00007f44cd172ee8
 - code end (excl):   0x00007f44cd172f09
 - method data:       0x00007f44cd175a38
 - checked ex length: 0
 - linenumber start:  0x00007f44cd172f09
 - localvar length:   2
 - localvar start:    0x00007f44cd172f16
 - compiled code: nmethod   2419  348       3       org.openjdk.jcstress.infra.runners.StateHolder::postConsume (33 bytes)
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N98: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B9 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	movl    RBP, [RSI]	# int
01e   	movq    RBX, [RSI + #8 (8-bit)]	# ptr
022   	movq    RDI, RSI	# spill
025   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
032   	movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
036   	NullCheck RBX
036
036   B2: #	B8 B3 &lt;- B1  Freq: 0.999999
036   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f44c82a7480:Constant:exact *	# compressed klass ptr
03d   	jne,us  B8  P=0.000001 C=-1.000000
03d
03f   B3: #	B10 B4 &lt;- B2  Freq: 0.999998
03f   	# checkcastPP of RBX
03f   	testl   RBP, RBP
041   	jne,s   B10  P=0.000001 C=-1.000000
041
043   B4: #	B6 &lt;- B3  Freq: 0.999997
043   	movl    RSI, #-155	# int
048   	jmp,s   B6
      	nop 	# 6 bytes pad for loops and calls

050   B5: #	B6 &lt;- B6  top-of-loop Freq: 999996
050   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=RBX L[1]=RBP STK[0]=RBP
        # OopMap{rbx=Oop off=80}
056
056   B6: #	B5 B7 &lt;- B4 B5 	Loop: B6-B5 inner  Freq: 999997
056   	movzbl  R10, [RBX + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
05b   	MEMBAR-acquire ! (empty encoding)
05b   	testl   R10, R10
05e   	jne,s   B5  P=1.000000 C=866988.000000
05e
060   B7: #	N98 &lt;- B6  Freq: 0.999997
060   	movq    [rsp + #0], RBX	# spill
064   	movl    [rsp + #8], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
06b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:19  L[0]=rsp + #0 L[1]=RBP STK[0]=rsp + #8
        # OopMap{[0]=Oop off=112}
070   	int3	# ShouldNotReachHere
070
075   B8: #	N98 &lt;- B2  Freq: 9.99999e-07
075   	movl    RSI, #-99	# int
07a   	movq    [rsp + #0], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
07f   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:15  L[0]=rsp + #0 L[1]=RBP
        # OopMap{[0]=Oop off=132}
084   	int3	# ShouldNotReachHere
084
089   B9: #	B10 &lt;- B1  Freq: 1.01328e-06
089   	xorl    RBX, RBX	# ptr
08b
08b   B10: #	N98 &lt;- B3 B9  Freq: 2.01328e-06
08b   	movl    RSI, #-122	# int
090   	movq    [rsp + #0], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
097   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:15  L[0]=rsp + #0 L[1]=RBP
        # OopMap{[0]=Oop off=156}
09c   	int3	# ShouldNotReachHere
09c

</opto_assembly>
<writer thread='139933088626432'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='353'>
{method}
 - this oop:          0x00007f44ccf3cb98
 - method holder:     &apos;java/lang/CharacterData&apos;
 - constants:         0x00007f44ccf3ba00 constant pool [76] {0x00007f44ccf3ba00} for &apos;java/lang/CharacterData&apos; cache=0x00007f44ccf3cbf8
 - access:            0x81000018  static final 
 - name:              &apos;of&apos;
 - signature:         &apos;(I)Ljava/lang/CharacterData;&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80efa78: 0xa0000000 i2c: 0x00007f44b9147ba0 c2i: 0x00007f44b9147cd9 c2iUV: 0x00007f44b9147cac
 - compiled entry     0x00007f44b9232680
 - code size:         120
 - code start:        0x00007f44ccf3cb00
 - code end (excl):   0x00007f44ccf3cb78
 - method data:       0x00007f44ccfc2310
 - checked ex length: 0
 - linenumber start:  0x00007f44ccf3cb78
 - localvar length:   1
 - localvar start:    0x00007f44ccf3cb8a
 - compiled code: nmethod   2458   16       3       java.lang.CharacterData::of (120 bytes)
#
#  java/lang/CharacterDataLatin1 * ( int )
#
#r018 rsi   : parm 0: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B3 B2  Freq: 1
abababab
000   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (112 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c   	movl    R11, RSI	# spill
00f   	shrl    R11, #8
013   	movq    RAX, java/lang/CharacterDataLatin1:exact *	# ptr
01d   	testl   R11, R11
020   	jne,s   B3  P=0.000000 C=5492.000000
020
022   B2: #	N1 &lt;- B1  Freq: 1
022   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

02d   	ret
02d
02e   B3: #	N1 &lt;- B1  Freq: 5e-07
02e   	movl    RBP, RSI	# spill
030   	movl    [rsp + #0], R11	# spill
034   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
03b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.CharacterData::of @ bci:4  L[0]=RBP STK[0]=rsp + #0
        # OopMap{off=64}
040   	int3	# ShouldNotReachHere
040

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='361'>
{method}
 - this oop:          0x00007f44ccd411c0
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f44ccd3b0e8 constant pool [680] {0x00007f44ccd3b0e8} for &apos;java/lang/String&apos; cache=0x00007f44cce045e0
 - access:            0x81000001  public 
 - name:              &apos;substring&apos;
 - signature:         &apos;(II)Ljava/lang/String;&apos;
 - max stack:         6
 - max locals:        4
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef7a8: 0xbaa00000 i2c: 0x00007f44b9145ca0 c2i: 0x00007f44b9145de0 c2iUV: 0x00007f44b9145db3
 - compiled entry     0x00007f44b9266f60
 - code size:         79
 - code start:        0x00007f44ccd41130
 - code end (excl):   0x00007f44ccd4117f
 - method data:       0x00007f44cd0ab960
 - checked ex length: 0
 - linenumber start:  0x00007f44ccd4117f
 - localvar length:   4
 - localvar start:    0x00007f44ccd4118e
 - compiled code: nmethod   2546  100       3       java.lang.String::substring (79 bytes)
#
#  java/lang/String:exact * ( java/lang/String:NotNull:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N590: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B36 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (416 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movq    R11, RSI	# spill
02f   	movl    R10, RCX	# spill
032   	subl    R10, RDX	# int
035   	movslq  R8, R10	# i2l
038   	salq    R8, #1
03b   	addq    R8, #23	# long
03f   	movq    [rsp + #24], R8	# spill
044   	movl    RSI, #-155	# int
049   	movl    R13, RDX	# spill
04c   	testl   RDX, RDX
04e   	jl     B36  P=0.000000 C=13825.000000
04e
054   B2: #	B41 B3 &lt;- B1  Freq: 1
054   	movl    R9, narrowklass: precise klass java/lang/String: 0x00007f44c814d2f0:Constant:exact *	# compressed klass ptr
05a   	movq    R8, R11	# spill
05d   	movl    R11, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
061   	movl    RSI, #-10	# int
066   	movl    RBP, [R11 + #12 (8-bit)]	# range
06a   	NullCheck R11
06a
06a   B3: #	B37 B4 &lt;- B2  Freq: 0.999999
06a   	cmpl    RCX, RBP
06c   	jg     B37  P=0.000000 C=13825.000000
06c
072   B4: #	B38 B5 &lt;- B3  Freq: 0.999998
072   	testl   R10, R10
075   	jl     B38  P=0.000000 C=13825.000000
075
07b   B5: #	B22 B6 &lt;- B4  Freq: 0.999998
07b   	decode_klass_not_null R11,R9
089   	testl   RDX, RDX
08b   	je     B22  P=0.077107 C=13825.000000
08b
091   B6: #	B28 B7 &lt;- B22 B5  Freq: 0.998769
091   	movq    RSI, precise klass java/lang/String: 0x00007f44c814d2f0:Constant:exact *	# ptr
09b   	# TLS is in R15
09b   	movq    RBX, [R15 + #112 (8-bit)]	# ptr
09f   	movq    R9, [rsp + #24]	# spill
0a4   	shrq    R9, #3
0a8   	movdq   XMM0, R9	# spill
0ad   	movq    R9, RBX	# spill
0b0   	addq    R9, #24	# ptr
0b4   	# TLS is in R15
0b4   	cmpq    R9, [R15 + #128 (32-bit)]	# raw ptr
0bb   	jnb,u  B28  P=0.000100 C=-1.000000
0bb
0c1   B7: #	B8 &lt;- B6  Freq: 0.998669
0c1   	# TLS is in R15
0c1   	movq    [R15 + #112 (8-bit)], R9	# ptr
0c5   	PREFETCHNTA [R9 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0cd   	movq    R11, [R11 + #176 (32-bit)]	# ptr
0d4   	movq    [RBX], R11	# ptr
0d7   	movl    [RBX + #8 (8-bit)], narrowklass: precise klass java/lang/String: 0x00007f44c814d2f0:Constant:exact *	# compressed klass ptr
0de   	movl    [RBX + #12 (8-bit)], R12	# int (R12_heapbase==0)
0e2   	movq    [RBX + #16 (8-bit)], R12	# long (R12_heapbase==0)
0e2
0e6   B8: #	B24 B9 &lt;- B29 B7  Freq: 0.998769
0e6   	
0e6   	MEMBAR-storestore (empty encoding)
0e6   	# checkcastPP of RBX
0e6   	movl    R14, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
0ea   	testl   R10, R10
0ed   	jle     B24  P=0.004347 C=14492.000000
0ed
0f3   B9: #	B42 B10 &lt;- B8  Freq: 0.994427
0f3   	movl    RSI, #-10	# int
0f8   	movl    RCX, [R14 + #12 (8-bit)]	# range
0fc   	NullCheck R14
0fc
0fc   B10: #	B39 B11 &lt;- B9  Freq: 0.994426
0fc   	movl    RBP, RCX	# spill
0fe   	subl    RBP, R10	# int
101   	movl    R8, RCX	# spill
104   	subl    R8, R13	# int
107   	movq    R9, [rsp + #24]	# spill
10c   	andq    R9, #-8	# long
110   	cmpl    R8, R10
113   	movl    R11, R10	# spill
116   	cmovll R11, R8	# signed, int
11a   	movslq  RDX, R11	# i2l
11d   	cmpl    R13, RBP
120   	jg     B39  P=0.000000 C=14429.000000
120
126   B11: #	B30 B12 &lt;- B10  Freq: 0.994426
126   	movl    [rsp + #56], RCX	# spill
12a   	movq    RBP, RDX	# spill
12d   	salq    RBP, #1
130   	# TLS is in R15
130   	movq    RDI, [R15 + #112 (8-bit)]	# ptr
134   	addq    RBP, #16	# long
138   	movl    R8, R13	# spill
13b   	addl    R8, R11	# int
13e   	movl    [rsp + #60], R8	# spill
143   	decode_heap_oop_not_null RAX,R14
146   	movq    R8, RBP	# spill
149   	shrq    R8, #3
14d   	movq    [rsp + #64], R8	# spill
152   	cmpl    R10, #524288	# unsigned
159   	jnbe,u  B30  P=0.000001 C=-1.000000
159
15f   B12: #	B30 B13 &lt;- B11  Freq: 0.994425
15f   	movq    R8, RDI	# spill
162   	addq    R8, R9	# ptr
165   	# TLS is in R15
165   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
16c   	jnb,u  B30  P=0.000100 C=-1.000000
16c
172   B13: #	B14 &lt;- B12  Freq: 0.994325
172   	# TLS is in R15
172   	movq    [R15 + #112 (8-bit)], R8	# ptr
176   	movq    [RDI], 0x0000000000000001	# ptr
17d   	movl    [RDI + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f44c8173e10:Constant:exact *	# compressed klass ptr
184   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
18c   	movl    [RDI + #12 (8-bit)], R10	# int
190   	PREFETCHNTA [R8 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
198   	PREFETCHNTA [R8 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1a0   	PREFETCHNTA [R8 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1a0
1a8   B14: #	B32 B15 &lt;- B31 B13  Freq: 0.994426
1a8   	
1a8   	# checkcastPP of RDI
1a8   	movdq   RCX, XMM0	# spill
1ad   	addq    RCX, #-2	# long
1b1   	xorl    R8, R8	# int
1b4   	movq    R9, RDI	# spill
1b7   	addq    R9, #16	# ptr
1bb   	encode_heap_oop_not_null RSI,RDI
2c6   	movl    [rsp + #16], RSI	# spill
2ca   	movl    RSI, [rsp + #56]	# spill
2ce   	cmpl    RSI, [RSP + #60 (32-bit)]	# unsigned
2d2   	jb,u  B32  P=0.000001 C=-1.000000
2d2
2d8   B15: #	B32 B16 &lt;- B14  Freq: 0.994425
2d8   	leaq    RSI, [R14 + #16 + R13 &lt;&lt; #1]	# ptr posidxscaleoffnarrow
2dd   	cmpl    R10, R11	# unsigned
2e0   	jb,u  B32  P=0.000001 C=-1.000000
2e0
2e6   B16: #	B34 B17 &lt;- B15  Freq: 0.994424
2e6   	testl   R11, R11
2e9   	jle     B34  P=0.000001 C=-1.000000
2e9
2ef   B17: #	B27 B18 &lt;- B16  Freq: 0.994423
2ef   	andq    RBP, #-7	# long
2f3   	cmpl    R11, R10
2f6   	jl,s   B27  P=0.001000 C=-1.000000
2f6
2f8   B18: #	B19 &lt;- B17 B27  Freq: 0.994423
2f8   	movq    RDI, RSI	# spill
2fb   	movq    RSI, R9	# spill
2fe   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
30b
30b   B19: #	B20 &lt;- B18 B35 B33  Freq: 0.994426
30b   	MEMBAR-storestore (empty encoding)
30b   	movq    R10, RBX	# ptr -&gt; long
30e   	movl    R8, [rsp + #16]	# spill
313   	movl    [RBX + #12 (8-bit)], R8	# compressed ptr ! Field: java/lang/String.value
317   	shrq    R10, #9
31b   	movq    R11, 0x00007f44cd651000	# ptr
325   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
325
329   B20: #	B21 &lt;- B26 B19  Freq: 0.998768
329   	MEMBAR-release ! (empty encoding)
329
329   B21: #	N590 &lt;- B20 B23  Freq: 0.999996
329   	movq    RAX, RBX	# spill
32c   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

337   	ret
337
338   B22: #	B6 B23 &lt;- B5  Freq: 0.0771065
338   	cmpl    RCX, RBP
33a   	jne     B6  P=0.984067 C=1067.000000
33a
340   B23: #	B21 &lt;- B22  Freq: 0.0012285
340   	movq    RBX, R8	# spill
343   	jmp,s   B21
343
345   B24: #	B43 B25 &lt;- B8  Freq: 0.00434185
345   	movl    RBP, [R14 + #12 (8-bit)]	# range
349   	NullCheck R14
349
349   B25: #	B40 B26 &lt;- B24  Freq: 0.00434185
349   	cmpl    R13, RBP
34c   	jg     B40  P=0.000000 C=63.000000
34c
352   B26: #	B20 &lt;- B25  Freq: 0.00434185
352   	movl    [RBX + #12 (8-bit)], narrowoop: char[int:0]&lt;ciTypeArray length=0 type=&lt;ciTypeArrayKlass name=[C ident=807 address=0x00007f44c8173e10&gt; ident=828 SCAVENGABLE address=0x00007f4488045ce0&gt; *	# compressed ptr ! Field: java/lang/String.value
359   	movq    R10, RBX	# ptr -&gt; long
35c   	shrq    R10, #9
360   	movq    R11, 0x00007f44cd651000	# ptr
36a   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
36e   	jmp,s   B20
36e
370   B27: #	B18 &lt;- B17  Freq: 0.000994423
370   	movdq   R10, XMM0	# spill
375   	subq    R10, [RSP + #64 (32-bit)]	# long
37a   	addq    RDI, RBP	# ptr
37d   	movq    RCX, R10	# spill
380   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
38a   	jmp     B18
38a
38f   B28: #	B47 B29 &lt;- B6  Freq: 9.98935e-05
38f   	movsd   [rsp + #16], XMM0	# spill
395   	movl    [rsp + #8], R10	# spill
39a   	movq    [rsp + #0], R8	# spill
39e   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
3a3   	call,static  wrapper for: _new_instance_Java
        # java.lang.String::substring @ bci:65  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=rsp + #8
        # OopMap{[0]=Oop off=936}
3a8
3a8   B29: #	B8 &lt;- B28  Freq: 9.98915e-05
        # Block is sole successor of call
3a8   	movl    R13, RBP	# spill
3ab   	movq    R8, [rsp + #0]	# spill
3af   	movl    R10, [rsp + #8]	# spill
3b4   	movq    RBX, RAX	# spill
3b7   	movsd   XMM0, [rsp + #16]	# spill
3bd   	jmp     B8
3bd
3c2   B30: #	B45 B31 &lt;- B11 B12  Freq: 0.000100467
3c2   	movq    [rsp + #40], RAX	# spill
3c7   	movq    [rsp + #32], RDX	# spill
3cc   	movl    [rsp + #28], R11	# spill
3d1   	movl    [rsp + #24], R14	# spill
3d6   	movsd   [rsp + #16], XMM0	# spill
3dc   	movq    [rsp + #8], RBX	# spill
3e1   	movl    [rsp + #4], R10	# spill
3e6   	movl    [rsp + #0], R13	# spill
3ea   	movl    RDX, R10	# spill
3ed   	movq    RSI, precise klass [C: 0x00007f44c8173e10:Constant:exact *	# ptr
3f7   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOfRange @ bci:40  L[0]=rsp + #40 L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=_
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #8
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [24]=NarrowOop [40]=Oop off=1020}
3fc
3fc   B31: #	B14 &lt;- B30  Freq: 0.000100465
        # Block is sole successor of call
3fc   	movl    R13, [rsp + #0]	# spill
400   	movl    R10, [rsp + #4]	# spill
405   	movq    RBX, [rsp + #8]	# spill
40a   	movsd   XMM0, [rsp + #16]	# spill
410   	movl    R14, [rsp + #24]	# spill
415   	movl    R11, [rsp + #28]	# spill
41a   	movq    RDX, [rsp + #32]	# spill
41f   	movq    RDI, RAX	# spill
422   	movq    RAX, [rsp + #40]	# spill
427   	jmp     B14
427
42c   B32: #	B44 B33 &lt;- B34 B14 B15  Freq: 1.98885e-06
42c   	movq    RDX, RAX	# spill
42f   	movq    R14, RDI	# spill
432   	movl    R10, R11	# spill
435   	movq    RBP, RBX	# spill
438   	movq    RDI, R9	# spill
43b   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
445   	movq    RSI, RDX	# spill
448   	movl    RDX, R13	# spill
44b   	movq    RCX, R14	# spill
44e   	movl    R9, R10	# spill
451   	movq    [rsp + #8], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
457   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOfRange @ bci:57  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #8
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [8]=Oop [16]=NarrowOop off=1116}
45c
45c   B33: #	B19 &lt;- B32  Freq: 1.98881e-06
        # Block is sole successor of call
45c   	movq    RBX, RBP	# spill
45f   	jmp     B19
45f
464   B34: #	B32 B35 &lt;- B16  Freq: 9.94424e-07
464   	testl   R11, R11
467   	jl,s   B32  P=0.000001 C=-1.000000
467
469   B35: #	B19 &lt;- B34  Freq: 9.94423e-07
469   	movq    RDI, R9	# spill
46c   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
476   	
476   	jmp     B19
476
47b   B36: #	N590 &lt;- B1  Freq: 4.76837e-07
47b   	movq    RBP, R11	# spill
47e   	movl    [rsp + #4], RCX	# spill
482   	movl    [rsp + #8], RDX	# spill
      	nop 	# 1 bytes pad for loops and calls
487   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::substring @ bci:1  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{rbp=Oop off=1164}
48c   	int3	# ShouldNotReachHere
48c
491   B37: #	N590 &lt;- B3  Freq: 4.76836e-07
491   	movl    RSI, #-155	# int
496   	movq    [rsp + #0], R8	# spill
49a   	movl    [rsp + #8], RDX	# spill
49e   	movl    [rsp + #16], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
4a3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::substring @ bci:19  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=_ STK[0]=rsp + #16 STK[1]=RBP
        # OopMap{[0]=Oop off=1192}
4a8   	int3	# ShouldNotReachHere
4a8
4ad   B38: #	N590 &lt;- B4  Freq: 4.76836e-07
4ad   	movq    RBP, R8	# spill
4b0   	movl    [rsp + #0], RDX	# spill
4b3   	movl    [rsp + #4], RCX	# spill
4b7   	movl    [rsp + #12], R10	# spill
4bc   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
4c3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::substring @ bci:36  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #12 STK[0]=rsp + #12
        # OopMap{rbp=Oop off=1224}
4c8   	int3	# ShouldNotReachHere
4c8
4cd   B39: #	N590 &lt;- B10  Freq: 4.74179e-07
4cd   	movl    RSI, #-155	# int
4d2   	movl    [rsp + #4], R10	# spill
4d7   	movl    [rsp + #8], R13	# spill
4dc   	movq    [rsp + #24], RBX	# spill
4e1   	movl    [rsp + #12], R14	# spill
      	nop 	# 1 bytes pad for loops and calls
4e7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:55  L[0]=rsp + #24 L[1]=rsp + #12 L[2]=rsp + #8 L[3]=rsp + #4 STK[0]=rsp + #8 STK[1]=RBP
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # OopMap{[12]=NarrowOop [24]=Oop off=1260}
4ec   	int3	# ShouldNotReachHere
4ec
4f1   B40: #	N590 &lt;- B25  Freq: 2.07036e-09
4f1   	movl    [rsp + #4], R10	# spill
4f6   	movl    [rsp + #8], R13	# spill
4fb   	movl    RSI, #-155	# int
500   	movq    [rsp + #24], RBX	# spill
505   	movl    [rsp + #12], R14	# spill
      	nop 	# 1 bytes pad for loops and calls
50b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:37  L[0]=rsp + #24 L[1]=rsp + #12 L[2]=rsp + #8 L[3]=rsp + #4 STK[0]=rsp + #8 STK[1]=RBP
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # OopMap{[12]=NarrowOop [24]=Oop off=1296}
510   	int3	# ShouldNotReachHere
510
515   B41: #	N590 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
517   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::substring @ bci:18  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1308}
51c   	int3	# ShouldNotReachHere
51c
521   B42: #	N590 &lt;- B9  Freq: 1.00763e-06
      	nop 	# 2 bytes pad for loops and calls
523   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:52  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # OopMap{off=1320}
528   	int3	# ShouldNotReachHere
528
52d   B43: #	N590 &lt;- B24  Freq: 4.39951e-09
52d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
533   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # OopMap{off=1336}
538   	int3	# ShouldNotReachHere
538
53d   B44: #	B46 &lt;- B32  Freq: 1.98885e-11
53d   	# exception oop is in rax; no code emitted
53d   	jmp,s   B46
53d
53f   B45: #	B46 &lt;- B30  Freq: 1.00467e-09
53f   	# exception oop is in rax; no code emitted
53f
53f   B46: #	B48 &lt;- B45 B44  Freq: 1.02455e-09
53f   	movq    RSI, RAX	# spill
542   	jmp,s   B48
542
544   B47: #	B48 &lt;- B28  Freq: 9.98935e-10
544   	# exception oop is in rax; no code emitted
544   	movq    RSI, RAX	# spill
544
547   B48: #	N590 &lt;- B47 B46  Freq: 2.02349e-09
547   	addq    rsp, 96	# Destroy frame
	popq   rbp

54c   	jmp     rethrow_stub
54c

</opto_assembly>
<writer thread='139933087573760'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='370' compile_kind='osr'>
{method}
 - this oop:          0x00007f44cd172f30
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f44cd1727d0 constant pool [84] {0x00007f44cd1727d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f44cd172fa8
 - access:            0xc1000001  public 
 - name:              &apos;postConsume&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      7
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b92e92c0
 - code size:         33
 - code start:        0x00007f44cd172ee8
 - code end (excl):   0x00007f44cd172f09
 - method data:       0x00007f44cd175a38
 - checked ex length: 0
 - linenumber start:  0x00007f44cd172f09
 - localvar length:   2
 - localvar start:    0x00007f44cd172f16
 - compiled code: nmethod   2590  348       3       org.openjdk.jcstress.infra.runners.StateHolder::postConsume (33 bytes)
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N105: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B10 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	movl    RBP, [RSI]	# int
01e   	movq    RBX, [RSI + #8 (8-bit)]	# ptr
022   	movq    RDI, RSI	# spill
025   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
032   	movl    R11, [RBX + #8 (8-bit)]	# compressed klass ptr
036   	NullCheck RBX
036
036   B2: #	B9 B3 &lt;- B1  Freq: 0.999999
036   	movl    RSI, #-99	# int
03b   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4488042680:Constant:exact *	# compressed klass ptr
042   	jne,us  B9  P=0.000001 C=-1.000000
042
044   B3: #	B8 B4 &lt;- B2  Freq: 0.999998
044   	# checkcastPP of RBX
044   	movzbl  R11, [RBX + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
049   	MEMBAR-acquire ! (empty encoding)
049   	testl   R11, R11
04c   	je,s   B8  P=0.000003 C=954369.000000
04c
04e   B4: #	B7 B5 &lt;- B3  Freq: 0.999995
04e   	testl   RBP, RBP
050   	je,s   B7  P=1.000000 C=954366.000000
050
052   B5: #	N105 &lt;- B4  Freq: 4.76835e-07
052   	movl    RSI, #-155	# int
057   	movq    [rsp + #0], RBX	# spill
05b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=rsp + #0 L[1]=RBP STK[0]=RBP
        # OopMap{[0]=Oop off=96}
060   	int3	# ShouldNotReachHere
      	nop 	# 11 bytes pad for loops and calls

070   B6: #	B7 &lt;- B7  top-of-loop Freq: 316548
070   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=RBX L[1]=RBP STK[0]=RBP
        # OopMap{rbx=Oop off=112}
076
076   B7: #	B6 B8 &lt;- B4 B6 	Loop: B7-B6 inner  Freq: 316549
076   	movzbl  R10, [RBX + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
07b   	MEMBAR-acquire ! (empty encoding)
07b   	testl   R10, R10
07e   	jne,s   B6  P=0.999997 C=954369.000000
07e
080   B8: #	N105 &lt;- B3 B7  Freq: 0.999997
080   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

08b   	ret
08b
08c   B9: #	N105 &lt;- B2  Freq: 9.99999e-07
08c   	movq    [rsp + #0], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
093   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:15  L[0]=rsp + #0 L[1]=RBP
        # OopMap{[0]=Oop off=152}
098   	int3	# ShouldNotReachHere
098
09d   B10: #	N105 &lt;- B1  Freq: 1.01328e-06
09d   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
0a3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:15  L[0]=#NULL L[1]=RBP
        # OopMap{off=168}
0a8   	int3	# ShouldNotReachHere
0a8

</opto_assembly>
<writer thread='139933088626432'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='372'>
{method}
 - this oop:          0x00007f44cd172f30
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f44cd1727d0 constant pool [84] {0x00007f44cd1727d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f44cd172fa8
 - access:            0xc1000001  public 
 - name:              &apos;postConsume&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      7
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b92e92c0
 - code size:         33
 - code start:        0x00007f44cd172ee8
 - code end (excl):   0x00007f44cd172f09
 - method data:       0x00007f44cd175a38
 - checked ex length: 0
 - linenumber start:  0x00007f44cd172f09
 - localvar length:   2
 - localvar start:    0x00007f44cd172f16
 - compiled code: nmethod   2600  348       3       org.openjdk.jcstress.infra.runners.StateHolder::postConsume (33 bytes)
#
#  void ( org/openjdk/jcstress/infra/runners/StateHolder:NotNull *, bool )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/runners/StateHolder:NotNull *
#r016 rdx   : parm 1: bool
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N121: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B9 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    [rsp + #0], RDX	# spill
02f   	movq    RBP, RSI	# spill
032   	movl    R10, [RSI + #40 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
036   	movl    RSI, #-10	# int
03b   	testl   R10, R10	# compressed ptr
03e   	je,s   B9  P=0.000001 C=-1.000000
03e
040   B2: #	B11 B3 &lt;- B1  Freq: 0.999999
040   	decode_heap_oop_not_null RSI,R10
043   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop off=72}
048
048   B3: #	B8 B4 &lt;- B2  Freq: 0.999979
        # Block is sole successor of call
048   	testl   RAX, RAX
04a   	je,s   B8  P=0.100000 C=-1.000000
04a
04c   B4: #	B7 B5 &lt;- B3 B8  Freq: 0.999979
04c   	movzbl  R10, [RBP + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
051   	MEMBAR-acquire ! (empty encoding)
051   	testl   R10, R10
054   	je,s   B7  P=0.000003 C=954369.000000
054
056   B5: #	B10 B6 &lt;- B4  Freq: 0.999976
056   	movl    RSI, #-122	# int
05b   	movl    R8, [rsp + #0]	# spill
05f   	testl   R8, R8
062   	jne,s   B10  P=0.000001 C=-1.000000
      	nop 	# 12 bytes pad for loops and calls

070   B6: #	B6 B7 &lt;- B5 B6 	Loop: B6-B6 inner  Freq: 316543
070   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=RBP L[1]=R8 STK[0]=R8
        # OopMap{rbp=Oop off=112}
076   	movzbl  R10, [RBP + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
07b   	MEMBAR-acquire ! (empty encoding)
07b   	testl   R10, R10
07e   	jne,s   B6  P=0.999997 C=954369.000000
07e
080   B7: #	N121 &lt;- B6 B4  Freq: 0.999978
080   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

08b   	ret
08b
08c   B8: #	B4 &lt;- B3  Freq: 0.0999979
08c   	MEMBAR-release ! (empty encoding)
08c   	movb    [RBP + #20 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
090   	lock addl [rsp + #0], 0	! membar_volatile
095   	jmp,s   B4
095
097   B9: #	N121 &lt;- B1  Freq: 1.01328e-06
097   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap{off=156}
09c   	int3	# ShouldNotReachHere
09c
0a1   B10: #	N121 &lt;- B5  Freq: 9.99976e-07
      	nop 	# 2 bytes pad for loops and calls
0a3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:22  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop off=168}
0a8   	int3	# ShouldNotReachHere
0a8
0ad   B11: #	N121 &lt;- B2  Freq: 9.99999e-06
0ad   	# exception oop is in rax; no code emitted
0ad   	movq    RSI, RAX	# spill
0b0   	addq    rsp, 32	# Destroy frame
	popq   rbp

0b5   	jmp     rethrow_stub
0b5

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='374'>
{method}
 - this oop:          0x00007f44ccdc2028
 - method holder:     &apos;java/lang/AbstractStringBuilder&apos;
 - constants:         0x00007f44ccdc0b80 constant pool [365] {0x00007f44ccdc0b80} for &apos;java/lang/AbstractStringBuilder&apos; cache=0x00007f44cce81c80
 - access:            0x81000002  private 
 - name:              &apos;ensureCapacityInternal&apos;
 - signature:         &apos;(I)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      59
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b923d0e0
 - code size:         16
 - code start:        0x00007f44ccdc1ff0
 - code end (excl):   0x00007f44ccdc2000
 - method data:       0x00007f44ccfde7c0
 - checked ex length: 0
 - linenumber start:  0x00007f44ccdc2000
 - localvar length:   2
 - localvar start:    0x00007f44ccdc200e
 - compiled code: nmethod   2659   37       3       java.lang.AbstractStringBuilder::ensureCapacityInternal (16 bytes)
#
#  void ( java/lang/AbstractStringBuilder:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/AbstractStringBuilder:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N368: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B23 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (368 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movl    R10, RDX	# spill
02f   	movq    [rsp + #72], RSI	# spill
034   	movl    R9, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
038   	decode_heap_oop_not_null R11,R9
03b   	movl    RBP, [R9 + #12 (8-bit)]	# range
03f   	NullCheck R9
03f
03f   B2: #	B14 B3 &lt;- B1  Freq: 0.999999
03f   	movl    RBX, RDX	# spill
041   	subl    RBX, RBP	# int
043   	movl    RCX, RBP	# spill
045   	sall    RCX, #1
047   	movl    R8, RCX	# spill
04a   	subl    R8, RDX	# int
04d   	addl    R8, #2	# int
051   	addl    RCX, #2	# int
054   	testl   RBX, RBX
056   	jle     B14  P=0.733321 C=5456.000000
056
05c   B3: #	B15 B4 &lt;- B2  Freq: 0.266679
05c   	movl    RSI, #-155	# int
061   	testl   R8, R8
064   	jl     B15  P=0.176857 C=1521.000000
064
06a   B4: #	B22 B5 &lt;- B15 B3  Freq: 0.266679
06a   	# TLS is in R15
06a   	movslq  RDX, RCX	# i2l
06d   	leaq    R14, [R9 + #16 (8-bit)]	# ptr off8narrow
071   	salq    RDX, #1
074   	addq    RDX, #23	# long
078   	movq    RAX, RDX	# spill
07b   	shrq    RAX, #3
07f   	testl   RCX, RCX
081   	jl     B22  P=0.000000 C=1521.000000
081
087   B5: #	B17 B6 &lt;- B4  Freq: 0.266678
087   	movdq   XMM0, R11	# spill
08c   	movq    R11, RAX	# spill
08f   	addq    R11, #-2	# long
093   	movq    R13, [R15 + #112 (8-bit)]	# ptr
097   	movq    RSI, precise klass [C: 0x00007f44c8173e10:Constant:exact *	# ptr
0a1   	cmpl    RBP, RCX
0a3   	movl    R10, RCX	# spill
0a6   	cmovll R10, RBP	# signed, int
0aa   	andq    RDX, #-8	# long
0ae   	movslq  RBX, R10	# i2l
0b1   	cmpl    RCX, #524288	# unsigned
0b7   	jnbe,u  B17  P=0.000001 C=-1.000000
0b7
0bd   B6: #	B17 B7 &lt;- B5  Freq: 0.266678
0bd   	movq    R8, R13	# spill
0c0   	addq    R8, RDX	# ptr
0c3   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
0ca   	jnb,u  B17  P=0.000100 C=-1.000000
0ca
0d0   B7: #	B8 &lt;- B6  Freq: 0.266652
0d0   	movq    [R15 + #112 (8-bit)], R8	# ptr
0d4   	movq    [R13], 0x0000000000000001	# ptr
0dc   	movl    [R13 + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f44c8173e10:Constant:exact *	# compressed klass ptr
0e4   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0ec   	movl    [R13 + #12 (8-bit)], RCX	# int
0f0   	PREFETCHNTA [R8 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0f8   	PREFETCHNTA [R8 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
100   	PREFETCHNTA [R8 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
100
108   B8: #	B19 B9 &lt;- B18 B7  Freq: 0.266678
108   	movq    R9, RBX	# spill
10b   	salq    R9, #1
10e   	addq    R9, #16	# long
112   	movq    RDI, R9	# spill
115   	shrq    RDI, #3
119   	
119   	# checkcastPP of R13
119   	movq    R8, R13	# spill
11c   	addq    R8, #16	# ptr
120   	encode_heap_oop_not_null RSI,R13
22b   	movl    [rsp + #8], RSI	# spill
22f   	cmpl    RBP, R10	# unsigned
232   	jb,u  B19  P=0.000001 C=-1.000000
232
238   B9: #	B19 B10 &lt;- B8  Freq: 0.266678
238   	subq    RAX, RDI	# long
23b   	andq    R9, #-7	# long
23f   	movq    RDI, R13	# spill
242   	addq    RDI, R9	# ptr
245   	cmpl    RCX, R10	# unsigned
248   	jb,u  B19  P=0.000001 C=-1.000000
248
24e   B10: #	B21 B11 &lt;- B9  Freq: 0.266678
24e   	addq    RDX, #-16	# long
252   	shrq    RDX, #3
256   	testl   R10, R10
259   	jle     B21  P=0.000001 C=-1.000000
259
25f   B11: #	B16 B12 &lt;- B10  Freq: 0.266678
25f   	cmpl    R10, RCX
262   	jl,s   B16  P=0.001000 C=-1.000000
262
264   B12: #	B13 &lt;- B11  Freq: 0.266411
264   	movq    RDI, R14	# spill
267   	movq    RSI, R8	# spill
26a   	call_leaf_nofp,runtime  jlong_disjoint_arraycopy
        No JVM State Info
        # 
277
277   B13: #	B14 &lt;- B16 B12 B20 B21  Freq: 0.266678
277   	MEMBAR-storestore (empty encoding)
277   	movq    R10, [rsp + #72]	# spill
27c   	movq    R10, R10	# ptr -&gt; long
27c   	movl    R8, [rsp + #8]	# spill
281   	movq    R11, [rsp + #72]	# spill
286   	movl    [R11 + #16 (8-bit)], R8	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
28a   	shrq    R10, #9
28e   	movq    R11, 0x00007f44cd651000	# ptr
298   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
298
29c   B14: #	N368 &lt;- B13 B2  Freq: 0.999999
29c   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

2a7   	ret
2a7
2a8   B15: #	B4 &lt;- B3  Freq: 0.0471641
2a8   	movl    RCX, RDX	# spill
2aa   	jmp     B4
2aa
2af   B16: #	B13 &lt;- B11  Freq: 0.000266678
2af   	movq    RCX, RAX	# spill
2b2   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
2bc   	movq    RDI, R14	# spill
2bf   	movq    RSI, R8	# spill
2c2   	movq    RDX, RBX	# spill
2c5   	call_leaf_nofp,runtime  arrayof_jshort_disjoint_arraycopy
        No JVM State Info
        # 
2d2   	jmp,s   B13
2d2
2d4   B17: #	B25 B18 &lt;- B5 B6  Freq: 2.69425e-05
2d4   	movq    [rsp + #64], RBX	# spill
2d9   	movl    [rsp + #56], R10	# spill
2de   	movq    [rsp + #48], R11	# spill
2e3   	movq    [rsp + #40], RAX	# spill
2e8   	movq    [rsp + #32], R14	# spill
2ed   	movq    [rsp + #24], RDX	# spill
2f2   	movl    [rsp + #4], RCX	# spill
2f6   	movsd   [rsp + #16], XMM0	# spill
2fc   	pushq   [rsp + #72]	# 64-bit mem-mem spill
	popq    [rsp + #8]
306   	movl    [rsp + #0], R9	# spill
30a   	movl    RDX, RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
30f   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOf @ bci:1  L[0]=rsp + #0 L[1]=rsp + #4 L[2]=_
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #8
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # OopMap{[0]=NarrowOop [8]=Oop [16]=Oop [32]=Derived_oop_[16] [72]=Oop off=788}
314
314   B18: #	B8 &lt;- B17  Freq: 2.69419e-05
        # Block is sole successor of call
314   	movq    R10, RAX	# spill
317   	movsd   XMM0, [rsp + #16]	# spill
31d   	movl    RCX, [rsp + #4]	# spill
321   	movq    RDX, [rsp + #24]	# spill
326   	movq    R14, [rsp + #32]	# spill
32b   	movq    RAX, [rsp + #40]	# spill
330   	movq    R11, [rsp + #48]	# spill
335   	movq    R13, R10	# spill
338   	movl    R10, [rsp + #56]	# spill
33d   	movq    RBX, [rsp + #64]	# spill
342   	jmp     B8
342
347   B19: #	B24 B20 &lt;- B8 B9  Freq: 5.33357e-07
347   	movl    R9, R10	# spill
34a   	movq    RBP, [rsp + #72]	# spill
34f   	movq    RCX, R11	# spill
352   	movq    RDI, R8	# spill
355   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
35f   	movdq   RSI, XMM0	# spill
364   	xorl    RDX, RDX	# int
366   	movq    RCX, R13	# spill
369   	xorl    R8, R8	# int
36c   	movq    [rsp + #0], R13	# spill
      	nop 	# 3 bytes pad for loops and calls
373   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOf @ bci:14  L[0]=_ L[1]=_ L[2]=rsp + #0
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=RBP
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [0]=Oop [8]=NarrowOop [72]=Oop off=888}
378
378   B20: #	B13 &lt;- B19  Freq: 5.33346e-07
        # Block is sole successor of call
378   	jmp     B13
378
37d   B21: #	B13 &lt;- B10  Freq: 2.66678e-07
37d   	movq    RCX, R11	# spill
380   	movq    RDI, R8	# spill
383   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
38d   	
38d   	jmp     B13
38d
392   B22: #	N368 &lt;- B4  Freq: 1.27162e-07
392   	movq    RBP, [rsp + #72]	# spill
397   	movl    [rsp + #0], R10	# spill
39b   	movl    [rsp + #8], RCX	# spill
39f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:19  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 STK[0]=rsp + #8
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # OopMap{rbp=Oop off=932}
3a4   	int3	# ShouldNotReachHere
3a4
3a9   B23: #	N368 &lt;- B1  Freq: 1.01328e-06
3a9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
3af   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:5  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=948}
3b4   	int3	# ShouldNotReachHere
3b4
3b9   B24: #	B26 &lt;- B19  Freq: 5.33357e-12
3b9   	# exception oop is in rax; no code emitted
3b9   	movq    RSI, RAX	# spill
3bc   	jmp,s   B26
3bc
3be   B25: #	B26 &lt;- B17  Freq: 2.69425e-10
3be   	# exception oop is in rax; no code emitted
3be   	movq    RSI, RAX	# spill
3be
3c1   B26: #	N368 &lt;- B25 B24  Freq: 2.74758e-10
3c1   	addq    rsp, 96	# Destroy frame
	popq   rbp

3c6   	jmp     rethrow_stub
3c6

</opto_assembly>
<writer thread='139933087573760'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933088626432'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='387' compile_kind='osr'>
{method}
 - this oop:          0x00007f44cd172e40
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f44cd1727d0 constant pool [84] {0x00007f44cd1727d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f44cd172fa8
 - access:            0xc1000001  public 
 - name:              &apos;postRun&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b92fa340
 - code size:         46
 - code start:        0x00007f44cd172de8
 - code end (excl):   0x00007f44cd172e16
 - method data:       0x00007f44cd175f08
 - checked ex length: 0
 - linenumber start:  0x00007f44cd172e16
 - localvar length:   2
 - localvar start:    0x00007f44cd172e26
 - compiled code: nmethod   2720  380       3       org.openjdk.jcstress.infra.runners.StateHolder::postRun (46 bytes)
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N104: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B10 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	movl    RBP, [RSI]	# int
01e   	movq    RBX, [RSI + #8 (8-bit)]	# ptr
022   	movq    RDI, RSI	# spill
025   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
032   	movl    R11, [RBX + #8 (8-bit)]	# compressed klass ptr
036   	NullCheck RBX
036
036   B2: #	B9 B3 &lt;- B1  Freq: 0.999999
036   	movl    RSI, #-99	# int
03b   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f448c1f8940:Constant:exact *	# compressed klass ptr
042   	jne,us  B9  P=0.000001 C=-1.000000
042
044   B3: #	B8 B4 &lt;- B2  Freq: 0.999998
044   	# checkcastPP of RBX
044   	movzbl  R10, [RBX + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
049   	movl    RSI, #-155	# int
04e   	MEMBAR-acquire ! (empty encoding)
04e   	testl   R10, R10
051   	je,s   B8  P=0.000149 C=639631.000000
051
053   B4: #	B7 B5 &lt;- B3  Freq: 0.999849
053   	testl   RBP, RBP
055   	je,s   B7  P=1.000000 C=639535.000000
055
057   B5: #	N104 &lt;- B4  Freq: 4.76765e-07
057   	movq    [rsp + #0], RBX	# spill
05b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=rsp + #0 L[1]=RBP STK[0]=RBP
        # OopMap{[0]=Oop off=96}
060   	int3	# ShouldNotReachHere
      	nop 	# 11 bytes pad for loops and calls

070   B6: #	B7 &lt;- B7  top-of-loop Freq: 6730.41
070   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=RBX L[1]=RBP STK[0]=RBP
        # OopMap{rbx=Oop off=112}
076
076   B7: #	B6 B8 &lt;- B4 B6 	Loop: B7-B6 inner  Freq: 6731.41
076   	movzbl  R11, [RBX + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
07b   	MEMBAR-acquire ! (empty encoding)
07b   	testl   R11, R11
07e   	jne,s   B6  P=0.999851 C=639631.000000
07e
080   B8: #	N104 &lt;- B3 B7  Freq: 0.999997
080   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

08b   	ret
08b
08c   B9: #	N104 &lt;- B2  Freq: 9.99999e-07
08c   	movq    [rsp + #0], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
093   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:28  L[0]=rsp + #0 L[1]=RBP
        # OopMap{[0]=Oop off=152}
098   	int3	# ShouldNotReachHere
098
09d   B10: #	N104 &lt;- B1  Freq: 1.01328e-06
09d   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
0a3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:28  L[0]=#NULL L[1]=RBP
        # OopMap{off=168}
0a8   	int3	# ShouldNotReachHere
0a8

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933087573760'/>
<opto_assembly compile_id='386' compile_kind='osr'>
{method}
 - this oop:          0x00007f44cd172d40
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f44cd1727d0 constant pool [84] {0x00007f44cd1727d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f44cd172fa8
 - access:            0xc1000001  public 
 - name:              &apos;preRun&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b92ff9c0
 - code size:         48
 - code start:        0x00007f44cd172ce8
 - code end (excl):   0x00007f44cd172d18
 - method data:       0x00007f44cd175c88
 - checked ex length: 0
 - linenumber start:  0x00007f44cd172d18
 - localvar length:   2
 - localvar start:    0x00007f44cd172d26
 - compiled code: nmethod   2736  379       3       org.openjdk.jcstress.infra.runners.StateHolder::preRun (48 bytes)
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N158: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B18 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	movl    RBX, [RSI]	# int
01e   	movq    RBP, [RSI + #8 (8-bit)]	# ptr
022   	movq    RDI, RSI	# spill
025   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
032   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
036   	NullCheck RBP
036
036   B2: #	B16 B3 &lt;- B1  Freq: 0.999999
036   	movl    RSI, #-99	# int
03b   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f449418f2a0:Constant:exact *	# compressed klass ptr
042   	jne,u  B16  P=0.000001 C=-1.000000
042
048   B3: #	B14 B4 &lt;- B2  Freq: 0.999998
048   	# checkcastPP of RBP
048   	movzbl  R10, [RBP + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
04d   	MEMBAR-acquire ! (empty encoding)
04d   	testl   R10, R10
050   	je,s   B14  P=0.000368 C=203571.000000
050
052   B4: #	B7 B5 &lt;- B3  Freq: 0.99963
052   	movl    RSI, #-155	# int
057   	testl   RBX, RBX
059   	je,s   B7  P=1.000000 C=203495.000000
059
05b   B5: #	N158 &lt;- B4  Freq: 4.76661e-07
05b   	movl    [rsp + #4], RBX	# spill
05f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # OopMap{rbp=Oop off=100}
064   	int3	# ShouldNotReachHere
      	nop 	# 7 bytes pad for loops and calls

070   B6: #	B7 &lt;- B7  top-of-loop Freq: 2712.31
070   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=RBP L[1]=RBX STK[0]=RBX
        # OopMap{rbp=Oop off=112}
076
076   B7: #	B6 B8 &lt;- B4 B6 	Loop: B7-B6 inner  Freq: 2713.31
076   	movzbl  R11, [RBP + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
07b   	MEMBAR-acquire ! (empty encoding)
07b   	testl   R11, R11
07e   	jne,s   B6  P=0.999632 C=203571.000000
07e
080   B8: #	B9 &lt;- B7  Freq: 0.999629
080   	movl    R10, [RBP + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
080
084   B9: #	B15 B10 &lt;- B14 B8  Freq: 0.999997
084   	testl   R10, R10	# compressed ptr
087   	je,s   B15  P=0.000001 C=-1.000000
087
089   B10: #	B17 B11 &lt;- B9  Freq: 0.999996
089   	decode_heap_oop_not_null RSI,R10
      	nop 	# 3 bytes pad for loops and calls
08f   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=RBP L[1]=_
        # OopMap{rbp=Oop off=148}
094
094   B11: #	B13 B12 &lt;- B10  Freq: 0.999976
        # Block is sole successor of call
094   	testl   RAX, RAX
096   	jne,s   B13  P=0.504854 C=103.000000
096
098   B12: #	B13 &lt;- B11  Freq: 0.495134
098   	MEMBAR-release ! (empty encoding)
098   	movb    [RBP + #17 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
09c   	lock addl [rsp + #0], 0	! membar_volatile
0a1
0a1   B13: #	N158 &lt;- B12 B11  Freq: 0.999977
0a1   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0ac   	ret
0ac
0ad   B14: #	B9 &lt;- B3  Freq: 0.000368416
0ad   	movl    R10, [RBP + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
0b1   	jmp,s   B9
0b1
0b3   B15: #	N158 &lt;- B9  Freq: 1.01328e-06
0b3   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
0bb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap{off=192}
0c0   	int3	# ShouldNotReachHere
0c0
0c5   B16: #	N158 &lt;- B2  Freq: 9.99999e-07
0c5   	movl    [rsp + #0], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
0cb   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:15  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop off=208}
0d0   	int3	# ShouldNotReachHere
0d0
0d5   B17: #	N158 &lt;- B10  Freq: 9.99996e-06
0d5   	# exception oop is in rax; no code emitted
0d5   	movq    RSI, RAX	# spill
0d8   	addq    rsp, 32	# Destroy frame
	popq   rbp

0dd   	jmp     rethrow_stub
0dd
0e2   B18: #	N158 &lt;- B1  Freq: 1.01328e-06
0e2   	movl    RSI, #-122	# int
0e7   	movl    RBP, RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
0eb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:15  L[0]=#NULL L[1]=RBP
        # OopMap{off=240}
0f0   	int3	# ShouldNotReachHere
0f0

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='389'>
{method}
 - this oop:          0x00007f44cd16fc98
 - method holder:     &apos;org/openjdk/jcstress/infra/results/IntResult2&apos;
 - constants:         0x00007f44cd16f780 constant pool [63] {0x00007f44cd16f780} for &apos;org/openjdk/jcstress/infra/results/IntResult2&apos; cache=0x00007f44cd16fe00
 - access:            0x81000001  public 
 - name:              &apos;hashCode&apos;
 - signature:         &apos;()I&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      3
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef760: 0xb0000000 i2c: 0x00007f44b9145620 c2i: 0x00007f44b914575a c2iUV: 0x00007f44b914572d
 - compiled entry     0x00007f44b93081e0
 - code size:         17
 - code start:        0x00007f44cd16fc60
 - code end (excl):   0x00007f44cd16fc71
 - method data:       0x00007f44cd176c38
 - checked ex length: 0
 - linenumber start:  0x00007f44cd16fc71
 - localvar length:   2
 - localvar start:    0x00007f44cd16fc7e
 - compiled code: nmethod   2741  383       3       org.openjdk.jcstress.infra.results.IntResult2::hashCode (17 bytes)
#
#  int ( org/openjdk/jcstress/infra/results/IntResult2:NotNull * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/results/IntResult2:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N23: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	N23 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	movl    R11, [RSI + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
033   	movl    RAX, R11	# spill
036   	sall    RAX, #5
039   	subl    RAX, R11	# int
03c   	addl    RAX, [RSI + #272 (32-bit)]	# int
042   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

04d   	ret
04d

</opto_assembly>
<writer thread='139933088626432'/>
<opto_assembly compile_id='388'>
{method}
 - this oop:          0x00007f44cd16f490
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest&apos;
 - constants:         0x00007f44cd16ef30 constant pool [80] {0x00007f44cd16ef30} for &apos;org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest&apos; cache=0x00007f44cd16f628
 - access:            0x81000001  public 
 - name:              &apos;actor2&apos;
 - signature:         &apos;(Lorg/openjdk/jcstress/infra/results/IntResult2;)V&apos;
 - max stack:         3
 - max locals:        4
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef7f0: 0xbb000000 i2c: 0x00007f44b9145fa0 c2i: 0x00007f44b91460de c2iUV: 0x00007f44b91460b1
 - compiled entry     0x00007f44b9307d20
 - code size:         21
 - code start:        0x00007f44cd16f438
 - code end (excl):   0x00007f44cd16f44d
 - method data:       0x00007f44cd176538
 - checked ex length: 0
 - linenumber start:  0x00007f44cd16f44d
 - localvar length:   4
 - localvar start:    0x00007f44cd16f456
 - compiled code: nmethod   2748  377       3       org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest::actor2 (21 bytes)
#
#  void ( org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest:NotNull *, org/openjdk/jcstress/infra/results/IntResult2 * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest:NotNull *
#r016 rdx:rdx   : parm 1: org/openjdk/jcstress/infra/results/IntResult2 *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N36: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (136 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	movl    R11, [RSI + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
033   	testq   RDX, RDX	# ptr
036   	je,s   B3  P=0.000001 C=-1.000000
036
038   B2: #	N36 &lt;- B1  Freq: 0.999999
038   	movl    R8, [RSI + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
03c   	movl    [RDX + #140 (32-bit)], R11	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
043   	movl    [RDX + #272 (32-bit)], R8	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
04a   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

055   	ret
055
056   B3: #	N36 &lt;- B1  Freq: 1.01328e-06
056   	movl    RBP, R11	# spill
059   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
05f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest::actor2 @ bci:12  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=100}
064   	int3	# ShouldNotReachHere
064

</opto_assembly>
<writer thread='139933087573760'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='395'>
{method}
 - this oop:          0x00007f44cd16f2c0
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest&apos;
 - constants:         0x00007f44cd16ef30 constant pool [80] {0x00007f44cd16ef30} for &apos;org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest&apos; cache=0x00007f44cd16f628
 - access:            0x81000001  public 
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;()V&apos;
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef760: 0xb0000000 i2c: 0x00007f44b9145620 c2i: 0x00007f44b914575a c2iUV: 0x00007f44b914572d
 - compiled entry     0x00007f44b92fac20
 - code size:         5
 - code start:        0x00007f44cd16f2a8
 - code end (excl):   0x00007f44cd16f2ad
 - method data:       0x00007f44cd176138
 - checked ex length: 0
 - linenumber start:  0x00007f44cd16f2ad
 - localvar length:   1
 - localvar start:    0x00007f44cd16f2b2
 - compiled code: nmethod   2765  375       3       org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest::&lt;init&gt; (5 bytes)
#
#  void ( org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest:NotNull * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N14: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	N14 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

037   	ret
037

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933088626432'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933087573760'/>
<opto_assembly compile_id='400'>
{method}
 - this oop:          0x00007f44cd172e40
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f44cd1727d0 constant pool [84] {0x00007f44cd1727d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f44cd172fa8
 - access:            0xc1000001  public 
 - name:              &apos;postRun&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b92fa340
 - code size:         46
 - code start:        0x00007f44cd172de8
 - code end (excl):   0x00007f44cd172e16
 - method data:       0x00007f44cd175f08
 - checked ex length: 0
 - linenumber start:  0x00007f44cd172e16
 - localvar length:   2
 - localvar start:    0x00007f44cd172e26
 - compiled code: nmethod   2792  380       3       org.openjdk.jcstress.infra.runners.StateHolder::postRun (46 bytes)
#
#  void ( org/openjdk/jcstress/infra/runners/StateHolder:NotNull *, bool )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/runners/StateHolder:NotNull *
#r016 rdx   : parm 1: bool
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N133: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B8 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    R10, [RSI + #36 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
030   	testl   R10, R10	# compressed ptr
033   	je,s   B8  P=0.000001 C=-1.000000
033
035   B2: #	B4 B3 &lt;- B1  Freq: 0.999999
035   	movl    R11, #-1	# int
03b   	MEMBAR-release ! (empty encoding)
03b   	
03b   	XADDL  [[R10 + #12 (8-bit)]],R11
041   	decl    R11	# int
044   	
044   	MEMBAR-acquire ! (empty encoding)
044   	testl   R11, R11
047   	jne,s   B4  P=0.497409 C=193.000000
047
049   B3: #	B4 &lt;- B2  Freq: 0.50259
049   	MEMBAR-release ! (empty encoding)
049   	movb    [RSI + #19 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
04d   	lock addl [rsp + #0], 0	! membar_volatile
052
052   B4: #	B7 B5 &lt;- B3 B2  Freq: 0.999999
052   	movzbl  R11, [RSI + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
057   	MEMBAR-acquire ! (empty encoding)
057   	movzbl  R10, [RSI + #17 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
05c   	MEMBAR-acquire ! (empty encoding)
05c   	orl     R11, R10	# int
05f   	MEMBAR-release ! (empty encoding)
05f   	movb    [RSI + #21 (8-bit)], R11	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
063   	lock addl [rsp + #0], 0	! membar_volatile
068   	movzbl  R11, [RSI + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
06d   	MEMBAR-acquire ! (empty encoding)
06d   	testl   R11, R11
070   	je,s   B7  P=0.000107 C=1564957.000000
070
072   B5: #	B9 B6 &lt;- B4  Freq: 0.999892
072   	testl   RDX, RDX
074   	jne,s   B9  P=0.000001 C=-1.000000
      	nop 	# 10 bytes pad for loops and calls

080   B6: #	B6 B7 &lt;- B5 B6 	Loop: B6-B6 inner  Freq: 9314.48
080   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=RSI L[1]=RDX STK[0]=RDX
        # OopMap{rsi=Oop off=128}
086   	movzbl  R11, [RSI + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
08b   	MEMBAR-acquire ! (empty encoding)
08b   	testl   R11, R11
08e   	jne,s   B6  P=0.999893 C=1564957.000000
08e
090   B7: #	N133 &lt;- B6 B4  Freq: 0.999998
090   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

09b   	ret
09b
09c   B8: #	N133 &lt;- B1  Freq: 1.01328e-06
09c   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
0a3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap{off=168}
0a8   	int3	# ShouldNotReachHere
0a8
0ad   B9: #	N133 &lt;- B5  Freq: 9.99892e-07
0ad   	movq    RBP, RSI	# spill
0b0   	movl    [rsp + #0], RDX	# spill
0b3   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
0bb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:35  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop off=192}
0c0   	int3	# ShouldNotReachHere
0c0

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933088626432'/>
<opto_assembly compile_id='402'>
{method}
 - this oop:          0x00007f44cd172d40
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f44cd1727d0 constant pool [84] {0x00007f44cd1727d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f44cd172fa8
 - access:            0xc1000001  public 
 - name:              &apos;preRun&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b92ff9c0
 - code size:         48
 - code start:        0x00007f44cd172ce8
 - code end (excl):   0x00007f44cd172d18
 - method data:       0x00007f44cd175c88
 - checked ex length: 0
 - linenumber start:  0x00007f44cd172d18
 - localvar length:   2
 - localvar start:    0x00007f44cd172d26
 - compiled code: nmethod   2816  379       3       org.openjdk.jcstress.infra.runners.StateHolder::preRun (48 bytes)
#
#  void ( org/openjdk/jcstress/infra/runners/StateHolder:NotNull *, bool )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/runners/StateHolder:NotNull *
#r016 rdx   : parm 1: bool
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N166: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B11 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    R10, [RSI + #32 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
030   	testl   R10, R10	# compressed ptr
033   	je,s   B11  P=0.000001 C=-1.000000
033
035   B2: #	B4 B3 &lt;- B1  Freq: 0.999999
035   	movl    R11, #-1	# int
03b   	MEMBAR-release ! (empty encoding)
03b   	
03b   	movl    R9, #-1	# int
041   	XADDL  [[R10 + #12 (8-bit)]],R9
047   	
047   	decl    R9	# int
04a   	MEMBAR-acquire ! (empty encoding)
04a   	testl   R9, R9
04d   	jne,s   B4  P=0.500000 C=194.000000
04d
04f   B3: #	B4 &lt;- B2  Freq: 0.499999
04f   	MEMBAR-release ! (empty encoding)
04f   	movb    [RSI + #18 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
053   	lock addl [rsp + #0], 0	! membar_volatile
058
058   B4: #	B7 B5 &lt;- B2 B3  Freq: 0.999999
058   	movzbl  R10, [RSI + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
05d   	MEMBAR-acquire ! (empty encoding)
05d   	testl   R10, R10
060   	je,s   B7  P=0.000593 C=221034.000000
060
062   B5: #	B13 B6 &lt;- B4  Freq: 0.999406
062   	testl   RDX, RDX
064   	jne,s   B13  P=0.000001 C=-1.000000
      	nop 	# 10 bytes pad for loops and calls

070   B6: #	B6 B7 &lt;- B5 B6 	Loop: B6-B6 inner  Freq: 1686.34
070   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=RSI L[1]=RDX STK[0]=RDX
        # OopMap{rsi=Oop off=112}
076   	movzbl  R10, [RSI + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
07b   	MEMBAR-acquire ! (empty encoding)
07b   	testl   R10, R10
07e   	jne,s   B6  P=0.999407 C=221034.000000
07e
080   B7: #	B12 B8 &lt;- B6 B4  Freq: 0.999998
080   	movl    R10, [RSI + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
084   	testl   R10, R10	# compressed ptr
087   	je,s   B12  P=0.000001 C=-1.000000
087
089   B8: #	B10 B9 &lt;- B7  Freq: 0.999997
089   	MEMBAR-release ! (empty encoding)
089   	
089   	XADDL  [[R10 + #12 (8-bit)]],R11
08f   	decl    R11	# int
092   	
092   	MEMBAR-acquire ! (empty encoding)
092   	testl   R11, R11
095   	jne,s   B10  P=0.502591 C=193.000000
095
097   B9: #	B10 &lt;- B8  Freq: 0.497408
097   	MEMBAR-release ! (empty encoding)
097   	movb    [RSI + #17 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
09b   	lock addl [rsp + #0], 0	! membar_volatile
0a0
0a0   B10: #	N166 &lt;- B9 B8  Freq: 0.999997
0a0   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0ab   	ret
0ab
0ac   B11: #	N166 &lt;- B1  Freq: 1.01328e-06
0ac   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
0b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap{off=184}
0b8   	int3	# ShouldNotReachHere
0b8
0bd   B12: #	N166 &lt;- B7  Freq: 1.01328e-06
0bd   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
0c3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap{off=200}
0c8   	int3	# ShouldNotReachHere
0c8
0cd   B13: #	N166 &lt;- B5  Freq: 9.99406e-07
0cd   	movq    RBP, RSI	# spill
0d0   	movl    [rsp + #0], RDX	# spill
0d3   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
0db   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:22  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop off=224}
0e0   	int3	# ShouldNotReachHere
0e0

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='397'>
{method}
 - this oop:          0x00007f44cd16fbb8
 - method holder:     &apos;org/openjdk/jcstress/infra/results/IntResult2&apos;
 - constants:         0x00007f44cd16f780 constant pool [63] {0x00007f44cd16f780} for &apos;org/openjdk/jcstress/infra/results/IntResult2&apos; cache=0x00007f44cd16fe00
 - access:            0x81000001  public 
 - name:              &apos;equals&apos;
 - signature:         &apos;(Ljava/lang/Object;)Z&apos;
 - max stack:         3
 - max locals:        3
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      1
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef7f0: 0xbb000000 i2c: 0x00007f44b9145fa0 c2i: 0x00007f44b91460de c2iUV: 0x00007f44b91460b1
 - compiled entry     0x00007f44b92fea20
 - code size:         57
 - code start:        0x00007f44cd16fb50
 - code end (excl):   0x00007f44cd16fb89
 - method data:       0x00007f44cd176290
 - checked ex length: 0
 - linenumber start:  0x00007f44cd16fb89
 - localvar length:   3
 - localvar start:    0x00007f44cd16fb92
 - compiled code: nmethod   2831  376       3       org.openjdk.jcstress.infra.results.IntResult2::equals (57 bytes)
#
#  bool ( <!-- safepoint while printing -->
org/openjdk/jcstress/infra/results/IntResult2:NotNull *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/results/IntResult2:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N99: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B9 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	cmpq    RSI, RDX	# ptr
02f   	je,us  B9  P=0.000000 C=21885.000000
02f
031   B2: #	B11 B3 &lt;- B1  Freq: 1
031   	movl    R10, [RDX + #8 (8-bit)]	# compressed klass ptr
035   	NullCheck RDX
035
035   B3: #	B10 B4 &lt;- B2  Freq: 0.999999
035   	decode_klass_not_null R11,R10
043   	movq    RBP, [R11 + #112 (8-bit)]	# ptr
047   	movl    R11, [RSI + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
04e   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f448c19e460:Constant:exact *	# compressed klass ptr
055   	jne,us  B10  P=0.000000 C=21885.000000
055
057   B4: #	B7 B5 &lt;- B3  Freq: 0.999999
057   	# checkcastPP of RDX
057   	movl    R8, [RSI + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
05e   	movl    R10, [RDX + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
065   	cmpl    R11, R10
068   	jne,s   B7  P=0.000914 C=21885.000000
068
06a   B5: #	B8 B6 &lt;- B4  Freq: 0.999085
06a   	movl    R10, [RDX + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
071   	movl    RAX, #1	# int
076   	cmpl    R8, R10
079   	jne,s   B8  P=0.000503 C=21864.000000
079
07b   B6: #	N99 &lt;- B7 B8 B5  Freq: 0.999999
07b   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

086   	ret
086
087   B7: #	B6 &lt;- B4  Freq: 0.000913857
087   	xorl    RAX, RAX	# int
089   	jmp,s   B6
089
08b   B8: #	B6 &lt;- B5  Freq: 0.000502662
08b   	xorl    RAX, RAX	# int
08d   	jmp,s   B6
08d
08f   B9: #	N99 &lt;- B1  Freq: 4.76837e-07
08f   	movq    [rsp + #8], RSI	# spill
094   	movq    [rsp + #16], RDX	# spill
099   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
09f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:2  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=_ STK[0]=rsp + #8 STK[1]=rsp + #16
        # OopMap{[8]=Oop [16]=Oop off=164}
0a4   	int3	# ShouldNotReachHere
0a4
0a9   B10: #	N99 &lt;- B3  Freq: 4.76837e-07
0a9   	movq    [rsp + #0], RSI	# spill
0ad   	movq    [rsp + #8], RDX	# spill
0b2   	movl    RSI, #-155	# int
0b7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:19  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ STK[0]=#Ptr0x00007f448c1a4b50 STK[1]=RBP
        # OopMap{rbp=Oop [0]=Oop [8]=Oop off=188}
0bc   	int3	# ShouldNotReachHere
0bc
0c1   B11: #	N99 &lt;- B2  Freq: 4.76837e-07
0c1   	movq    RBP, RSI	# spill
0c4   	movq    [rsp + #8], RDX	# spill
0c9   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
0cf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:8  L[0]=RBP L[1]=rsp + #8 L[2]=_ STK[0]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=212}
0d4   	int3	# ShouldNotReachHere
0d4

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='396'>
{method}
 - this oop:          0x00007f44cd16f390
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest&apos;
 - constants:         0x00007f44cd16ef30 constant pool [80] {0x00007f44cd16ef30} for &apos;org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest&apos; cache=0x00007f44cd16f628
 - access:            0x81000001  public 
 - name:              &apos;actor1&apos;
 - signature:         &apos;()V&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef760: 0xb0000000 i2c: 0x00007f44b9145620 c2i: 0x00007f44b914575a c2iUV: 0x00007f44b914572d
 - compiled entry     0x00007f44b92f8b60
 - code size:         27
 - code start:        0x00007f44cd16f350
 - code end (excl):   0x00007f44cd16f36b
 - method data:       0x00007f44cd176688
 - checked ex length: 0
 - linenumber start:  0x00007f44cd16f36b
 - localvar length:   1
 - localvar start:    0x00007f44cd16f37a
 - compiled code: nmethod   2875  378       3       org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest::actor1 (27 bytes)
#
#  void ( org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest:NotNull * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N26: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	N26 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	movl    [RSI + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
033   	
033   	MEMBAR-release ! (empty encoding)
033   	movl    [RSI + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
03d   	movl    [RSI + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
044   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

04f   	ret
04f

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933087573760'/>
<opto_assembly compile_id='399'>
{method}
 - this oop:          0x00007f44cd171e80
 - method holder:     &apos;org/openjdk/jcstress/util/OpenAddressHashCounter&apos;
 - constants:         0x00007f44cd171440 constant pool [164] {0x00007f44cd171440} for &apos;org/openjdk/jcstress/util/OpenAddressHashCounter&apos; cache=0x00007f44cd172480
 - access:            0xc1000002  private 
 - name:              &apos;recordWithTries&apos;
 - signature:         &apos;(Ljava/lang/Object;JI)V&apos;
 - max stack:         7
 - max locals:        8
 - size of params:    5
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c8129838: 0xbbbea000 i2c: 0x00007f44b92acd60 c2i: 0x00007f44b92acea6 c2iUV: 0x00007f44b92ace79
 - compiled entry     0x00007f44b9303420
 - code size:         116
 - code start:        0x00007f44cd171da0
 - code end (excl):   0x00007f44cd171e14
 - method data:       0x00007f44cd176988
 - checked ex length: 0
 - linenumber start:  0x00007f44cd171e14
 - localvar length:   7
 - localvar start:    0x00007f44cd171e28
 - compiled code: nmethod   2926  382       3       org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries (116 bytes)
#
#  void ( org/openjdk/jcstress/util/OpenAddressHashCounter:NotNull *, java/lang/Object *, long, half, int )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/util/OpenAddressHashCounter:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
#r010 rcx:rcx   : parm 2: long
#r004 r8   : parm 4: int
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N593: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B48 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (272 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movq    [rsp + #8], RCX	# spill
031   	movq    R11, RSI	# spill
034   	movl    RCX, [RSI + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.length
037   	movl    RDI, [RSI + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.keys
03a   	decode_heap_oop_not_null R9,RDI
03d   	movl    RSI, #-34	# int
042   	decl    RCX	# int
044   	movq    R10, RDX	# spill
047   	movl    RBX, [RDX + #8 (8-bit)]	# compressed klass ptr
04a   	NullCheck RDX
04a
04a   B2: #	B38 B3 &lt;- B1  Freq: 0.999999
04a   	cmpl    RBX, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4488042c30:Constant:exact *	# compressed klass ptr
050   	jne,u  B38  P=0.000001 C=-1.000000
050
056   B3: #	B49 B4 &lt;- B2  Freq: 0.999998
056   	movq    [rsp + #32], R9	# spill
05b   	movl    R13, R8	# spill
05e   	# checkcastPP of R10
05e   	movl    R9, [R10 + #140 (32-bit)]	# int ! Field: <!-- safepoint while printing -->
org/openjdk/jcstress/infra/results/IntResult2.r1
065   	movl    RBX, R9	# spill
068   	sall    RBX, #5
06b   	movl    RDX, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
072   	subl    RBX, R9	# int
075   	addl    RBX, RDX	# int
077   	andl    RBX, RCX	# int
079   	movl    RAX, RBX	# spill
07b   	incl    RAX	# int
07d   	andl    RAX, RCX	# int
07f   	movl    RSI, [RDI + #12 (8-bit)]	# range
082   	NullCheck RDI
082
082   B4: #	B36 B5 &lt;- B3  Freq: 0.999997
082   	movl    [rsp + #40], RSI	# spill
086   	movl    [rsp + #20], RAX	# spill
08a   	movl    [rsp + #28], RDI	# spill
08e   	movq    RBP, R11	# spill
091   	movq    [rsp + #0], R10	# spill
095   	movl    RSI, #-28	# int
09a   	cmpl    RBX, [RSP + #40 (32-bit)]	# unsigned
09e   	jnb,u  B36  P=0.000001 C=-1.000000
09e
0a4   B5: #	B26 B6 &lt;- B4  Freq: 0.999996
0a4   	movl    R10, [RDI + #16 + RBX &lt;&lt; #2]	# compressed ptr
0a9   	testl   R10, R10	# compressed ptr
0ac   	je     B26  P=0.000046 C=21882.000000
0ac
0b2   B6: #	B39 B7 &lt;- B5  Freq: 0.99995
0b2   	decode_heap_oop_not_null RDI,R10
0b5   	xorl    R8, R8	# int
0b8   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
0bc   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4488042c30:Constant:exact *	# compressed klass ptr
0c3   	jne,u  B39  P=0.000001 C=-1.000000
0c3
0c9   B7: #	B41 B8 &lt;- B6  Freq: 0.999949
0c9   	# checkcastPP of RDI
0c9   	movl    R10, [RDI + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
0d0   	cmpq    RDI, [RSP + #0 (32-bit)]	# ptr
0d4   	je,u  B41  P=0.000000 C=21885.000000
0d4
0da   B8: #	B14 B9 &lt;- B7  Freq: 0.999949
0da   	movl    R11, [RDI + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
0e1   	cmpl    R10, R9
0e4   	jne,s   B14  P=0.000914 C=21885.000000
0e4
0e6   B9: #	B14 B10 &lt;- B8  Freq: 0.999035
0e6   	cmpl    R11, RDX
0e9   	jne,s   B14  P=0.000503 C=21864.000000
0e9
0eb   B10: #	B50 B11 &lt;- B9 B22  Freq: 0.999807
0eb   	movl    R10, [RBP + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
0ef   	movl    R8, [R10 + #12 (8-bit)]	# range
0f3   	NullCheck R10
0f3
0f3   B11: #	B37 B12 &lt;- B10  Freq: 0.999806
0f3   	cmpl    RBX, R8	# unsigned
0f6   	jnb,u  B37  P=0.000001 C=-1.000000
0f6
0fc   B12: #	B13 &lt;- B11  Freq: 0.999805
0fc   	movq    R11, [rsp + #8]	# spill
101   	addq    [R10 + #16 + RBX &lt;&lt; #3], R11	# long
106
106   B13: #	N593 &lt;- B12 B25 B32  Freq: 0.999992
106   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

111   	ret
111
112   B14: #	B43 B15 &lt;- B8 B9  Freq: 0.00141645
112   	cmpl    RAX, [RSP + #40 (32-bit)]	# unsigned
116   	jnb,u  B43  P=0.000001 C=-1.000000
116
11c   B15: #	B23 B16 &lt;- B14  Freq: 0.00141645
11c   	movl    R10, [rsp + #28]	# spill
121   	movl    RAX, [R10 + #16 + RAX &lt;&lt; #2]	# compressed ptr
126   	movl    R11, R13	# spill
129   	testl   R11, R11
12c   	jl,s   B23  P=0.100000 C=-1.000000
12c
12e   B16: #	B17 &lt;- B15  Freq: 0.0012748
12e   	movl    R8, #1	# int
12e
134   B17: #	B27 B18 &lt;- B16 B35 	Loop: B17-B35 inner partial_peel  Freq: 0.00127643
134   	decode_heap_oop_not_null RDI,RAX
137   	movl    R11, [rsp + #20]	# spill
13c   	incl    R11	# int
13f   	testl   RAX, RAX	# compressed ptr
141   	je,s   B27  P=0.000046 C=21882.000000
141
143   B18: #	B40 B19 &lt;- B17  Freq: 0.00127637
143   	movl    RBX, [RAX + #8 (8-bit)]	# compressed klass ptr
146   	cmpl    RBX, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4488042c30:Constant:exact *	# compressed klass ptr
14c   	jne,u  B40  P=0.000001 C=-1.000000
14c
152   B19: #	B42 B20 &lt;- B18  Freq: 0.00127637
152   	# checkcastPP of RDI
152   	andl    R11, RCX	# int
155   	movl    R10, [RDI + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
15c   	movl    RBX, [RDI + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
162   	cmpq    RDI, [RSP + #0 (32-bit)]	# ptr
166   	je,u  B42  P=0.000000 C=21885.000000
166
16c   B20: #	B33 B21 &lt;- B19  Freq: 0.00127637
16c   	movl    RDI, R8	# spill
16f   	incl    RDI	# int
171   	cmpl    R10, R9
174   	jne     B33  P=0.000914 C=21885.000000
174
17a   B21: #	B33 B22 &lt;- B20  Freq: 0.0012752
17a   	cmpl    RBX, RDX
17c   	jne     B33  P=0.000503 C=21864.000000
17c
182   B22: #	B10 &lt;- B21  Freq: 0.00127456
182   	movl    RBX, [rsp + #20]	# spill
186   	jmp     B10
186
18b   B23: #	B52 B24 &lt;- B15 B34  Freq: 0.000141826
18b   	movq    RSI, RBP	# spill
      	nop 	# 1 bytes pad for loops and calls
18f   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::resize
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:84  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_
        # OopMap{rbp=Oop [0]=Oop off=404}
194
194   B24: #	B53 B25 &lt;- B23  Freq: 0.000141823
        # Block is sole successor of call
194   	movq    RSI, RBP	# spill
197   	movq    RDX, [rsp + #0]	# spill
19b   	movq    RCX, [rsp + #8]	# spill
1a0   	movl    R8, #2147483647	# int
      	nop 	# 1 bytes pad for loops and calls
1a7   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:92  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_
        # OopMap{off=428}
1ac
1ac   B25: #	B13 &lt;- B24  Freq: 0.00014182
        # Block is sole successor of call
1ac   	jmp     B13
1ac
1b1   B26: #	B27 &lt;- B5  Freq: 4.57166e-05
1b1   	movl    [rsp + #20], RBX	# spill
1b1
1b5   B27: #	B51 B28 &lt;- B17 B26  Freq: 4.57749e-05
1b5   	movslq  R10, [RSP + #20 (32-bit)]	# int -&gt; long
1ba   	movq    [rsp + #48], R10	# spill
1bf   	movq    RSI, [rsp + #0]	# spill
1c3   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::decouple
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:103  L[0]=RBP L[1]=_ L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=rsp + #20 L[6]=_ L[7]=_ STK[0]=rsp + #28 STK[1]=rsp + #20
        # OopMap{rbp=Oop [28]=NarrowOop [32]=Oop off=456}
1c8
1c8   B28: #	B45 B29 &lt;- B27  Freq: 4.5774e-05
        # Block is sole successor of call
1c8   	movq    RDI, RBP	# spill
1cb   	movl    RBP, [RDI + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
1ce   	movl    R8, [rsp + #28]	# spill
1d3   	movq    RCX, [rsp + #48]	# spill
1d8   	leaq    RBX, [R8 + #16 + RCX &lt;&lt; #2]	# ptr idxscaleoffnarrow
1dd   	movl    RSI, #-28	# int
1e2   	movl    R11, [rsp + #20]	# spill
1e7   	cmpl    R11, [RSP + #40 (32-bit)]	# unsigned
1ec   	jnb,u  B45  P=0.000001 C=-1.000000
1ec
1f2   B29: #	B47 B30 &lt;- B28  Freq: 4.5774e-05
1f2   	movl    R9, [R8 + #8 (8-bit)]	# compressed klass ptr
1f6   	cmpl    R9, narrowklass: precise klass [Ljava/lang/Object;: 0x00007f4488044e80:Constant:exact *	# compressed klass ptr
1fd   	jne,u  B47  P=0.000001 C=-1.000000
1fd
203   B30: #	B55 B31 &lt;- B29  Freq: 4.57739e-05
203   	movq    R8, RBX	# ptr -&gt; long
206   	shrq    R8, #9
20a   	encode_heap_oop R9,RAX
295   	movq    R10, 0x00007f44cd651000	# ptr
29f   	movb    [R10 + R8], R12	# short/char (R12_heapbase==0)
2a3   	movl    [RBX], R9	# compressed ptr
2a6   	movl    R8, [RBP + #12 (8-bit)]	# range
2aa   	NullCheck RBP
2aa
2aa   B31: #	B46 B32 &lt;- B30  Freq: 4.57739e-05
2aa   	cmpl    R11, R8	# unsigned
2ad   	jnb,u  B46  P=0.000001 C=-1.000000
2ad
2b3   B32: #	B13 &lt;- B31  Freq: 4.57738e-05
2b3   	movq    R10, [rsp + #8]	# spill
2b8   	movq    [RBP + #16 + RCX &lt;&lt; #3], R10	# long
2bd   	jmp     B13
2bd
2c2   B33: #	B44 B34 &lt;- B20 B21  Freq: 1.808e-06
2c2   	cmpl    R11, [RSP + #40 (32-bit)]	# unsigned
2c7   	jnb,u  B44  P=0.000001 C=-1.000000
2c7
2cd   B34: #	B23 B35 &lt;- B33  Freq: 1.808e-06
2cd   	movl    R10, [rsp + #28]	# spill
2d2   	movl    RAX, [R10 + #16 + R11 &lt;&lt; #2]	# compressed ptr
2d7   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:80  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=R13 L[5]=R11 L[6]=RDI L[7]=RAX STK[0]=R8 STK[1]=R13
        # OopMap{rax=NarrowOop rbp=Oop [0]=Oop [28]=NarrowOop [32]=Oop off=727}
2dd   	cmpl    R8, R13
2e0   	jg     B23  P=0.100000 C=-1.000000
2e0
2e6   B35: #	B17 &lt;- B34  Freq: 1.6272e-06
2e6   	movl    R8, RDI	# spill
2e9   	movl    [rsp + #20], R11	# spill
2ee   	jmp     B17
2ee
2f3   B36: #	N593 &lt;- B4  Freq: 1.01328e-06
2f3   	movl    [rsp + #16], R8	# spill
2f8   	movl    [rsp + #24], RDI	# spill
2fc   	movl    [rsp + #28], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
303   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #28 L[6]=#0 L[7]=_ STK[0]=rsp + #24 STK[1]=rsp + #28
        # OopMap{rbp=Oop [0]=Oop [24]=NarrowOop off=776}
308   	int3	# ShouldNotReachHere
308
30d   B37: #	N593 &lt;- B11  Freq: 1.01308e-06
30d   	movq    RBP, [rsp + #8]	# spill
312   	movl    [rsp + #8], R10	# spill
317   	movl    [rsp + #12], RBX	# spill
31b   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
323   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=RBP L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #8 STK[1]=rsp + #12 STK[2]=rsp + #8 STK[3]=rsp + #12
        # OopMap{[8]=NarrowOop off=808}
328   	int3	# ShouldNotReachHere
328
32d   B38: #	N593 &lt;- B2  Freq: 9.99999e-07
32d   	movq    RBP, R11	# spill
330   	movl    [rsp + #16], R8	# spill
335   	movq    [rsp + #24], RDX	# spill
      	nop 	# 1 bytes pad for loops and calls
33b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #24
        # OopMap{rbp=Oop [24]=Oop off=832}
340   	int3	# ShouldNotReachHere
340
345   B39: #	B40 &lt;- B6  Freq: 9.9995e-07
345   	movl    [rsp + #20], RBX	# spill
345
349   B40: #	N593 &lt;- B39 B18  Freq: 1.00123e-06
349   	movl    RSI, #-34	# int
34e   	movl    [rsp + #16], R13	# spill
353   	movl    [rsp + #24], R8	# spill
358   	movq    [rsp + #32], RDI	# spill
      	nop 	# 2 bytes pad for loops and calls
35f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #20 L[6]=rsp + #24 L[7]=_ STK[0]=rsp + #32 STK[1]=rsp + #0
        # OopMap{rbp=Oop [0]=Oop [32]=Oop off=868}
364   	int3	# ShouldNotReachHere
364
369   B41: #	B42 &lt;- B7  Freq: 4.76813e-07
369   	movl    [rsp + #20], RBX	# spill
369
36d   B42: #	N593 &lt;- B41 B19  Freq: 4.77422e-07
36d   	movl    [rsp + #16], R13	# spill
372   	movl    [rsp + #24], R8	# spill
377   	movq    [rsp + #48], RDI	# spill
37c   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
383   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:2  L[0]=rsp + #48 L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #48 STK[1]=rsp + #0
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #20 L[6]=rsp + #24 L[7]=_
        # OopMap{rbp=Oop [0]=Oop [48]=Oop off=904}
388   	int3	# ShouldNotReachHere
388
38d   B43: #	B44 &lt;- B14  Freq: 1.43526e-09
38d   	movl    R11, RAX	# spill
38d
390   B44: #	N593 &lt;- B43 B33  Freq: 1.43709e-09
390   	movl    [rsp + #16], R13	# spill
395   	movl    [rsp + #24], R8	# spill
39a   	movl    [rsp + #32], R11	# spill
39f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:70  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #32 L[6]=rsp + #24 L[7]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [28]=NarrowOop off=932}
3a4   	int3	# ShouldNotReachHere
3a4
3a9   B45: #	N593 &lt;- B28  Freq: 4.63818e-11
3a9   	movq    RBP, RDI	# spill
3ac   	movq    R9, [rsp + #8]	# spill
3b1   	movq    [rsp + #0], R9	# spill
3b5   	movl    [rsp + #12], R8	# spill
3ba   	movq    [rsp + #24], RAX	# spill
3bf   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=_ L[4]=_ L[5]=rsp + #20 L[6]=_ L[7]=_ STK[0]=rsp + #12 STK[1]=rsp + #20 STK[2]=rsp + #24
        # OopMap{rbp=Oop [12]=NarrowOop [24]=Oop off=964}
3c4   	int3	# ShouldNotReachHere
3c4
3c9   B46: #	N593 &lt;- B31  Freq: 4.63817e-11
      	nop 	# 2 bytes pad for loops and calls
3cb   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=RBP STK[1]=rsp + #20 STK[2]=rsp + #8 STK[3]=_
        # OopMap{rbp=NarrowOop off=976}
3d0   	int3	# ShouldNotReachHere
3d0
3d5   B47: #	N593 &lt;- B29  Freq: 4.5774e-11
3d5   	movq    RBP, RDI	# spill
3d8   	movq    R9, [rsp + #8]	# spill
3dd   	movq    [rsp + #0], R9	# spill
3e1   	movl    [rsp + #12], R8	# spill
3e6   	movl    RSI, #-42	# int
3eb   	movq    [rsp + #24], RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
3f3   	call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=_ L[4]=_ L[5]=rsp + #20 L[6]=_ L[7]=_ STK[0]=rsp + #12 STK[1]=rsp + #20 STK[2]=rsp + #24
        # OopMap{rbp=Oop [12]=NarrowOop [24]=Oop off=1016}
3f8   	int3	# ShouldNotReachHere
3f8
3fd   B48: #	N593 &lt;- B1  Freq: 1.01328e-06
3fd   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
403   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL
        # OopMap{off=1032}
408   	int3	# ShouldNotReachHere
408
40d   B49: #	N593 &lt;- B3  Freq: 1.01328e-06
40d   	movl    RBP, RBX	# spill
40f   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
417   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=1052}
41c   	int3	# ShouldNotReachHere
41c
421   B50: #	N593 &lt;- B10  Freq: 1.01308e-06
421   	movl    RBP, RBX	# spill
423   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
42b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # OopMap{off=1072}
430   	int3	# ShouldNotReachHere
430
435   B51: #	B54 &lt;- B27  Freq: 4.57749e-10
435   	# exception oop is in rax; no code emitted
435   	movq    RSI, RAX	# spill
438   	jmp,s   B54
438
43a   B52: #	B54 &lt;- B23  Freq: 1.41826e-09
43a   	# exception oop is in rax; no code emitted
43a   	movq    RSI, RAX	# spill
43d   	jmp,s   B54
43d
43f   B53: #	B54 &lt;- B24  Freq: 1.41823e-09
43f   	# exception oop is in rax; no code emitted
43f   	movq    RSI, RAX	# spill
43f
442   B54: #	N593 &lt;- B52 B53 B51  Freq: 3.29423e-09
442   	addq    rsp, 80	# Destroy frame
	popq   rbp

447   	jmp     rethrow_stub
447
44c   B55: #	N593 &lt;- B30  Freq: 4.63817e-11
44c   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
453   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=rsp + #20 STK[2]=rsp + #8 STK[3]=_
        # OopMap{off=1112}
458   	int3	# ShouldNotReachHere
458

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933088626432'/>
<opto_assembly compile_id='398'>
{method}
 - this oop:          0x00007f44cd171c48
 - method holder:     &apos;org/openjdk/jcstress/util/OpenAddressHashCounter&apos;
 - constants:         0x00007f44cd171440 constant pool [164] {0x00007f44cd171440} for &apos;org/openjdk/jcstress/util/OpenAddressHashCounter&apos; cache=0x00007f44cd172480
 - access:            0x81000001  public 
 - name:              &apos;record&apos;
 - signature:         &apos;(Ljava/lang/Object;)V&apos;
 - max stack:         6
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      7
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef7f0: 0xbb000000 i2c: 0x00007f44b9145fa0 c2i: 0x00007f44b91460de c2iUV: 0x00007f44b91460b1
 - compiled entry     0x00007f44b92ff520
 - code size:         8
 - code start:        0x00007f44cd171c18
 - code end (excl):   0x00007f44cd171c20
 - method data:       0x00007f44cd176828
 - checked ex length: 0
 - linenumber start:  0x00007f44cd171c20
 - localvar length:   2
 - localvar start:    0x00007f44cd171c2c
 - compiled code: nmethod   3045  381       3       org.openjdk.jcstress.util.OpenAddressHashCounter::record (8 bytes)
#
#  void ( org/openjdk/jcstress/util/OpenAddressHashCounter:NotNull *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/util/OpenAddressHashCounter:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N838: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B80 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (368 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c   	movq    R10, RDX	# spill
02f   	movq    R11, RSI	# spill
032   	movl    R9, [RSI + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.length
036   	movl    R8, [RDX + #8 (8-bit)]	# compressed klass ptr
03a   	NullCheck RDX
03a
03a   B2: #	B37 B3 &lt;- B1  Freq: 0.999999
03a   	decl    R9	# int
03d   	movl    RSI, #-34	# int
042   	cmpl    R8, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f448c1a3c50:Constant:exact *	# compressed klass ptr
049   	jne,u  B37  P=0.000001 C=-1.000000
049
04f   B3: #	B81 B4 &lt;- B2  Freq: 0.999998
04f   	# checkcastPP of R10
04f   	movl    R8, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.keys
053   	movl    RBX, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
05a   	movl    RCX, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
061   	movl    RAX, RCX	# spill
063   	sall    RAX, #5
066   	subl    RAX, RCX	# int
068   	addl    RAX, RBX	# int
06a   	andl    RAX, R9	# int
06d   	movl    R13, RAX	# spill
070   	incl    R13	# int
073   	andl    R13, R9	# int
076   	movl    RDX, R13	# spill
079   	incl    RDX	# int
07b   	andl    RDX, R9	# int
07e   	movl    RBP, [R8 + #12 (8-bit)]	# range
082   	NullCheck R8
082
082   B4: #	B35 B5 &lt;- B3  Freq: 0.999997
082   	movl    [rsp + #16], R8	# spill
087   	movq    [rsp + #8], R11	# spill
08c   	movq    [rsp + #0], R10	# spill
090   	movl    RDI, RDX	# spill
092   	incl    RDI	# int
094   	andl    RDI, R9	# int
097   	movl    R10, RDI	# spill
09a   	incl    R10	# int
09d   	movl    R14, R10	# spill
0a0   	cmpl    RAX, RBP	# unsigned
0a2   	jnb,u  B35  P=0.000001 C=-1.000000
0a2
0a8   B5: #	B21 B6 &lt;- B4  Freq: 0.999996
0a8   	movl    R10, [R8 + #16 + RAX &lt;&lt; #2]	# compressed ptr
0ad   	testl   R10, R10	# compressed ptr
0b0   	je     B21  P=0.000045 C=22202.000000
0b0
0b6   B6: #	B38 B7 &lt;- B5  Freq: 0.999951
0b6   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
0ba   	decode_heap_oop_not_null R10,R10
0ba   	movq    R8, R10	# spill
0bd   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f448c1a3c50:Constant:exact *	# compressed klass ptr
0c4   	jne,u  B38  P=0.000001 C=-1.000000
0c4
0ca   B7: #	B40 B8 &lt;- B6  Freq: 0.99995
0ca   	# checkcastPP of R8
0ca   	cmpq    R8, [RSP + #0 (32-bit)]	# ptr
0ce   	je,u  B40  P=0.000000 C=22205.000000
0ce
0d4   B8: #	B14 B9 &lt;- B7  Freq: 0.999949
0d4   	movl    R11, [R8 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
0db   	movq    R10, [rsp + #8]	# spill
0e0   	movl    R10, [R10 + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
0e4   	movdl   XMM1, R10	# spill
0e9   	cmpl    R11, RCX
0ec   	jne,s   B14  P=0.000901 C=22205.000000
0ec
0ee   B9: #	B14 B10 &lt;- B8  Freq: 0.999049
0ee   	movl    R11, [R8 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
0f5   	cmpl    R11, RBX
0f8   	jne,s   B14  P=0.000496 C=22184.000000
0f8
0fa   B10: #	B82 B11 &lt;- B9 B20  Freq: 0.999949
0fa   	movdl   R8, XMM1	# spill
0ff   	movl    R10, [R8 + #12 (8-bit)]	# range
103   	NullCheck R8
103
103   B11: #	B36 B12 &lt;- B10  Freq: 0.999948
103   	cmpl    RAX, R10	# unsigned
106   	jnb,u  B36  P=0.000001 C=-1.000000
106
10c   B12: #	B13 &lt;- B11  Freq: 0.999947
10c   	incq    [R8 + #16 + RAX &lt;&lt; #3]	# long
111
111   B13: #	N838 &lt;- B12 B75 B27  Freq: 0.999992
111   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

11c   	ret
11c
11d   B14: #	B51 B15 &lt;- B8 B9  Freq: 0.00139602
11d   	movl    RAX, #3	# int
122   	cmpl    R13, RBP	# unsigned
125   	jnb,u  B51  P=0.000001 C=-1.000000
125
12b   B15: #	B42 B16 &lt;- B14  Freq: 0.00139602
12b   	movl    R10, [rsp + #16]	# spill
130   	movl    R8, [R10 + #16 + R13 &lt;&lt; #2]	# compressed ptr
135   	movl    R11, R14	# spill
138   	andl    R11, R9	# int
13b   	movl    [rsp + #24], R11	# spill
140   	testl   R8, R8	# compressed ptr
143   	je     B42  P=0.000045 C=22202.000000
143
149   B16: #	B53 B17 &lt;- B15  Freq: 0.00139596
149   	movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
14d   	decode_heap_oop_not_null R11,R8
150   	movq    R8, R11	# spill
153   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f448c1a3c50:Constant:exact *	# compressed klass ptr
15a   	jne,u  B53  P=0.000001 C=-1.000000
15a
160   B17: #	B55 B18 &lt;- B16  Freq: 0.00139595
160   	movq    R10, R11	# spill
163   	# checkcastPP of R10
163   	movq    R11, R10	# spill
166   	movl    R10, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
16d   	cmpq    R11, [RSP + #0 (32-bit)]	# ptr
171   	je,u  B55  P=0.000000 C=22205.000000
171
177   B18: #	B28 B19 &lt;- B17  Freq: 0.00139595
177   	movl    R8, [R11 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
17e   	cmpl    R8, RCX
181   	jne     B28  P=0.000901 C=22205.000000
181
187   B19: #	B28 B20 &lt;- B18  Freq: 0.0013947
187   	cmpl    R10, RBX
18a   	jne     B28  P=0.000496 C=22184.000000
18a
190   B20: #	B10 &lt;- B19 B50 B34  Freq: 0.00139595
190   	movl    RAX, R13	# spill
193   	jmp     B10
193
198   B21: #	B22 &lt;- B5  Freq: 4.50609e-05
198   	movl    [rsp + #24], RAX	# spill
198
19c   B22: #	B86 B23 &lt;- B43 B57 B62 B21  Freq: 4.51239e-05
19c   	movq    RSI, [rsp + #0]	# spill
      	nop 	# 3 bytes pad for loops and calls
1a3   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::decouple
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:103  L[0]=rsp + #8 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #24 L[6]=_ L[7]=_ STK[0]=rsp + #16 STK[1]=rsp + #24
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{[8]=Oop [16]=NarrowOop off=424}
1a8
1a8   B23: #	B58 B24 &lt;- B22  Freq: 4.5123e-05
        # Block is sole successor of call
1a8   	movl    RSI, #-42	# int
1ad   	movl    RBX, [rsp + #16]	# spill
1b1   	movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
1b5   	movl    R11, [rsp + #24]	# spill
1ba   	cmpl    R11, RBP	# unsigned
1bd   	jnb,u  B58  P=0.000001 C=-1.000000
1bd
1c3   B24: #	B60 B25 &lt;- B23  Freq: 4.5123e-05
1c3   	movq    RCX, 0x00007f44cd651000	# ptr
1cd   	movslq  RDI, [RSP + #24 (32-bit)]	# int -&gt; long
1d2   	movq    RDX, [rsp + #8]	# spill
1d7   	movl    RBP, [RDX + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
1da   	decode_heap_oop_not_null R9,RBX
1dd   	leaq    R9, [RBX + #16 + RDI &lt;&lt; #2]	# ptr idxscaleoffnarrow
1e2   	cmpl    R10, narrowklass: precise klass [Ljava/lang/Object;: 0x00007f448c1a1910:Constant:exact *	# compressed klass ptr
1e9   	jne,u  B60  P=0.000001 C=-1.000000
1e9
1ef   B25: #	B83 B26 &lt;- B24  Freq: 4.51229e-05
1ef   	movq    R10, R9	# ptr -&gt; long
1f2   	encode_heap_oop R8,RAX
27d   	shrq    R10, #9
281   	movl    [R9], R8	# compressed ptr
284   	movb    [RCX + R10], R12	# short/char (R12_heapbase==0)
288   	movl    R8, [RBP + #12 (8-bit)]	# range
28c   	NullCheck RBP
28c
28c   B26: #	B59 B27 &lt;- B25  Freq: 4.51229e-05
28c   	cmpl    R11, R8	# unsigned
28f   	jnb,u  B59  P=0.000001 C=-1.000000
28f
295   B27: #	B13 &lt;- B26  Freq: 4.51228e-05
295   	movq    [RBP + #16 + RDI &lt;&lt; #3], #1	# long
29e   	jmp     B13
29e
2a3   B28: #	B68 B29 &lt;- B18 B19  Freq: 1.94888e-06
2a3   	cmpl    RDX, RBP	# unsigned
2a5   	jnb,u  B68  P=0.000001 C=-1.000000
2a5
2ab   B29: #	B57 B30 &lt;- B28  Freq: 1.94887e-06
2ab   	movl    R10, [rsp + #16]	# spill
2b0   	movl    R13, [R10 + #16 + RDX &lt;&lt; #2]	# compressed ptr
2b5   	movl    R11, [rsp + #24]	# spill
2ba   	movl    R10, R11	# spill
2bd   	incl    R10	# int
2c0   	testl   R13, R13	# compressed ptr
2c3   	je     B57  P=0.000045 C=22202.000000
2c3
2c9   B30: #	B70 B31 &lt;- B29  Freq: 1.94879e-06
2c9   	movl    R11, R10	# spill
2cc   	andl    R11, R9	# int
2cf   	movl    R9, R11	# spill
2d2   	movl    R10, [R13 + #8 (8-bit)]	# compressed klass ptr
2d6   	decode_heap_oop_not_null R11,R13
2d9   	movq    R8, R11	# spill
2dc   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f448c1a3c50:Constant:exact *	# compressed klass ptr
2e3   	jne,u  B70  P=0.000001 C=-1.000000
2e3
2e9   B31: #	B71 B32 &lt;- B30  Freq: 1.94878e-06
2e9   	movq    R10, R11	# spill
2ec   	# checkcastPP of R10
2ec   	movq    R8, R10	# spill
2ef   	movl    R11, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
2f6   	cmpq    R10, [RSP + #0 (32-bit)]	# ptr
2fa   	je,u  B71  P=0.000000 C=22205.000000
2fa
300   B32: #	B44 B33 &lt;- B31  Freq: 1.94878e-06
300   	movl    R10, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
307   	cmpl    R10, RCX
30a   	jne     B44  P=0.000901 C=22205.000000
30a
310   B33: #	B44 B34 &lt;- B32  Freq: 1.94703e-06
310   	cmpl    R11, RBX
313   	jne     B44  P=0.000496 C=22184.000000
313
319   B34: #	B20 &lt;- B33 B67  Freq: 1.94607e-06
319   	movl    R13, RDX	# spill
31c   	jmp     B20
31c
321   B35: #	N838 &lt;- B4  Freq: 1.01328e-06
321   	movq    RBP, R11	# spill
324   	movl    [rsp + #12], R8	# spill
329   	movl    [rsp + #16], RAX	# spill
32d   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
333   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=RBP L[1]=rsp + #0 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #16 L[6]=#0 L[7]=_ STK[0]=rsp + #12 STK[1]=rsp + #16
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [0]=Oop [12]=NarrowOop off=824}
338   	int3	# ShouldNotReachHere
338
33d   B36: #	N838 &lt;- B11  Freq: 1.01323e-06
33d   	movl    RSI, #-28	# int
342   	movl    [rsp + #4], R8	# spill
347   	movl    [rsp + #8], RAX	# spill
34b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #4 STK[1]=rsp + #8 STK[2]=rsp + #4 STK[3]=rsp + #8
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{[4]=NarrowOop off=848}
350   	int3	# ShouldNotReachHere
350
355   B37: #	N838 &lt;- B2  Freq: 9.99999e-07
355   	movq    RBP, R11	# spill
358   	movq    [rsp + #8], RDX	# spill
      	nop 	# 2 bytes pad for loops and calls
35f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=RBP L[1]=rsp + #8 L[2]=#1 L[3]=_ L[4]=#3 L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #8
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [8]=Oop off=868}
364   	int3	# ShouldNotReachHere
364
369   B38: #	B39 &lt;- B6  Freq: 9.99951e-07
369   	movl    [rsp + #24], RAX	# spill
36d   	xorl    R11, R11	# int
370
370   B39: #	N838 &lt;- B38 B54 B70 B77  Freq: 1.00135e-06
370   	movq    RBP, [rsp + #8]	# spill
375   	movl    R10, [rsp + #24]	# spill
37a   	movl    [rsp + #16], R10	# spill
37f   	movl    [rsp + #20], R11	# spill
384   	movq    [rsp + #24], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
38b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=RBP L[1]=rsp + #0 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #16 L[6]=rsp + #20 L[7]=_ STK[0]=rsp + #24 STK[1]=rsp + #0
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [0]=Oop [24]=Oop off=912}
390   	int3	# ShouldNotReachHere
390
395   B40: #	B41 &lt;- B7  Freq: 4.76813e-07
395   	movl    [rsp + #24], RAX	# spill
399   	xorl    R10, R10	# int
39c   	movq    R11, R8	# spill
39c
39f   B41: #	N838 &lt;- B40 B56 B71 B78  Freq: 4.7748e-07
39f   	movq    RBP, [rsp + #8]	# spill
3a4   	movl    [rsp + #28], R10	# spill
3a9   	movq    [rsp + #40], R11	# spill
3ae   	movl    RSI, #-155	# int
3b3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        #<!-- safepoint while printing -->
 org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:2  L[0]=rsp + #40 L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #40 STK[1]=rsp + #0
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=RBP L[1]=rsp + #0 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #24 L[6]=rsp + #28 L[7]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [0]=Oop [40]=Oop off=952}
3b8   	int3	# ShouldNotReachHere
3b8
3bd   B42: #	B43 &lt;- B15  Freq: 6.29061e-08
3bd   	movl    RDI, R13	# spill
3bd
3c0   B43: #	B22 &lt;- B42 B45  Freq: 6.29063e-08
3c0   	movl    [rsp + #24], RDI	# spill
3c4   	jmp     B22
3c4
3c9   B44: #	B76 B45 &lt;- B32 B33  Freq: 2.72068e-09
3c9   	cmpl    RDI, RBP	# unsigned
3cb   	jnb,u  B76  P=0.000001 C=-1.000000
3cb
3d1   B45: #	B43 B46 &lt;- B44  Freq: 2.72068e-09
3d1   	movl    R11, [rsp + #16]	# spill
3d6   	movl    R8, [R11 + #16 + RDI &lt;&lt; #2]	# compressed ptr
3db   	testl   R8, R8	# compressed ptr
3de   	je,s   B43  P=0.000045 C=22202.000000
3de
3e0   B46: #	B54 B47 &lt;- B45  Freq: 2.72055e-09
3e0   	movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
3e4   	decode_heap_oop_not_null R11,R8
3e7   	movq    R8, R11	# spill
3ea   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f448c1a3c50:Constant:exact *	# compressed klass ptr
3f1   	jne,us  B54  P=0.000001 C=-1.000000
3f1
3f3   B47: #	B56 B48 &lt;- B46  Freq: 2.72055e-09
3f3   	movq    R10, R11	# spill
3f6   	# checkcastPP of R10
3f6   	movq    R11, R10	# spill
3f9   	movl    R10, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
400   	cmpq    R11, [RSP + #0 (32-bit)]	# ptr
404   	je,us  B56  P=0.000000 C=22205.000000
404
406   B48: #	B61 B49 &lt;- B47  Freq: 2.72055e-09
406   	movl    R8, [R11 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
40d   	cmpl    R10, RCX
410   	jne     B61  P=0.000901 C=22205.000000
410
416   B49: #	B61 B50 &lt;- B48  Freq: 2.7181e-09
416   	cmpl    R8, RBX
419   	jne     B61  P=0.000496 C=22184.000000
419
41f   B50: #	B20 &lt;- B49  Freq: 2.71675e-09
41f   	movl    R13, RDI	# spill
422   	jmp     B20
422
427   B51: #	B52 &lt;- B14  Freq: 1.41456e-09
427   	xorl    R8, R8	# int
42a   	movl    R10, R13	# spill
42a
42d   B52: #	N838 &lt;- B51 B69 B76 B79  Freq: 1.41653e-09
42d   	movq    RBP, [rsp + #8]	# spill
432   	movl    [rsp + #12], R8	# spill
437   	movl    [rsp + #20], R10	# spill
43c   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
443   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:70  L[0]=RBP L[1]=rsp + #0 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #20 L[6]=rsp + #12 L[7]=_ STK[0]=rsp + #16 STK[1]=rsp + #20
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop off=1096}
448   	int3	# ShouldNotReachHere
448
44d   B53: #	B54 &lt;- B16  Freq: 1.39596e-09
44d   	movl    RDI, R13	# spill
450   	movl    RAX, #1	# int
450
455   B54: #	B39 &lt;- B53 B46  Freq: 1.39596e-09
455   	movl    [rsp + #24], RDI	# spill
459   	movl    R11, RAX	# spill
45c   	jmp     B39
45c
461   B55: #	B56 &lt;- B17  Freq: 6.65643e-10
461   	movl    RDI, R13	# spill
464   	movl    RAX, #1	# int
464
469   B56: #	B41 &lt;- B55 B47  Freq: 6.65644e-10
469   	movl    [rsp + #24], RDI	# spill
46d   	movl    R10, RAX	# spill
470   	jmp     B41
470
475   B57: #	B22 &lt;- B29  Freq: 8.78185e-11
475   	movl    [rsp + #24], RDX	# spill
479   	jmp     B22
479
47e   B58: #	N838 &lt;- B23  Freq: 4.57222e-11
47e   	movq    RBP, [rsp + #8]	# spill
483   	movl    RSI, #-28	# int
488   	movl    [rsp + #4], RBX	# spill
48c   	movq    [rsp + #16], RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
493   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=RBP L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #24 L[6]=_ L[7]=_ STK[0]=rsp + #4 STK[1]=rsp + #24 STK[2]=rsp + #16
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [4]=NarrowOop [16]=Oop off=1176}
498   	int3	# ShouldNotReachHere
498
49d   B59: #	N838 &lt;- B26  Freq: 4.57221e-11
49d   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
4a3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=RBP STK[1]=rsp + #24 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=NarrowOop off=1192}
4a8   	int3	# ShouldNotReachHere
4a8
4ad   B60: #	N838 &lt;- B24  Freq: 4.5123e-11
4ad   	movq    RBP, RDX	# spill
4b0   	movl    [rsp + #4], RBX	# spill
4b4   	movq    [rsp + #16], RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
4bb   	call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=RBP L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #24 L[6]=_ L[7]=_ STK[0]=rsp + #4 STK[1]=rsp + #24 STK[2]=rsp + #16
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [4]=NarrowOop [16]=Oop off=1216}
4c0   	int3	# ShouldNotReachHere
4c0
4c5   B61: #	B69 B62 &lt;- B48 B49  Freq: 3.79813e-12
4c5   	movl    R11, [rsp + #24]	# spill
4ca   	cmpl    R11, RBP	# unsigned
4cd   	jnb,us  B69  P=0.000001 C=-1.000000
4cd
4cf   B62: #	B22 B63 &lt;- B61  Freq: 3.79813e-12
4cf   	movl    R10, [rsp + #16]	# spill
4d4   	movl    R10, [R10 + #16 + R11 &lt;&lt; #2]	# compressed ptr
4d9   	decode_heap_oop_not_null R11,R10
4dc   	movq    R8, R11	# spill
4df   	testl   R10, R10	# compressed ptr
4e2   	je     B22  P=0.000045 C=22202.000000
4e2
4e8   B63: #	B77 B64 &lt;- B62  Freq: 3.79796e-12
4e8   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
4ec   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f448c1a3c50:Constant:exact *	# compressed klass ptr
4f3   	jne,u  B77  P=0.000001 C=-1.000000
4f3
4f9   B64: #	B78 B65 &lt;- B63  Freq: 3.79795e-12
4f9   	movq    R11, R8	# spill
4fc   	# checkcastPP of R11
4fc   	cmpq    R11, [RSP + #0 (32-bit)]	# ptr
500   	je,u  B78  P=0.000000 C=22205.000000
500
506   B65: #	B72 B66 &lt;- B64  Freq: 3.79795e-12
506   	movl    R10, [R11 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
50d   	movl    R8, [R11 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
514   	cmpl    R8, RCX
517   	jne,s   B72  P=0.000901 C=22205.000000
517
519   B66: #	B72 B67 &lt;- B65  Freq: 3.79453e-12
519   	cmpl    R10, RBX
51c   	jne,s   B72  P=0.000496 C=22184.000000
51c
51e   B67: #	B34 &lt;- B66  Freq: 3.79265e-12
51e   	movl    RDX, [rsp + #24]	# spill
522   	jmp     B34
522
527   B68: #	B69 &lt;- B28  Freq: 1.97476e-12
527   	movl    [rsp + #24], RDX	# spill
52b   	movl    RAX, #1	# int
52b
530   B69: #	B52 &lt;- B68 B61  Freq: 1.97476e-12
530   	movl    R10, [rsp + #24]	# spill
535   	movl    R8, RAX	# spill
538   	jmp     B52
538
53d   B70: #	B39 &lt;- B30  Freq: 1.94879e-12
53d   	movl    [rsp + #24], RDX	# spill
541   	movl    R11, #2	# int
547   	jmp     B39
547
54c   B71: #	B41 &lt;- B31  Freq: 9.29253e-13
54c   	movl    [rsp + #24], RDX	# spill
550   	movl    R10, #2	# int
556   	movq    R11, R8	# spill
559   	jmp     B41
559
55e   B72: #	B79 B73 &lt;- B65 B66  Freq: 5.30228e-15
55e   	movl    R10, R9	# spill
561   	cmpl    R10, RBP	# unsigned
564   	jnb,us  B79  P=0.000001 C=-1.000000
564
566   B73: #	B85 B74 &lt;- B72  Freq: 5.30228e-15
566   	movq    RSI, [rsp + #8]	# spill
56b   	movq    RBP, RSI	# spill
      	nop 	# 1 bytes pad for loops and calls
56f   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::resize
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:84  L[0]=RBP L[1]=rsp + #0 L[2]=#1 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [0]=Oop off=1396}
574
574   B74: #	B84 B75 &lt;- B73  Freq: 5.30217e-15
        # Block is sole successor of call
574   	movq    RSI, RBP	# spill
577   	movq    RDX, [rsp + #0]	# spill
57b   	movl    RCX, #1	# long (unsigned 32-bit)
580   	movl    R8, #2147483647	# int
      	nop 	# 1 bytes pad for loops and calls
587   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:92  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{off=1420}
58c
58c   B75: #	B13 &lt;- B74  Freq: 5.30206e-15
        # Block is sole successor of call
58c   	jmp     B13
58c
591   B76: #	B52 &lt;- B44  Freq: 2.75681e-15
591   	movl    R8, #2	# int
597   	movl    R10, RDI	# spill
59a   	jmp     B52
59a
59f   B77: #	B39 &lt;- B63  Freq: 3.79796e-18
59f   	movl    R11, #4	# int
5a5   	jmp     B39
5a5
5aa   B78: #	B41 &lt;- B64  Freq: 1.811e-18
5aa   	movl    R10, #4	# int
5b0   	jmp     B41
5b0
5b5   B79: #	B52 &lt;- B72  Freq: 5.37269e-21
5b5   	movl    R8, #4	# int
5bb   	jmp     B52
5bb
5c0   B80: #	N838 &lt;- B1  Freq: 1.01328e-06
5c0   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
5c7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{off=1484}
5cc   	int3	# ShouldNotReachHere
5cc
5d1   B81: #	N838 &lt;- B3  Freq: 1.01328e-06
5d1   	movl    RBP, RAX	# spill
5d3   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
5db   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{off=1504}
5e0   	int3	# ShouldNotReachHere
5e0
5e5   B82: #	N838 &lt;- B10  Freq: 1.01323e-06
5e5   	movl    RSI, #-10	# int
5ea   	movl    RBP, RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
5ef   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{off=1524}
5f4   	int3	# ShouldNotReachHere
5f4
5f9   B83: #	N838 &lt;- B25  Freq: 4.57221e-11
5f9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
5ff   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=rsp + #24 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{off=1540}
604   	int3	# ShouldNotReachHere
604
609   B84: #	B87 &lt;- B74  Freq: 5.30217e-20
609   	# exception oop is in rax; no code emitted
609   	movq    RSI, RAX	# spill
60c   	jmp,s   B87
60c
60e   B85: #	B87 &lt;- B73  Freq: 5.30228e-20
60e   	# exception oop is in rax; no code emitted
60e   	movq    RSI, RAX	# spill
611   	jmp,s   B87
611
613   B86: #	B87 &lt;- B22  Freq: 4.51239e-10
613   	# exception oop is in rax; no code emitted
613   	movq    RSI, RAX	# spill
613
616   B87: #	N838 &lt;- B85 B84 B86  Freq: 4.51239e-10
616   	addq    rsp, 64	# Destroy frame
	popq   rbp

61b   	jmp     rethrow_stub
61b

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933087573760'/>
<opto_assembly compile_id='406' compile_kind='osr'>
{method}
 - this oop:          0x00007f44cd1745c8
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase&apos;
 - constants:         0x00007f44cd173dc0 constant pool [137] {0x00007f44cd173dc0} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase&apos; cache=0x00007f44cd1746a0
 - access:            0xc1000001  public 
 - name:              &apos;newEpoch&apos;
 - signature:         &apos;(Lorg/openjdk/jcstress/infra/runners/StateHolder;)V&apos;
 - max stack:         7
 - max locals:        10
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef7f0: 0xbb000000 i2c: 0x00007f44b9145fa0 c2i: 0x00007f44b91460de c2iUV: 0x00007f44b91460b1
 - compiled entry     0x00007f44b930bd80
 - code size:         275
 - code start:        0x00007f44cd1743f8
 - code end (excl):   0x00007f44cd17450b
 - method data:       0x00007f44cd177290
 - checked ex length: 0
 - linenumber start:  0x00007f44cd17450b
 - localvar length:   12
 - localvar start:    0x00007f44cd174534
 - compiled code: nmethod   3222  401       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch (275 bytes)
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 128 --
#r191 rsp+124: in_preserve
#r190 rsp+120: return address
#r189 rsp+116: in_preserve
#r188 rsp+112: saved fp register
#r187 rsp+108: pad2, stack alignment
#r186 rsp+104: pad2, stack alignment
#r185 rsp+100: Fixed slot 1
#r184 rsp+96: Fixed slot 0
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1811: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B70 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (328 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

01c   	movl    R10, [RSI + #40 (8-bit)]	# int
020   	movl    [rsp + #8], R10	# spill
025   	movl    RBX, [RSI + #24 (8-bit)]	# int
028   	movq    RBP, [RSI + #32 (8-bit)]	# ptr
02c   	movq    R13, [RSI + #72 (8-bit)]	# ptr
030   	movq    RDI, RSI	# spill
033   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
040   	testq   R13, R13	# ptr
043   	je     B70  P=0.001000 C=-1.000000
043
049   B2: #	B99 B3 &lt;- B1  Freq: 0.999
049   	movl    R11, [R13 + #8 (8-bit)]	# compressed klass ptr
04d   	decode_klass_not_null R10,R11
05b   	movq    R10, [R10 + #56 (8-bit)]	# class
05f   	movq    R11, precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase: 0x00007f448c14b3b0:Constant:exact *	# ptr
069   	cmpq    R10, R11	# ptr
06c   	jne,u  B99  P=0.000001 C=-1.000000
06c
072   B3: #	B4 &lt;- B2  Freq: 0.998999
072   	movq    R8, R13	# spill
075   	# checkcastPP of R8
075
075   B4: #	B71 B5 &lt;- B3 B70  Freq: 0.999999
075   	movl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4488041b60:Constant:exact *	# compressed klass ptr
07b   	movq    R10, RBP	# spill
07e   	testq   RBP, RBP	# ptr
081   	je     B71  P=0.001000 C=-1.000000
081
087   B5: #	B100 B6 &lt;- B4  Freq: 0.998999
087   	movl    R9, [RBP + #8 (8-bit)]	# compressed klass ptr
08b   	cmpl    R9, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f448c14bbf0:Constant:exact *	# compressed klass ptr
092   	jne,u  B100  P=0.000001 C=-1.000000
092
098   B6: #	B7 &lt;- B5  Freq: 0.998998
098   	# checkcastPP of R10
098   	movq    R9, R10	# spill
09b   	addq    R9, #12	# ptr
09f
09f   B7: #	B25 B8 &lt;- B6 B71  Freq: 0.999998
09f   	movl    RCX, RBX	# spill
0a1   	incl    RCX	# int
0a3   	cmpl    RBX, [RSP + #8 (32-bit)]
0a7   	jge     B25  P=0.001418 C=2116.000000
0a7
0ad   B8: #	B76 B9 &lt;- B7  Freq: 0.99858
0ad   	movl    [rsp + #12], RCX	# spill
0b1   	movq    [rsp + #32], R9	# spill
0b6   	movq    [rsp + #24], R8	# spill
0bb   	movq    [rsp + #16], R10	# spill
0c0   	movl    [rsp + #0], RBX	# spill
0c3   	# TLS is in R15
0c3   	movq    R8, [R15 + #112 (8-bit)]	# ptr
0c7   	movq    R9, R8	# spill
0ca   	addq    R9, #24	# ptr
0ce   	decode_klass_not_null R10,R11
0dc   	movq    [rsp + #40], R10	# spill
0e1   	movl    R10, narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f448c14bc70:Constant:exact *	# compressed klass ptr
0e7   	decode_klass_not_null R10,R10
0eb   	movq    [rsp + #48], R10	# spill
0f0   	# TLS is in R15
0f0   	cmpq    R9, [R15 + #128 (32-bit)]	# raw ptr
0f7   	jnb,u  B76  P=0.000100 C=-1.000000
0f7
0fd   B9: #	B10 &lt;- B8  Freq: 0.99848
0fd   	# TLS is in R15
0fd   	movq    [R15 + #112 (8-bit)], R9	# ptr
101   	PREFETCHNTA [R9 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
109   	movq    R10, [R10 + #176 (32-bit)]	# ptr
110   	movq    [R8], R10	# ptr
113   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f448c14bc70:Constant:exact *	# compressed klass ptr
11b   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
11f   	movq    [R8 + #16 (8-bit)], R12	# long (R12_heapbase==0)
11f
123   B10: #	B78 B11 &lt;- B77 B9  Freq: 0.99858
123   	
123   	MEMBAR-storestore (empty encoding)
123   	# checkcastPP of R8
123   	movq    [rsp + #56], R8	# spill
128   	# TLS is in R15
128   	movq    R11, [R15 + #112 (8-bit)]	# ptr
12c   	movq    R8, R11	# spill
12f   	addq    R8, #408	# ptr
136   	# TLS is in R15
136   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
13d   	jnb,u  B78  P=0.000100 C=-1.000000
13d
143   B11: #	B12 &lt;- B10  Freq: 0.99848
143   	# TLS is in R15
143   	movq    [R15 + #112 (8-bit)], R8	# ptr
147   	movq    RDI, R11	# spill
14a   	addq    RDI, #16	# ptr
14e   	movq    R10, [rsp + #40]	# spill
153   	movq    R10, [R10 + #176 (32-bit)]	# ptr
15a   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
162   	movq    [R11], R10	# ptr
165   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4488041b60:Constant:exact *	# compressed klass ptr
16d   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
171   	movl    RCX, #49	# long (unsigned 32-bit)
176   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
180
180   B12: #	B94 B13 &lt;- B79 B11  Freq: 0.99858
180   	
180   	MEMBAR-storestore (empty encoding)
180   	# checkcastPP of R11
180   	movq    R10, [rsp + #56]	# spill
185   	encode_heap_oop_not_null R10,R10
28d   	encode_heap_oop_not_null R8,R11
398   	movq    R11, [rsp + #56]	# spill
39d   	movq    R9, R11	# ptr -&gt; long
3a0   	shrq    R9, #9
3a4   	movl    [R11 + #16 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
3a8   	movq    R11, 0x00007f44cd651000	# ptr
3b2   	movb    [R11 + R9], R12	# short/char (R12_heapbase==0)
3b6   	movq    R11, [rsp + #16]	# spill
3bb   	testq   R11, R11	# ptr
3be   	je     B94  P=0.000001 C=-1.000000
3be
3c4   B13: #	B95 B14 &lt;- B12  Freq: 0.998579
3c4   	movq    R11, [rsp + #32]	# spill
3c9   	movl    R11, [R11]	# range
3cc   	movl    [rsp + #4], R11	# spill
3d1   	movq    R11, [rsp + #16]	# spill
3d6   	movl    RBP, [rsp + #0]	# spill
3d9   	leaq    R11, [R11 + #16 + RBP &lt;&lt; #2]	# ptr posidxscaleoff
3de   	cmpl    RBP, [RSP + #4 (32-bit)]	# unsigned
3e2   	jnb,u  B95  P=0.000001 C=-1.000000
3e2
3e8   B14: #	B18 &lt;- B13  Freq: 0.998578
3e8   	movl    [R11], R10	# compressed ptr
3eb   	movq    R10, R11	# ptr -&gt; long
3ee   	shrq    R10, #9
3f2   	movq    R11, 0x00007f44cd651000	# ptr
3fc   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
400   	jmp     B18
      	nop 	# 11 bytes pad for loops and calls

410   B15: #	B16 &lt;- B21  top-of-loop Freq: 702.766
410   	# TLS is in R15
410   	movq    [R15 + #112 (8-bit)], R10	# ptr
414   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
41c   	movq    R10, [rsp + #40]	# spill
421   	movq    R10, [R10 + #176 (32-bit)]	# ptr
428   	movq    [R8], R10	# ptr
42b   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4488041b60:Constant:exact *	# compressed klass ptr
433   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
437   	movl    RCX, #49	# long (unsigned 32-bit)
43c   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
446
446   B16: #	B72 B17 &lt;- B23 B15  top-of-loop Freq: 702.836
446   	
446   	MEMBAR-storestore (empty encoding)
446   	# checkcastPP of R8
446   	movq    R10, [rsp + #56]	# spill
44b   	movq    R10, R10	# ptr -&gt; long
44b   	encode_heap_oop_not_null R9,R8
556   	shrq    R10, #9
55a   	movq    R8, [rsp + #56]	# spill
55f   	movl    [R8 + #16 (8-bit)], R9	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
563   	movq    R8, 0x00007f44cd651000	# ptr
56d   	movb    [R8 + R10], R12	# short/char (R12_heapbase==0)
571   	movl    R8, [rsp + #12]	# spill
576   	cmpl    R8, [RSP + #4 (32-bit)]	# unsigned
57b   	jnb,u  B72  P=0.000001 C=-1.000000
57b
581   B17: #	B18 &lt;- B16  Freq: 702.835
581   	movl    R10, [rsp + #84]	# spill
586   	movl    [RBP], R10	# compressed ptr
58a   	movq    R10, RBP	# ptr -&gt; long
58d   	shrq    R10, #9
591   	movq    R8, 0x00007f44cd651000	# ptr
59b   	movb    [R8 + R10], R12	# short/char (R12_heapbase==0)
59f   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:203  L[0]=rsp + #24 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #8 L[5]=rsp + #16 L[6]=R11 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[16]=Oop [24]=Oop [32]=Derived_oop_[16] off=1439}
5a5   	movl    [rsp + #12], R11	# spill
5a5
5aa   B18: #	B24 B19 &lt;- B14 B17 	Loop: B18-B17 inner  Freq: 703.834
5aa   	movl    R11, [rsp + #12]	# spill
5af   	cmpl    R11, [RSP + #8 (32-bit)]
5b4   	jge     B24  P=0.001418 C=2116.000000
5b4
5ba   B19: #	B64 B20 &lt;- B18  Freq: 702.836
5ba   	# TLS is in R15
5ba   	movq    R8, [R15 + #112 (8-bit)]	# ptr
5be   	movq    R10, R8	# spill
5c1   	addq    R10, #24	# ptr
5c5   	movq    R11, [rsp + #16]	# spill
5ca   	movl    R9, [rsp + #12]	# spill
5cf   	leaq    RBP, [R11 + #16 + R9 &lt;&lt; #2]	# ptr posidxscaleoff
5d4   	# TLS is in R15
5d4   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
5db   	jnb,u  B64  P=0.000100 C=-1.000000
5db
5e1   B20: #	B21 &lt;- B19  Freq: 702.766
5e1   	# TLS is in R15
5e1   	movq    [R15 + #112 (8-bit)], R10	# ptr
5e5   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
5ed   	movq    R10, [rsp + #48]	# spill
5f2   	movq    R10, [R10 + #176 (32-bit)]	# ptr
5f9   	movq    [R8], R10	# ptr
5fc   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f448c14bc70:Constant:exact *	# compressed klass ptr
604   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
608   	movq    [R8 + #16 (8-bit)], R12	# long (R12_heapbase==0)
608
60c   B21: #	B15 B22 &lt;- B65 B20  Freq: 702.836
60c   	
60c   	movl    R11, [rsp + #12]	# spill
611   	incl    R11	# int
614   	MEMBAR-storestore (empty encoding)
614   	# checkcastPP of R8
614   	movq    [rsp + #56], R8	# spill
619   	# TLS is in R15
619   	movq    R8, [R15 + #112 (8-bit)]	# ptr
61d   	movq    R10, [rsp + #56]	# spill
622   	encode_heap_oop_not_null R9,R10
72d   	movl    [rsp + #84], R9	# spill
732   	movq    RDI, R8	# spill
735   	addq    RDI, #16	# ptr
739   	movq    R10, R8	# spill
73c   	addq    R10, #408	# ptr
743   	# TLS is in R15
743   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
74a   	jb,u  B15  P=0.999900 C=-1.000000
74a
750   B22: #	B119 B23 &lt;- B21  Freq: 0.0702953
750   	movl    [rsp + #80], R11	# spill
755   	movq    [rsp + #72], RBP	# spill
75a   	movq    RSI, precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4488041b60:Constant:exact *	# ptr
764   	movq    RBP, [rsp + #24]	# spill
      	nop 	# 2 bytes pad for loops and calls
76b   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:183  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #12 L[7]=rsp + #56 L[8]=_ L[9]=_ STK[0]=rsp + #56
        # OopMap{rbp=Oop [16]=Oop [24]=Oop [32]=Derived_oop_[16] [56]=Oop [72]=Derived_oop_[16] [84]=NarrowOop off=1904}
770
770   B23: #	B16 &lt;- B22  Freq: 0.0702938
        # Block is sole successor of call
770   	movq    R8, RAX	# spill
773   	movq    RBP, [rsp + #72]	# spill
778   	movl    R11, [rsp + #80]	# spill
77d   	jmp     B16
77d
782   B24: #	B25 &lt;- B18  Freq: 0.997865
782   	movq    R10, [rsp + #16]	# spill
787   	movq    R8, [rsp + #24]	# spill
78c   	movq    R9, [rsp + #32]	# spill
78c
791   B25: #	B101 B26 &lt;- B7 B24  Freq: 0.999282
791   	movl    RBP, [R10 + #16 (8-bit)]	# compressed ptr
795   	NullCheck R10
795
795   B26: #	B49 B27 &lt;- B25  Freq: 0.999281
795   	movl    R9, [R9]	# range
798   	testl   R9, R9
79b   	jle     B49  P=0.002839 C=14441.000000
79b
7a1   B27: #	B97 B28 &lt;- B26  Freq: 0.996444
7a1   	movq    [rsp + #8], R8	# spill
7a6   	movq    [rsp + #0], R10	# spill
7aa   	movl    [rsp + #16], R9	# spill
7af   	decl    R9	# int
7b2   	movl    [rsp + #20], R9	# spill
7b7   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c151780:Constant:exact *	# ptr
7c1   	movl    R10, [rsp + #16]	# spill
7c6   	testl  R10, R10	# unsigned
7c9   	jbe,u  B97  P=0.000001 C=-1.000000
7c9
7cf   B28: #	B97 B29 &lt;- B27  Freq: 0.996443
7cf   	cmpl    R9, R10	# unsigned
7d2   	jnb,u  B97  P=0.000001 C=-1.000000
7d2
7d8   B29: #	B90 B30 &lt;- B28  Freq: 0.996442
7d8   	# TLS is in R15
7d8   	movq    R11, [R15 + #112 (8-bit)]	# ptr
7dc   	movl    R10, narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c151780:Constant:exact *	# compressed klass ptr
7e2   	decode_klass_not_null R10,R10
7e6   	movq    [rsp + #24], R10	# spill
7eb   	movq    R10, R11	# spill
7ee   	addq    R10, #280	# ptr
7f5   	movq    RDI, R11	# spill
7f8   	addq    RDI, #16	# ptr
7fc   	# TLS is in R15
7fc   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
803   	jnb,u  B90  P=0.000100 C=-1.000000
803
809   B30: #	B31 &lt;- B29  Freq: 0.996342
809   	# TLS is in R15
809   	movq    [R15 + #112 (8-bit)], R10	# ptr
80d   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
815   	movq    R10, [rsp + #24]	# spill
81a   	movq    R10, [R10 + #176 (32-bit)]	# ptr
821   	movq    [R11], R10	# ptr
824   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c151780:Constant:exact *	# compressed klass ptr
82c   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
830   	movl    RCX, #33	# long (unsigned 32-bit)
835   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
83f
83f   B31: #	B74 B32 &lt;- B91 B30  Freq: 0.996442
83f   	
83f   	MEMBAR-storestore (empty encoding)
83f   	# checkcastPP of R11
83f   	movq    R10, R11	# spill
842   	testl   RBP, RBP	# compressed ptr
844   	je     B74  P=0.000001 C=-1.000000
844
84a   B32: #	B98 B33 &lt;- B31  Freq: 0.996441
84a   	encode_heap_oop_not_null R8,R11
955   	decode_heap_oop_not_null R10,RBP
958   	movl    [RBP + #12 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
95c   	movq    R10, R10	# ptr -&gt; long
95c   	shrq    R10, #9
960   	movq    R11, 0x00007f44cd651000	# ptr
96a   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
96e   	movl    R10, [rsp + #20]	# spill
973   	cmpl    R10, #1
977   	jle     B98  P=0.000001 C=-1.000000
977
97d   B33: #	B34 &lt;- B32  Freq: 0.99644
97d   	movl    R11, #1	# int
983   	movl    [rsp + #44], R11	# spill
      	nop 	# 8 bytes pad for loops and calls

990   B34: #	B66 B35 &lt;- B33 B40 	Loop: B34-B40 inner main of N534 Freq: 350.715
990   	# TLS is in R15
990   	movq    R10, [R15 + #112 (8-bit)]	# ptr
994   	movq    R8, R10	# spill
997   	addq    R8, #280	# ptr
99e   	movq    R11, [rsp + #0]	# spill
9a2   	movl    R9, [rsp + #44]	# spill
9a7   	movl    RBP, [R11 + #16 + R9 &lt;&lt; #2]	# compressed ptr
9ac   	movslq  R9, [RSP + #44 (32-bit)]	# int -&gt; long
9b1   	decode_heap_oop_not_null R11,RBP
9b4   	movq    [rsp + #32], R11	# spill
9b9   	movq    R11, [rsp + #0]	# spill
9bd   	movl    R11, [R11 + #20 + R9 &lt;&lt; #2]	# compressed ptr
9c2   	movl    [rsp + #40], R11	# spill
9c7   	# TLS is in R15
9c7   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
9ce   	jnb,u  B66  P=0.000100 C=-1.000000
9ce
9d4   B35: #	B36 &lt;- B34  Freq: 350.68
9d4   	# TLS is in R15
9d4   	movq    [R15 + #112 (8-bit)], R8	# ptr
9d8   	movq    R11, [rsp + #24]	# spill
9dd   	movq    R11, [R11 + #176 (32-bit)]	# ptr
9e4   	movq    [R10], R11	# ptr
9e7   	movq    RDI, R10	# spill
9ea   	addq    RDI, #16	# ptr
9ee   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
9f6   	movl    [R10 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c151780:Constant:exact *	# compressed klass ptr
9fe   	movl    [R10 + #12 (8-bit)], R12	# int (R12_heapbase==0)
a02   	movl    RCX, #33	# long (unsigned 32-bit)
a07   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
a11
a11   B36: #	B74 B37 &lt;- B67 B35  Freq: 350.715
a11   	
a11   	MEMBAR-storestore (empty encoding)
a11   	# checkcastPP of R10
a11   	testl   RBP, RBP	# compressed ptr
a13   	je     B74  P=0.000001 C=-1.000000
a13
a19   B37: #	B68 B38 &lt;- B36  Freq: 350.714
a19   	encode_heap_oop_not_null R11,R10
b24   	movl    [RBP + #12 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
b28   	movl    RBP, [rsp + #44]	# spill
b2c   	incl    RBP	# int
b2e   	movq    R10, [rsp + #32]	# spill
b33   	movq    R10, R10	# ptr -&gt; long
b33   	shrq    R10, #9
b37   	movq    R11, 0x00007f44cd651000	# ptr
b41   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
b45   	# TLS is in R15
b45   	movq    R10, [R15 + #112 (8-bit)]	# ptr
b49   	movq    R11, R10	# spill
b4c   	addq    R11, #280	# ptr
b53   	# TLS is in R15
b53   	cmpq    R11, [R15 + #128 (32-bit)]	# raw ptr
b5a   	jnb,u  B68  P=0.000100 C=-1.000000
b5a
b60   B38: #	B39 &lt;- B37  Freq: 350.679
b60   	movq    RDI, R10	# spill
b63   	addq    RDI, #16	# ptr
b67   	# TLS is in R15
b67   	movq    [R15 + #112 (8-bit)], R11	# ptr
b6b   	PREFETCHNTA [R11 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
b73   	movq    R11, [rsp + #24]	# spill
b78   	movq    R11, [R11 + #176 (32-bit)]	# ptr
b7f   	movq    [R10], R11	# ptr
b82   	movl    [R10 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c151780:Constant:exact *	# compressed klass ptr
b8a   	movl    [R10 + #12 (8-bit)], R12	# int (R12_heapbase==0)
b8e   	movl    RCX, #33	# long (unsigned 32-bit)
b93   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
b9d
b9d   B39: #	B74 B40 &lt;- B69 B38  Freq: 350.714
b9d   	
b9d   	MEMBAR-storestore (empty encoding)
b9d   	# checkcastPP of R10
b9d   	movl    R11, [rsp + #40]	# spill
ba2   	testl   R11, R11	# compressed ptr
ba5   	je     B74  P=0.000001 C=-1.000000
ba5
bab   B40: #	B34 B41 &lt;- B39  Freq: 350.714
bab   	encode_heap_oop_not_null R11,R10
cb6   	movl    R8, [rsp + #40]	# spill
cbb   	decode_heap_oop_not_null R10,R8
cbe   	movl    [R8 + #12 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
cc2   	movq    R10, R10	# ptr -&gt; long
cc2   	shrq    R10, #9
cc6   	movq    R11, 0x00007f44cd651000	# ptr
cd0   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
cd4   	movl    R11, [rsp + #44]	# spill
cd9   	addl    R11, #2	# int
cdd   	movl    [rsp + #44], R11	# spill
ce2   	cmpl    R11, [RSP + #20 (32-bit)]
ce7   	jl     B34	# loop end  P=0.997161 C=14400.000000
ce7
ced   B41: #	B48 B42 &lt;- B98 B40  Freq: 0.99573
ced   	cmpl    R11, [RSP + #16 (32-bit)]
cf2   	jge     B48  P=0.500000 C=-1.000000
cf2
cf8   B42: #	B43 &lt;- B41  Freq: 0.497865
cf8   	# castII of R11
cf8   	movl    [rsp + #20], R11	# spill
      	nop 	# 3 bytes pad for loops and calls

d00   B43: #	B92 B44 &lt;- B42 B47 	Loop: B43-B47 inner post of N1116 Freq: 0.995729
d00   	# TLS is in R15
d00   	movq    R9, [R15 + #112 (8-bit)]	# ptr
d04   	movq    RDI, R9	# spill
d07   	addq    RDI, #16	# ptr
d0b   	movq    R10, [rsp + #0]	# spill
d0f   	movl    R8, [rsp + #20]	# spill
d14   	movl    RBP, [R10 + #16 + R8 &lt;&lt; #2]	# compressed ptr
d19   	movq    R10, R9	# spill
d1c   	addq    R10, #280	# ptr
d23   	# TLS is in R15
d23   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
d2a   	jnb,u  B92  P=0.000100 C=-1.000000
d2a
d30   B44: #	B45 &lt;- B43  Freq: 0.995629
d30   	# TLS is in R15
d30   	movq    [R15 + #112 (8-bit)], R10	# ptr
d34   	movq    R11, [rsp + #24]	# spill
d39   	movq    R11, [R11 + #176 (32-bit)]	# ptr
d40   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
d48   	movq    [R9], R11	# ptr
d4b   	movl    [R9 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c151780:Constant:exact *	# compressed klass ptr
d53   	movl    [R9 + #12 (8-bit)], R12	# int (R12_heapbase==0)
d57   	movl    RCX, #33	# long (unsigned 32-bit)
d5c   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
d66
d66   B45: #	B104 B46 &lt;- B93 B44  Freq: 0.995729
d66   	movl    R11, [rsp + #20]	# spill
d6b   	incl    R11	# int
d6e   	
d6e   	MEMBAR-storestore (empty encoding)
d6e   	# checkcastPP of R9
d6e   	encode_heap_oop_not_null R10,R9
e79   	movl    [RBP + #12 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
e7d   	NullCheck RBP
e7d
e7d   B46: #	B48 B47 &lt;- B45  Freq: 0.995728
e7d   	decode_heap_oop_not_null R10,RBP
e80   	movq    R10, R10	# ptr -&gt; long
e80   	shrq    R10, #9
e84   	movq    R8, 0x00007f44cd651000	# ptr
e8e   	movb    [R8 + R10], R12	# short/char (R12_heapbase==0)
e92   	cmpl    R11, [RSP + #16 (32-bit)]
e97   	jge,s   B48	# loop end  P=0.500000 C=14400.000000
e97
e99   B47: #	B43 &lt;- B46  Freq: 0.497864
e99   	movl    [rsp + #20], R11	# spill
e9e   	jmp     B43
e9e
ea3   B48: #	B49 &lt;- B46 B41  Freq: 0.995729
ea3   	movq    R10, [rsp + #0]	# spill
ea7   	movq    R8, [rsp + #8]	# spill
ea7
eac   B49: #	B102 B50 &lt;- B48 B26  Freq: 0.998566
eac   	movl    R9, [R8 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.version
eb0   	NullCheck R8
eb0
eb0   B50: #	B80 B51 &lt;- B49  Freq: 0.998565
eb0   	movl    [rsp + #24], R9	# spill
eb5   	movq    RSI, precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f448c14b680:Constant:exact *	# ptr
ebf   	# TLS is in R15
ebf   	movq    RDX, [R15 + #112 (8-bit)]	# ptr
ec3   	movl    RBP, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f448c07c270:Constant:exact *	# compressed klass ptr
ec8   	movq    R11, RDX	# spill
ecb   	addq    R11, #48	# ptr
ecf   	# TLS is in R15
ecf   	cmpq    R11, [R15 + #128 (32-bit)]	# raw ptr
ed6   	jnb,u  B80  P=0.000100 C=-1.000000
ed6
edc   B51: #	B52 &lt;- B50  Freq: 0.998465
edc   	# TLS is in R15
edc   	movq    [R15 + #112 (8-bit)], R11	# ptr
ee0   	PREFETCHNTA [R11 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
ee8   	movl    R9, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f448c14b680:Constant:exact *	# compressed klass ptr
eee   	decode_klass_not_null R11,R9
efc   	movq    R11, [R11 + #176 (32-bit)]	# ptr
f03   	movq    [RDX], R11	# ptr
f06   	movl    [RDX + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f448c14b680:Constant:exact *	# compressed klass ptr
f0d   	movl    [RDX + #12 (8-bit)], R12	# int (R12_heapbase==0)
f11   	movq    [RDX + #16 (8-bit)], R12	# long (R12_heapbase==0)
f15   	movq    [RDX + #24 (8-bit)], R12	# long (R12_heapbase==0)
f19   	movq    [RDX + #32 (8-bit)], R12	# long (R12_heapbase==0)
f1d   	movq    [RDX + #40 (8-bit)], R12	# long (R12_heapbase==0)
f1d
f21   B52: #	B103 B53 &lt;- B81 B51  Freq: 0.998565
f21   	movl    R9, [rsp + #24]	# spill
f26   	decode_heap_oop_not_null RSI,R9
f29   	movl    R8, [R8 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
f2d   	
f2d   	encode_heap_oop R10,R10
fb5   	MEMBAR-storestore (empty encoding)
fb5   	# checkcastPP of RDX
fb5   	decode_klass_not_null RBP,RBP
fb9   	movzbl  R8, [R8 + #32 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/Control.isStopped
fbe   	NullCheck R8
fbe
fbe   B53: #	B82 B54 &lt;- B52  Freq: 0.998564
fbe   	MEMBAR-acquire ! (empty encoding)
fbe   	movl    [RDX + #24 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
fc2   	movq    R10, RDX	# ptr -&gt; long
fc5   	movb    [RDX + #16 (8-bit)], R8	# byte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
fc9   	movl    [RDX + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/infra/runners/StateHolder.countWorkers
fd0   	shrq    R10, #9
fd4   	movq    R11, 0x00007f44cd651000	# ptr
fde   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
fe2   	# TLS is in R15
fe2   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
fe6   	movq    R10, RAX	# spill
fe9   	addq    R10, #16	# ptr
fed   	# TLS is in R15
fed   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
ff4   	jnb,u  B82  P=0.000100 C=-1.000000
ff4
ffa   B54: #	B55 &lt;- B53  Freq: 0.998464
ffa   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1002   	# TLS is in R15
1002   	movq    [R15 + #112 (8-bit)], R10	# ptr
1006   	movq    R10, [RBP + #176 (32-bit)]	# ptr
100d   	movq    [RAX], R10	# ptr
1010   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f448c07c270:Constant:exact *	# compressed klass ptr
1017   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
1017
101b   B55: #	B84 B56 &lt;- B83 B54  Freq: 0.998564
101b   	
101b   	MEMBAR-storestore (empty encoding)
101b   	# checkcastPP of RAX
101b   	encode_heap_oop_not_null R11,RAX
1126   	MEMBAR-release ! (empty encoding)
1126   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
112d   	lock addl [rsp + #0], 0	! membar_volatile
1132   	movq    R10, RDX	# ptr -&gt; long
1135   	movl    [RDX + #32 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
1139   	shrq    R10, #9
113d   	movq    R11, 0x00007f44cd651000	# ptr
1147   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
114b   	# TLS is in R15
114b   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
114f   	movq    R10, RAX	# spill
1152   	addq    R10, #16	# ptr
1156   	# TLS is in R15
1156   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
115d   	jnb,u  B84  P=0.000100 C=-1.000000
115d
1163   B56: #	B57 &lt;- B55  Freq: 0.998464
1163   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
116b   	# TLS is in R15
116b   	movq    [R15 + #112 (8-bit)], R10	# ptr
116f   	movq    R10, [RBP + #176 (32-bit)]	# ptr
1176   	movq    [RAX], R10	# ptr
1179   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f448c07c270:Constant:exact *	# compressed klass ptr
1180   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
1180
1184   B57: #	B86 B58 &lt;- B85 B56  Freq: 0.998564
1184   	
1184   	MEMBAR-storestore (empty encoding)
1184   	# checkcastPP of RAX
1184   	encode_heap_oop_not_null R11,RAX
128f   	MEMBAR-release ! (empty encoding)
128f   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
1296   	lock addl [rsp + #0], 0	! membar_volatile
129b   	movl    [RDX + #28 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
129f   	movq    R10, RDX	# ptr -&gt; long
12a2   	shrq    R10, #9
12a6   	movq    R11, 0x00007f44cd651000	# ptr
12b0   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
12b4   	# TLS is in R15
12b4   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
12b8   	movq    R10, RAX	# spill
12bb   	addq    R10, #16	# ptr
12bf   	# TLS is in R15
12bf   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
12c6   	jnb,u  B86  P=0.000100 C=-1.000000
12c6
12cc   B58: #	B59 &lt;- B57  Freq: 0.998464
12cc   	# TLS is in R15
12cc   	movq    [R15 + #112 (8-bit)], R10	# ptr
12d0   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
12d8   	movq    R10, [RBP + #176 (32-bit)]	# ptr
12df   	movq    [RAX], R10	# ptr
12e2   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f448c07c270:Constant:exact *	# compressed klass ptr
12e9   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
12e9
12ed   B59: #	B88 B60 &lt;- B87 B58  Freq: 0.998564
12ed   	
12ed   	MEMBAR-storestore (empty encoding)
12ed   	# checkcastPP of RAX
12ed   	encode_heap_oop_not_null R11,RAX
13f8   	MEMBAR-release ! (empty encoding)
13f8   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
13ff   	lock addl [rsp + #0], 0	! membar_volatile
1404   	movq    R10, RDX	# ptr -&gt; long
1407   	movl    [RDX + #36 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
140b   	shrq    R10, #9
140f   	movq    R11, 0x00007f44cd651000	# ptr
1419   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
141d   	# TLS is in R15
141d   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
1421   	movq    R10, RAX	# spill
1424   	addq    R10, #16	# ptr
1428   	# TLS is in R15
1428   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
142f   	jnb,u  B88  P=0.000100 C=-1.000000
142f
1435   B60: #	B61 &lt;- B59  Freq: 0.998464
1435   	# TLS is in R15
1435   	movq    [R15 + #112 (8-bit)], R10	# ptr
1439   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1441   	movq    R10, [RBP + #176 (32-bit)]	# ptr
1448   	movq    [RAX], R10	# ptr
144b   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f448c07c270:Constant:exact *	# compressed klass ptr
1452   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
1452
1456   B61: #	B96 B62 &lt;- B89 B60  Freq: 0.998564
1456   	
1456   	MEMBAR-storestore (empty encoding)
1456   	# checkcastPP of RAX
1456   	MEMBAR-release ! (empty encoding)
1456   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
145d   	MEMBAR-volatile (unnecessary so empty encoding)
145d   	encode_heap_oop_not_null R11,RAX
1568   	movq    R10, RDX	# ptr -&gt; long
156b   	shrq    R10, #9
156f   	movq    R8, 0x00007f44cd651000	# ptr
1579   	movb    [R8 + R10], R12	# short/char (R12_heapbase==0)
157d   	movl    [RDX + #40 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
1581   	MEMBAR-release ! (empty encoding)
1581   	movb    [RDX + #18 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
1585   	MEMBAR-volatile (unnecessary so empty encoding)
1585   	MEMBAR-release ! (empty encoding)
1585   	movb    [RDX + #19 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
1589   	MEMBAR-volatile (unnecessary so empty encoding)
1589   	MEMBAR-release ! (empty encoding)
1589   	movb    [RDX + #17 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
158d   	MEMBAR-volatile (unnecessary so empty encoding)
158d   	MEMBAR-release ! (empty encoding)
158d   	movb    [RDX + #20 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1591   	lock addl [rsp + #0], 0	! membar_volatile
1596   	MEMBAR-release ! (empty encoding)
1596   	movl    R10, [rsp + #24]	# spill
159b   	testl   R10, R10	# compressed ptr
159e   	je     B96  P=0.000001 C=-1.000000
159e
15a4   B62: #	B121 B63 &lt;- B61  Freq: 0.998563
      	nop 	# 3 bytes pad for loops and calls
15a7   	call,static  java.util.concurrent.atomic.AtomicReference::set
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:271  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=5548}
15ac
15ac   B63: #	N1811 &lt;- B62  Freq: 0.998543
        # Block is sole successor of call
15ac   	addq    rsp, 112	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

15b7   	ret
15b7
15b8   B64: #	B117 B65 &lt;- B19  Freq: 0.0702953
15b8   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f448c14bc70:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
15c3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=rsp + #24 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #12 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Derived_oop_[16] [16]=Oop [24]=Oop [32]=Derived_oop_[16] off=5576}
15c8
15c8   B65: #	B21 &lt;- B64  Freq: 0.0702938
        # Block is sole successor of call
15c8   	movq    R8, RAX	# spill
15cb   	jmp     B21
15cb
15d0   B66: #	B114 B67 &lt;- B34  Freq: 0.0350773
15d0   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c151780:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
15db   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #0 L[6]=rsp + #0 L[7]=rsp + #16 L[8]=rsp + #44 L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [8]=Oop [32]=Oop [40]=NarrowOop off=5600}
15e0
15e0   B67: #	B36 &lt;- B66  Freq: 0.0350766
        # Block is sole successor of call
15e0   	movq    R10, RAX	# spill
15e3   	jmp     B36
15e3
15e8   B68: #	B115 B69 &lt;- B37  Freq: 0.0350772
15e8   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c151780:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
15f3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #0 L[6]=rsp + #0 L[7]=rsp + #16 L[8]=RBP L[9]=_ STK[0]=rsp + #40
        # OopMap{[0]=Oop [8]=Oop [40]=NarrowOop off=5624}
15f8
15f8   B69: #	B39 &lt;- B68  Freq: 0.0350765
        # Block is sole successor of call
15f8   	movq    R10, RAX	# spill
15fb   	jmp     B39
15fb
1600   B70: #	B4 &lt;- B1  Freq: 0.000999987
1600   	xorl    R8, R8	# ptr
1603   	jmp     B4
1603
1608   B71: #	B7 &lt;- B4  Freq: 0.000999986
1608   	xorl    R10, R10	# ptr
160b   	movl    R9, NULL+12	# ptr (positive 32-bit)
1611   	jmp     B7
1611
1616   B72: #	B73 &lt;- B16  Freq: 0.000712169
1616   	movq    RBP, [rsp + #56]	# spill
1616
161b   B73: #	N1811 &lt;- B95 B72  Freq: 0.000713181
161b   	movq    R10, [rsp + #24]	# spill
1620   	movq    [rsp + #0], R10	# spill
1624   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
162b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:199  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #12 L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #16 STK[1]=rsp + #12 STK[2]=RBP
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=5680}
1630   	int3	# ShouldNotReachHere
1630
1635   B74: #	B75 &lt;- B31 B36 B39  Freq: 0.000711753
1635   	movq    RBP, R10	# spill
1635
1638   B75: #	N1811 &lt;- B104 B74  Freq: 0.000712762
1638   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
163f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:241  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=Oop off=5700}
1644   	int3	# ShouldNotReachHere
1644
1649   B76: #	B112 B77 &lt;- B8  Freq: 9.98746e-05
1649   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f448c14bc70:Constant:exact *	# ptr
1653   	movq    RBP, [rsp + #24]	# spill
      	nop 	# 3 bytes pad for loops and calls
165b   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #0 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [16]=Oop [24]=Oop [32]=Derived_oop_[16] off=5728}
1660
1660   B77: #	B10 &lt;- B76  Freq: 9.98726e-05
        # Block is sole successor of call
1660   	movq    R8, RAX	# spill
1663   	jmp     B10
1663
1668   B78: #	B113 B79 &lt;- B10  Freq: 9.98746e-05
1668   	movq    RSI, precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4488041b60:Constant:exact *	# ptr
1672   	movq    RBP, [rsp + #24]	# spill
1677   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:183  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #0 L[7]=rsp + #56 L[8]=_ L[9]=_ STK[0]=rsp + #56
        # OopMap{rbp=Oop [16]=Oop [24]=Oop [32]=Derived_oop_[16] [56]=Oop off=5756}
167c
167c   B79: #	B12 &lt;- B78  Freq: 9.98726e-05
        # Block is sole successor of call
167c   	movq    R11, RAX	# spill
167f   	jmp     B12
167f
1684   B80: #	B111 B81 &lt;- B50  Freq: 9.9873e-05
1684   	movl    [rsp + #16], R9	# spill
1689   	movq    [rsp + #8], R8	# spill
168e   	movq    [rsp + #0], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
1693   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:254  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #0 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #16
        # OopMap{[0]=Oop [8]=Oop [16]=NarrowOop [24]=NarrowOop off=5784}
1698
1698   B81: #	B52 &lt;- B80  Freq: 9.9871e-05
        # Block is sole successor of call
1698   	movq    R10, [rsp + #0]	# spill
169c   	movq    R8, [rsp + #8]	# spill
16a1   	movq    RDX, RAX	# spill
16a4   	jmp     B52
16a4
16a9   B82: #	B107 B83 &lt;- B53  Freq: 9.98729e-05
16a9   	movl    [rsp + #32], R9	# spill
16ae   	movq    [rsp + #8], RSI	# spill
16b3   	movq    [rsp + #0], RDX	# spill
16b7   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f448c07c270:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
16c3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:20  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #32 STK[1]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop [32]=NarrowOop off=5832}
16c8
16c8   B83: #	B55 &lt;- B82  Freq: 9.98709e-05
        # Block is sole successor of call
16c8   	movq    RDX, [rsp + #0]	# spill
16cc   	movq    RSI, [rsp + #8]	# spill
16d1   	movl    R10, [rsp + #32]	# spill
16d6   	movl    [rsp + #24], R10	# spill
16db   	jmp     B55
16db
16e0   B84: #	B108 B85 &lt;- B55  Freq: 9.98729e-05
16e0   	movl    R11, [rsp + #24]	# spill
16e5   	movl    [rsp + #32], R11	# spill
16ea   	movq    [rsp + #8], RSI	# spill
16ef   	movq    [rsp + #0], RDX	# spill
16f3   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f448c07c270:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
16ff   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:32  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #32 STK[1]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop [32]=NarrowOop off=5892}
1704
1704   B85: #	B57 &lt;- B84  Freq: 9.98709e-05
        # Block is sole successor of call
1704   	movq    RDX, [rsp + #0]	# spill
1708   	movq    RSI, [rsp + #8]	# spill
170d   	movl    R10, [rsp + #32]	# spill
1712   	movl    [rsp + #24], R10	# spill
1717   	jmp     B57
1717
171c   B86: #	B109 B87 &lt;- B57  Freq: 9.98729e-05
171c   	movl    R11, [rsp + #24]	# spill
1721   	movl    [rsp + #32], R11	# spill
1726   	movq    [rsp + #8], RSI	# spill
172b   	movq    [rsp + #0], RDX	# spill
172f   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f448c07c270:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
173b   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:44  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #32 STK[1]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop [32]=NarrowOop off=5952}
1740
1740   B87: #	B59 &lt;- B86  Freq: 9.98709e-05
        # Block is sole successor of call
1740   	movq    RDX, [rsp + #0]	# spill
1744   	movq    RSI, [rsp + #8]	# spill
1749   	movl    R10, [rsp + #32]	# spill
174e   	movl    [rsp + #24], R10	# spill
1753   	jmp     B59
1753
1758   B88: #	B110 B89 &lt;- B59  Freq: 9.98729e-05
1758   	movq    [rsp + #0], RSI	# spill
175c   	movq    RBP, RDX	# spill
175f   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f448c07c270:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
176b   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:56  L[0]=RBP L[1]=_ L[2]=_ L[3]=#2 STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #24 STK[1]=RBP
        # OopMap{rbp=Oop [0]=Oop [24]=NarrowOop off=6000}
1770
1770   B89: #	B61 &lt;- B88  Freq: 9.98709e-05
        # Block is sole successor of call
1770   	movq    RDX, RBP	# spill
1773   	movq    RSI, [rsp + #0]	# spill
1777   	jmp     B61
1777
177c   B90: #	B106 B91 &lt;- B29  Freq: 9.96607e-05
      	nop 	# 3 bytes pad for loops and calls
177f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #0 L[6]=rsp + #0 L[7]=rsp + #16 L[8]=#0 L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [8]=Oop off=6020}
1784
1784   B91: #	B31 &lt;- B90  Freq: 9.96588e-05
        # Block is sole successor of call
1784   	movq    R11, RAX	# spill
1787   	jmp     B31
1787
178c   B92: #	B105 B93 &lt;- B43  Freq: 9.95894e-05
178c   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c151780:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
1797   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #0 L[6]=rsp + #0 L[7]=rsp + #16 L[8]=rsp + #20 L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [8]=Oop off=6044}
179c
179c   B93: #	B45 &lt;- B92  Freq: 9.95874e-05
        # Block is sole successor of call
179c   	movq    R9, RAX	# spill
179f   	jmp     B45
179f
17a4   B94: #	N1811 &lt;- B12  Freq: 1.01184e-06
17a4   	movl    RSI, #-10	# int
17a9   	movl    RBP, [rsp + #0]	# spill
      	nop 	# 3 bytes pad for loops and calls
17af   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:199  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #56
        # OopMap{[56]=Oop off=6068}
17b4   	int3	# ShouldNotReachHere
17b4
17b9   B95: #	B73 &lt;- B13  Freq: 1.01184e-06
17b9   	movq    RBP, [rsp + #56]	# spill
17be   	movl    R10, [rsp + #0]	# spill
17c2   	movl    [rsp + #12], R10	# spill
17c7   	jmp     B73
17c7
17cc   B96: #	N1811 &lt;- B61  Freq: 1.01182e-06
17cc   	movl    RSI, #-10	# int
17d1   	movq    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
17d7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:271  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=Oop off=6108}
17dc   	int3	# ShouldNotReachHere
17dc
17e1   B97: #	N1811 &lt;- B28 B27  Freq: 2.00612e-06
17e1   	movq    RBP, R8	# spill
17e4   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
17eb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:225  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #0 L[6]=rsp + #0 L[7]=rsp + #16 L[8]=#0 L[9]=_
        # OopMap{rbp=Oop [0]=Oop off=6128}
17f0   	int3	# ShouldNotReachHere
17f0
17f5   B98: #	B41 &lt;- B32  Freq: 1.00967e-06
17f5   	movl    R11, #1	# int
17fb   	jmp     B41
17fb
1800   B99: #	B100 &lt;- B2  Freq: 9.99e-07
1800   	movq    R10, RBP	# spill
1800
1803   B100: #	N1811 &lt;- B99 B5  Freq: 1.998e-06
1803   	movl    RBP, [rsp + #8]	# spill
1807   	movq    [rsp + #0], R10	# spill
180b   	movl    RSI, #-99	# int
1810   	movq    [rsp + #8], R13	# spill
1815   	movl    [rsp + #16], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
181b   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:165  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ L[4]=RBP L[5]=rsp + #0 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[0]=Oop [8]=Oop off=6176}
1820   	int3	# ShouldNotReachHere
1820
1825   B101: #	N1811 &lt;- B25  Freq: 1.01255e-06
1825   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
182b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:212  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{off=6192}
1830   	int3	# ShouldNotReachHere
1830
1835   B102: #	N1811 &lt;- B49  Freq: 1.01183e-06
1835   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
183b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:251  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{off=6208}
1840   	int3	# ShouldNotReachHere
1840
1845   B103: #	N1811 &lt;- B52  Freq: 1.01182e-06
1845   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
184b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:262  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=#NULL
        # OopMap{off=6224}
1850   	int3	# ShouldNotReachHere
1850
1855   B104: #	B75 &lt;- B45  Freq: 1.00895e-06
1855   	movq    RBP, R9	# spill
1858   	jmp     B75
1858
185d   B105: #	B116 &lt;- B92  Freq: 9.95894e-10
185d   	# exception oop is in rax; no code emitted
185d   	jmp,s   B116
185d
185f   B106: #	B116 &lt;- B90  Freq: 9.96607e-10
185f   	# exception oop is in rax; no code emitted
185f   	jmp,s   B116
185f
1861   B107: #	B122 &lt;- B82  Freq: 9.98729e-10
1861   	# exception oop is in rax; no code emitted
1861   	movq    RSI, RAX	# spill
1864   	jmp,s   B122
1864
1866   B108: #	B122 &lt;- B84  Freq: 9.98729e-10
1866   	# exception oop is in rax; no code emitted
1866   	movq    RSI, RAX	# spill
1869   	jmp,s   B122
1869
186b   B109: #	B122 &lt;- B86  Freq: 9.98729e-10
186b   	# exception oop is in rax; no code emitted
186b   	movq    RSI, RAX	# spill
186e   	jmp,s   B122
186e
1870   B110: #	B122 &lt;- B88  Freq: 9.98729e-10
1870   	# exception oop is in rax; no code emitted
1870   	movq    RSI, RAX	# spill
1873   	jmp,s   B122
1873
1875   B111: #	B122 &lt;- B80  Freq: 9.9873e-10
1875   	# exception oop is in rax; no code emitted
1875   	movq    RSI, RAX	# spill
1878   	jmp,s   B122
1878
187a   B112: #	B118 &lt;- B76  Freq: 9.98746e-10
187a   	# exception oop is in rax; no code emitted
187a   	jmp,s   B118
187a
187c   B113: #	B120 &lt;- B78  Freq: 9.98746e-10
187c   	# exception oop is in rax; no code emitted
187c   	jmp,s   B120
187c
187e   B114: #	B116 &lt;- B66  Freq: 3.50773e-07
187e   	# exception oop is in rax; no code emitted
187e   	jmp,s   B116
187e
1880   B115: #	B116 &lt;- B68  Freq: 3.50772e-07
1880   	# exception oop is in rax; no code emitted
1880
1880   B116: #	B122 &lt;- B105 B106 B114 B115  Freq: 7.03538e-07
1880   	movq    RSI, RAX	# spill
1883   	jmp,s   B122
1883
1885   B117: #	B118 &lt;- B64  Freq: 7.02952e-07
1885   	# exception oop is in rax; no code emitted
1885
1885   B118: #	B122 &lt;- B112 B117  Freq: 7.03951e-07
1885   	movq    RSI, RAX	# spill
1888   	jmp,s   B122
1888
188a   B119: #	B120 &lt;- B22  Freq: 7.02952e-07
188a   	# exception oop is in rax; no code emitted
188a
188a   B120: #	B122 &lt;- B113 B119  Freq: 7.03951e-07
188a   	movq    RSI, RAX	# spill
188d   	jmp,s   B122
188d
188f   B121: #	B122 &lt;- B62  Freq: 9.98563e-06
188f   	# exception oop is in rax; no code emitted
188f   	movq    RSI, RAX	# spill
188f
1892   B122: #	N1811 &lt;- B118 B120 B116 B111 B107 B108 B109 B110 B121  Freq: 1.21021e-05
1892   	addq    rsp, 112	# Destroy frame
	popq   rbp

1897   	jmp     rethrow_stub
1897

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933088626432'/>
<opto_assembly compile_id='412' compile_kind='osr'>
{method}
 - this oop:          0x00007f44cd173ba8
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1&apos;
 - constants:         0x00007f44cd173498 constant pool [132] {0x00007f44cd173498} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1&apos; cache=0x00007f44cd1749b0
 - access:            0xc1000001  public 
 - name:              &apos;call&apos;
 - signature:         &apos;()Ljava/lang/Void;&apos;
 - max stack:         5
 - max locals:        12
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef760: 0xb0000000 i2c: 0x00007f44b9145620 c2i: 0x00007f44b914575a c2iUV: 0x00007f44b914572d
 - compiled entry     0x00007f44b9310180
 - code size:         158
 - code start:        0x00007f44cd173a80
 - code end (excl):   0x00007f44cd173b1e
 - method data:       0x00007f44cd177b08
 - checked ex length: 0
 - linenumber start:  0x00007f44cd173b1e
 - localvar length:   9
 - localvar start:    0x00007f44cd173b3a
 - compiled code: nmethod   3304  410       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call (158 bytes)
#
#  java/lang/Void:exact * ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N719: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B45 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (216 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

01c   	movq    R10, [RSI + #24 (8-bit)]	# ptr
020   	movq    [rsp + #0], R10	# spill
024   	movq    R14, [RSI + #48 (8-bit)]	# ptr
028   	movq    R10, [RSI + #40 (8-bit)]	# ptr
02c   	movq    [rsp + #8], R10	# spill
031   	movl    R11, [RSI + #80 (8-bit)]	# int
035   	movl    [rsp + #16], R11	# spill
03a   	movl    R10, [RSI + #16 (8-bit)]	# int
03e   	movl    [rsp + #40], R10	# spill
043   	movl    R13, [RSI + #8 (8-bit)]	# int
047   	movq    RBX, [RSI + #88 (8-bit)]	# ptr
04b   	movq    RBP, [RSI + #56 (8-bit)]	# ptr
04f   	movl    R11, [RSI + #64 (8-bit)]	# int
053   	movl    [rsp + #32], R11	# spill
058   	movq    RDI, RSI	# spill
05b   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
068   	testq   RBX, RBX	# ptr
06b   	je     B45  P=0.001000 C=-1.000000
06b
071   B2: #	B55 B3 &lt;- B1  Freq: 0.999
071   	movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
075   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1: 0x00007f448c111d50:Constant:exact *	# compressed klass ptr
07c   	jne,u  B55  P=0.000001 C=-1.000000
07c
082   B3: #	B4 &lt;- B2  Freq: 0.998999
082   	movq    R9, RBX	# spill
085   	# checkcastPP of R9
085
085   B4: #	B46 B5 &lt;- B3 B45  Freq: 0.999999
085   	testq   RBP, RBP	# ptr
088   	je     B46  P=0.001000 C=-1.000000
088
08e   B5: #	B56 B6 &lt;- B4  Freq: 0.998999
08e   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
092   	cmpl    R11, narrowklass: precise klass java/util/concurrent/atomic/AtomicReference: 0x00007f448c1125c0:Constant:exact *	# compressed klass ptr
099   	jne,u  B56  P=0.000001 C=-1.000000
099
09f   B6: #	B7 &lt;- B5  Freq: 0.998998
09f   	movq    RCX, RBP	# spill
0a2   	# checkcastPP of RCX
0a2
0a2   B7: #	B47 B8 &lt;- B6 B46  Freq: 0.999998
0a2   	testq   R14, R14	# ptr
0a5   	je     B47  P=0.001000 C=-1.000000
0a5
0ab   B8: #	B58 B9 &lt;- B7  Freq: 0.998998
0ab   	movl    R10, [R14 + #8 (8-bit)]	# compressed klass ptr
0af   	cmpl    R10, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f448c112980:Constant:exact *	# compressed klass ptr
0b6   	jne,u  B58  P=0.000001 C=-1.000000
0b6
0bc   B9: #	B10 &lt;- B8  Freq: 0.998997
0bc   	movq    RDI, R14	# spill
0bf   	# checkcastPP of RDI
0bf
0bf   B10: #	B48 B11 &lt;- B9 B47  Freq: 0.999997
0bf   	movq    R8, [rsp + #8]	# spill
0c4   	testq   R8, R8	# ptr
0c7   	je     B48  P=0.001000 C=-1.000000
0c7
0cd   B11: #	B59 B12 &lt;- B10  Freq: 0.998997
0cd   	movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
0d1   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f448c112690:Constant:exact *	# compressed klass ptr
0d8   	jne,u  B59  P=0.000001 C=-1.000000
0d8
0de   B12: #	B13 &lt;- B11  Freq: 0.998996
0de   	movq    RDX, R8	# spill
0e1   	# checkcastPP of RDX
0e1
0e1   B13: #	B49 B14 &lt;- B12 B48  Freq: 0.999996
0e1   	movq    R10, [rsp + #0]	# spill
0e5   	testq   R10, R10	# ptr
0e8   	je     B49  P=0.001000 C=-1.000000
0e8
0ee   B14: #	B57 B15 &lt;- B13  Freq: 0.998996
0ee   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
0f2   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f448c112760:Constant:exact *	# compressed klass ptr
0f9   	jne,u  B57  P=0.000001 C=-1.000000
0f9
0ff   B15: #	B16 &lt;- B14  Freq: 0.998995
0ff   	# checkcastPP of R10
0ff   	movq    [rsp + #64], R10	# spill
0ff
104   B16: #	B21 &lt;- B15 B49  Freq: 0.999995
104   	movq    [rsp + #48], RDI	# spill
109   	movq    [rsp + #24], RCX	# spill
10e   	movq    [rsp + #0], R9	# spill
112   	jmp,s   B21
      	nop 	# 12 bytes pad for loops and calls

120   B17: #	B63 B18 &lt;- B23  top-of-loop Freq: 2934.89
120   	movq    R11, [rsp + #64]	# spill
125   	movl    R11, [R11 + #16 + R13 &lt;&lt; #2]	# compressed ptr
12a   	movl    R8, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
12e   	NullCheck R11
12e
12e   B18: #	B64 B19 &lt;- B17  Freq: 2934.89
12e   	movl    [R8 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
136   	NullCheck R8
136
136   B19: #	B20 &lt;- B18  Freq: 2934.89
136   	
136   	MEMBAR-release ! (empty encoding)
136   	movl    [R8 + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
13e   	movl    [R8 + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
149   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:100  L[0]=rsp + #0 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #24 L[5]=rsp + #48 L[6]=RDX L[7]=_ L[8]=rsp + #64 L[9]=rsp + #40 L[10]=R10 L[11]=_
        # OopMap{rdx=Oop [0]=Oop [24]=Oop [48]=Oop [64]=Oop off=329}
14f
14f   B20: #	B21 &lt;- B19 B44  Freq: 2935
14f   	movl    R13, R10	# spill
14f
152   B21: #	B25 B22 &lt;- B16 B20 	Loop: B21-B20 inner  Freq: 2936
152   	cmpl    R13, [RSP + #40 (32-bit)]
157   	jge,s   B25  P=0.000374 C=40113.000000
157
159   B22: #	B62 B23 &lt;- B21  Freq: 2934.9
159   	movl    R10, R13	# spill
15c   	incl    R10	# int
15f   	movq    R11, [rsp + #64]	# spill
164   	movl    R11, [R11 + #12 (8-bit)]	# range
168   	NullCheck R11
168
168   B23: #	B17 B24 &lt;- B22  Freq: 2934.9
168   	cmpl    R13, R11	# unsigned
16b   	jb,us  B17  P=0.999999 C=-1.000000
16b
16d   B24: #	N719 &lt;- B23  Freq: 0.00297387
16d   	movq    RBP, [rsp + #0]	# spill
171   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
182   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
194   	pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
19e   	pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #16]
1a8   	movq    [rsp + #24], RDX	# spill
1ad   	movl    [rsp + #56], R13	# spill
1b2   	movl    RSI, #-28	# int
1b7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:86  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #24 L[7]=_ L[8]=rsp + #64 L[9]=rsp + #40 L[10]=rsp + #56 L[11]=_ STK[0]=rsp + #64 STK[1]=rsp + #56
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [24]=Oop [64]=Oop off=444}
1bc   	int3	# ShouldNotReachHere
1bc
1c1   B25: #	B50 B26 &lt;- B21  Freq: 1.09794
1c1   	movl    R11, [rsp + #16]	# spill
1c6   	incl    R11	# int
1c9   	testq   RDX, RDX	# ptr
1cc   	je     B50  P=0.000001 C=-1.000000
1cc
1d2   B26: #	B72 B27 &lt;- B25  Freq: 1.09794
1d2   	movl    [rsp + #8], R11	# spill
1d7   	movq    [rsp + #40], RDX	# spill
1dc   	movq    RSI, RDX	# spill
1df   	movl    RDX, [rsp + #32]	# spill
1e3   	call,static  org.openjdk.jcstress.infra.runners.StateHolder::postRun
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=rsp + #0 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #24 L[5]=rsp + #48 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [24]=Oop [40]=Oop [48]=Oop off=488}
1e8
1e8   B27: #	B51 B28 &lt;- B26  Freq: 1.09792
        # Block is sole successor of call
1e8   	movq    R10, [rsp + #48]	# spill
1ed   	testq   R10, R10	# ptr
1f0   	je     B51  P=0.000001 C=-1.000000
1f0
1f6   B28: #	B71 B29 &lt;- B27  Freq: 1.09792
1f6   	movq    RSI, [rsp + #48]	# spill
1fb   	movl    RDX, [rsp + #16]	# spill
1ff   	movl    RCX, [rsp + #8]	# spill
203   	call,static <!-- safepoint while printing -->
 java.util.concurrent.atomic.AtomicInteger::compareAndSet
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:115  L[0]=rsp + #0 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #24 L[5]=rsp + #48 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [24]=Oop [40]=Oop [48]=Oop off=520}
208
208   B29: #	B32 B30 &lt;- B28  Freq: 1.0979
        # Block is sole successor of call
208   	testl   RAX, RAX
20a   	je,s   B32  P=0.100000 C=-1.000000
20a
20c   B30: #	B54 B31 &lt;- B29  Freq: 0.988108
20c   	movq    R10, [rsp + #0]	# spill
210   	testq   R10, R10	# ptr
213   	je     B54  P=0.000001 C=-1.000000
213
219   B31: #	B67 B32 &lt;- B30  Freq: 0.988107
219   	movl    RBP, [rsp + #16]	# spill
21d   	movq    RSI, [rsp + #0]	# spill
221   	movq    RDX, [rsp + #40]	# spill
      	nop 	# 1 bytes pad for loops and calls
227   	call,static  org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=rsp + #32 L[4]=rsp + #24 L[5]=rsp + #48 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [24]=Oop [40]=Oop [48]=Oop off=556}
22c
22c   B32: #	B70 B33 &lt;- B31 B29  Freq: 1.09788
22c   	movq    RSI, [rsp + #48]	# spill
231   	movl    RBP, [rsp + #32]	# spill
      	nop 	# 2 bytes pad for loops and calls
237   	call,static  java.util.concurrent.atomic.AtomicInteger::get
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:133  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=RBP L[4]=rsp + #24 L[5]=rsp + #48 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #8
        # OopMap{[0]=Oop [24]=Oop [40]=Oop [48]=Oop off=572}
23c
23c   B33: #	B53 B34 &lt;- B32  Freq: 1.09785
        # Block is sole successor of call
23c   	movl    R11, [rsp + #8]	# spill
241   	cmpl    R11, RAX
244   	jne     B53  P=0.000001 C=-1.000000
244
24a   B34: #	B69 B35 &lt;- B33  Freq: 1.09785
24a   	movq    RSI, [rsp + #40]	# spill
24f   	movl    RDX, RBP	# spill
      	nop 	# 2 bytes pad for loops and calls
253   	call,static  org.openjdk.jcstress.infra.runners.StateHolder::postConsume
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=RBP L[4]=rsp + #24 L[5]=rsp + #48 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [24]=Oop [48]=Oop off=600}
258
258   B35: #	B52 B36 &lt;- B34  Freq: 1.09783
        # Block is sole successor of call
258   	movq    R10, [rsp + #24]	# spill
25d   	testq   R10, R10	# ptr
260   	je     B52  P=0.000001 C=-1.000000
260
266   B36: #	B68 B37 &lt;- B35  Freq: 1.09783
266   	movq    RSI, [rsp + #24]	# spill
26b   	call,static  java.util.concurrent.atomic.AtomicReference::get
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:29  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=RBP L[4]=rsp + #24 L[5]=rsp + #48 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [24]=Oop [48]=Oop off=624}
270
270   B37: #	B65 B38 &lt;- B36  Freq: 1.09781
        # Block is sole successor of call
270   	movl    R10, [RAX + #8 (8-bit)]	# compressed klass ptr
274   	NullCheck RAX
274
274   B38: #	B60 B39 &lt;- B37  Freq: 1.09781
274   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f448c112690:Constant:exact *	# compressed klass ptr
27b   	jne,u  B60  P=0.000000 C=-1.000000
27b
281   B39: #	B41 B40 &lt;- B38  Freq: 1.09781
281   	# checkcastPP of RAX
281   	movl    RBP, [RAX + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
284   	movzbl  R10, [RAX + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
289   	testl   R10, R10
28c   	je,s   B41  P=0.100000 C=-1.000000
28c
28e   B40: #	N719 &lt;- B39  Freq: 0.988027
28e   	xorl    RAX, RAX	# ptr
290   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

29b   	ret
29b
29c   B41: #	B74 B42 &lt;- B39  Freq: 0.109781
29c   	movq    [rsp + #56], RAX	# spill
2a1   	movl    RSI, #-12	# int
2a6   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
2aa   	NullCheck RBP
2aa
2aa   B42: #	B61 B43 &lt;- B41  Freq: 0.109781
2aa   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f448c112760:Constant:exact *	# compressed klass ptr
2b1   	jne,u  B61  P=0.000000 C=-1.000000
2b1
2b7   B43: #	B66 B44 &lt;- B42  Freq: 0.109781
2b7   	decode_heap_oop_not_null R10,RBP
2ba   	# checkcastPP of R10
2ba   	movl    R8, [R10 + #12 (8-bit)]	# range
2be   	movl    [rsp + #40], R8	# spill
2c3   	movq    [rsp + #64], R10	# spill
2c8   	movq    RSI, RAX	# spill
2cb   	movl    RDX, [rsp + #32]	# spill
2cf   	call,static  org.openjdk.jcstress.infra.runners.StateHolder::preRun
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #24 L[5]=rsp + #48 L[6]=rsp + #56 L[7]=rsp + #64 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [24]=Oop [48]=Oop [56]=Oop [64]=Oop off=724}
2d4
2d4   B44: #	B20 &lt;- B43  Freq: 0.109778
        # Block is sole successor of call
2d4   	movq    RDX, [rsp + #56]	# spill
2d9   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #16], rax
	movq    rax, [rsp - #8]
2eb   	xorl    R10, R10	# int
2ee   	jmp     B20
2ee
2f3   B45: #	B4 &lt;- B1  Freq: 0.000999987
2f3   	xorl    R9, R9	# ptr
2f6   	jmp     B4
2f6
2fb   B46: #	B7 &lt;- B4  Freq: 0.000999986
2fb   	xorl    RCX, RCX	# ptr
2fd   	jmp     B7
2fd
302   B47: #	B10 &lt;- B7  Freq: 0.000999985
302   	xorl    RDI, RDI	# ptr
304   	jmp     B10
304
309   B48: #	B13 &lt;- B10  Freq: 0.000999984
309   	xorl    RDX, RDX	# ptr
30b   	jmp     B13
30b
310   B49: #	B16 &lt;- B13  Freq: 0.000999983
310   	xorl    R10, R10	# ptr
313   	movq    [rsp + #64], R10	# spill
318   	jmp     B16
318
31d   B50: #	N719 &lt;- B25  Freq: 1.11252e-06
31d   	movl    RBP, [rsp + #32]	# spill
321   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
327   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=812}
32c   	int3	# ShouldNotReachHere
32c
331   B51: #	N719 &lt;- B27  Freq: 1.1125e-06
331   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
337   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:115  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=rsp + #16 STK[2]=rsp + #8
        # OopMap{off=828}
33c   	int3	# ShouldNotReachHere
33c
341   B52: #	N719 &lt;- B35  Freq: 1.11241e-06
341   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
347   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:29  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=844}
34c   	int3	# ShouldNotReachHere
34c
351   B53: #	N719 &lt;- B33  Freq: 1.09786e-06
351   	movq    RBP, [rsp + #0]	# spill
355   	movl    [rsp + #0], R11	# spill
359   	pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
363   	movl    RSI, #-83	# int
      	nop 	# 3 bytes pad for loops and calls
36b   	call,static  wrapper for: uncommon_trap(reason=&apos;unreached&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:140  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #8 L[5]=rsp + #48 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #32
        # OopMap{rbp=Oop [8]=Oop [40]=Oop [48]=Oop off=880}
370   	int3	# ShouldNotReachHere
370
375   B54: #	N719 &lt;- B30  Freq: 1.00123e-06
375   	movq    RBP, [rsp + #40]	# spill
37a   	movl    RSI, #-10	# int
37f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=Oop off=900}
384   	int3	# ShouldNotReachHere
384
389   B55: #	B57 &lt;- B2  Freq: 9.99e-07
389   	movq    R10, [rsp + #0]	# spill
38d   	movq    R8, [rsp + #8]	# spill
392   	jmp,s   B57
392
394   B56: #	B57 &lt;- B5  Freq: 9.98999e-07
394   	movq    R10, [rsp + #0]	# spill
398   	movq    R8, [rsp + #8]	# spill
398
39d   B57: #	N719 &lt;- B55 B56 B58 B59 B14  Freq: 4.99499e-06
39d   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
3ae   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
3c0   	movq    [rsp + #8], R10	# spill
3c5   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #16], rax
	movq    rax, [rsp - #8]
3d7   	movl    [rsp + #20], R13	# spill
3dc   	movl    RSI, #-99	# int
3e1   	movq    [rsp + #24], RBX	# spill
3e6   	movq    [rsp + #32], R14	# spill
3eb   	movq    [rsp + #40], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
3f3   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:75  L[0]=rsp + #24 L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=RBP L[5]=rsp + #32 L[6]=rsp + #40 L[7]=_ L[8]=rsp + #8 L[9]=rsp + #16 L[10]=rsp + #20 L[11]=_
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [32]=Oop [40]=Oop off=1016}
3f8   	int3	# ShouldNotReachHere
3f8
3fd   B58: #	B57 &lt;- B8  Freq: 9.98998e-07
3fd   	movq    R10, [rsp + #0]	# spill
401   	movq    R8, [rsp + #8]	# spill
406   	jmp,s   B57
406
408   B59: #	B57 &lt;- B11  Freq: 9.98997e-07
408   	movq    R10, [rsp + #0]	# spill
40c   	jmp,s   B57
40c
40e   B60: #	N719 &lt;- B38  Freq: 1e-35
40e   	movq    RBP, [rsp + #0]	# spill
412   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
423   	pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
42d   	movl    RSI, #-34	# int
432   	movq    [rsp + #24], RAX	# spill
437   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #8 L[5]=rsp + #48 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #24
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [48]=Oop off=1084}
43c   	int3	# ShouldNotReachHere
43c
441   B61: #	N719 &lt;- B42  Freq: 1e-35
441   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
453   	pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
45d   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
463   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:52  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #48 L[6]=rsp + #56 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [16]=Oop [48]=Oop [56]=Oop off=1128}
468   	int3	# ShouldNotReachHere
468
46d   B62: #	N719 &lt;- B22  Freq: 0.00297387
46d   	movl    RBP, R13	# spill
470   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
477   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:86  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=1148}
47c   	int3	# ShouldNotReachHere
47c
481   B63: #	N719 &lt;- B17  Freq: 0.00297387
481   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
487   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:91  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1164}
48c   	int3	# ShouldNotReachHere
48c
491   B64: #	N719 &lt;- B18  Freq: 0.00297386
491   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
497   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:94  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1180}
49c   	int3	# ShouldNotReachHere
49c
4a1   B65: #	N719 &lt;- B37  Freq: 1.11239e-06
4a1   	movq    RBP, [rsp + #0]	# spill
4a5   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
4b6   	movl    RSI, #-12	# int
4bb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #24 L[5]=rsp + #48 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [24]=Oop [48]=Oop off=1216}
4c0   	int3	# ShouldNotReachHere
4c0
4c5   B66: #	B73 &lt;- B43  Freq: 1.09781e-06
4c5   	# exception oop is in rax; no code emitted
4c5   	movq    RSI, RAX	# spill
4c8   	jmp,s   B73
4c8
4ca   B67: #	B73 &lt;- B31  Freq: 9.88107e-06
4ca   	# exception oop is in rax; no code emitted
4ca   	movq    RSI, RAX	# spill
4cd   	jmp,s   B73
4cd
4cf   B68: #	B73 &lt;- B36  Freq: 1.09783e-05
4cf   	# exception oop is in rax; no code emitted
4cf   	movq    RSI, RAX	# spill
4d2   	jmp,s   B73
4d2
4d4   B69: #	B73 &lt;- B34  Freq: 1.09785e-05
4d4   	# exception oop is in rax; no code emitted
4d4   	movq    RSI, RAX	# spill
4d7   	jmp,s   B73
4d7
4d9   B70: #	B73 &lt;- B32  Freq: 1.09788e-05
4d9   	# exception oop is in rax; no code emitted
4d9   	movq    RSI, RAX	# spill
4dc   	jmp,s   B73
4dc
4de   B71: #	B73 &lt;- B28  Freq: 1.09792e-05
4de   	# exception oop is in rax; no code emitted
4de   	movq    RSI, RAX	# spill
4e1   	jmp,s   B73
4e1
4e3   B72: #	B73 &lt;- B26  Freq: 1.09794e-05
4e3   	# exception oop is in rax; no code emitted
4e3   	movq    RSI, RAX	# spill
4e3
4e6   B73: #	N719 &lt;- B72 B71 B67 B70 B69 B68 B66  Freq: 6.58731e-05
4e6   	addq    rsp, 96	# Destroy frame
	popq   rbp

4eb   	jmp     rethrow_stub
4eb
4f0   B74: #	N719 &lt;- B41  Freq: 1.11239e-07
4f0   	movq    RBP, [rsp + #0]	# spill
4f4   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
505   	pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
50f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:52  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #8 L[5]=rsp + #48 L[6]=rsp + #56 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [8]=Oop [48]=Oop [56]=Oop off=1300}
514   	int3	# ShouldNotReachHere
514

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933087573760'/>
<opto_assembly compile_id='413' compile_kind='osr'>
{method}
 - this oop:          0x00007f44cd175490
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2&apos;
 - constants:         0x00007f44cd174d50 constant pool [137] {0x00007f44cd174d50} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2&apos; cache=0x00007f44cd175618
 - access:            0xc1000001  public 
 - name:              &apos;call&apos;
 - signature:         &apos;()Ljava/lang/Void;&apos;
 - max stack:         5
 - max locals:        12
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef760: 0xb0000000 i2c: 0x00007f44b9145620 c2i: 0x00007f44b914575a c2iUV: 0x00007f44b914572d
 - compiled entry     0x00007f44b9316560
 - code size:         163
 - code start:        0x00007f44cd175360
 - code end (excl):   0x00007f44cd175403
 - method data:       0x00007f44cd177f50
 - checked ex length: 0
 - linenumber start:  0x00007f44cd175403
 - localvar length:   9
 - localvar start:    0x00007f44cd175422
 - compiled code: nmethod   3729  411       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call (163 bytes)
#
#  java/lang/Void:exact * ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1373: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B78 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (312 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01c   	movl    RBX, [RSI + #8 (8-bit)]	# int
01f   	movl    R13, RBX	# spill
022   	incl    R13	# int
025   	movl    RBP, [RSI + #80 (8-bit)]	# int
028   	xorl    R10, R10	# int
02b   	movl    R8, [RSI + #16 (8-bit)]	# int
02f   	movl    [rsp + #52], R8	# spill
034   	movl    R8, [RSI + #64 (8-bit)]	# int
038   	movl    [rsp + #48], R8	# spill
03d   	cmpl    R13, R10
040   	cmovllt R13, R10	# max
044   	movq    R10, [RSI + #88 (8-bit)]	# ptr
048   	movq    [rsp + #0], R10	# spill
04c   	movq    R10, [RSI + #40 (8-bit)]	# ptr
050   	movq    [rsp + #24], R10	# spill
055   	movq    R14, [RSI + #24 (8-bit)]	# ptr
059   	movq    R10, [RSI + #48 (8-bit)]	# ptr
05d   	movq    [rsp + #32], R10	# spill
062   	movq    R10, [RSI + #56 (8-bit)]	# ptr
066   	movq    [rsp + #8], R10	# spill
06b   	movq    RDI, RSI	# spill
06e   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
07b   	movq    R10, [rsp + #0]	# spill
07f   	testq   R10, R10	# ptr
082   	je     B78  P=0.001000 C=-1.000000
082
088   B2: #	B96 B3 &lt;- B1  Freq: 0.999
088   	movq    R8, R10	# spill
08b   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
08f   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2: 0x00007f449414d0f0:Constant:exact *	# compressed klass ptr
096   	jne,u  B96  P=0.000001 C=-1.000000
096
09c   B3: #	B4 &lt;- B2  Freq: 0.998999
09c   	movq    R9, R8	# spill
09f   	# checkcastPP of R9
09f
09f   B4: #	B79 B5 &lt;- B3 B78  Freq: 0.999999
09f   	movq    R10, [rsp + #8]	# spill
0a4   	testq   R10, R10	# ptr
0a7   	je     B79  P=0.001000 C=-1.000000
0a7
0ad   B5: #	B97 B6 &lt;- B4  Freq: 0.998999
0ad   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
0b1   	cmpl    R11, narrowklass: precise klass java/util/concurrent/atomic/AtomicReference: 0x00007f449414d960:Constant:exact *	# compressed klass ptr
0b8   	jne,u  B97  P=0.000001 C=-1.000000
0b8
0be   B6: #	B7 &lt;- B5  Freq: 0.998998
0be   	movq    R11, R10	# spill
0c1   	# checkcastPP of R11
0c1   	movq    [rsp + #16], R11	# spill
0c1
0c6   B7: #	B80 B8 &lt;- B6 B79  Freq: 0.999998
0c6   	movq    [rsp + #0], R9	# spill
0ca   	movq    RCX, R10	# spill
0cd   	movq    R9, R8	# spill
0d0   	movq    R10, [rsp + #32]	# spill
0d5   	testq   R10, R10	# ptr
0d8   	je     B80  P=0.001000 C=-1.000000
0d8
0de   B8: #	B98 B9 &lt;- B7  Freq: 0.998998
0de   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
0e2   	cmpl    R10, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f449414dd20:Constant:exact *	# compressed klass ptr
0e9   	jne,u  B98  P=0.000001 C=-1.000000
0e9
0ef   B9: #	B10 &lt;- B8  Freq: 0.998997
0ef   	movq    R10, [rsp + #32]	# spill
0f4   	# checkcastPP of R10
0f4   	movq    [rsp + #40], R10	# spill
0f4
0f9   B10: #	B81 B11 &lt;- B9 B80  Freq: 0.999997
0f9   	movq    R10, [rsp + #24]	# spill
0fe   	testq   R10, R10	# ptr
101   	je     B81  P=0.001000 C=-1.000000
101
107   B11: #	B99 B12 &lt;- B10  Freq: 0.998997
107   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
10b   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f449414da30:Constant:exact *	# compressed klass ptr
112   	jne,u  B99  P=0.000001 C=-1.000000
112
118   B12: #	B13 &lt;- B11  Freq: 0.998996
118   	# checkcastPP of R10
118
118   B13: #	B82 B14 &lt;- B12 B81  Freq: 0.999996
118   	movl    RSI, #-122	# int
11d   	testq   R14, R14	# ptr
120   	je     B82  P=0.001000 C=-1.000000
120
126   B14: #	B100 B15 &lt;- B13  Freq: 0.998996
126   	movl    R8, [R14 + #8 (8-bit)]	# compressed klass ptr
12a   	cmpl    R8, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f449414db00:Constant:exact *	# compressed klass ptr
131   	jne,u  B100  P=0.000001 C=-1.000000
131
137   B15: #	B16 &lt;- B14  Freq: 0.998995
137   	# checkcastPP of R14
137
137   B16: #	B95 B17 &lt;- B15 B82  Freq: 0.999995
137   	movq    R11, [rsp + #40]	# spill
13c   	testq   R11, R11	# ptr
13f   	je     B95  P=0.000001 C=-1.000000
13f
145   B17: #	B95 B18 &lt;- B16  Freq: 0.999994
145   	movq    R11, [rsp + #16]	# spill
14a   	testq   R11, R11	# ptr
14d   	je     B95  P=0.000001 C=-1.000000
14d
153   B18: #	B66 &lt;- B17  Freq: 0.999993
153   	movq    [rsp + #24], R10	# spill
158   	movl    [rsp + #12], RBP	# spill
15c   	jmp     B66
      	nop 	# 15 bytes pad for loops and calls

170   B19: #	B20 &lt;- B26  top-of-loop Freq: 21955.8
170   	movl    RBX, R9	# spill
170
173   B20: #	B103 B21 &lt;- B75 B19 	Loop: B20-B19 inner main of N456 Freq: 21964.6
173   	movl    R9, [R14 + #16 + RBX &lt;&lt; #2]	# compressed ptr
178   	movl    R11, [R9 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
17c   	NullCheck R9
17c
17c   B21: #	B104 B22 &lt;- B20  Freq: 21964.6
17c   	movl    RDX, [R9 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
180   	movl    RAX, [R11 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
187   	NullCheck R11
187
187   B22: #	B105 B23 &lt;- B21  Freq: 21964.5
187   	movl    R9, RBX	# spill
18a   	addl    R9, #2	# int
18e   	movl    R10, [R11 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
192   	movslq  R11, RBX	# i2l
195   	movl    [RDX + #140 (32-bit)], RAX	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
19b   	NullCheck RDX
19b
19b   B23: #	B103 B24 &lt;- B22  Freq: 21964.5
19b   	movl    [RDX + #272 (32-bit)], R10	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1a2   	movl    R11, [R14 + #20 + R11 &lt;&lt; #2]	# compressed ptr
1a7   	movl    R10, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
1ab   	NullCheck R11
1ab
1ab   B24: #	B104 B25 &lt;- B23  Freq: 21964.5
1ab   	movl    RDX, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1af   	movl    RAX, [R10 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
1b6   	NullCheck R10
1b6
1b6   B25: #	B105 B26 &lt;- B24  Freq: 21964.5
1b6   	movl    R11, [R10 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
1ba   	movl    [RDX + #140 (32-bit)], RAX	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1c0   	NullCheck RDX
1c0
1c0   B26: #	B19 B27 &lt;- B25  Freq: 21964.4
1c0   	movl    [RDX + #272 (32-bit)], R11	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1c7   	cmpl    R9, RCX
1ca   	jl,s   B19	# loop end  P=0.999606 C=53277.000000
1ca
1cc   B27: #	B34 B28 &lt;- B85 B26  Freq: 8.65763
1cc   	cmpl    R9, R8
1cf   	jge,s   B34  P=0.500000 C=-1.000000
1cf
1d1   B28: #	B29 &lt;- B27  Freq: 4.32882
1d1   	# castII of R9
      	nop 	# 3 bytes pad for loops and calls

1d4   B29: #	B84 B30 &lt;- B28 B33 	Loop: B29-B33 inner post of N1540 Freq: 8.6576
1d4   	cmpl    R9, RDI	# unsigned
1d7   	jnb,u  B84  P=0.000001 C=-1.000000
1d7
1dd   B30: #	B103 B31 &lt;- B29  Freq: 8.65759
1dd   	movl    R11, [R14 + #16 + R9 &lt;&lt; #2]	# compressed ptr
1e2   	movl    R10, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
1e6   	NullCheck R11
1e6
1e6   B31: #	B104 B32 &lt;- B30  Freq: 8.65758
1e6   	movl    RDX, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1ea   	movl    RAX, [R10 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
1f1   	NullCheck R10
1f1
1f1   B32: #	B105 B33 &lt;- B31  Freq: 8.65757
1f1   	movl    R11, [R10 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
1f5   	incl    R9	# int
1f8   	movl    [RDX + #140 (32-bit)], RAX	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1fe   	NullCheck RDX
1fe
1fe   B33: #	B29 B34 &lt;- B32  Freq: 8.65756
1fe   	movl    [RDX + #272 (32-bit)], R11	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
205   	cmpl    R9, R8
208   	jl,s   B29	# loop end  P=0.500000 C=53277.000000
208
20a   B34: #	B110 B35 &lt;- B66 B33 B27  Freq: 8.66107
20a   	movq    R10, [rsp + #24]	# spill
20f   	movl    R11, [R10 + #36 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
213   	NullCheck R10
213
213   B35: #	B86 B36 &lt;- B34  Freq: 8.66106
213   	testl   R11, R11	# compressed ptr
216   	je     B86  P=0.000001 C=-1.000000
216
21c   B36: #	B38 B37 &lt;- B35  Freq: 8.66105
21c   	MEMBAR-release ! (empty encoding)
21c   	
21c   	movl    R8, #-1	# int
222   	XADDL  [[R11 + #12 (8-bit)]],R8
228   	
228   	decl    R8	# int
22b   	MEMBAR-acquire ! (empty encoding)
22b   	testl   R8, R8
22e   	jne,s   B38  P=0.498155 C=271.000000
22e
230   B37: #	B38 &lt;- B36  Freq: 4.3465
230   	MEMBAR-release ! (empty encoding)
230   	movb    [R10 + #19 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
234   	lock addl [rsp + #0], 0	! membar_volatile
239
239   B38: #	B41 B39 &lt;- B37 B36  Freq: 8.66105
239   	movzbl  R11, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
23e   	MEMBAR-acquire ! (empty encoding)
23e   	movzbl  R10, [R10 + #17 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
243   	orl     R11, R10	# int
246   	MEMBAR-acquire ! (empty encoding)
246   	MEMBAR-release ! (empty encoding)
246   	movq    R10, [rsp + #24]	# spill
24b   	movb    [R10 + #21 (8-bit)], R11	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
24f   	lock addl [rsp + #0], 0	! membar_volatile
254   	movzbl  R11, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
259   	MEMBAR-acquire ! (empty encoding)
259   	testl   R11, R11
25c   	je,s   B41  P=0.000145 C=1601492.000000
25c
25e   B39: #	B90 B40 &lt;- B38  Freq: 8.65979
25e   	movl    R11, [rsp + #48]	# spill
263   	testl   R11, R11
266   	jne     B90  P=0.000001 C=-1.000000
      	nop 	# 4 bytes pad for loops and calls

270   B40: #	B40 B41 &lt;- B39 B40 	Loop: B40-B40 inner  Freq: 59788.9
270   	movq    R10, [rsp + #24]	# spill
275   	movzbl  R10, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
27a   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=rsp + #24 L[1]=rsp + #48 STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=rsp + #0 L[1]=rsp + #12 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #40 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=Oop [24]=Oop [40]=Oop off=634}
280   	MEMBAR-acquire ! (empty encoding)
280   	testl   R10, R10
283   	jne,s   B40  P=0.999855 C=1601492.000000
283
285   B41: #	B44 B42 &lt;- B40 B38  Freq: 8.66104
285   	MEMBAR-release ! (empty encoding)
285   	movl    R11, [rsp + #12]	# spill
28a   	incl    R11	# int
28d   	movl    [rsp + #8], R11	# spill
292   	
292   	movq    R10, [rsp + #40]	# spill
297   	movl    RAX, [rsp + #12]	# spill
29b   	cmpxchgl [R10 + #12 (8-bit)],R11	# If rax == [R10 + #12 (8-bit)] then store R11 into [R10 + #12 (8-bit)]
	sete    R10
	movzbl  R10, R10
2a9   	
2a9   	MEMBAR-acquire ! (empty encoding)
2a9   	testl   R10, R10
2ac   	je,s   B44  P=0.100000 C=-1.000000
2ac
2ae   B42: #	B91 B43 &lt;- B41  Freq: 7.79493
2ae   	movq    R10, [rsp + #0]	# spill
2b2   	testq   R10, R10	# ptr
2b5   	je     B91  P=0.000001 C=-1.000000
2b5
2bb   B43: #	B107 B44 &lt;- B42  Freq: 7.79493
2bb   	movq    RSI, R10	# spill
2be   	movq    RDX, [rsp + #24]	# spill
2c3   	call,static  org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #0 L[1]=rsp + #12 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #40 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=Oop [24]=Oop [40]=Oop off=712}
2c8
2c8   B44: #	B88 B45 &lt;- B43 B41  Freq: 8.66087
2c8   	movq    R10, [rsp + #40]	# spill
2cd   	movl    R11, [R10 + #12 (8-bit)]	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
2d1   	MEMBAR-acquire ! (empty encoding)
2d1   	movq    R10, [rsp + #24]	# spill
2d6   	movl    R10, [R10 + #40 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
2da   	movl    R9, [rsp + #8]	# spill
2df   	cmpl    R9, R11
2e2   	jne     B88  P=0.000001 C=-1.000000
2e2
2e8   B45: #	B87 B46 &lt;- B44  Freq: 8.66087
2e8   	decode_heap_oop_not_null RSI,R10
2eb   	testl   R10, R10	# compressed ptr
2ee   	je     B87  P=0.000001 C=-1.000000
2ee
2f4   B46: #	B106 B47 &lt;- B45  Freq: 8.66086
      	nop 	# 3 bytes pad for loops and calls
2f7   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=rsp + #24 L[1]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #40 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=Oop [24]=Oop [40]=Oop off=764}
2fc
2fc   B47: #	B76 B48 &lt;- B46  Freq: 8.66068
        # Block is sole successor of call
2fc   	testl   RAX, RAX
2fe   	je     B76  P=0.100000 C=-1.000000
2fe
304   B48: #	B51 B49 &lt;- B47 B76  Freq: 8.66068
304   	movq    R10, [rsp + #24]	# spill
309   	movzbl  R11, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
30e   	MEMBAR-acquire ! (empty encoding)
30e   	testl   R11, R11
311   	je,s   B51  P=0.000004 C=954370.000000
311
313   B49: #	B89 B50 &lt;- B48  Freq: 8.66065
313   	movl    R10, [rsp + #48]	# spill
318   	testl   R10, R10
31b   	jne     B89  P=0.000001 C=-1.000000
      	nop 	# 15 bytes pad for loops and calls

330   B50: #	B50 B51 &lt;- B49 B50 	Loop: B50-B50 inner  Freq: 2.07573e+06
330   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=rsp + #24 L[1]=rsp + #48 STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #40 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=Oop [24]=Oop [40]=Oop off=816}
336   	movq    R10, [rsp + #24]	# spill
33b   	movzbl  R11, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
340   	MEMBAR-acquire ! (empty encoding)
340   	testl   R11, R11
343   	jne,s   B50  P=0.999996 C=954370.000000
343
345   B51: #	B111 B52 &lt;- B50 B48  Freq: 8.66067
345   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:160  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #40 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=Oop [40]=Oop off=837}
34b   	movq    R10, [rsp + #16]	# spill
350   	movl    RBP, [R10 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
354   	MEMBAR-acquire ! (empty encoding)
354   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
358   	NullCheck RBP
358
358   B52: #	B101 B53 &lt;- B51  Freq: 8.66067
358   	decode_heap_oop_not_null RCX,RBP
35b   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f449414da30:Constant:exact *	# compressed klass ptr
362   	jne,u  B101  P=0.000000 C=-1.000000
362
368   B53: #	B77 B54 &lt;- B52  Freq: 8.66067
368   	# checkcastPP of RCX
368   	movl    R11, [RCX + #32 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
36c   	movzbl  R10, [RCX + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
371   	movl    RBP, [RCX + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
374   	testl   R10, R10
377   	jne     B77  P=0.100000 C=-1.000000
377
37d   B54: #	B112 B55 &lt;- B53  Freq: 7.7946
37d   	decode_heap_oop_not_null R14,RBP
380   	movl    R8, [RBP + #8 (8-bit)]	# compressed klass ptr
384   	NullCheck RBP
384
384   B55: #	B102 B56 &lt;- B54  Freq: 7.79459
384   	cmpl    R8, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f449414db00:Constant:exact *	# compressed klass ptr
38b   	jne,u  B102  P=0.000000 C=-1.000000
38b
391   B56: #	B92 B57 &lt;- B55  Freq: 7.79459
391   	# checkcastPP of R14
391   	movl    R9, [R14 + #12 (8-bit)]	# range
395   	testl   R11, R11	# compressed ptr
398   	je     B92  P=0.000001 C=-1.000000
398
39e   B57: #	B59 B58 &lt;- B56  Freq: 7.79458
39e   	MEMBAR-release ! (empty encoding)
39e   	
39e   	movl    R10, #-1	# int
3a4   	XADDL  [[R11 + #12 (8-bit)]],R10
3aa   	
3aa   	decl    R10	# int
3ad   	MEMBAR-acquire ! (empty encoding)
3ad   	testl   R10, R10
3b0   	jne,s   B59  P=0.498168 C=273.000000
3b0
3b2   B58: #	B59 &lt;- B57  Freq: 3.91157
3b2   	MEMBAR-release ! (empty encoding)
3b2   	movb    [RCX + #18 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
3b6   	lock addl [rsp + #0], 0	! membar_volatile
3bb
3bb   B59: #	B62 B60 &lt;- B57 B58  Freq: 7.79458
3bb   	movzbl  R11, [RCX + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
3c0   	MEMBAR-acquire ! (empty encoding)
3c0   	testl   R11, R11
3c3   	je,s   B62  P=0.000737 C=237460.000000
3c3
3c5   B60: #	B94 B61 &lt;- B59  Freq: 7.78884
3c5   	movl    R10, [rsp + #48]	# spill
3ca   	testl   R10, R10
3cd   	jne     B94  P=0.000001 C=-1.000000
      	nop 	# 13 bytes pad for loops and calls

3e0   B61: #	B61 B62 &lt;- B60 B61 	Loop: B61-B61 inner  Freq: 10569
3e0   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=RCX L[1]=rsp + #48 STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #40 L[6]=RCX L[7]=R14 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rcx=Oop r14=Oop [0]=Oop [16]=Oop [40]=Oop off=992}
3e6   	movzbl  R11, [RCX + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
3eb   	MEMBAR-acquire ! (empty encoding)
3eb   	testl   R11, R11
3ee   	jne,s   B61  P=0.999263 C=237460.000000
3ee
3f0   B62: #	B93 B63 &lt;- B61 B59  Freq: 7.79458
3f0   	movl    R11, [RCX + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
3f4   	testl   R11, R11	# compressed ptr
3f7   	je     B93  P=0.000001 C=-1.000000
3f7
3fd   B63: #	B65 B64 &lt;- B62  Freq: 7.79457
3fd   	MEMBAR-release ! (empty encoding)
3fd   	
3fd   	movl    R10, #-1	# int
403   	XADDL  [[R11 + #12 (8-bit)]],R10
409   	decl    R10	# int
40c   	
40c   	MEMBAR-acquire ! (empty encoding)
40c   	testl   R10, R10
40f   	jne,s   B65  P=0.507407 C=270.000000
40f
411   B64: #	B65 &lt;- B63  Freq: 3.83955
411   	MEMBAR-release ! (empty encoding)
411   	movb    [RCX + #17 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
415   	lock addl [rsp + #0], 0	! membar_volatile
41a
41a   B65: #	B66 &lt;- B64 B63  Freq: 7.79457
41a   	movq    [rsp + #24], RCX	# spill
41f   	movl    R10, [rsp + #8]	# spill
424   	movl    [rsp + #12], R10	# spill
429   	xorl    RBX, RBX	# int
42b   	movl    R13, #1	# int
431   	movl    [rsp + #52], R9	# spill
431
436   B66: #	B34 B67 &lt;- B18 B65 	Loop: B66-B65  Freq: 8.79473
436   	cmpl    RBX, [RSP + #52 (32-bit)]
43a   	jge     B34  P=0.000394 C=53277.000000
43a
440   B67: #	B68 &lt;- B66  Freq: 8.79126
440   	cmpl    R13, [RSP + #52 (32-bit)]
445   	movl    R8, [rsp + #52]	# spill
44a   	cmovlgt R13, R8	# min
44a
44e   B68: #	B109 B69 &lt;- B67 B73 	Loop: B68-B73 inner pre of N1540 Freq: 17.5824
44e   	movl    RDI, [R14 + #12 (8-bit)]	# range
452   	NullCheck R14
452
452   B69: #	B83 B70 &lt;- B68  Freq: 17.5824
452   	cmpl    R8, RDI
455   	movl    R10, R8	# spill
458   	cmovlgt R10, RDI	# min
45c   	movl    RCX, R10	# spill
45f   	decl    RCX	# int
461   	cmpl    RBX, RDI	# unsigned
463   	jnb,u  B83  P=0.000001 C=-1.000000
463
469   B70: #	B103 B71 &lt;- B69  Freq: 17.5824
469   	movl    R9, [R14 + #16 + RBX &lt;&lt; #2]	# compressed ptr
46e   	cmpl    R10, RCX
471   	movl    R11, #-2147483648	# int
477   	cmovll RCX, R11	# signed, int
47b   	movl    R10, [R9 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
47f   	NullCheck R9
47f
47f   B71: #	B104 B72 &lt;- B70  Freq: 17.5824
47f   	movl    RDX, [R9 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
483   	movl    RAX, [R10 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
48a   	NullCheck R10
48a
48a   B72: #	B105 B73 &lt;- B71  Freq: 17.5824
48a   	incl    RBX	# int
48c   	movl    [RDX + #140 (32-bit)], RAX	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
492   	NullCheck RDX
492
492   B73: #	B68 B74 &lt;- B72  Freq: 17.5823
492   	movl    R11, [R10 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
496   	movl    [RDX + #272 (32-bit)], R11	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
49d   	cmpl    RBX, R13
4a0   	jl,s   B68	# loop end  P=0.500000 C=53277.000000
4a0
4a2   B74: #	B85 B75 &lt;- B73  Freq: 8.79117
4a2   	cmpl    RBX, RCX
4a4   	jge     B85  P=0.000001 C=-1.000000
4a4
4aa   B75: #	B20 &lt;- B74  Freq: 8.79116
4aa   	# castII of RBX
4aa   	jmp     B20
4aa
4af   B76: #	B48 &lt;- B47  Freq: 0.866068
4af   	MEMBAR-release ! (empty encoding)
4af   	movq    R10, [rsp + #24]	# spill
4b4   	movb    [R10 + #20 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
4b8   	lock addl [rsp + #0], 0	! membar_volatile
4bd   	jmp     B48
4bd
4c2   B77: #	N1373 &lt;- B53  Freq: 0.866067
4c2   	xorl    RAX, RAX	# ptr
4c4   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

4cf   	ret
4cf
4d0   B78: #	B4 &lt;- B1  Freq: 0.000999987
4d0   	xorl    R9, R9	# ptr
4d3   	movq    R8, R10	# spill
4d6   	jmp     B4
4d6
4db   B79: #	B7 &lt;- B4  Freq: 0.000999986
4db   	xorl    R11, R11	# ptr
4de   	movq    [rsp + #16], R11	# spill
4e3   	jmp     B7
4e3
4e8   B80: #	B10 &lt;- B7  Freq: 0.000999985
4e8   	xorl    R10, R10	# ptr
4eb   	movq    [rsp + #40], R10	# spill
4f0   	jmp     B10
4f0
4f5   B81: #	B13 &lt;- B10  Freq: 0.000999984
4f5   	xorl    R10, R10	# ptr
4f8   	jmp     B13
4f8
4fd   B82: #	B16 &lt;- B13  Freq: 0.000999983
4fd   	xorl    R14, R14	# ptr
500   	jmp     B16
500
505   B83: #	B84 &lt;- B69  Freq: 1.78159e-05
505   	movl    R9, RBX	# spill
505
508   B84: #	N1373 &lt;- B29 B83  Freq: 2.65885e-05
508   	movq    RBP, [rsp + #0]	# spill
50c   	movl    R11, [rsp + #12]	# spill
511   	movl    [rsp + #0], R11	# spill
515   	movl    R10, [rsp + #48]	# spill
51a   	movl    [rsp + #4], R10	# spill
51f   	movq    R10, [rsp + #16]	# spill
524   	movq    [rsp + #8], R10	# spill
529   	movq    R10, [rsp + #40]	# spill
52e   	movq    [rsp + #16], R10	# spill
533   	movl    [rsp + #40], R8	# spill
538   	movq    [rsp + #48], R14	# spill
53d   	movl    [rsp + #56], R9	# spill
542   	movl    RSI, #-28	# int
547   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:86  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #24 L[7]=_ L[8]=rsp + #48 L[9]=rsp + #40 L[10]=rsp + #56 L[11]=_ STK[0]=rsp + #48 STK[1]=rsp + #56
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [24]=Oop [48]=Oop off=1356}
54c   	int3	# ShouldNotReachHere
54c
551   B85: #	B27 &lt;- B74  Freq: 8.90791e-06
551   	movl    R9, RBX	# spill
554   	jmp     B27
554
559   B86: #	N1373 &lt;- B35  Freq: 8.77607e-06
559   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
55f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1380}
564   	int3	# ShouldNotReachHere
564
569   B87: #	N1373 &lt;- B45  Freq: 8.77587e-06
569   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
56f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1396}
574   	int3	# ShouldNotReachHere
574
579   B88: #	N1373 &lt;- B44  Freq: 8.66087e-06
579   	movq    RBP, [rsp + #0]	# spill
57d   	movl    R11, R9	# spill
580   	movl    [rsp + #0], R11	# spill
584   	movl    R10, [rsp + #48]	# spill
589   	movl    [rsp + #4], R10	# spill
58e   	movq    R10, [rsp + #16]	# spill
593   	movq    [rsp + #8], R10	# spill
598   	movl    RSI, #-83	# int
      	nop 	# 2 bytes pad for loops and calls
59f   	call,static  wrapper for: uncommon_trap(reason=&apos;unreached&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:145  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #40 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #4
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [40]=Oop off=1444}
5a4   	int3	# ShouldNotReachHere
5a4
5a9   B89: #	N1373 &lt;- B49  Freq: 8.66065e-06
5a9   	movq    RBP, [rsp + #0]	# spill
5ad   	movl    R11, [rsp + #8]	# spill
5b2   	movl    [rsp + #0], R11	# spill
5b6   	movl    [rsp + #4], R10	# spill
5bb   	movq    R10, [rsp + #16]	# spill
5c0   	movq    [rsp + #8], R10	# spill
5c5   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
5cb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:22  L[0]=rsp + #24 L[1]=rsp + #4
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #40 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [40]=Oop off=1488}
5d0   	int3	# ShouldNotReachHere
5d0
5d5   B90: #	N1373 &lt;- B39  Freq: 8.65979e-06
5d5   	movq    RBP, [rsp + #0]	# spill
5d9   	movl    R10, [rsp + #12]	# spill
5de   	movl    [rsp + #0], R10	# spill
5e2   	movq    R10, [rsp + #16]	# spill
5e7   	movq    [rsp + #8], R10	# spill
5ec   	movq    R10, [rsp + #40]	# spill
5f1   	movq    [rsp + #16], R10	# spill
5f6   	movl    [rsp + #40], R11	# spill
5fb   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
603   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:35  L[0]=rsp + #24 L[1]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [24]=Oop off=1544}
608   	int3	# ShouldNotReachHere
608
60d   B91: #	N1373 &lt;- B42  Freq: 7.89844e-06
60d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
613   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=rsp + #24
        # OopMap{[24]=Oop off=1560}
618   	int3	# ShouldNotReachHere
618
61d   B92: #	N1373 &lt;- B56  Freq: 7.89809e-06
61d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
623   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1576}
628   	int3	# ShouldNotReachHere
628
62d   B93: #	N1373 &lt;- B62  Freq: 7.89808e-06
62d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
633   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1592}
638   	int3	# ShouldNotReachHere
638
63d   B94: #	N1373 &lt;- B60  Freq: 7.78884e-06
63d   	movq    RBP, [rsp + #0]	# spill
641   	movl    R10, [rsp + #8]	# spill
646   	movl    [rsp + #0], R10	# spill
64a   	movq    R10, [rsp + #16]	# spill
64f   	movq    [rsp + #8], R10	# spill
654   	movq    R10, [rsp + #40]	# spill
659   	movq    [rsp + #16], R10	# spill
65e   	movq    [rsp + #32], R14	# spill
663   	movq    [rsp + #40], RCX	# spill
668   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
66f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:22  L[0]=rsp + #40 L[1]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=rsp + #32 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [32]=Oop [40]=Oop off=1652}
674   	int3	# ShouldNotReachHere
674
679   B95: #	N1373 &lt;- B17 B16  Freq: 2.02655e-06
679   	movl    R11, [rsp + #48]	# spill
67e   	movl    [rsp + #8], R11	# spill
683   	movq    R11, [rsp + #40]	# spill
688   	movq    [rsp + #24], R11	# spill
68d   	movq    [rsp + #32], R10	# spill
692   	movq    [rsp + #40], R14	# spill
697   	movl    [rsp + #48], RBX	# spill
69b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:75  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=rsp + #8 L[4]=rsp + #16 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=_ L[8]=rsp + #40 L[9]=rsp + #52 L[10]=rsp + #48 L[11]=_
        # OopMap{[0]=Oop [16]=Oop [24]=Oop [32]=Oop [40]=Oop off=1696}
6a0   	int3	# ShouldNotReachHere
6a0
6a5   B96: #	B97 &lt;- B2  Freq: 9.99e-07
6a5   	movq    R10, [rsp + #8]	# spill
6a5
6aa   B97: #	N1373 &lt;- B96 B5 B98 B99 B100  Freq: 4.99499e-06
6aa   	movl    RSI, #-99	# int
6af   	movl    R11, [rsp + #48]	# spill
6b4   	movl    [rsp + #0], R11	# spill
6b8   	movq    [rsp + #8], R14	# spill
6bd   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #52]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
6cf   	movl    [rsp + #16], RBX	# spill
6d3   	movq    [rsp + #40], R8	# spill
6d8   	movq    [rsp + #48], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
6df   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:75  L[0]=rsp + #40 L[1]=RBP L[2]=_ L[3]=rsp + #0 L[4]=rsp + #48 L[5]=rsp + #32 L[6]=rsp + #24 L[7]=_ L[8]=rsp + #8 L[9]=rsp + #4 L[10]=rsp + #16 L[11]=_
        # OopMap{[8]=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop off=1764}
6e4   	int3	# ShouldNotReachHere
6e4
6e9   B98: #	B97 &lt;- B8  Freq: 9.98998e-07
6e9   	movq    R10, RCX	# spill
6ec   	jmp,s   B97
6ec
6ee   B99: #	B97 &lt;- B11  Freq: 9.98997e-07
6ee   	movq    R10, RCX	# spill
6f1   	jmp,s   B97
6f1
6f3   B100: #	B97 &lt;- B14  Freq: 9.98996e-07
6f3   	movq    R8, R9	# spill
6f6   	movq    R10, RCX	# spill
6f9   	jmp,s   B97
6f9
6fb   B101: #	N1373 &lt;- B52  Freq: 1e-35
6fb   	movl    RSI, #-34	# int
      	nop 	# 3 bytes pad for loops and calls
703   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:32  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #40 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [16]=Oop [40]=Oop off=1800}
708   	int3	# ShouldNotReachHere
708
70d   B102: #	N1373 &lt;- B55  Freq: 1e-35
70d   	movq    [rsp + #32], RCX	# spill
712   	movl    RSI, #-34	# int
717   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:52  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #40 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [16]=Oop [32]=Oop [40]=Oop off=1820}
71c   	int3	# ShouldNotReachHere
71c
721   B103: #	N1373 &lt;- B30 B70 B20 B23  Freq: 0.044539
721   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
727   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:91  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1836}
72c   	int3	# ShouldNotReachHere
72c
731   B104: #	N1373 &lt;- B31 B71 B21 B24  Freq: 0.044539
731   	movl    RBP, RDX	# spill
733   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
73b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:99  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=NarrowOop off=1856}
740   	int3	# ShouldNotReachHere
740
745   B105: #	N1373 &lt;- B32 B72 B22 B25  Freq: 0.0445389
745   	movl    RBP, RAX	# spill
747   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
74f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest::actor2 @ bci:12  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:99  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1876}
754   	int3	# ShouldNotReachHere
754
759   B106: #	B108 &lt;- B46  Freq: 8.66086e-05
759   	# exception oop is in rax; no code emitted
759   	movq    RSI, RAX	# spill
75c   	jmp,s   B108
75c
75e   B107: #	B108 &lt;- B43  Freq: 7.79493e-05
75e   	# exception oop is in rax; no code emitted
75e   	movq    RSI, RAX	# spill
75e
761   B108: #	N1373 &lt;- B107 B106  Freq: 0.000164558
761   	addq    rsp, 80	# Destroy frame
	popq   rbp

766   	jmp     rethrow_stub
766
76b   B109: #	N1373 &lt;- B68  Freq: 1.78159e-05
76b   	movl    RSI, #-10	# int
770   	movl    RBP, RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
773   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:86  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=1912}
778   	int3	# ShouldNotReachHere
778
77d   B110: #	N1373 &lt;- B34  Freq: 8.77608e-06
77d   	movl    RBP, [rsp + #48]	# spill
781   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
787   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=1932}
78c   	int3	# ShouldNotReachHere
78c
791   B111: #	N1373 &lt;- B51  Freq: 8.77568e-06
791   	movq    RBP, [rsp + #0]	# spill
795   	movl    R11, [rsp + #8]	# spill
79a   	movl    [rsp + #0], R11	# spill
79e   	movq    R10, [rsp + #16]	# spill
7a3   	movq    [rsp + #8], R10	# spill
7a8   	movl    RSI, #-12	# int
      	nop 	# 2 bytes pad for loops and calls
7af   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:32  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #40 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [8]=Oop [40]=Oop off=1972}
7b4   	int3	# ShouldNotReachHere
7b4
7b9   B112: #	N1373 &lt;- B54  Freq: 7.8981e-06
7b9   	movq    RBP, [rsp + #0]	# spill
7bd   	movl    R10, [rsp + #8]	# spill
7c2   	movl    [rsp + #0], R10	# spill
7c6   	movq    R10, [rsp + #16]	# spill
7cb   	movq    [rsp + #8], R10	# spill
7d0   	movq    [rsp + #24], RCX	# spill
7d5   	movl    RSI, #-12	# int
      	nop 	# 1 bytes pad for loops and calls
7db   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:52  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #40 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [40]=Oop off=2016}
7e0   	int3	# ShouldNotReachHere
7e0

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='427'>
{method}
 - this oop:          0x00007f44cd20b750
 - method holder:     &apos;sun/reflect/ClassFileAssembler&apos;
 - constants:         0x00007f44cd20a630 constant pool [221] {0x00007f44cd20a630} for &apos;sun/reflect/ClassFileAssembler&apos; cache=0x00007f44cd20f898
 - access:            0x81000001  public 
 - name:              &apos;emitByte&apos;
 - signature:         &apos;(B)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      87
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b92ec220
 - code size:         11
 - code start:        0x00007f44cd20b720
 - code end (excl):   0x00007f44cd20b72b
 - method data:       0x00007f44cd2105e0
 - checked ex length: 0
 - linenumber start:  0x00007f44cd20b72b
 - localvar length:   2
 - localvar start:    0x00007f44cd20b736
 - compiled code: nmethod   3868  346       3       sun.reflect.ClassFileAssembler::emitByte (11 bytes)
#
#  void ( sun/reflect/ClassFileAssembler:NotNull *, byte )
#
#r018 rsi:rsi   : parm 0: sun/reflect/ClassFileAssembler:NotNull *
#r016 rdx   : parm 1: byte
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N154: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B12 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (224 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    [rsp + #0], RDX	# spill
02f   	movl    R10, [RSI + #28 (8-bit)]	# compressed ptr ! Field: sun/reflect/ClassFileAssembler.vec
033   	movl    RSI, #-10	# int
038   	decode_heap_oop_not_null R11,R10
03b   	movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
03f   	NullCheck R10
03f
03f   B2: #	B11 B3 &lt;- B1  Freq: 0.999999
03f   	cmpl    R8, narrowklass: precise klass sun/reflect/ByteVectorImpl: 0x00007f448802aac0:Constant:exact *	# compressed klass ptr
046   	jne,u  B11  P=0.000001 C=-1.000000
046
04c   B3: #	B13 B4 &lt;- B2  Freq: 0.999998
04c   	# checkcastPP of R11
04c   	movq    [rsp + #8], R11	# spill
051   	movl    RBP, [R11 + #16 (8-bit)]	# compressed ptr ! Field: sun/reflect/ByteVectorImpl.data
055   	movl    R8, [R11 + #12 (8-bit)]	# int ! Field: sun/reflect/ByteVectorImpl.pos
059   	incl    R8	# int
05c   	movl    [R11 + #12 (8-bit)], R8	# int ! Field: sun/reflect/ByteVectorImpl.pos
060   	movl    R11, [RBP + #12 (8-bit)]	# range
064   	NullCheck RBP
064
064   B4: #	B7 B5 &lt;- B3  Freq: 0.999997
064   	cmpl    R8, R11
067   	jge,s   B7  P=0.002594 C=8480.000000
067
069   B5: #	B10 B6 &lt;- B8 B4  Freq: 0.999997
069   	movl    RSI, #-28	# int
06e   	movl    R11, [RBP + #12 (8-bit)]	# range
072   	movslq  R10, R8	# i2l
075   	cmpl    R8, R11	# unsigned
078   	jnb,us  B10  P=0.000001 C=-1.000000
078
07a   B6: #	N154 &lt;- B5  Freq: 0.999996
07a   	movl    R8, [rsp + #0]	# spill
07e   	movb    [RBP + #16 + R10], R8	# byte
083   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

08e   	ret
08e
08f   B7: #	B14 B8 &lt;- B4  Freq: 0.00259434
08f   	movq    RSI, [rsp + #8]	# spill
094   	movl    RDX, R8	# spill
097   	movq    RBP, RSI	# spill
      	nop 	# 1 bytes pad for loops and calls
09b   	call,static  sun.reflect.ByteVectorImpl::resize
        # sun.reflect.ByteVectorImpl::add @ bci:24  L[0]=RBP L[1]=rsp + #0
        # sun.reflect.ClassFileAssembler::emitByte @ bci:5  L[0]=_ L[1]=_
        # OopMap{rbp=Oop off=160}
0a0
0a0   B8: #	B5 B9 &lt;- B7  Freq: 0.00259429
        # Block is sole successor of call
0a0   	movl    R8, [RBP + #12 (8-bit)]	# int ! Field: sun/reflect/ByteVectorImpl.pos
0a4   	movl    RBP, [RBP + #16 (8-bit)]	# compressed ptr ! Field: sun/reflect/ByteVectorImpl.data
0a7   	testl   RBP, RBP	# compressed ptr
0a9   	jne,s   B5  P=0.999999 C=-1.000000
0a9
0ab   B9: #	N154 &lt;- B8  Freq: 2.62874e-09
0ab   	movl    RBP, [rsp + #0]	# spill
0ae   	movl    RSI, #-10	# int
0b3   	movl    [rsp + #0], R8	# spill
0b7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=rsp + #0 STK[2]=RBP
        # sun.reflect.ClassFileAssembler::emitByte @ bci:5  L[0]=_ L[1]=_
        # OopMap{off=188}
0bc   	int3	# ShouldNotReachHere
0bc
0c1   B10: #	N154 &lt;- B5  Freq: 1.01328e-06
0c1   	movl    [rsp + #4], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
0c7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:36  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #4 STK[2]=rsp + #0
        # sun.reflect.ClassFileAssembler::emitByte @ bci:5  L[0]=_ L[1]=_
        # OopMap{rbp=NarrowOop off=204}
0cc   	int3	# ShouldNotReachHere
0cc
0d1   B11: #	N154 &lt;- B2  Freq: 9.99999e-07
0d1   	movl    RSI, #-34	# int
0d6   	movl    RBP, R10	# spill
      	nop 	# 2 bytes pad for loops and calls
0db   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ClassFileAssembler::emitByte @ bci:5  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap{rbp=NarrowOop off=224}
0e0   	int3	# ShouldNotReachHere
0e0
0e5   B12: #	N154 &lt;- B1  Freq: 1.01328e-06
0e5   	movl    RBP, RDX	# spill
0e7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ClassFileAssembler::emitByte @ bci:5  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=236}
0ec   	int3	# ShouldNotReachHere
0ec
0f1   B13: #	N154 &lt;- B3  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
0f3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:15  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # sun.reflect.ClassFileAssembler::emitByte @ bci:5  L[0]=_ L[1]=_
        # OopMap{off=248}
0f8   	int3	# ShouldNotReachHere
0f8
0fd   B14: #	N154 &lt;- B7  Freq: 2.59434e-08
0fd   	# exception oop is in rax; no code emitted
0fd   	movq    RSI, RAX	# spill
100   	addq    rsp, 32	# Destroy frame
	popq   rbp

105   	jmp     rethrow_stub
105

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='430'>
{method}
 - this oop:          0x00007f44cd209fa8
 - method holder:     &apos;sun/reflect/ByteVectorImpl&apos;
 - constants:         0x00007f44cd2093f8 constant pool [56] {0x00007f44cd2093f8} for &apos;sun/reflect/ByteVectorImpl&apos; cache=0x00007f44cd20a438
 - access:            0x81000001  public 
 - name:              &apos;add&apos;
 - signature:         &apos;(B)V&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef8c8: 0xba000000 i2c: 0x00007f44b91468a0 c2i: 0x00007f44b91469dd c2iUV: 0x00007f44b91469b0
 - compiled entry     0x00007f44b92ec8a0
 - code size:         38
 - code start:        0x00007f44cd209f60
 - code end (excl):   0x00007f44cd209f86
 - method data:       0x00007f44cd210788
 - checked ex length: 0
 - linenumber start:  0x00007f44cd209f86
 - localvar length:   2
 - localvar start:    0x00007f44cd209f8e
 - compiled code: nmethod   3901  347       3       sun.reflect.ByteVectorImpl::add (38 bytes)
#
#  void ( sun/reflect/ByteVectorImpl:NotNull *, byte )
#
#r018 rsi:rsi   : parm 0: sun/reflect/ByteVectorImpl:NotNull *
#r016 rdx   : parm 1: byte
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N116: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B9 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    [rsp + #4], RDX	# spill
030   	movq    RBP, RSI	# spill
033   	movl    RDX, [RSI + #12 (8-bit)]	# int ! Field: sun/reflect/ByteVectorImpl.pos
036   	incl    RDX	# int
038   	movl    R11, [RSI + #16 (8-bit)]	# compressed ptr ! Field: sun/reflect/ByteVectorImpl.data
03c   	movl    [RSI + #12 (8-bit)], RDX	# int ! Field: sun/reflect/ByteVectorImpl.pos
03f   	movl    R10, [R11 + #12 (8-bit)]	# range
043   	NullCheck R11
043
043   B2: #	B5 B3 &lt;- B1  Freq: 0.999999
043   	cmpl    RDX, R10
046   	jge,s   B5  P=0.002594 C=8480.000000
046
048   B3: #	B8 B4 &lt;- B6 B2  Freq: 0.999999
048   	movl    RSI, #-28	# int
04d   	movl    R8, [R11 + #12 (8-bit)]	# range
051   	cmpl    RDX, R8	# unsigned
054   	jnb,us  B8  P=0.000001 C=-1.000000
054
056   B4: #	N116 &lt;- B3  Freq: 0.999998
056   	movslq  R10, RDX	# i2l
059   	movl    R8, [rsp + #4]	# spill
05e   	movb    [R11 + #16 + R10], R8	# byte
063   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

06e   	ret
06e
06f   B5: #	B10 B6 &lt;- B2  Freq: 0.00259435
06f   	call,static  sun.reflect.ByteVectorImpl::resize
        # sun.reflect.ByteVectorImpl::add @ bci:24  L[0]=RBP L[1]=rsp + #4
        # OopMap{rbp=Oop off=116}
074
074   B6: #	B3 B7 &lt;- B5  Freq: 0.0025943
        # Block is sole successor of call
074   	movl    R11, [RBP + #16 (8-bit)]	# compressed ptr ! Field: sun/reflect/ByteVectorImpl.data
078   	movl    RDX, [RBP + #12 (8-bit)]	# int ! Field: sun/reflect/ByteVectorImpl.pos
07b   	testl   R11, R11	# compressed ptr
07e   	jne,s   B3  P=0.999999 C=-1.000000
07e
080   B7: #	N116 &lt;- B6  Freq: 2.62875e-09
080   	movl    RBP, RDX	# spill
082   	movl    RSI, #-10	# int
087   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #4
        # OopMap{off=140}
08c   	int3	# ShouldNotReachHere
08c
091   B8: #	N116 &lt;- B3  Freq: 1.01328e-06
091   	movl    RBP, R11	# spill
094   	movl    [rsp + #0], RDX	# spill
097   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:36  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #4
        # OopMap{rbp=NarrowOop off=156}
09c   	int3	# ShouldNotReachHere
09c
0a1   B9: #	N116 &lt;- B1  Freq: 1.01328e-06
0a1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
0a7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:15  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=172}
0ac   	int3	# ShouldNotReachHere
0ac
0b1   B10: #	N116 &lt;- B5  Freq: 2.59435e-08
0b1   	# exception oop is in rax; no code emitted
0b1   	movq    RSI, RAX	# spill
0b4   	addq    rsp, 32	# Destroy frame
	popq   rbp

0b9   	jmp     rethrow_stub
0b9

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933088626432'/>
<opto_assembly compile_id='414'>
{method}
 - this oop:          0x00007f44cd1745c8
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase&apos;
 - constants:         0x00007f44cd173dc0 constant pool [137] {0x00007f44cd173dc0} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase&apos; cache=0x00007f44cd1746a0
 - access:            0xc1000001  public 
 - name:              &apos;newEpoch&apos;
 - signature:         &apos;(Lorg/openjdk/jcstress/infra/runners/StateHolder;)V&apos;
 - max stack:         7
 - max locals:        10
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef7f0: 0xbb000000 i2c: 0x00007f44b9145fa0 c2i: 0x00007f44b91460de c2iUV: 0x00007f44b91460b1
 - compiled entry     0x00007f44b930bd80
 - code size:         275
 - code start:        0x00007f44cd1743f8
 - code end (excl):   0x00007f44cd17450b
 - method data:       0x00007f44cd177290
 - checked ex length: 0
 - linenumber start:  0x00007f44cd17450b
 - localvar length:   12
 - localvar start:    0x00007f44cd174534
 - compiled code: nmethod   4174  401       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch (275 bytes)
#
#  void ( org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase:NotNull *, org/openjdk/jcstress/infra/runners/StateHolder * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase:NotNull *
#r016 rdx:rdx   : parm 1: org/openjdk/jcstress/infra/runners/StateHolder *
# -- Old rsp -- Framesize: 144 --
#r191 rsp+140: in_preserve
#r190 rsp+136: return address
#r189 rsp+132: in_preserve
#r188 rsp+128: saved fp register
#r187 rsp+124: pad2, stack alignment
#r186 rsp+120: pad2, stack alignment
#r185 rsp+116: Fixed slot 1
#r184 rsp+112: Fixed slot 0
#r219 rsp+108: spill
#r218 rsp+104: spill
#r217 rsp+100: spill
#r216 rsp+96: spill
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N3154: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B218 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (528 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #128	# Create frame

02f   	movq    [rsp + #8], RSI	# spill
034   	movl    RSI, #-10	# int
039   	movl    RBP, [RDX + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
03c   	NullCheck RDX
03c
03c   B2: #	B219 B3 &lt;- B1  Freq: 0.999999
03c   	movl    R11, narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c1100f0:Constant:exact *	# compressed klass ptr
042   	movl    RSI, #-12	# int
047   	decode_klass_not_null R8,R11
055   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
059   	NullCheck RBP
059
059   B3: #	B209 B4 &lt;- B2  Freq: 0.999998
059   	decode_heap_oop_not_null R10,RBP
05c   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f448c10a560:Constant:exact *	# compressed klass ptr
063   	jne,u  B209  P=0.000000 C=-1.000000
063
069   B4: #	B32 B5 &lt;- B3  Freq: 0.999998
069   	movq    [rsp + #16], R8	# spill
06e   	movq    [rsp + #72], RDX	# spill
073   	# checkcastPP of R10
073   	movl    R11, [R10 + #12 (8-bit)]	# range
077   	movl    [rsp + #32], R11	# spill
07c   	movq    [rsp + #24], R10	# spill
081   	addl    R11, #-3	# int
085   	movl    [rsp + #0], R11	# spill
089   	movl    R10, [rsp + #32]	# spill
08e   	decl    R10	# int
091   	movl    [rsp + #4], R10	# spill
096   	movl    R11, [rsp + #32]	# spill
09b   	testl   R11, R11
09e   	jle     B32  P=0.000538 C=178496.000000
09e
0a4   B5: #	B175 B6 &lt;- B4  Freq: 0.99946
0a4   	movl    RSI, #-122	# int
0a9   	testl  R11, R11	# unsigned
0ac   	jbe,u  B175  P=0.000001 C=-1.000000
0ac
0b2   B6: #	B175 B7 &lt;- B5  Freq: 0.999459
0b2   	movl    R11, [rsp + #4]	# spill
0b7   	cmpl    R11, [RSP + #32 (32-bit)]	# unsigned
0bc   	jnb,u  B175  P=0.000001 C=-1.000000
0bc
0c2   B7: #	B20 &lt;- B6  Freq: 0.999458
0c2   	movl    R11, #1	# int
0c8   	xorl    R10, R10	# int
0cb   	movl    R9, #3	# int
0d1   	movl    R8, #4	# int
0d7   	xorl    RBX, RBX	# int
0d9   	movl    [rsp + #96], R11	# spill
0de   	movl    [rsp + #92], R10	# spill
0e3   	movl    [rsp + #100], R9	# spill
0e8   	movl    [rsp + #104], R8	# spill
0ed   	jmp     B20
0ed
0f2   B8: #	B171 B9 &lt;- B29 B31  top-of-loop Freq: 2.54898
0f2   	movl    R11, [rsp + #108]	# spill
0f7   	cmpl    RSI, R11	# unsigned
0fa   	jnb,u  B171  P=0.000001 C=-1.000000
0fa
100   B9: #	B99 B10 &lt;- B8  Freq: 2.54898
100   	movl    R11, [rsp + #48]	# spill
105   	movl    R8, [R11 + #16 + RSI &lt;&lt; #2]	# compressed ptr
10a   	testl   R8, R8	# compressed ptr
10d   	je     B99  P=0.000041 C=24122.000000
10d
113   B10: #	B139 B11 &lt;- B9  Freq: 2.54887
113   	movl    R13, [R8 + #8 (8-bit)]	# compressed klass ptr
117   	decode_heap_oop_not_null RBP,R8
11a   	movl    R11, RAX	# spill
11d   	incl    R11	# int
120   	cmpl    R13, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f44940c44c0:Constant:exact *	# compressed klass ptr
127   	jne,u  B139  P=0.000001 C=-1.000000
127
12d   B11: #	B173 B12 &lt;- B10  Freq: 2.54887
12d   	# checkcastPP of RBP
12d   	andl    R11, RCX	# int
130   	movl    R14, R11	# spill
133   	movl    R8, [RBP + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
13a   	cmpq    RBP, [RSP + #56 (32-bit)]	# ptr
13f   	je,u  B173  P=0.000000 C=22205.000000
13f
145   B12: #	B129 B13 &lt;- B11  Freq: 2.54887
145   	movl    R11, [RBP + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
14c   	movl    RBP, R14	# spill
14f   	incl    RBP	# int
151   	movl    R13, RBP	# spill
154   	cmpl    R8, R9
157   	jne     B129  P=0.000901 C=22205.000000
157
15d   B13: #	B129 B14 &lt;- B12  Freq: 2.54658
15d   	cmpl    R11, RDI
160   	jne     B129  P=0.000496 C=22184.000000
160
166   B14: #	B15 &lt;- B13 B170 B135  Freq: 2.54887
166   	movl    [rsp + #52], RSI	# spill
      	nop 	# 6 bytes pad for loops and calls

170   B15: #	B217 B16 &lt;- B30 B14  top-of-loop Freq: 1825.8
170   	movl    R8, [R10 + #12 (8-bit)]	# range
174   	NullCheck R10
174
174   B16: #	B137 B17 &lt;- B15  Freq: 1825.8
174   	movl    R11, [rsp + #52]	# spill
179   	cmpl    R11, R8	# unsigned
17c   	jnb,u  B137  P=0.000001 C=-1.000000
17c
182   B17: #	B18 &lt;- B16  Freq: 1825.8
182   	incq    [R10 + #16 + R11 &lt;&lt; #3]	# long
187
187   B18: #	B33 B19 &lt;- B17 B196 B106  Freq: 1825.87
187   	movl    R11, [rsp + #36]	# spill
18c   	cmpl    R11, [RSP + #32 (32-bit)]
191   	jge     B33	# loop end  P=0.000538 C=178400.000000
191
197   B19: #	B20 &lt;- B18  Freq: 1824.89
197   	movl    RBX, R11	# spill
197
19a   B20: #	B213 B21 &lt;- B7 B19 	Loop: B20-B19 inner  Freq: 1825.89
19a   	movl    R10, RBX	# spill
19d   	incl    R10	# int
1a0   	movl    [rsp + #36], R10	# spill
1a5   	movq    R10, [rsp + #24]	# spill
1aa   	movl    R10, [R10 + #16 + RBX &lt;&lt; #2]	# compressed ptr
1af   	movq    R11, [rsp + #8]	# spill
1b4   	movl    R11, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.counter
1b8   	movl    RDX, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1bc   	NullCheck R10
1bc
1bc   B21: #	B214 B22 &lt;- B20  Freq: 1825.89
1bc   	decode_heap_oop_not_null R8,R11
1bf   	movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
1c3   	NullCheck R11
1c3
1c3   B22: #	B138 B23 &lt;- B21  Freq: 1825.89
1c3   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/util/OpenAddressHashCounter: 0x00007f448c10a6b0:Constant:exact *	# compressed klass ptr
1ca   	jne,u  B138  P=0.000001 C=-1.000000
1ca
1d0   B23: #	B215 B24 &lt;- B22  Freq: 1825.89
1d0   	# checkcastPP of R8
1d0   	movq    [rsp + #40], R8	# spill
1d5   	movl    RCX, [R8 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.length
1d9   	decl    RCX	# int
1db   	movl    R9, [RDX + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1e2   	NullCheck RDX
1e2
1e2   B24: #	B216 B25 &lt;- B23  Freq: 1825.88
1e2   	movl    RDI, [RDX + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1e8   	movl    R11, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.keys
1ec   	movl    [rsp + #48], R11	# spill
1f1   	movl    R11, R9	# spill
1f4   	sall    R11, #5
1f8   	subl    R11, R9	# int
1fb   	addl    R11, RDI	# int
1fe   	andl    R11, RCX	# int
201   	movl    [rsp + #52], R11	# spill
206   	movl    R10, [rsp + #48]	# spill
20b   	movl    R11, [R10 + #12 (8-bit)]	# range
20f   	NullCheck R10
20f
20f   B25: #	B136 B26 &lt;- B24  Freq: 1825.88
20f   	movl    [rsp + #108], R11	# spill
214   	movl    RSI, [rsp + #52]	# spill
218   	incl    RSI	# int
21a   	andl    RSI, RCX	# int
21c   	movl    RAX, RSI	# spill
21e   	incl    RAX	# int
220   	andl    RAX, RCX	# int
222   	movl    R11, [rsp + #52]	# spill
227   	cmpl    R11, [RSP + #108 (32-bit)]	# unsigned
22c   	jnb,u  B136  P=0.000001 C=-1.000000
22c
232   B26: #	B101 B27 &lt;- B25  Freq: 1825.88
232   	decode_heap_oop_not_null RBP,RDX
235   	movq    [rsp + #56], RBP	# spill
23a   	movl    R11, [R10 + #16 + R11 &lt;&lt; #2]	# compressed ptr
23f   	decode_heap_oop_not_null RBP,R11
242   	testl   R11, R11	# compressed ptr
245   	je     B101  P=0.000041 C=24122.000000
245
24b   B27: #	B142 B28 &lt;- B26  Freq: 1825.8
24b   	movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
24f   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f44940c44c0:Constant:exact *	# compressed klass ptr
256   	jne,u  B142  P=0.000001 C=-1.000000
256
25c   B28: #	B145 B29 &lt;- B27  Freq: 1825.8
25c   	# checkcastPP of RBP
25c   	movq    R10, [rsp + #40]	# spill
261   	movl    R10, [R10 + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
265   	cmpq    RBP, [RSP + #56 (32-bit)]	# ptr
26a   	je,u  B145  P=0.000000 C=22205.000000
26a
270   B29: #	B8 B30 &lt;- B28  Freq: 1825.8
270   	movl    R8, [RBP + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
277   	movl    R11, [RBP + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
27e   	cmpl    R11, R9
281   	jne     B8  P=0.000901 C=22205.000000
281
287   B30: #	B15 B31 &lt;- B29  Freq: 1824.16
287   	cmpl    R8, RDI
28a   	je     B15  P=0.999504 C=22184.000000
28a
290   B31: #	B8 &lt;- B30  Freq: 0.90451
290   	jmp     B8
290
295   B32: #	B33 &lt;- B4  Freq: 0.000537826
295   	movl    R11, #1	# int
29b   	movl    [rsp + #96], R11	# spill
29b
2a0   B33: #	B107 B34 &lt;- B18 B32  Freq: 0.982516
2a0   	movq    R10, [rsp + #72]	# spill
2a5   	movzbl  R10, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
2aa   	MEMBAR-acquire ! (empty encoding)
2aa   	movl    R11, #-2147483648	# int
2b0   	testl   R10, R10
2b3   	jne     B107  P=0.062500 C=96.000000
2b3
2b9   B34: #	B35 &lt;- B33  Freq: 0.921108
2b9   	movl    R8, [rsp + #32]	# spill
2be   	movl    [rsp + #72], R8	# spill
2be
2c3   B35: #	B56 B36 &lt;- B34 B108  Freq: 0.982515
2c3   	movl    R8, [rsp + #4]	# spill
2c8   	cmpl    R8, [RSP + #0 (32-bit)]
2cc   	movl    R10, [rsp + #0]	# spill
2d0   	cmovll R10, R11	# signed, int
2d4   	movl    R11, [rsp + #32]	# spill
2d9   	testl   R11, R11
2dc   	jle     B56  P=0.000538 C=178496.000000
2dc
2e2   B36: #	B176 B37 &lt;- B35  Freq: 0.981987
2e2   	movl    RSI, #-10	# int
2e7   	testl  R11, R11	# unsigned
2ea   	jbe,u  B176  P=0.000001 C=-1.000000
2ea
2f0   B37: #	B176 B38 &lt;- B36  Freq: 0.981986
2f0   	movl    R11, [rsp + #4]	# spill
2f5   	cmpl    R11, [RSP + #32 (32-bit)]	# unsigned
2fa   	jnb,u  B176  P=0.000001 C=-1.000000
2fa
300   B38: #	B211 B39 &lt;- B37  Freq: 0.981985
300   	movq    R11, [rsp + #24]	# spill
305   	movl    R8, [R11 + #16 (8-bit)]	# compressed ptr
309   	movl    R11, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
30d   	NullCheck R8
30d
30d   B39: #	B212 B40 &lt;- B38  Freq: 0.981984
30d   	movl    [R11 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
314   	NullCheck R11
314
314   B40: #	B177 B41 &lt;- B39  Freq: 0.981983
314   	movl    [R11 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
31b   	cmpl    R10, #1
31f   	jle     B177  P=0.000001 C=-1.000000
31f
325   B41: #	B42 &lt;- B40  Freq: 0.981982
325   	movl    RCX, #1	# int
      	nop 	# 6 bytes pad for loops and calls

330   B42: #	B211 B43 &lt;- B41 B50 	Loop: B42-B50 inner main of N475 Freq: 1798.78
330   	movq    R11, [rsp + #24]	# spill
335   	movl    R11, [R11 + #16 + RCX &lt;&lt; #2]	# compressed ptr
33a   	movl    R8, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
33e   	NullCheck R11
33e
33e   B43: #	B212 B44 &lt;- B42  Freq: 1798.78
33e   	movslq  R11, RCX	# i2l
341   	addl    RCX, #4	# int
344   	movl    [R8 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
34b   	NullCheck R8
34b
34b   B44: #	B211 B45 &lt;- B43  Freq: 1798.78
34b   	movl    [R8 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
352   	movq    R8, [rsp + #24]	# spill
357   	movl    R9, [R8 + #20 + R11 &lt;&lt; #2]	# compressed ptr
35c   	movl    R8, [R9 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
360   	NullCheck R9
360
360   B45: #	B212 B46 &lt;- B44  Freq: 1798.78
360   	movl    [R8 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
367   	NullCheck R8
367
367   B46: #	B211 B47 &lt;- B45  Freq: 1798.78
367   	movl    [R8 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
36e   	movq    R8, [rsp + #24]	# spill
373   	movl    R9, [R8 + #24 + R11 &lt;&lt; #2]	# compressed ptr
378   	movl    R8, [R9 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
37c   	NullCheck R9
37c
37c   B47: #	B212 B48 &lt;- B46  Freq: 1798.77
37c   	movl    [R8 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
383   	NullCheck R8
383
383   B48: #	B211 B49 &lt;- B47  Freq: 1798.77
383   	movl    [R8 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
38a   	movq    R8, [rsp + #24]	# spill
38f   	movl    R8, [R8 + #28 + R11 &lt;&lt; #2]	# compressed ptr
394   	movl    R8, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
398   	NullCheck R8
398
398   B49: #	B212 B50 &lt;- B48  Freq: 1798.77
398   	movl    [R8 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
39f   	NullCheck R8
39f
39f   B50: #	B42 B51 &lt;- B49  Freq: 1798.77
39f   	movl    [R8 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
3a6   	cmpl    RCX, R10
3a9   	jl,s   B42	# loop end  P=0.999462 C=178400.000000
3a9
3ab   B51: #	B56 B52 &lt;- B177 B50  Freq: 0.967402
3ab   	cmpl    RCX, [RSP + #32 (32-bit)]
3af   	jge,s   B56  P=0.500000 C=-1.000000
3af
3b1   B52: #	B53 &lt;- B51  Freq: 0.483701
3b1   	# castII of RCX
      	nop 	# 3 bytes pad for loops and calls

3b4   B53: #	B211 B54 &lt;- B52 B55 	Loop: B53-B55 inner post of N2053 Freq: 0.9674
3b4   	movq    R10, [rsp + #24]	# spill
3b9   	movl    R10, [R10 + #16 + RCX &lt;&lt; #2]	# compressed ptr
3be   	movl    R11, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
3c2   	NullCheck R10
3c2
3c2   B54: #	B212 B55 &lt;- B53  Freq: 0.967399
3c2   	movl    [R11 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
3c9   	NullCheck R11
3c9
3c9   B55: #	B53 B56 &lt;- B54  Freq: 0.967398
3c9   	movl    [R11 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
3d0   	incl    RCX	# int
3d2   	cmpl    RCX, [RSP + #32 (32-bit)]
3d6   	jl,s   B53	# loop end  P=0.500000 C=178400.000000
3d6
3d8   B56: #	B109 B57 &lt;- B55 B51 B35  Freq: 0.967928
3d8   	movl    R10, [rsp + #72]	# spill
3dd   	cmpl    R10, [RSP + #32 (32-bit)]
3e2   	jg     B109  P=0.062500 C=96.000000
3e2
3e8   B57: #	B81 B58 &lt;- B56  Freq: 0.907433
3e8   	movl    R11, [rsp + #32]	# spill
3ed   	testl   R11, R11
3f0   	jle     B81  P=0.000543 C=173214.000000
3f0
3f6   B58: #	B179 B59 &lt;- B57  Freq: 0.90694
3f6   	testl  R11, R11	# unsigned
3f9   	jbe,u  B179  P=0.000001 C=-1.000000
3f9
3ff   B59: #	B178 B60 &lt;- B123 B163 B58  Freq: 0.9674
3ff   	movl    [rsp + #0], R11	# spill
403   	decl    R11	# int
406   	movl    [rsp + #4], R11	# spill
40b   	cmpl    R11, [RSP + #0 (32-bit)]	# unsigned
40f   	jnb,u  B178  P=0.000001 C=-1.000000
40f
415   B60: #	B147 B61 &lt;- B59  Freq: 0.967399
415   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c1100f0:Constant:exact *	# ptr
41f   	# TLS is in R15
41f   	movq    R11, [R15 + #112 (8-bit)]	# ptr
423   	movq    R10, R11	# spill
426   	addq    R10, #280	# ptr
42d   	movq    R8, [rsp + #24]	# spill
432   	movl    RBP, [R8 + #16 (8-bit)]	# compressed ptr
436   	movq    RDI, R11	# spill
439   	addq    RDI, #16	# ptr
43d   	# TLS is in R15
43d   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
444   	jnb,u  B147  P=0.000100 C=-1.000000
444
44a   B61: #	B62 &lt;- B60  Freq: 0.967303
44a   	# TLS is in R15
44a   	movq    [R15 + #112 (8-bit)], R10	# ptr
44e   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
456   	movq    R10, [rsp + #16]	# spill
45b   	movq    R10, [R10 + #176 (32-bit)]	# ptr
462   	movq    [R11], R10	# ptr
465   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c1100f0:Constant:exact *	# compressed klass ptr
46d   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
471   	movl    RCX, #33	# long (unsigned 32-bit)
476   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
480
480   B62: #	B143 B63 &lt;- B148 B61  Freq: 0.967399
480   	decode_heap_oop_not_null R10,RBP
483   	
483   	MEMBAR-storestore (empty encoding)
483   	# checkcastPP of R11
483   	movq    RCX, R11	# spill
486   	encode_heap_oop_not_null R11,R11
58e   	movl    [RBP + #12 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
592   	NullCheck RBP
592
592   B63: #	B66 B64 &lt;- B62  Freq: 0.967398
592   	movq    R10, R10	# ptr -&gt; long
592   	shrq    R10, #9
596   	movq    R11, 0x00007f44cd651000	# ptr
5a0   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
5a4   	movl    R10, [rsp + #4]	# spill
5a9   	cmpl    R10, #1
5ad   	jg,s   B66  P=0.999999 C=-1.000000
5ad
5af   B64: #	B74 &lt;- B63  Freq: 9.80244e-07
5af   	movl    R8, #1	# int
5b5   	jmp     B74
      	nop 	# 6 bytes pad for loops and calls

5c0   B65: #	B66 &lt;- B72  top-of-loop Freq: 1774.96
5c0   	movl    [rsp + #96], R10	# spill
5c0
5c5   B66: #	B95 B67 &lt;- B63 B65 	Loop: B66-B65 inner main of N817 Freq: 1775.93
5c5   	# TLS is in R15
5c5   	movq    R10, [R15 + #112 (8-bit)]	# ptr
5c9   	movq    R9, R10	# spill
5cc   	addq    R9, #280	# ptr
5d3   	movl    R8, [rsp + #96]	# spill
5d8   	addl    R8, #2	# int
5dc   	movl    [rsp + #32], R8	# spill
5e1   	movq    R11, [rsp + #24]	# spill
5e6   	movl    R8, [rsp + #96]	# spill
5eb   	movl    RBP, [R11 + #16 + R8 &lt;&lt; #2]	# compressed ptr
5f0   	movslq  R11, [RSP + #96 (32-bit)]	# int -&gt; long
5f5   	movq    R8, [rsp + #24]	# spill
5fa   	movl    R11, [R8 + #20 + R11 &lt;&lt; #2]	# compressed ptr
5ff   	movl    [rsp + #36], R11	# spill
604   	decode_heap_oop_not_null R11,R11
604   	movq    [rsp + #40], R11	# spill
609   	# TLS is in R15
609   	cmpq    R9, [R15 + #128 (32-bit)]	# raw ptr
610   	jnb,u  B95  P=0.000100 C=-1.000000
610
616   B67: #	B68 &lt;- B66  Freq: 1775.75
616   	movq    RDI, R10	# spill
619   	addq    RDI, #16	# ptr
61d   	# TLS is in R15
61d   	movq    [R15 + #112 (8-bit)], R9	# ptr
621   	PREFETCHNTA [R9 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
629   	movq    R11, [rsp + #16]	# spill
62e   	movq    R11, [R11 + #176 (32-bit)]	# ptr
635   	movq    [R10], R11	# ptr
638   	movl    [R10 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c1100f0:Constant:exact *	# compressed klass ptr
640   	movl    [R10 + #12 (8-bit)], R12	# int (R12_heapbase==0)
644   	movl    RCX, #33	# long (unsigned 32-bit)
649   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
653
653   B68: #	B143 B69 &lt;- B96 B67  Freq: 1775.93
653   	decode_heap_oop_not_null R8,RBP
656   	movl    R11, [rsp + #96]	# spill
65b   	incl    R11	# int
65e   	
65e   	MEMBAR-storestore (empty encoding)
65e   	movq    RCX, R10	# spill
661   	# checkcastPP of RCX
661   	encode_heap_oop_not_null R9,RCX
76c   	movl    [RBP + #12 (8-bit)], R9	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
770   	NullCheck RBP
770
770   B69: #	B97 B70 &lt;- B68  Freq: 1775.93
770   	movq    R10, R8	# ptr -&gt; long
773   	shrq    R10, #9
777   	movq    R8, 0x00007f44cd651000	# ptr
781   	movb    [R8 + R10], R12	# short/char (R12_heapbase==0)
785   	# TLS is in R15
785   	movq    R8, [R15 + #112 (8-bit)]	# ptr
789   	movq    RDI, R8	# spill
78c   	addq    RDI, #16	# ptr
790   	movq    R10, R8	# spill
793   	addq    R10, #280	# ptr
79a   	# TLS is in R15
79a   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
7a1   	jnb,u  B97  P=0.000100 C=-1.000000
7a1
7a7   B70: #	B71 &lt;- B69  Freq: 1775.75
7a7   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
7af   	# TLS is in R15
7af   	movq    [R15 + #112 (8-bit)], R10	# ptr
7b3   	movq    R10, [rsp + #16]	# spill
7b8   	movq    R10, [R10 + #176 (32-bit)]	# ptr
7bf   	movq    [R8], R10	# ptr
7c2   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c1100f0:Constant:exact *	# compressed klass ptr
7ca   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
7ce   	movl    RCX, #33	# long (unsigned 32-bit)
7d3   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
7dd
7dd   B71: #	B143 B72 &lt;- B98 B70  Freq: 1775.93
7dd   	
7dd   	MEMBAR-storestore (empty encoding)
7dd   	# checkcastPP of R8
7dd   	movq    RCX, R8	# spill
7e0   	movl    R10, [rsp + #36]	# spill
7e5   	testl   R10, R10	# compressed ptr
7e8   	je     B143  P=0.000001 C=-1.000000
7e8
7ee   B72: #	B65 B73 &lt;- B71  Freq: 1775.92
7ee   	encode_heap_oop_not_null R10,R8
8f9   	movq    R11, [rsp + #40]	# spill
8fe   	movq    R11, R11	# ptr -&gt; long
8fe   	movl    R9, [rsp + #36]	# spill
903   	movl    [R9 + #12 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
907   	shrq    R11, #9
90b   	movq    R10, 0x00007f44cd651000	# ptr
915   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
919   	movl    R10, [rsp + #32]	# spill
91e   	cmpl    R10, [RSP + #4 (32-bit)]
923   	jl     B65	# loop end  P=0.999457 C=173120.000000
923
929   B73: #	B74 &lt;- B72  Freq: 0.963795
929   	movl    R8, R10	# spill
929
92c   B74: #	B81 B75 &lt;- B64 B73  Freq: 0.963796
92c   	cmpl    R8, [RSP + #0 (32-bit)]
930   	jge     B81  P=0.500000 C=-1.000000
930
936   B75: #	B76 &lt;- B74  Freq: 0.481898
936   	# castII of R8
      	nop 	# 2 bytes pad for loops and calls

938   B76: #	B159 B77 &lt;- B75 B80 	Loop: B76-B80 inner post of N2065 Freq: 0.963795
938   	movq    R10, [rsp + #24]	# spill
93d   	movl    R10, [R10 + #16 + R8 &lt;&lt; #2]	# compressed ptr
942   	movl    [rsp + #4], R10	# spill
947   	movl    RBP, R8	# spill
94a   	# TLS is in R15
94a   	movq    R11, [R15 + #112 (8-bit)]	# ptr
94e   	movq    R10, R11	# spill
951   	addq    R10, #280	# ptr
958   	movq    RDI, R11	# spill
95b   	addq    RDI, #16	# ptr
95f   	# TLS is in R15
95f   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
966   	jnb,u  B159  P=0.000100 C=-1.000000
966
96c   B77: #	B78 &lt;- B76  Freq: 0.963698
96c   	# TLS is in R15
96c   	movq    [R15 + #112 (8-bit)], R10	# ptr
970   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
978   	movq    R10, [rsp + #16]	# spill
97d   	movq    R10, [R10 + #176 (32-bit)]	# ptr
984   	movq    [R11], R10	# ptr
987   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c1100f0:Constant:exact *	# compressed klass ptr
98f   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
993   	movl    RCX, #33	# long (unsigned 32-bit)
998   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
9a2
9a2   B78: #	B181 B79 &lt;- B160 B77  Freq: 0.963795
9a2   	incl    RBP	# int
9a4   	
9a4   	MEMBAR-storestore (empty encoding)
9a4   	# checkcastPP of R11
9a4   	movl    RCX, [rsp + #4]	# spill
9a8   	testl   RCX, RCX	# compressed ptr
9aa   	je     B181  P=0.000001 C=-1.000000
9aa
9b0   B79: #	B81 B80 &lt;- B78  Freq: 0.963794
9b0   	decode_heap_oop_not_null R10,RCX
9b3   	encode_heap_oop_not_null R8,R11
abe   	movl    [RCX + #12 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
ac2   	movq    R10, R10	# ptr -&gt; long
ac2   	shrq    R10, #9
ac6   	movq    R11, 0x00007f44cd651000	# ptr
ad0   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
ad4   	cmpl    RBP, [RSP + #0 (32-bit)]
ad7   	jge,s   B81	# loop end  P=0.500000 C=173120.000000
ad7
ad9   B80: #	B76 &lt;- B79  Freq: 0.481897
ad9   	movl    R8, RBP	# spill
adc   	jmp     B76
adc
ae1   B81: #	B149 B82 &lt;- B79 B74 B122 B161 B57  Freq: 0.96432
ae1   	# TLS is in R15
ae1   	movq    RDX, [R15 + #112 (8-bit)]	# ptr
ae5   	movq    R9, [rsp + #8]	# spill
aea   	movl    R10, [R9 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.version
aee   	movl    [rsp + #32], R10	# spill
af3   	movq    R10, RDX	# spill
af6   	addq    R10, #48	# ptr
afa   	movl    R8, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f448c109ff0:Constant:exact *	# compressed klass ptr
b00   	decode_klass_not_null R11,R8
b0e   	# TLS is in R15
b0e   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
b15   	jnb,u  B149  P=0.000100 C=-1.000000
b15
b1b   B82: #	B83 &lt;- B81  Freq: 0.964224
b1b   	# TLS is in R15
b1b   	movq    [R15 + #112 (8-bit)], R10	# ptr
b1f   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
b27   	movq    R10, [R11 + #176 (32-bit)]	# ptr
b2e   	movq    [RDX], R10	# ptr
b31   	movl    [RDX + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f448c109ff0:Constant:exact *	# compressed klass ptr
b38   	movl    [RDX + #12 (8-bit)], R12	# int (R12_heapbase==0)
b3c   	movq    [RDX + #16 (8-bit)], R12	# long (R12_heapbase==0)
b40   	movq    [RDX + #24 (8-bit)], R12	# long (R12_heapbase==0)
b44   	movq    [RDX + #32 (8-bit)], R12	# long (R12_heapbase==0)
b48   	movq    [RDX + #40 (8-bit)], R12	# long (R12_heapbase==0)
b48
b4c   B83: #	B220 B84 &lt;- B150 B82  Freq: 0.96432
b4c   	movl    R10, [R9 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
b50   	
b50   	MEMBAR-storestore (empty encoding)
b50   	# checkcastPP of RDX
b50   	movzbl  R11, [R10 + #32 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/Control.isStopped
b55   	NullCheck R10
b55
b55   B84: #	B151 B85 &lt;- B83  Freq: 0.964319
b55   	MEMBAR-acquire ! (empty encoding)
b55   	movq    R10, [rsp + #24]	# spill
b5a   	encode_heap_oop_not_null R10,R10
c62   	movl    [RDX + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/infra/runners/StateHolder.countWorkers
c69   	movl    R9, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f4494023930:Constant:exact *	# compressed klass ptr
c6f   	decode_klass_not_null RBP,R9
c7e   	movl    [RDX + #24 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
c82   	movb    [RDX + #16 (8-bit)], R11	# byte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
c86   	movq    R10, RDX	# ptr -&gt; long
c89   	shrq    R10, #9
c8d   	movq    R11, 0x00007f44cd651000	# ptr
c97   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
c9b   	# TLS is in R15
c9b   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
c9f   	movq    R10, RAX	# spill
ca2   	addq    R10, #16	# ptr
ca6   	# TLS is in R15
ca6   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
cad   	jnb,u  B151  P=0.000100 C=-1.000000
cad
cb3   B85: #	B86 &lt;- B84  Freq: 0.964223
cb3   	# TLS is in R15
cb3   	movq    [R15 + #112 (8-bit)], R10	# ptr
cb7   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
cbf   	movq    R10, [RBP + #176 (32-bit)]	# ptr
cc6   	movq    [RAX], R10	# ptr
cc9   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f4494023930:Constant:exact *	# compressed klass ptr
cd0   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
cd0
cd4   B86: #	B153 B87 &lt;- B152 B85  Freq: 0.964319
cd4   	
cd4   	MEMBAR-storestore (empty encoding)
cd4   	# checkcastPP of RAX
cd4   	encode_heap_oop_not_null R10,RAX
ddf   	MEMBAR-release ! (empty encoding)
ddf   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
de6   	lock addl [rsp + #0], 0	! membar_volatile
deb   	movq    R11, RDX	# ptr -&gt; long
dee   	movl    [RDX + #32 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
df2   	shrq    R11, #9
df6   	movq    R10, 0x00007f44cd651000	# ptr
e00   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
e04   	# TLS is in R15
e04   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
e08   	movq    R10, RAX	# spill
e0b   	addq    R10, #16	# ptr
e0f   	# TLS is in R15
e0f   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
e16   	jnb,u  B153  P=0.000100 C=-1.000000
e16
e1c   B87: #	B88 &lt;- B86  Freq: 0.964223
e1c   	# TLS is in R15
e1c   	movq    [R15 + #112 (8-bit)], R10	# ptr
e20   	movq    R11, [RBP + #176 (32-bit)]	# ptr
e27   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
e2f   	movq    [RAX], R11	# ptr
e32   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f4494023930:Constant:exact *	# compressed klass ptr
e39   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
e39
e3d   B88: #	B155 B89 &lt;- B154 B87  Freq: 0.964319
e3d   	movl    R10, [rsp + #32]	# spill
e42   	decode_heap_oop_not_null RSI,R10
e45   	
e45   	MEMBAR-storestore (empty encoding)
e45   	# checkcastPP of RAX
e45   	encode_heap_oop_not_null R11,RAX
f50   	MEMBAR-release ! (empty encoding)
f50   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
f57   	lock addl [rsp + #0], 0	! membar_volatile
f5c   	movl    [RDX + #28 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
f60   	movq    R10, RDX	# ptr -&gt; long
f63   	shrq    R10, #9
f67   	movq    R11, 0x00007f44cd651000	# ptr
f71   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
f75   	# TLS is in R15
f75   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
f79   	movq    R10, RAX	# spill
f7c   	addq    R10, #16	# ptr
f80   	# TLS is in R15
f80   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
f87   	jnb,u  B155  P=0.000100 C=-1.000000
f87
f8d   B89: #	B90 &lt;- B88  Freq: 0.964223
f8d   	# TLS is in R15
f8d   	movq    [R15 + #112 (8-bit)], R10	# ptr
f91   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
f99   	movq    R10, [RBP + #176 (32-bit)]	# ptr
fa0   	movq    [RAX], R10	# ptr
fa3   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f4494023930:Constant:exact *	# compressed klass ptr
faa   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
faa
fae   B90: #	B157 B91 &lt;- B156 B89  Freq: 0.964319
fae   	
fae   	MEMBAR-storestore (empty encoding)
fae   	# checkcastPP of RAX
fae   	MEMBAR-release ! (empty encoding)
fae   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
fb5   	encode_heap_oop_not_null R11,RAX
10c0   	lock addl [rsp + #0], 0	! membar_volatile
10c5   	movq    R10, RDX	# ptr -&gt; long
10c8   	movl    [RDX + #36 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
10cc   	shrq    R10, #9
10d0   	movq    R11, 0x00007f44cd651000	# ptr
10da   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
10de   	# TLS is in R15
10de   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
10e2   	movq    R10, RAX	# spill
10e5   	addq    R10, #16	# ptr
10e9   	# TLS is in R15
10e9   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
10f0   	jnb,u  B157  P=0.000100 C=-1.000000
10f0
10f6   B91: #	B92 &lt;- B90  Freq: 0.964223
10f6   	# TLS is in R15
10f6   	movq    [R15 + #112 (8-bit)], R10	# ptr
10fa   	movq    R11, [RBP + #176 (32-bit)]	# ptr
1101   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1109   	movq    [RAX], R11	# ptr
110c   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f4494023930:Constant:exact *	# compressed klass ptr
1113   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
1113
1117   B92: #	B180 B93 &lt;- B158 B91  Freq: 0.964319
1117   	
1117   	MEMBAR-storestore (empty encoding)
1117   	# checkcastPP of RAX
1117   	encode_heap_oop_not_null R11,RAX
1222   	MEMBAR-release ! (empty encoding)
1222   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
1229   	MEMBAR-volatile (unnecessary so empty encoding)
1229   	movq    R10, RDX	# ptr -&gt; long
122c   	shrq    R10, #9
1230   	movl    [RDX + #40 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
1234   	movq    R11, 0x00007f44cd651000	# ptr
123e   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
1242   	MEMBAR-release ! (empty encoding)
1242   	movb    [RDX + #18 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
1246   	MEMBAR-volatile (unnecessary so empty encoding)
1246   	MEMBAR-release ! (empty encoding)
1246   	movb    [RDX + #19 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
124a   	MEMBAR-volatile (unnecessary so empty encoding)
124a   	MEMBAR-release ! (empty encoding)
124a   	movb    [RDX + #17 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
124e   	MEMBAR-volatile (unnecessary so empty encoding)
124e   	MEMBAR-release ! (empty encoding)
124e   	movb    [RDX + #20 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1252   	lock addl [rsp + #0], 0	! membar_volatile
1257   	MEMBAR-release ! (empty encoding)
1257   	movl    R11, [rsp + #32]	# spill
125c   	testl   R11, R11	# compressed ptr
125f   	je     B180  P=0.000001 C=-1.000000
125f
1265   B93: #	B238 B94 &lt;- B92  Freq: 0.964318
      	nop 	# 2 bytes pad for loops and calls
1267   	call,static  java.util.concurrent.atomic.AtomicReference::set
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:271  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=4716}
126c
126c   B94: #	N3154 &lt;- B93  Freq: 0.964299
        # Block is sole successor of call
126c   	addq    rsp, 128	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

127a   	ret
127a
127b   B95: #	B239 B96 &lt;- B66  Freq: 0.177622
127b   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c1100f0:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
1287   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #24 L[6]=rsp + #24 L[7]=rsp + #0 L[8]=rsp + #96 L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [8]=Oop [24]=Oop [36]=NarrowOop [40]=Oop off=4748}
128c
128c   B96: #	B68 &lt;- B95  Freq: 0.177619
        # Block is sole successor of call
128c   	movq    R10, RAX	# spill
128f   	jmp     B68
128f
1294   B97: #	B240 B98 &lt;- B69  Freq: 0.177622
1294   	movl    RBP, R11	# spill
1297   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c1100f0:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
12a3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #24 L[6]=rsp + #24 L[7]=rsp + #0 L[8]=RBP L[9]=_ STK[0]=rsp + #36
        # OopMap{[8]=Oop [24]=Oop [36]=NarrowOop [40]=Oop off=4776}
12a8
12a8   B98: #	B71 &lt;- B97  Freq: 0.177619
        # Block is sole successor of call
12a8   	movq    R8, RAX	# spill
12ab   	jmp     B71
12ab
12b0   B99: #	B100 &lt;- B9  Freq: 0.000105744
12b0   	movl    R14, RSI	# spill
12b0
12b3   B100: #	B101 &lt;- B99 B165  Freq: 0.000105744
12b3   	movl    [rsp + #52], R14	# spill
12b3
12b8   B101: #	B236 B102 &lt;- B100 B182 B188 B26  Freq: 0.0758522
12b8   	movl    [rsp + #64], RBX	# spill
12bc   	movq    RSI, [rsp + #56]	# spill
12c1   	movq    RBP, [rsp + #8]	# spill
      	nop 	# 1 bytes pad for loops and calls
12c7   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::decouple
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:103  L[0]=rsp + #40 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #52 L[6]=_ L[7]=_ STK[0]=rsp + #48 STK[1]=rsp + #52
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #72 L[2]=rsp + #24 L[3]=rsp + #32 L[4]=rsp + #24 L[5]=rsp + #32 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [40]=Oop [48]=NarrowOop [72]=Oop off=4812}
12cc
12cc   B102: #	B183 B103 &lt;- B101  Freq: 0.0758507
        # Block is sole successor of call
12cc   	movq    R10, [rsp + #40]	# spill
12d1   	movl    RBP, [R10 + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
12d5   	movl    RSI, #-42	# int
12da   	movl    R11, [rsp + #48]	# spill
12df   	decode_heap_oop_not_null R11,R11
12df   	movl    R10, [rsp + #52]	# spill
12e4   	movl    RCX, [rsp + #108]	# spill
12e8   	cmpl    R10, RCX	# unsigned
12eb   	jnb,u  B183  P=0.000001 C=-1.000000
12eb
12f1   B103: #	B185 B104 &lt;- B102  Freq: 0.0758506
12f1   	movl    R10, [rsp + #48]	# spill
12f6   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
12fa   	cmpl    R10, narrowklass: precise klass [Ljava/lang/Object;: 0x00007f448c10d0c0:Constant:exact *	# compressed klass ptr
1301   	jne,u  B185  P=0.000001 C=-1.000000
1301
1307   B104: #	B221 B105 &lt;- B103  Freq: 0.0758505
1307   	encode_heap_oop R10,RAX
1392   	movslq  R8, [RSP + #52 (32-bit)]	# int -&gt; long
1397   	movl    RCX, [rsp + #48]	# spill
139b   	leaq    R11, [RCX + #16 + R8 &lt;&lt; #2]	# ptr idxscaleoffnarrow
13a0   	movq    R9, R11	# ptr -&gt; long
13a3   	movl    [R11], R10	# compressed ptr
13a6   	shrq    R9, #9
13aa   	movq    R10, 0x00007f44cd651000	# ptr
13b4   	movb    [R10 + R9], R12	# short/char (R12_heapbase==0)
13b8   	movl    R11, [RBP + #12 (8-bit)]	# range
13bc   	NullCheck RBP
13bc
13bc   B105: #	B184 B106 &lt;- B104  Freq: 0.0758504
13bc   	movl    R10, [rsp + #52]	# spill
13c1   	cmpl    R10, R11	# unsigned
13c4   	jnb,u  B184  P=0.000001 C=-1.000000
13c4
13ca   B106: #	B18 &lt;- B105  Freq: 0.0758504
13ca   	movq    [RBP + #16 + R8 &lt;&lt; #3], #1	# long
13d3   	jmp     B18
13d3
13d8   B107: #	B222 B108 &lt;- B33  Freq: 0.0614072
13d8   	movq    R10, [rsp + #8]	# spill
13dd   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
13e1   	movl    RSI, #-10	# int
13e6   	movl    R9, [rsp + #32]	# spill
13eb   	sall    R9, #1
13ee   	movl    RCX, [R10 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/infra/runners/Control.minStride
13f2   	NullCheck R10
13f2
13f2   B108: #	B35 &lt;- B107  Freq: 0.0614072
13f2   	movl    R10, [R10 + #16 (8-bit)]	# int ! Field: org/openjdk/jcstress/infra/runners/Control.maxStride
13f6   	cmpl    R9, R10
13f9   	cmovll R10, R9	# signed, int
13fd   	cmpl    RCX, R10
1400   	cmovll RCX, R10	# signed, int
1404   	movl    [rsp + #72], RCX	# spill
1408   	jmp     B35
1408
140d   B109: #	B235 B110 &lt;- B56  Freq: 0.0604955
140d   	movl    RBP, [rsp + #72]	# spill
1411   	decl    RBP	# int
1413   	movq    RSI, [rsp + #24]	# spill
1418   	movl    RDX, [rsp + #72]	# spill
      	nop 	# 3 bytes pad for loops and calls
141f   	call,static  java.util.Arrays::copyOf
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:154  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{[8]=Oop off=5156}
1424
1424   B110: #	B223 B111 &lt;- B109  Freq: 0.0604943
        # Block is sole successor of call
1424   	movq    R10, RAX	# spill
1427   	movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
142b   	NullCheck RAX
142b
142b   B111: #	B210 B112 &lt;- B110  Freq: 0.0604942
142b   	movl    RSI, #-122	# int
1430   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f448c10a560:Constant:exact *	# compressed klass ptr
1437   	jne,u  B210  P=0.000000 C=-1.000000
1437
143d   B112: #	B161 B113 &lt;- B111  Freq: 0.0604942
143d   	# checkcastPP of R10
143d   	movq    [rsp + #24], R10	# spill
1442   	movl    R10, narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f448c10a5e0:Constant:exact *	# compressed klass ptr
1448   	movq    R11, [rsp + #24]	# spill
144d   	movl    R8, [R11 + #12 (8-bit)]	# range
1451   	movl    [rsp + #4], R8	# spill
1456   	movl    R11, [rsp + #32]	# spill
145b   	cmpl    R11, [RSP + #72 (32-bit)]
1460   	jge     B161  P=0.000548 C=7294.000000
1460
1466   B113: #	B186 B114 &lt;- B112  Freq: 0.0604611
1466   	cmpl    R11, [RSP + #4 (32-bit)]	# unsigned
146b   	jnb,u  B186  P=0.000001 C=-1.000000
146b
1471   B114: #	B186 B115 &lt;- B113  Freq: 0.060461
1471   	cmpl    RBP, [RSP + #4 (32-bit)]	# unsigned
1475   	jnb,u  B186  P=0.000001 C=-1.000000
1475
147b   B115: #	B117 &lt;- B114  Freq: 0.0604609
147b   	decode_klass_not_null R10,R10
147f   	movq    [rsp + #40], R10	# spill
1484   	movl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f44940c44c0:Constant:exact *	# compressed klass ptr
148a   	decode_klass_not_null R10,R10
148e   	movq    [rsp + #48], R10	# spill
1493   	jmp,s   B117
      	nop 	# 11 bytes pad for loops and calls

14a0   B116: #	B117 &lt;- B121  top-of-loop Freq: 110.184
14a0   	movl    R11, R10	# spill
14a3   	movl    [rsp + #32], R11	# spill
14a3
14a8   B117: #	B125 B118 &lt;- B115 B116 	Loop: B117-B116 inner  Freq: 110.245
14a8   	# TLS is in R15
14a8   	movq    R8, [R15 + #112 (8-bit)]	# ptr
14ac   	movl    R11, [rsp + #32]	# spill
14b1   	incl    R11	# int
14b4   	movl    [rsp + #36], R11	# spill
14b9   	movq    R10, R8	# spill
14bc   	addq    R10, #24	# ptr
14c0   	# TLS is in R15
14c0   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
14c7   	jnb,u  B125  P=0.000100 C=-1.000000
14c7
14cd   B118: #	B119 &lt;- B117  Freq: 110.234
14cd   	# TLS is in R15
14cd   	movq    [R15 + #112 (8-bit)], R10	# ptr
14d1   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
14d9   	movq    R10, [rsp + #40]	# spill
14de   	movq    R10, [R10 + #176 (32-bit)]	# ptr
14e5   	movq    [R8], R10	# ptr
14e8   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f448c10a5e0:Constant:exact *	# compressed klass ptr
14f0   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
14f4   	movq    [R8 + #16 (8-bit)], R12	# long (R12_heapbase==0)
14f4
14f8   B119: #	B127 B120 &lt;- B126 B118  Freq: 110.245
14f8   	movq    R10, [rsp + #24]	# spill
14fd   	movl    R11, [rsp + #32]	# spill
1502   	leaq    RBP, [R10 + #16 + R11 &lt;&lt; #2]	# ptr posidxscaleoff
1507   	
1507   	MEMBAR-storestore (empty encoding)
1507   	# checkcastPP of R8
1507   	movq    [rsp + #56], R8	# spill
150c   	# TLS is in R15
150c   	movq    R11, [R15 + #112 (8-bit)]	# ptr
1510   	movq    R10, R11	# spill
1513   	addq    R10, #408	# ptr
151a   	movq    RDI, R11	# spill
151d   	addq    RDI, #16	# ptr
1521   	# TLS is in R15
1521   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
1528   	jnb,u  B127  P=0.000100 C=-1.000000
1528
152e   B120: #	B121 &lt;- B119  Freq: 110.234
152e   	# TLS is in R15
152e   	movq    [R15 + #112 (8-bit)], R10	# ptr
1532   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
153a   	movq    R10, [rsp + #48]	# spill
153f   	movq    R10, [R10 + #176 (32-bit)]	# ptr
1546   	movq    [R11], R10	# ptr
1549   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f44940c44c0:Constant:exact *	# compressed klass ptr
1551   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
1555   	movl    RCX, #49	# long (unsigned 32-bit)
155a   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
1564
1564   B121: #	B116 B122 &lt;- B128 B120  Freq: 110.245
1564   	movq    R10, [rsp + #56]	# spill
1569   	encode_heap_oop_not_null RCX,R10
1674   	
1674   	MEMBAR-storestore (empty encoding)
1674   	# checkcastPP of R11
1674   	movq    R8, R11	# spill
1677   	movq    R10, RBP	# ptr -&gt; long
167a   	movq    R11, [rsp + #56]	# spill
167f   	movq    R11, R11	# ptr -&gt; long
167f   	shrq    R10, #9
1683   	shrq    R11, #9
1687   	movl    [RBP], RCX	# compressed ptr
168a   	movq    R9, 0x00007f44cd651000	# ptr
1694   	movb    [R9 + R11], R12	# short/char (R12_heapbase==0)
1698   	movq    R11, 0x00007f44cd651000	# ptr
16a2   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
16a6   	encode_heap_oop_not_null R11,R8
17b1   	movq    R10, [rsp + #56]	# spill
17b6   	movl    [R10 + #16 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
17ba   	movl    R10, [rsp + #36]	# spill
17bf   	cmpl    R10, [RSP + #72 (32-bit)]
17c4   	jl     B116	# loop end  P=0.999452 C=7289.000000
17c4
17ca   B122: #	B81 B123 &lt;- B121  Freq: 0.0604607
17ca   	movl    R11, [rsp + #4]	# spill
17cf   	testl   R11, R11
17d2   	jle     B81  P=0.000543 C=173214.000000
17d2
17d8   B123: #	B59 B124 &lt;- B122  Freq: 0.0604279
17d8   	testl  R11, R11	# unsigned
17db   	jnbe,u  B59  P=0.999999 C=-1.000000
17db
17e1   B124: #	B179 &lt;- B123  Freq: 6.04279e-08
17e1   	jmp     B179
17e1
17e6   B125: #	B233 B126 &lt;- B117  Freq: 0.0110263
17e6   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f448c10a5e0:Constant:exact *	# ptr
17f0   	movq    RBP, [rsp + #8]	# spill
      	nop 	# 2 bytes pad for loops and calls
17f7   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [8]=Oop [24]=Oop off=6140}
17fc
17fc   B126: #	B119 &lt;- B125  Freq: 0.0110261
        # Block is sole successor of call
17fc   	movq    R8, RAX	# spill
17ff   	jmp     B119
17ff
1804   B127: #	B234 B128 &lt;- B119  Freq: 0.0110263
1804   	movl    R11, [rsp + #32]	# spill
1809   	movl    [rsp + #0], R11	# spill
180d   	movq    RSI, precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f44940c44c0:Constant:exact *	# ptr
1817   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:183  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #24 L[6]=rsp + #0 L[7]=rsp + #56 L[8]=_ L[9]=_ STK[0]=rsp + #56
        # OopMap{rbp=Derived_oop_[24] [8]=Oop [24]=Oop [56]=Oop off=6172}
181c
181c   B128: #	B121 &lt;- B127  Freq: 0.0110261
        # Block is sole successor of call
181c   	movq    R11, RAX	# spill
181f   	jmp     B121
181f
1824   B129: #	B197 B130 &lt;- B12 B13  Freq: 0.00355845
1824   	movl    R8, [rsp + #108]	# spill
1829   	cmpl    RAX, R8	# unsigned
182c   	jnb,u  B197  P=0.000001 C=-1.000000
182c
1832   B130: #	B182 B131 &lt;- B129  Freq: 0.00355845
1832   	movl    R11, [rsp + #48]	# spill
1837   	movl    R8, [R11 + #16 + RAX &lt;&lt; #2]	# compressed ptr
183c   	testl   R8, R8	# compressed ptr
183f   	je     B182  P=0.000041 C=24122.000000
183f
1845   B131: #	B199 B132 &lt;- B130  Freq: 0.0035583
1845   	movl    R11, [R8 + #8 (8-bit)]	# compressed klass ptr
1849   	decode_heap_oop_not_null RBP,R8
184c   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f44940c44c0:Constant:exact *	# compressed klass ptr
1853   	jne,u  B199  P=0.000001 C=-1.000000
1853
1859   B132: #	B200 B133 &lt;- B131  Freq: 0.0035583
1859   	# checkcastPP of RBP
1859   	movl    R8, [RBP + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1860   	cmpq    RBP, [RSP + #56 (32-bit)]	# ptr
1865   	je,u  B200  P=0.000000 C=22205.000000
1865
186b   B133: #	B164 B134 &lt;- B132  Freq: 0.0035583
186b   	movl    RSI, [RBP + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1871   	cmpl    R8, R9
1874   	jne     B164  P=0.000901 C=22205.000000
1874
187a   B134: #	B164 B135 &lt;- B133  Freq: 0.00355509
187a   	cmpl    RSI, RDI
187c   	jne     B164  P=0.000496 C=22184.000000
187c
1882   B135: #	B14 &lt;- B134 B192  Freq: 0.00355334
1882   	movl    RSI, RAX	# spill
1884   	jmp     B14
1884
1889   B136: #	N3154 &lt;- B25  Freq: 0.00185013
1889   	movq    RBP, [rsp + #8]	# spill
188e   	movq    R10, [rsp + #24]	# spill
1893   	movl    R11, [rsp + #32]	# spill
1898   	movq    [rsp + #16], R10	# spill
189d   	movl    [rsp + #12], R11	# spill
18a2   	movl    [rsp + #24], RBX	# spill
18a6   	movq    [rsp + #32], R8	# spill
18ab   	movl    [rsp + #28], RDX	# spill
18af   	movl    R11, [rsp + #52]	# spill
18b4   	movl    [rsp + #40], R11	# spill
18b9   	movl    R11, [rsp + #48]	# spill
18be   	movl    [rsp + #44], R11	# spill
18c3   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
18cb   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=rsp + #32 L[1]=rsp + #28 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #40 L[6]=#0 L[7]=_ STK[0]=rsp + #44 STK[1]=rsp + #40
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #72 L[2]=rsp + #16 L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #12 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [16]=Oop [28]=NarrowOop [32]=Oop [44]=NarrowOop [72]=Oop off=6352}
18d0   	int3	# ShouldNotReachHere
18d0
18d5   B137: #	N3154 &lt;- B16  Freq: 0.00185004
18d5   	movq    RBP, [rsp + #8]	# spill
18da   	movq    R11, [rsp + #24]	# spill
18df   	movq    [rsp + #0], R11	# spill
18e3   	movl    R11, [rsp + #32]	# spill
18e8   	movl    [rsp + #8], R11	# spill
18ed   	movl    [rsp + #24], RBX	# spill
18f1   	movl    R8, [rsp + #52]	# spill
18f6   	movl    [rsp + #36], R10	# spill
18fb   	movl    [rsp + #40], R8	# spill
1900   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
1907   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #36 STK[1]=rsp + #40 STK[2]=rsp + #36 STK[3]=rsp + #40
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #72 L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #0 L[5]=rsp + #8 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [0]=Oop [36]=NarrowOop [72]=Oop off=6412}
190c   	int3	# ShouldNotReachHere
190c
1911   B138: #	N3154 &lt;- B22  Freq: 0.00182589
1911   	movl    RSI, #-34	# int
1916   	movq    RBP, [rsp + #8]	# spill
191b   	movq    R10, [rsp + #24]	# spill
1920   	movl    R8, [rsp + #32]	# spill
1925   	movq    [rsp + #16], R10	# spill
192a   	movl    [rsp + #12], R8	# spill
192f   	movl    [rsp + #24], RBX	# spill
1933   	movl    [rsp + #28], R11	# spill
1938   	movl    [rsp + #32], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
193f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #72 L[2]=rsp + #16 L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #12 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # OopMap{rbp=Oop [16]=Oop [28]=NarrowOop [32]=NarrowOop [72]=Oop off=6468}
1944   	int3	# ShouldNotReachHere
1944
1949   B139: #	B140 &lt;- B10  Freq: 2.54887e-06
1949   	movl    R14, RSI	# spill
194c   	movl    R10, #1	# int
194c
1952   B140: #	B141 &lt;- B139 B203  Freq: 2.54888e-06
1952   	movl    [rsp + #52], R14	# spill
1957   	movl    R11, R10	# spill
1957
195a   B141: #	B142 &lt;- B140 B199 B206  Freq: 2.55244e-06
195a   	movl    [rsp + #92], R11	# spill
195a
195f   B142: #	N3154 &lt;- B27 B141  Freq: 0.00182836
195f   	movq    R10, [rsp + #8]	# spill
1964   	movq    [rsp + #0], R10	# spill
1968   	movl    R10, [rsp + #32]	# spill
196d   	movl    [rsp + #16], R10	# spill
1972   	movl    [rsp + #32], RBX	# spill
1976   	movl    R10, [rsp + #52]	# spill
197b   	movl    [rsp + #48], R10	# spill
1980   	movl    [rsp + #56], RDX	# spill
1984   	movl    RSI, #-34	# int
      	nop 	# 2 bytes pad for loops and calls
198b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=rsp + #40 L[1]=rsp + #56 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #48 L[6]=rsp + #92 L[7]=_ STK[0]=RBP STK[1]=rsp + #56
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #0 L[1]=rsp + #72 L[2]=rsp + #24 L[3]=rsp + #16 L[4]=rsp + #24 L[5]=rsp + #16 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [40]=Oop [56]=NarrowOop [72]=Oop off=6544}
1990   	int3	# ShouldNotReachHere
1990
1995   B143: #	B144 &lt;- B62 B68 B71  Freq: 0.0036
1995   	movq    RBP, RCX	# spill
1995
1998   B144: #	N3154 &lt;- B181 B143  Freq: 0.00360098
1998   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
199f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:241  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=Oop off=6564}
19a4   	int3	# ShouldNotReachHere
19a4
19a9   B145: #	B146 &lt;- B28  Freq: 0.00087061
19a9   	xorl    R10, R10	# int
19ac
19ac   B146: #	N3154 &lt;- B145 B174 B200 B207  Freq: 0.000871827
19ac   	movq    R11, [rsp + #8]	# spill
19b1   	movq    [rsp + #0], R11	# spill
19b5   	movl    R11, [rsp + #32]	# spill
19ba   	movl    [rsp + #16], R11	# spill
19bf   	movl    [rsp + #32], RBX	# spill
19c3   	movl    R8, [rsp + #52]	# spill
19c8   	movl    [rsp + #48], R8	# spill
19cd   	movl    [rsp + #52], RDX	# spill
19d1   	movl    [rsp + #64], RDX	# spill
19d5   	movl    RSI, #-155	# int
19da   	movl    [rsp + #68], R10	# spill
19df   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:2  L[0]=RBP L[1]=rsp + #64 L[2]=_ STK[0]=RBP STK[1]=rsp + #52
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=rsp + #40 L[1]=rsp + #52 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #48 L[6]=rsp + #68 L[7]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #0 L[1]=rsp + #72 L[2]=rsp + #24 L[3]=rsp + #16 L[4]=rsp + #24 L[5]=rsp + #16 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [40]=Oop [52]=NarrowOop [64]=NarrowOop [72]=Oop off=6628}
19e4   	int3	# ShouldNotReachHere
19e4
19e9   B147: #	B232 B148 &lt;- B60  Freq: 9.6756e-05
      	nop 	# 2 bytes pad for loops and calls
19eb   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #24 L[6]=rsp + #24 L[7]=rsp + #0 L[8]=#0 L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [8]=Oop [24]=Oop off=6640}
19f0
19f0   B148: #	B62 &lt;- B147  Freq: 9.6754e-05
        # Block is sole successor of call
19f0   	movq    R11, RAX	# spill
19f3   	jmp     B62
19f3
19f8   B149: #	B231 B150 &lt;- B81  Freq: 9.6448e-05
19f8   	movq    RBP, R9	# spill
19fb   	movq    RSI, precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f448c109ff0:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
1a07   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:254  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #24 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #32
        # OopMap{rbp=Oop [24]=Oop [32]=NarrowOop off=6668}
1a0c
1a0c   B150: #	B83 &lt;- B149  Freq: 9.64461e-05
        # Block is sole successor of call
1a0c   	movq    R9, RBP	# spill
1a0f   	movq    RDX, RAX	# spill
1a12   	jmp     B83
1a12
1a17   B151: #	B227 B152 &lt;- B84  Freq: 9.64479e-05
1a17   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #24], rax
	movq    rax, [rsp - #8]
1a29   	movq    [rsp + #0], RDX	# spill
1a2d   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f4494023930:Constant:exact *	# ptr
1a37   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:20  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #24 STK[1]=rsp + #0
        # OopMap{[0]=Oop [24]=NarrowOop [32]=NarrowOop off=6716}
1a3c
1a3c   B152: #	B86 &lt;- B151  Freq: 9.6446e-05
        # Block is sole successor of call
1a3c   	movq    RDX, [rsp + #0]	# spill
1a40   	jmp     B86
1a40
1a45   B153: #	B228 B154 &lt;- B86  Freq: 9.64479e-05
1a45   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #24], rax
	movq    rax, [rsp - #8]
1a57   	movq    [rsp + #0], RDX	# spill
1a5b   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f4494023930:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
1a67   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:32  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #24 STK[1]=rsp + #0
        # OopMap{[0]=Oop [24]=NarrowOop [32]=NarrowOop off=6764}
1a6c
1a6c   B154: #	B88 &lt;- B153  Freq: 9.6446e-05
        # Block is sole successor of call
1a6c   	movq    RDX, [rsp + #0]	# spill
1a70   	jmp     B88
1a70
1a75   B155: #	B229 B156 &lt;- B88  Freq: 9.64479e-05
1a75   	movq    [rsp + #8], RSI	# spill
1a7a   	movq    [rsp + #0], RDX	# spill
1a7e   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f4494023930:Constant:exact *	# ptr
      	nop 	# 3 bytes pad for loops and calls
1a8b   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:44  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #32 STK[1]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop [32]=NarrowOop off=6800}
1a90
1a90   B156: #	B90 &lt;- B155  Freq: 9.6446e-05
        # Block is sole successor of call
1a90   	movq    RDX, [rsp + #0]	# spill
1a94   	movq    RSI, [rsp + #8]	# spill
1a99   	jmp     B90
1a99
1a9e   B157: #	B230 B158 &lt;- B90  Freq: 9.64479e-05
1a9e   	movq    [rsp + #0], RSI	# spill
1aa2   	movq    RBP, RDX	# spill
1aa5   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f4494023930:Constant:exact *	# ptr
1aaf   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:56  L[0]=RBP L[1]=_ L[2]=_ L[3]=#2 STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #32 STK[1]=RBP
        # OopMap{rbp=Oop [0]=Oop [32]=NarrowOop off=6836}
1ab4
1ab4   B158: #	B92 &lt;- B157  Freq: 9.6446e-05
        # Block is sole successor of call
1ab4   	movq    RDX, RBP	# spill
1ab7   	movq    RSI, [rsp + #0]	# spill
1abb   	jmp     B92
1abb
1ac0   B159: #	B226 B160 &lt;- B76  Freq: 9.63955e-05
1ac0   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f448c1100f0:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
1acb   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #24 L[6]=rsp + #24 L[7]=rsp + #0 L[8]=RBP L[9]=_ STK[0]=rsp + #4
        # OopMap{[4]=NarrowOop [8]=Oop [24]=Oop off=6864}
1ad0
1ad0   B160: #	B78 &lt;- B159  Freq: 9.63935e-05
        # Block is sole successor of call
1ad0   	movq    R11, RAX	# spill
1ad3   	jmp     B78
1ad3
1ad8   B161: #	B81 B162 &lt;- B112  Freq: 3.31764e-05
1ad8   	testl   R8, R8
1adb   	jle     B81  P=0.000543 C=173214.000000
1adb
1ae1   B162: #	B201 B163 &lt;- B161  Freq: 3.31584e-05
1ae1   	testl  R8, R8	# unsigned
1ae4   	jbe,u  B201  P=0.000001 C=-1.000000
1ae4
1aea   B163: #	B59 &lt;- B162  Freq: 3.31584e-05
1aea   	movl    R11, R8	# spill
1aed   	jmp     B59
1aed
1af2   B164: #	B202 B165 &lt;- B133 B134  Freq: 4.9677e-06
1af2   	movl    R11, [rsp + #108]	# spill
1af7   	cmpl    R14, R11	# unsigned
1afa   	jnb,u  B202  P=0.000001 C=-1.000000
1afa
1b00   B165: #	B100 B166 &lt;- B164  Freq: 4.9677e-06
1b00   	movl    R8, [rsp + #48]	# spill
1b05   	movl    R11, R14	# spill
1b08   	movl    R11, [R8 + #16 + R11 &lt;&lt; #2]	# compressed ptr
1b0d   	testl   R11, R11	# compressed ptr
1b10   	je     B100  P=0.000041 C=24122.000000
1b10
1b16   B166: #	B203 B167 &lt;- B165  Freq: 4.96749e-06
1b16   	decode_heap_oop_not_null RBP,R11
1b19   	movl    R8, [R11 + #8 (8-bit)]	# compressed klass ptr
1b1d   	cmpl    R8, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f44940c44c0:Constant:exact *	# compressed klass ptr
1b24   	jne,u  B203  P=0.000001 C=-1.000000
1b24
1b2a   B167: #	B204 B168 &lt;- B166  Freq: 4.96749e-06
1b2a   	# checkcastPP of RBP
1b2a   	movl    R11, [RBP + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1b31   	movl    RSI, [RBP + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1b37   	cmpq    RBP, [RSP + #56 (32-bit)]	# ptr
1b3c   	je,u  B204  P=0.000000 C=22205.000000
1b3c
1b42   B168: #	B187 B169 &lt;- B167  Freq: 4.96748e-06
1b42   	movl    RAX, R13	# spill
1b45   	andl    RAX, RCX	# int
1b47   	movl    [rsp + #52], RAX	# spill
1b4b   	cmpl    R11, R9
1b4e   	jne     B187  P=0.000901 C=22205.000000
1b4e
1b54   B169: #	B187 B170 &lt;- B168  Freq: 4.96301e-06
1b54   	cmpl    RSI, RDI
1b56   	jne     B187  P=0.000496 C=22184.000000
1b56
1b5c   B170: #	B14 &lt;- B169  Freq: 4.96055e-06
1b5c   	movl    RSI, R14	# spill
1b5f   	jmp     B14
1b5f
1b64   B171: #	B172 &lt;- B8  Freq: 2.58283e-06
1b64   	movl    R14, RSI	# spill
1b67   	xorl    R10, R10	# int
1b6a
1b6a   B172: #	N3154 &lt;- B171 B198 B202 B208  Freq: 2.58644e-06
1b6a   	movq    RBP, [rsp + #8]	# spill
1b6f   	movq    R11, [rsp + #24]	# spill
1b74   	movq    [rsp + #0], R11	# spill
1b78   	movl    R11, [rsp + #32]	# spill
1b7d   	movl    [rsp + #8], R11	# spill
1b82   	movl    [rsp + #24], RBX	# spill
1b86   	movq    R11, [rsp + #40]	# spill
1b8b   	movq    [rsp + #32], R11	# spill
1b90   	movl    [rsp + #28], RDX	# spill
1b94   	movl    R11, [rsp + #48]	# spill
1b99   	movl    [rsp + #40], R11	# spill
1b9e   	movl    RSI, #-28	# int
1ba3   	movl    [rsp + #56], R10	# spill
1ba8   	movl    [rsp + #60], R14	# spill
      	nop 	# 2 bytes pad for loops and calls
1baf   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:70  L[0]=rsp + #32 L[1]=rsp + #28 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #60 L[6]=rsp + #56 L[7]=_ STK[0]=rsp + #40 STK[1]=rsp + #60
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #72 L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #0 L[5]=rsp + #8 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [0]=Oop [28]=NarrowOop [32]=Oop [40]=NarrowOop [72]=Oop off=7092}
1bb4   	int3	# ShouldNotReachHere
1bb4
1bb9   B173: #	B174 &lt;- B11  Freq: 1.2154e-06
1bb9   	movl    R14, RSI	# spill
1bbc   	movl    R11, #1	# int
1bbc
1bc2   B174: #	B146 &lt;- B173 B204  Freq: 1.2154e-06
1bc2   	movl    [rsp + #52], R14	# spill
1bc7   	movl    R10, R11	# spill
1bca   	jmp     B146
1bca
1bcf   B175: #	N3154 &lt;- B6 B5  Freq: 2.01219e-06
1bcf   	movq    RBP, [rsp + #8]	# spill
1bd4   	movq    R10, [rsp + #24]	# spill
1bd9   	movl    R11, [rsp + #32]	# spill
1bde   	movq    [rsp + #16], R10	# spill
1be3   	movl    [rsp + #12], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
1beb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:29  L[0]=RBP L[1]=rsp + #72 L[2]=rsp + #16 L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #32 L[6]=#0 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [16]=Oop [72]=Oop off=7152}
1bf0   	int3	# ShouldNotReachHere
1bf0
1bf5   B176: #	N3154 &lt;- B37 B36  Freq: 1.97701e-06
1bf5   	movq    RBP, [rsp + #8]	# spill
1bfa   	movq    R10, [rsp + #24]	# spill
1bff   	movq    [rsp + #0], R10	# spill
1c03   	movl    R10, [rsp + #32]	# spill
1c08   	movl    [rsp + #8], R10	# spill
1c0d   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
1c13   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:110  L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #72 L[5]=rsp + #0 L[6]=rsp + #8 L[7]=#0 L[8]=_ L[9]=_
        # OopMap{rbp=Oop [0]=Oop off=7192}
1c18   	int3	# ShouldNotReachHere
1c18
1c1d   B177: #	B51 &lt;- B40  Freq: 9.95023e-07
1c1d   	movl    RCX, #1	# int
1c22   	jmp     B51
1c22
1c27   B178: #	B179 &lt;- B59  Freq: 9.80246e-07
1c27   	movl    R11, [rsp + #0]	# spill
1c27
1c2b   B179: #	N3154 &lt;- B178 B124 B201 B58  Freq: 1.94765e-06
1c2b   	movq    RBP, [rsp + #8]	# spill
1c30   	movl    [rsp + #16], R11	# spill
1c35   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
1c3b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:225  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #24 L[6]=rsp + #24 L[7]=rsp + #16 L[8]=#0 L[9]=_
        # OopMap{rbp=Oop [24]=Oop off=7232}
1c40   	int3	# ShouldNotReachHere
1c40
1c45   B180: #	N3154 &lt;- B92  Freq: 9.77124e-07
1c45   	movl    RSI, #-10	# int
1c4a   	movq    RBP, RDX	# spill
      	nop 	# 2 bytes pad for loops and calls
1c4f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:271  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=Oop off=7252}
1c54   	int3	# ShouldNotReachHere
1c54
1c59   B181: #	B144 &lt;- B78  Freq: 9.76593e-07
1c59   	movq    RBP, R11	# spill
1c5c   	jmp     B144
1c5c
1c61   B182: #	B101 &lt;- B130  Freq: 1.47622e-07
1c61   	movl    [rsp + #52], RAX	# spill
1c65   	jmp     B101
1c65
1c6a   B183: #	N3154 &lt;- B102  Freq: 7.68579e-08
1c6a   	movq    RBP, [rsp + #8]	# spill
1c6f   	movq    R10, [rsp + #24]	# spill
1c74   	movq    [rsp + #0], R10	# spill
1c78   	movl    R10, [rsp + #32]	# spill
1c7d   	movl    [rsp + #8], R10	# spill
1c82   	movq    R10, [rsp + #40]	# spill
1c87   	movq    [rsp + #32], R10	# spill
1c8c   	movl    R11, [rsp + #48]	# spill
1c91   	movl    [rsp + #40], R11	# spill
1c96   	movl    R10, [rsp + #52]	# spill
1c9b   	movl    [rsp + #44], R10	# spill
1ca0   	movl    RSI, #-28	# int
1ca5   	movq    [rsp + #56], RAX	# spill
      	nop 	# 1 bytes pad for loops and calls
1cab   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=rsp + #32 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #44 L[6]=_ L[7]=_ STK[0]=rsp + #40 STK[1]=rsp + #44 STK[2]=rsp + #56
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #72 L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #0 L[5]=rsp + #8 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=NarrowOop [56]=Oop [72]=Oop off=7344}
1cb0   	int3	# ShouldNotReachHere
1cb0
1cb5   B184: #	N3154 &lt;- B105  Freq: 7.68577e-08
1cb5   	movq    R10, [rsp + #8]	# spill
1cba   	movq    [rsp + #0], R10	# spill
1cbe   	movl    R10, [rsp + #32]	# spill
1cc3   	movl    R11, R10	# spill
1cc6   	movl    [rsp + #20], R11	# spill
1ccb   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
1cd3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=RBP STK[1]=rsp + #52 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #0 L[1]=rsp + #72 L[2]=rsp + #24 L[3]=rsp + #20 L[4]=rsp + #24 L[5]=rsp + #20 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=NarrowOop [0]=Oop [24]=Oop [72]=Oop off=7384}
1cd8   	int3	# ShouldNotReachHere
1cd8
1cdd   B185: #	N3154 &lt;- B103  Freq: 7.58506e-08
1cdd   	movq    RBP, [rsp + #8]	# spill
1ce2   	movq    R10, [rsp + #24]	# spill
1ce7   	movl    R11, [rsp + #32]	# spill
1cec   	movq    [rsp + #16], R10	# spill
1cf1   	movl    [rsp + #12], R11	# spill
1cf6   	movq    R10, [rsp + #40]	# spill
1cfb   	movq    [rsp + #32], R10	# spill
1d00   	movl    R10, [rsp + #52]	# spill
1d05   	movl    R11, [rsp + #48]	# spill
1d0a   	movl    [rsp + #40], R11	# spill
1d0f   	movl    [rsp + #44], R10	# spill
1d14   	movq    [rsp + #56], RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
1d1b   	call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=rsp + #32 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #44 L[6]=_ L[7]=_ STK[0]=rsp + #40 STK[1]=rsp + #44 STK[2]=rsp + #56
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #72 L[2]=rsp + #16 L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #12 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [16]=Oop [32]=Oop [40]=NarrowOop [56]=Oop [72]=Oop off=7456}
1d20   	int3	# ShouldNotReachHere
1d20
1d25   B186: #	N3154 &lt;- B114 B113  Freq: 1.22528e-07
1d25   	movq    RBP, [rsp + #8]	# spill
      	nop 	# 1 bytes pad for loops and calls
1d2b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [24]=Oop off=7472}
1d30   	int3	# ShouldNotReachHere
1d30
1d35   B187: #	B205 B188 &lt;- B168 B169  Freq: 6.93506e-09
1d35   	movl    R11, RAX	# spill
1d38   	incl    R11	# int
1d3b   	movl    R13, R11	# spill
1d3e   	movl    RSI, [rsp + #108]	# spill
1d42   	cmpl    RAX, RSI	# unsigned
1d44   	jnb,u  B205  P=0.000001 C=-1.000000
1d44
1d4a   B188: #	B101 B189 &lt;- B187  Freq: 6.93505e-09
1d4a   	movl    R8, [rsp + #48]	# spill
1d4f   	movl    R11, [R8 + #16 + RAX &lt;&lt; #2]	# compressed ptr
1d54   	testl   R11, R11	# compressed ptr
1d57   	je     B101  P=0.000041 C=24122.000000
1d57
1d5d   B189: #	B206 B190 &lt;- B188  Freq: 6.93476e-09
1d5d   	movl    RSI, [R11 + #8 (8-bit)]	# compressed klass ptr
1d61   	decode_heap_oop_not_null RBP,R11
1d64   	cmpl    RSI, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f44940c44c0:Constant:exact *	# compressed klass ptr
1d6a   	jne,u  B206  P=0.000001 C=-1.000000
1d6a
1d70   B190: #	B207 B191 &lt;- B189  Freq: 6.93476e-09
1d70   	# checkcastPP of RBP
1d70   	movl    R11, R13	# spill
1d73   	andl    R11, RCX	# int
1d76   	movl    R14, R11	# spill
1d79   	movl    R11, [RBP + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1d80   	cmpq    RBP, [RSP + #56 (32-bit)]	# ptr
1d85   	je,u  B207  P=0.000000 C=22205.000000
1d85
1d8b   B191: #	B193 B192 &lt;- B190  Freq: 6.93475e-09
1d8b   	cmpl    R11, R9
1d8e   	jne,s   B193  P=0.000901 C=22205.000000
1d8e
1d90   B192: #	B135 B193 &lt;- B191  Freq: 6.92851e-09
1d90   	movl    R11, [RBP + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1d97   	cmpl    R11, RDI
1d9a   	je     B135  P=0.999504 C=22184.000000
1d9a
1da0   B193: #	B208 B194 &lt;- B191 B192  Freq: 9.68154e-12
1da0   	movl    R11, R14	# spill
1da3   	movl    R10, [rsp + #108]	# spill
1da8   	cmpl    R11, R10	# unsigned
1dab   	jnb,u  B208  P=0.000001 C=-1.000000
1dab
1db1   B194: #	B225 B195 &lt;- B193  Freq: 9.68153e-12
1db1   	movl    RBP, RBX	# spill
1db3   	movq    RSI, [rsp + #40]	# spill
      	nop 	# 3 bytes pad for loops and calls
1dbb   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::resize
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:84  L[0]=rsp + #40 L[1]=rsp + #56 L[2]=#1 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #8 L[1]=rsp + #72 L[2]=rsp + #24 L[3]=rsp + #32 L[4]=rsp + #24 L[5]=rsp + #32 L[6]=RBP L[7]=_ L[8]=_ L[9]=_
        # OopMap{[8]=Oop [24]=Oop [40]=Oop [56]=Oop [72]=Oop off=7616}
1dc0
1dc0   B195: #	B224 B196 &lt;- B194  Freq: 9.68134e-12
        # Block is sole successor of call
1dc0   	movq    RSI, [rsp + #40]	# spill
1dc5   	movq    RDX, [rsp + #56]	# spill
1dca   	movl    RCX, #1	# long (unsigned 32-bit)
1dcf   	movl    R8, #2147483647	# int
      	nop 	# 2 bytes pad for loops and calls
1dd7   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:92  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #8 L[1]=rsp + #72 L[2]=rsp + #24 L[3]=rsp + #32 L[4]=rsp + #24 L[5]=rsp + #32 L[6]=RBP L[7]=_ L[8]=_ L[9]=_
        # OopMap{[8]=Oop [24]=Oop [72]=Oop off=7644}
1ddc
1ddc   B196: #	B18 &lt;- B195  Freq: 9.68114e-12
        # Block is sole successor of call
1ddc   	jmp     B18
1ddc
1de1   B197: #	B198 &lt;- B129  Freq: 3.60571e-09
1de1   	movl    [rsp + #52], RAX	# spill
1de5   	movl    R10, #1	# int
1de5
1deb   B198: #	B172 &lt;- B197 B205  Freq: 3.60571e-09
1deb   	movl    R14, [rsp + #52]	# spill
1df0   	jmp     B172
1df0
1df5   B199: #	B141 &lt;- B131  Freq: 3.5583e-09
1df5   	movl    [rsp + #52], RAX	# spill
1df9   	movl    R11, #2	# int
1dff   	jmp     B141
1dff
1e04   B200: #	B146 &lt;- B132  Freq: 1.69673e-09
1e04   	movl    [rsp + #52], RAX	# spill
1e08   	movl    R10, #2	# int
1e0e   	jmp     B146
1e0e
1e13   B201: #	B179 &lt;- B162  Freq: 3.31584e-11
1e13   	movl    R11, R8	# spill
1e16   	jmp     B179
1e16
1e1b   B202: #	B172 &lt;- B164  Freq: 5.03367e-12
1e1b   	movl    R10, #2	# int
1e21   	jmp     B172
1e21
1e26   B203: #	B140 &lt;- B166  Freq: 4.96749e-12
1e26   	movl    R10, [rsp + #100]	# spill
1e2b   	jmp     B140
1e2b
1e30   B204: #	B174 &lt;- B167  Freq: 2.36868e-12
1e30   	movl    R11, [rsp + #100]	# spill
1e35   	jmp     B174
1e35
1e3a   B205: #	B198 &lt;- B187  Freq: 7.02715e-15
1e3a   	movl    R10, [rsp + #100]	# spill
1e3f   	jmp,s   B198
1e3f
1e41   B206: #	B141 &lt;- B189  Freq: 6.93476e-15
1e41   	movl    R11, [rsp + #104]	# spill
1e46   	jmp     B141
1e46
1e4b   B207: #	B146 &lt;- B190  Freq: 3.30675e-15
1e4b   	movl    R10, [rsp + #104]	# spill
1e50   	jmp     B146
1e50
1e55   B208: #	B172 &lt;- B193  Freq: 9.8101e-18
1e55   	movl    R10, [rsp + #104]	# spill
1e5a   	jmp     B172
1e5a
1e5f   B209: #	N3154 &lt;- B3  Freq: 1e-35
1e5f   	movl    RSI, #-34	# int
1e64   	movq    R10, [rsp + #8]	# spill
1e69   	movq    [rsp + #0], R10	# spill
1e6d   	movq    [rsp + #8], RDX	# spill
      	nop 	# 1 bytes pad for loops and calls
1e73   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:4  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [8]=Oop off=7800}
1e78   	int3	# ShouldNotReachHere
1e78
1e7d   B210: #	N3154 &lt;- B111  Freq: 1e-35
1e7d   	movq    RBP, [rsp + #8]	# spill
1e82   	movl    RSI, #-34	# int
1e87   	movq    [rsp + #8], RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
1e8f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:157  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=7828}
1e94   	int3	# ShouldNotReachHere
1e94
1e99   B211: #	N3154 &lt;- B53 B38 B42 B46 B44 B48  Freq: 0.00729263
      	nop 	# 2 bytes pad for loops and calls
1e9b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:119  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{off=7840}
1ea0   	int3	# ShouldNotReachHere
1ea0
1ea5   B212: #	N3154 &lt;- B54 B39 B43 B47 B45 B49  Freq: 0.00729262
1ea5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1eab   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:127  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=#0
        # OopMap{off=7856}
1eb0   	int3	# ShouldNotReachHere
1eb0
1eb5   B213: #	N3154 &lt;- B20  Freq: 0.00185014
1eb5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1ebb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:42  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=7872}
1ec0   	int3	# ShouldNotReachHere
1ec0
1ec5   B214: #	N3154 &lt;- B21  Freq: 0.00185013
1ec5   	movl    RBP, RDX	# spill
1ec7   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
1ecf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=NarrowOop off=7892}
1ed4   	int3	# ShouldNotReachHere
1ed4
1ed9   B215: #	N3154 &lt;- B23  Freq: 0.00185013
1ed9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1edf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=7908}
1ee4   	int3	# ShouldNotReachHere
1ee4
1ee9   B216: #	N3154 &lt;- B24  Freq: 0.00185013
1ee9   	movl    RBP, [rsp + #52]	# spill
1eed   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1ef3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=7928}
1ef8   	int3	# ShouldNotReachHere
1ef8
1efd   B217: #	N3154 &lt;- B15  Freq: 0.00185005
1efd   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1f03   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=rsp + #52
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=7944}
1f08   	int3	# ShouldNotReachHere
1f08
1f0d   B218: #	N3154 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
1f0f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{off=7956}
1f14   	int3	# ShouldNotReachHere
1f14
1f19   B219: #	N3154 &lt;- B2  Freq: 1.01328e-06
1f19   	movq    RBP, [rsp + #8]	# spill
1f1e   	movq    [rsp + #0], RDX	# spill
      	nop 	# 1 bytes pad for loops and calls
1f23   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:4  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [0]=Oop off=7976}
1f28   	int3	# ShouldNotReachHere
1f28
1f2d   B220: #	N3154 &lt;- B83  Freq: 9.77125e-07
1f2d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1f33   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:262  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=#NULL
        # OopMap{off=7992}
1f38   	int3	# ShouldNotReachHere
1f38
1f3d   B221: #	N3154 &lt;- B104  Freq: 7.68577e-08
1f3d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1f43   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=rsp + #52 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=8008}
1f48   	int3	# ShouldNotReachHere
1f48
1f4d   B222: #	N3154 &lt;- B107  Freq: 6.22226e-08
      	nop 	# 2 bytes pad for loops and calls
1f4f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:67  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{off=8020}
1f54   	int3	# ShouldNotReachHere
1f54
1f59   B223: #	N3154 &lt;- B110  Freq: 6.12976e-08
1f59   	movl    RSI, #-12	# int
1f5e   	movq    RBP, [rsp + #8]	# spill
1f63   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:157  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{rbp=Oop off=8040}
1f68   	int3	# ShouldNotReachHere
1f68
1f6d   B224: #	B237 &lt;- B195  Freq: 9.68134e-17
1f6d   	# exception oop is in rax; no code emitted
1f6d   	jmp,s   B237
1f6d
1f6f   B225: #	B237 &lt;- B194  Freq: 9.68153e-17
1f6f   	# exception oop is in rax; no code emitted
1f6f   	jmp,s   B237
1f6f
1f71   B226: #	B241 &lt;- B159  Freq: 9.63955e-10
1f71   	# exception oop is in rax; no code emitted
1f71   	jmp,s   B241
1f71
1f73   B227: #	B242 &lt;- B151  Freq: 9.64479e-10
1f73   	# exception oop is in rax; no code emitted
1f73   	movq    RSI, RAX	# spill
1f76   	jmp,s   B242
1f76
1f78   B228: #	B242 &lt;- B153  Freq: 9.64479e-10
1f78   	# exception oop is in rax; no code emitted
1f78   	movq    RSI, RAX	# spill
1f7b   	jmp,s   B242
1f7b
1f7d   B229: #	B242 &lt;- B155  Freq: 9.64479e-10
1f7d   	# exception oop is in rax; no code emitted
1f7d   	movq    RSI, RAX	# spill
1f80   	jmp,s   B242
1f80
1f82   B230: #	B242 &lt;- B157  Freq: 9.64479e-10
1f82   	# exception oop is in rax; no code emitted
1f82   	movq    RSI, RAX	# spill
1f85   	jmp,s   B242
1f85
1f87   B231: #	B242 &lt;- B149  Freq: 9.6448e-10
1f87   	# exception oop is in rax; no code emitted
1f87   	movq    RSI, RAX	# spill
1f8a   	jmp,s   B242
1f8a
1f8c   B232: #	B241 &lt;- B147  Freq: 9.6756e-10
1f8c   	# exception oop is in rax; no code emitted
1f8c   	jmp,s   B241
1f8c
1f8e   B233: #	B242 &lt;- B125  Freq: 1.10263e-07
1f8e   	# exception oop is in rax; no code emitted
1f8e   	movq    RSI, RAX	# spill
1f91   	jmp,s   B242
1f91
1f93   B234: #	B242 &lt;- B127  Freq: 1.10263e-07
1f93   	# exception oop is in rax; no code emitted
1f93   	movq    RSI, RAX	# spill
1f96   	jmp,s   B242
1f96
1f98   B235: #	B242 &lt;- B109  Freq: 6.04955e-07
1f98   	# exception oop is in rax; no code emitted
1f98   	movq    RSI, RAX	# spill
1f9b   	jmp,s   B242
1f9b
1f9d   B236: #	B237 &lt;- B101  Freq: 7.58522e-07
1f9d   	# exception oop is in rax; no code emitted
1f9d
1f9d   B237: #	B242 &lt;- B225 B224 B236  Freq: 7.58522e-07
1f9d   	movq    RSI, RAX	# spill
1fa0   	jmp,s   B242
1fa0
1fa2   B238: #	B242 &lt;- B93  Freq: 9.64318e-06
1fa2   	# exception oop is in rax; no code emitted
1fa2   	movq    RSI, RAX	# spill
1fa5   	jmp,s   B242
1fa5
1fa7   B239: #	B241 &lt;- B95  Freq: 1.77622e-06
1fa7   	# exception oop is in rax; no code emitted
1fa7   	jmp,s   B241
1fa7
1fa9   B240: #	B241 &lt;- B97  Freq: 1.77622e-06
1fa9   	# exception oop is in rax; no code emitted
1fa9
1fa9   B241: #	B242 &lt;- B226 B232 B239 B240  Freq: 3.55438e-06
1fa9   	movq    RSI, RAX	# spill
1fa9
1fac   B242: #	N3154 &lt;- B237 B235 B233 B234 B241 B231 B227 B228 B229 B230 B238  Freq: 1.47864e-05
1fac   	addq    rsp, 128	# Destroy frame
	popq   rbp

1fb4   	jmp     rethrow_stub
1fb4

</opto_assembly>
<writer thread='139933087573760'/>
<opto_assembly compile_id='438'>
{method}
 - this oop:          0x00007f44cd173ba8
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1&apos;
 - constants:         0x00007f44cd173498 constant pool [132] {0x00007f44cd173498} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1&apos; cache=0x00007f44cd1749b0
 - access:            0xc1000001  public 
 - name:              &apos;call&apos;
 - signature:         &apos;()Ljava/lang/Void;&apos;
 - max stack:         5
 - max locals:        12
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef760: 0xb0000000 i2c: 0x00007f44b9145620 c2i: 0x00007f44b914575a c2iUV: 0x00007f44b914572d
 - compiled entry     0x00007f44b9310180
 - code size:         158
 - code start:        0x00007f44cd173a80
 - code end (excl):   0x00007f44cd173b1e
 - method data:       0x00007f44cd177b08
 - checked ex length: 0
 - linenumber start:  0x00007f44cd173b1e
 - localvar length:   9
 - localvar start:    0x00007f44cd173b3a
 - compiled code: nmethod   4252  410       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call (158 bytes)
#
#  java/lang/Void:exact * ( org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1:NotNull * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1:NotNull *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1125: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B80 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (304 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movq    RBX, RSI	# spill
02f   	movl    RCX, [RSI + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.epoch
032   	movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
036   	movl    RDI, [RSI + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.version
039   	movl    RSI, #-10	# int
03e   	movzbl  R10, [R10 + #33 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/Control.shouldYield
043   	NullCheck R10
043
043   B2: #	B81 B3 &lt;- B1  Freq: 0.999999
043   	movl    RBP, [RDI + #12 (8-bit)]	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
046   	NullCheck RDI
046
046   B3: #	B82 B4 &lt;- B2  Freq: 0.999998
046   	MEMBAR-acquire ! (empty encoding)
046   	movl    R9, [RBP + #8 (8-bit)]	# compressed klass ptr
04a   	NullCheck RBP
04a
04a   B4: #	B70 B5 &lt;- B3  Freq: 0.999997
04a   	decode_heap_oop_not_null R11,RBP
04d   	cmpl    R9, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f448806ce90:Constant:exact *	# compressed klass ptr
054   	jne,u  B70  P=0.000000 C=-1.000000
054
05a   B5: #	B58 B6 &lt;- B4  Freq: 0.999997
05a   	# checkcastPP of R11
05a   	movzbl  R8, [R11 + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
05f   	testl   R8, R8
062   	jne     B58  P=0.003247 C=308.000000
062
068   B6: #	B69 B7 &lt;- B5  Freq: 0.99675
068   	testl   RCX, RCX	# compressed ptr
06a   	je     B69  P=0.000001 C=-1.000000
06a
070   B7: #	B26 &lt;- B6  Freq: 0.996749
070   	movl    [rsp + #12], R10	# spill
075   	movq    [rsp + #0], RBX	# spill
079   	decode_heap_oop_not_null R10,RDI
07c   	movq    [rsp + #24], R10	# spill
081   	movl    [rsp + #40], RDI	# spill
085   	decode_heap_oop_not_null R10,RCX
088   	movq    [rsp + #32], R10	# spill
08d   	movl    [rsp + #16], RCX	# spill
091   	xorl    R10, R10	# int
094   	movl    [rsp + #20], R10	# spill
099   	jmp     B26
099
09e   B8: #	B61 B9 &lt;- B54 B49 B37  top-of-loop Freq: 199.952
09e   	movq    R10, [rsp + #48]	# spill
0a3   	movl    R10, [R10 + #36 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
0a7   	testl   R10, R10	# compressed ptr
0aa   	je     B61  P=0.000001 C=-1.000000
0aa
0b0   B9: #	B11 B10 &lt;- B8  Freq: 199.952
0b0   	MEMBAR-release ! (empty encoding)
0b0   	
0b0   	movl    R11, #-1	# int
0b6   	XADDL  [[R10 + #12 (8-bit)]],R11
0bc   	decl    R11	# int
0bf   	
0bf   	MEMBAR-acquire ! (empty encoding)
0bf   	testl   R11, R11
0c2   	jne,s   B11  P=0.498155 C=271.000000
0c2
0c4   B10: #	B11 &lt;- B9  Freq: 100.345
0c4   	MEMBAR-release ! (empty encoding)
0c4   	movq    R10, [rsp + #48]	# spill
0c9   	movb    [R10 + #19 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
0cd   	lock addl [rsp + #0], 0	! membar_volatile
0d2
0d2   B11: #	B14 B12 &lt;- B10 B9  Freq: 199.952
0d2   	movq    R10, [rsp + #48]	# spill
0d7   	movzbl  R11, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
0dc   	MEMBAR-acquire ! (empty encoding)
0dc   	movzbl  R10, [R10 + #17 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
0e1   	MEMBAR-acquire ! (empty encoding)
0e1   	orl     R11, R10	# int
0e4   	MEMBAR-release ! (empty encoding)
0e4   	movq    R10, [rsp + #48]	# spill
0e9   	movb    [R10 + #21 (8-bit)], R11	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
0ed   	lock addl [rsp + #0], 0	! membar_volatile
0f2   	movzbl  R11, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
0f7   	MEMBAR-acquire ! (empty encoding)
0f7   	testl   R11, R11
0fa   	je,s   B14  P=0.000145 C=1601492.000000
0fa
0fc   B12: #	B67 B13 &lt;- B11  Freq: 199.923
0fc   	movl    R10, [rsp + #12]	# spill
101   	testl   R10, R10
104   	jne     B67  P=0.000001 C=-1.000000
      	nop 	# 6 bytes pad for loops and calls

110   B13: #	B13 B14 &lt;- B12 B13 	Loop: B13-B13 inner  Freq: 1.38031e+06
110   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=rsp + #48 L[1]=rsp + #12 STK[0]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=rsp + #0 L[1]=rsp + #20 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #24 L[5]=rsp + #16 L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=272}
116   	movq    R10, [rsp + #48]	# spill
11b   	movzbl  R11, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
120   	MEMBAR-acquire ! (empty encoding)
120   	testl   R11, R11
123   	jne,s   B13  P=0.999855 C=1601492.000000
123
125   B14: #	B55 B15 &lt;- B13 B11  Freq: 199.952
125   	MEMBAR-release ! (empty encoding)
125   	
125   	movl    R11, [rsp + #16]	# spill
12a   	movl    RAX, [rsp + #20]	# spill
12e   	movl    R8, [rsp + #8]	# spill
133   	cmpxchgl [R11 + #12 (8-bit)],R8	# If rax == [R11 + #12 (8-bit)] then store R8 into [R11 + #12 (8-bit)]
	sete    R11
	movzbl  R11, R11
141   	
141   	MEMBAR-acquire ! (empty encoding)
141   	testl   R11, R11
144   	jne     B55  P=0.117264 C=307.000000
144
14a   B15: #	B68 B16 &lt;- B56 B14  Freq: 199.951
14a   	movl    R10, [rsp + #16]	# spill
14f   	movl    RBP, [R10 + #12 (8-bit)]	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
153   	MEMBAR-acquire ! (empty encoding)
153   	movq    R10, [rsp + #48]	# spill
158   	movl    R11, [R10 + #40 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
15c   	movl    R8, [rsp + #8]	# spill
161   	cmpl    R8, RBP
164   	jne     B68  P=0.000000 C=307.000000
164
16a   B16: #	B62 B17 &lt;- B15  Freq: 199.951
16a   	decode_heap_oop_not_null RSI,R11
16d   	testl   R11, R11	# compressed ptr
170   	je     B62  P=0.000001 C=-1.000000
170
176   B17: #	B76 B18 &lt;- B16  Freq: 199.951
      	nop 	# 1 bytes pad for loops and calls
177   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=rsp + #48 L[1]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #24 L[5]=rsp + #32 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=380}
17c
17c   B18: #	B57 B19 &lt;- B17  Freq: 199.947
        # Block is sole successor of call
17c   	testl   RAX, RAX
17e   	je     B57  P=0.100000 C=-1.000000
17e
184   B19: #	B22 B20 &lt;- B18 B57  Freq: 199.947
184   	movq    R10, [rsp + #48]	# spill
189   	movzbl  R10, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
18e   	MEMBAR-acquire ! (empty encoding)
18e   	testl   R10, R10
191   	je,s   B22  P=0.000004 C=954370.000000
191
193   B20: #	B66 B21 &lt;- B19  Freq: 199.946
193   	movl    R10, [rsp + #12]	# spill
198   	testl   R10, R10
19b   	jne     B66  P=0.000001 C=-1.000000
      	nop 	# 15 bytes pad for loops and calls

1b0   B21: #	B21 B22 &lt;- B20 B21 	Loop: B21-B21 inner  Freq: 4.79219e+07
1b0   	movq    R10, [rsp + #48]	# spill
1b5   	movzbl  R11, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1ba   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=R10 L[1]=rsp + #12 STK[0]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #24 L[5]=rsp + #32 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{r10=Oop [0]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=442}
1c0   	MEMBAR-acquire ! (empty encoding)
1c0   	testl   R11, R11
1c3   	jne,s   B21  P=0.999996 C=954370.000000
1c3
1c5   B22: #	B79 B23 &lt;- B21 B19  Freq: 199.947
1c5   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:155  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #24 L[5]=rsp + #32 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop off=453}
1cb   	movl    R10, [rsp + #40]	# spill
1d0   	movl    RBP, [R10 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
1d4   	decode_heap_oop_not_null R11,RBP
1d7   	MEMBAR-acquire ! (empty encoding)
1d7   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
1db   	NullCheck RBP
1db
1db   B23: #	B72 B24 &lt;- B22  Freq: 199.946
1db   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f448806ce90:Constant:exact *	# compressed klass ptr
1e2   	jne,u  B72  P=0.000000 C=-1.000000
1e2
1e8   B24: #	B58 B25 &lt;- B23  Freq: 199.946
1e8   	# checkcastPP of R11
1e8   	movzbl  R10, [R11 + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
1ed   	testl   R10, R10
1f0   	jne     B58  P=0.003247 C=307.000000
1f0
1f6   B25: #	B26 &lt;- B24  Freq: 199.297
1f6   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #20], rax
	movq    rax, [rsp - #8]
1f6
208   B26: #	B78 B27 &lt;- B7 B25 	Loop: B26-B25  Freq: 200.296
208   	movl    R8, [R11 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
20c   	movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
210   	NullCheck R8
210
210   B27: #	B71 B28 &lt;- B26  Freq: 200.296
210   	cmpl    R10, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f448806cf60:Constant:exact *	# compressed klass ptr
217   	jne,u  B71  P=0.000000 C=-1.000000
217
21d   B28: #	B59 B29 &lt;- B27  Freq: 200.296
21d   	movq    R10, R11	# spill
220   	# checkcastPP of R10
220   	movq    [rsp + #48], R10	# spill
225   	movl    R10, [R10 + #32 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
229   	testl   R10, R10	# compressed ptr
22c   	je     B59  P=0.000001 C=-1.000000
22c
232   B29: #	B31 B30 &lt;- B28  Freq: 200.296
232   	MEMBAR-release ! (empty encoding)
232   	
232   	movl    R11, #-1	# int
238   	XADDL  [[R10 + #12 (8-bit)]],R11
23e   	decl    R11	# int
241   	
241   	MEMBAR-acquire ! (empty encoding)
241   	testl   R11, R11
244   	jne,s   B31  P=0.498168 C=273.000000
244
246   B30: #	B31 &lt;- B29  Freq: 100.515
246   	MEMBAR-release ! (empty encoding)
246   	movq    R10, [rsp + #48]	# spill
24b   	movb    [R10 + #18 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
24f   	lock addl [rsp + #0], 0	! membar_volatile
254
254   B31: #	B34 B32 &lt;- B29 B30  Freq: 200.296
254   	movq    R10, [rsp + #48]	# spill
259   	movzbl  R9, [R10 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
25e   	decode_heap_oop_not_null R10,R8
261   	# checkcastPP of R10
261   	MEMBAR-acquire ! (empty encoding)
261   	testl   R9, R9
264   	je,s   B34  P=0.000737 C=237460.000000
264
266   B32: #	B65 B33 &lt;- B31  Freq: 200.148
266   	movl    R11, [rsp + #12]	# spill
26b   	testl   R11, R11
26e   	jne     B65  P=0.000001 C=-1.000000
      	nop 	# 12 bytes pad for loops and calls

280   B33: #	B33 B34 &lt;- B32 B33 	Loop: B33-B33 inner  Freq: 271589
280   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=rsp + #48 L[1]=rsp + #12 STK[0]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=rsp + #0 L[1]=rsp + #20 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #24 L[5]=rsp + #16 L[6]=rsp + #48 L[7]=R10 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{r10=Oop [0]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=640}
286   	movq    R11, [rsp + #48]	# spill
28b   	movzbl  R11, [R11 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
290   	MEMBAR-acquire ! (empty encoding)
290   	testl   R11, R11
293   	jne,s   B33  P=0.999263 C=237460.000000
293
295   B34: #	B60 B35 &lt;- B33 B31  Freq: 200.296
295   	movq    R11, [rsp + #48]	# spill
29a   	movl    R8, [R11 + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
29e   	testl   R8, R8	# compressed ptr
2a1   	je     B60  P=0.000001 C=-1.000000
2a1
2a7   B35: #	B37 B36 &lt;- B34  Freq: 200.295
2a7   	movl    R11, [R10 + #12 (8-bit)]	# range
2ab   	MEMBAR-release ! (empty encoding)
2ab   	
2ab   	movl    R9, #-1	# int
2b1   	XADDL  [[R8 + #12 (8-bit)]],R9
2b7   	decl    R9	# int
2ba   	
2ba   	MEMBAR-acquire ! (empty encoding)
2ba   	testl   R9, R9
2bd   	jne,s   B37  P=0.507407 C=270.000000
2bd
2bf   B36: #	B37 &lt;- B35  Freq: 98.664
2bf   	MEMBAR-release ! (empty encoding)
2bf   	movq    R8, [rsp + #48]	# spill
2c4   	movb    [R8 + #17 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
2c8   	lock addl [rsp + #0], 0	! membar_volatile
2cd
2cd   B37: #	B8 B38 &lt;- B36 B35  Freq: 200.295
2cd   	movl    R9, [rsp + #20]	# spill
2d2   	incl    R9	# int
2d5   	movl    [rsp + #8], R9	# spill
2da   	testl   R11, R11
2dd   	jle     B8  P=0.002363 C=130369.000000
2dd
2e3   B38: #	B63 B39 &lt;- B37  Freq: 199.822
2e3   	movl    RCX, R11	# spill
2e6   	decl    RCX	# int
2e8   	testl  R11, R11	# unsigned
2eb   	jbe,u  B63  P=0.000001 C=-1.000000
2eb
2f1   B39: #	B63 B40 &lt;- B38  Freq: 199.822
2f1   	cmpl    RCX, R11	# unsigned
2f4   	jnb,u  B63  P=0.000001 C=-1.000000
2f4
2fa   B40: #	B73 B41 &lt;- B39  Freq: 199.822
2fa   	movl    R8, [R10 + #16 (8-bit)]	# compressed ptr
2fe   	movl    R9, [R8 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
302   	NullCheck R8
302
302   B41: #	B74 B42 &lt;- B40  Freq: 199.822
302   	movl    [R9 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
30a   	NullCheck R9
30a
30a   B42: #	B64 B43 &lt;- B41  Freq: 199.821
30a   	
30a   	MEMBAR-release ! (empty encoding)
30a   	movl    [R9 + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
312   	movl    [R9 + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
31d   	cmpl    RCX, #1
320   	jle     B64  P=0.000001 C=-1.000000
320
326   B43: #	B44 &lt;- B42  Freq: 199.821
326   	movl    RDI, #1	# int
      	nop 	# 5 bytes pad for loops and calls

330   B44: #	B73 B45 &lt;- B43 B48 	Loop: B44-B48 inner main of N401 Freq: 84434.1
330   	movl    R9, [R10 + #16 + RDI &lt;&lt; #2]	# compressed ptr
335   	movslq  R8, RDI	# i2l
338   	movl    R9, [R9 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
33c   	NullCheck R9
33c
33c   B45: #	B74 B46 &lt;- B44  Freq: 84434
33c   	addl    RDI, #2	# int
33f   	movl    [R9 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
347   	NullCheck R9
347
347   B46: #	B73 B47 &lt;- B45  Freq: 84434
347   	
347   	MEMBAR-release ! (empty encoding)
347   	movl    [R9 + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
352   	movl    RBX, [R10 + #20 + R8 &lt;&lt; #2]	# compressed ptr
357   	movl    [R9 + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
35f   	movl    R9, [RBX + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
363   	NullCheck RBX
363
363   B47: #	B74 B48 &lt;- B46  Freq: 84433.9
363   	movl    [R9 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
36b   	NullCheck R9
36b
36b   B48: #	B44 B49 &lt;- B47  Freq: 84433.8
36b   	
36b   	MEMBAR-release ! (empty encoding)
36b   	movl    [R9 + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
373   	movl    [R9 + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
37e   	cmpl    RDI, RCX
380   	jl,s   B44	# loop end  P=0.997637 C=130061.000000
380
382   B49: #	B8 B50 &lt;- B64 B48  Freq: 199.479
382   	cmpl    RDI, R11
385   	jge     B8  P=0.500000 C=-1.000000
385
38b   B50: #	B51 &lt;- B49  Freq: 99.7396
38b   	# castII of RDI
      	nop 	# 1 bytes pad for loops and calls

38c   B51: #	B73 B52 &lt;- B50 B53 	Loop: B51-B53 inner post of N1246 Freq: 199.479
38c   	movl    R8, [R10 + #16 + RDI &lt;&lt; #2]	# compressed ptr
391   	movl    R9, [R8 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
395   	NullCheck R8
395
395   B52: #	B74 B53 &lt;- B51  Freq: 199.479
395   	incl    RDI	# int
397   	movl    [R9 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
39f   	NullCheck R9
39f
39f   B53: #	B51 B54 &lt;- B52  Freq: 199.478
39f   	
39f   	MEMBAR-release ! (empty encoding)
39f   	movl    [R9 + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
3aa   	movl    [R9 + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
3b2   	cmpl    RDI, R11
3b5   	jl,s   B51	# loop end  P=0.500000 C=130061.000000
3b5
3b7   B54: #	B8 &lt;- B53  Freq: 99.7392
3b7   	jmp     B8
3b7
3bc   B55: #	B75 B56 &lt;- B14  Freq: 23.4471
3bc   	movq    RSI, [rsp + #0]	# spill
3c0   	movq    RDX, [rsp + #48]	# spill
      	nop 	# 2 bytes pad for loops and calls
3c7   	call,static  org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #0 L[1]=rsp + #20 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #24 L[5]=rsp + #32 L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=972}
3cc
3cc   B56: #	B15 &lt;- B55  Freq: 23.4466
        # Block is sole successor of call
3cc   	jmp     B15
3cc
3d1   B57: #	B19 &lt;- B18  Freq: 19.9947
3d1   	MEMBAR-release ! (empty encoding)
3d1   	movq    R10, [rsp + #48]	# spill
3d6   	movb    [R10 + #20 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
3da   	lock addl [rsp + #0], 0	! membar_volatile
3df   	jmp     B19
3df
3e4   B58: #	N1125 &lt;- B24 B5  Freq: 0.652418
3e4   	xorl    RAX, RAX	# ptr
3e6   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

3f1   	ret
3f1
3f2   B59: #	N1125 &lt;- B28  Freq: 0.000202956
3f2   	movl    RSI, #-10	# int
3f7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1020}
3fc   	int3	# ShouldNotReachHere
3fc
401   B60: #	N1125 &lt;- B34  Freq: 0.000202955
401   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
407   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1036}
40c   	int3	# ShouldNotReachHere
40c
411   B61: #	N1125 &lt;- B8  Freq: 0.000202607
411   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
417   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1052}
41c   	int3	# ShouldNotReachHere
41c
421   B62: #	N1125 &lt;- B16  Freq: 0.000202606
421   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
427   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1068}
42c   	int3	# ShouldNotReachHere
42c
431   B63: #	N1125 &lt;- B39 B38  Freq: 0.000402298
431   	movq    RBP, [rsp + #0]	# spill
435   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
446   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
458   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
46a   	movq    [rsp + #24], R10	# spill
46f   	movl    RSI, #-122	# int
474   	movl    [rsp + #32], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
47b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:82  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #48 L[7]=_ L[8]=rsp + #24 L[9]=rsp + #32 L[10]=#0 L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [24]=Oop [40]=NarrowOop [48]=Oop off=1152}
480   	int3	# ShouldNotReachHere
480
485   B64: #	B49 &lt;- B42  Freq: 0.000202475
485   	movl    RDI, #1	# int
48a   	jmp     B49
48a
48f   B65: #	N1125 &lt;- B32  Freq: 0.000200148
48f   	movq    RBP, [rsp + #0]	# spill
493   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
4a4   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
4b6   	pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #16]
4c0   	movq    [rsp + #24], R10	# spill
4c5   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
4cb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        #<!-- safepoint while printing -->
<writer thread='139933088626432'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139933087573760'/>
 org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:22  L[0]=rsp + #16 L[1]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #16 L[7]=rsp + #24 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [16]=Oop [24]=Oop [40]=NarrowOop off=1232}
4d0   	int3	# ShouldNotReachHere
4d0
4d5   B66: #	N1125 &lt;- B20  Freq: 0.000199946
4d5   	movq    RBP, [rsp + #0]	# spill
4d9   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
4ea   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
4fc   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
503   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:22  L[0]=rsp + #48 L[1]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=rsp + #8 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [40]=NarrowOop [48]=Oop off=1288}
508   	int3	# ShouldNotReachHere
508
50d   B67: #	N1125 &lt;- B12  Freq: 0.000199923
50d   	movq    RBP, [rsp + #0]	# spill
511   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
522   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
534   	pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #16]
53e   	movl    RSI, #-122	# int
543   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:35  L[0]=rsp + #16 L[1]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [16]=Oop [40]=NarrowOop off=1352}
548   	int3	# ShouldNotReachHere
548
54d   B68: #	N1125 &lt;- B15  Freq: 9.53441e-05
54d   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
553   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:136  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=rsp + #16 L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #8 STK[1]=RBP
        # OopMap{[0]=Oop [16]=NarrowOop [40]=NarrowOop [48]=Oop off=1368}
558   	int3	# ShouldNotReachHere
558
55d   B69: #	N1125 &lt;- B6  Freq: 1.00999e-06
55d   	movl    RSI, #-122	# int
562   	movq    RBP, RBX	# spill
565   	movl    [rsp + #0], R10	# spill
569   	movl    [rsp + #4], RCX	# spill
56d   	movq    [rsp + #8], R11	# spill
572   	movl    [rsp + #16], RDI	# spill
      	nop 	# 1 bytes pad for loops and calls
577   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:47  L[0]=RBP L[1]=#0 L[2]=_ L[3]=rsp + #0 L[4]=rsp + #16 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [4]=NarrowOop [8]=Oop [16]=NarrowOop off=1404}
57c   	int3	# ShouldNotReachHere
57c
581   B70: #	N1125 &lt;- B4  Freq: 1e-35
581   	movl    RSI, #-34	# int
586   	movq    [rsp + #0], RBX	# spill
58a   	movl    [rsp + #8], R10	# spill
58f   	movl    [rsp + #12], RCX	# spill
593   	movl    [rsp + #16], RDI	# spill
597   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=rsp + #0 L[1]=#0 L[2]=_ L[3]=rsp + #8 L[4]=rsp + #16 L[5]=rsp + #12 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [12]=NarrowOop [16]=NarrowOop off=1436}
59c   	int3	# ShouldNotReachHere
59c
5a1   B71: #	N1125 &lt;- B27  Freq: 1e-35
5a1   	movq    RBP, [rsp + #0]	# spill
5a5   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
5b6   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
5c8   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
5da   	movq    [rsp + #16], R11	# spill
5df   	movl    [rsp + #12], R8	# spill
5e4   	movl    RSI, #-34	# int
      	nop 	# 2 bytes pad for loops and calls
5eb   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:52  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #12
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [40]=NarrowOop off=1520}
5f0   	int3	# ShouldNotReachHere
5f0
5f5   B72: #	N1125 &lt;- B23  Freq: 1e-35
5f5   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
5fb   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [16]=NarrowOop [40]=NarrowOop off=1536}
600   	int3	# ShouldNotReachHere
600
605   B73: #	N1125 &lt;- B51 B40 B44 B46  Freq: 0.171515
605   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
60b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:91  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1552}
610   	int3	# ShouldNotReachHere
610
615   B74: #	N1125 &lt;- B52 B41 B45 B47  Freq: 0.171515
615   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
61b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:94  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1568}
620   	int3	# ShouldNotReachHere
620
625   B75: #	B77 &lt;- B55  Freq: 0.000234471
625   	# exception oop is in rax; no code emitted
625   	movq    RSI, RAX	# spill
628   	jmp,s   B77
628
62a   B76: #	B77 &lt;- B17  Freq: 0.00199951
62a   	# exception oop is in rax; no code emitted
62a   	movq    RSI, RAX	# spill
62a
62d   B77: #	N1125 &lt;- B75 B76  Freq: 0.00223398
62d   	addq    rsp, 80	# Destroy frame
	popq   rbp

632   	jmp     rethrow_stub
632
637   B78: #	N1125 &lt;- B26  Freq: 0.000202956
637   	movq    RBP, [rsp + #0]	# spill
63b   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
64c   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
65e   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
670   	movq    [rsp + #16], R11	# spill
675   	movl    RSI, #-12	# int
      	nop 	# 1 bytes pad for loops and calls
67b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:52  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [8]=NarrowOop [16]=Oop [40]=NarrowOop off=1664}
680   	int3	# ShouldNotReachHere
680
685   B79: #	N1125 &lt;- B22  Freq: 0.000202602
685   	movq    RBP, [rsp + #0]	# spill
689   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
69a   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
6ac   	movl    RSI, #-12	# int
      	nop 	# 2 bytes pad for loops and calls
6b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [16]=NarrowOop [40]=NarrowOop off=1720}
6b8   	int3	# ShouldNotReachHere
6b8
6bd   B80: #	N1125 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
6bf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:11  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1732}
6c4   	int3	# ShouldNotReachHere
6c4
6c9   B81: #	N1125 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
6cb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:29  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1744}
6d0   	int3	# ShouldNotReachHere
6d0
6d5   B82: #	N1125 &lt;- B3  Freq: 1.01328e-06
6d5   	movl    RSI, #-12	# int
6da   	movq    RBP, RBX	# spill
6dd   	movl    [rsp + #0], R10	# spill
6e1   	movl    [rsp + #4], RCX	# spill
6e5   	movl    [rsp + #8], RDI	# spill
      	nop 	# 2 bytes pad for loops and calls
6eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=RBP L[1]=#0 L[2]=_ L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #4 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [4]=NarrowOop [8]=NarrowOop off=1776}
6f0   	int3	# ShouldNotReachHere
6f0

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='444'>
{method}
 - this oop:          0x00007f44cd16fac0
 - method holder:     &apos;org/openjdk/jcstress/infra/results/IntResult2&apos;
 - constants:         0x00007f44cd16f780 constant pool [63] {0x00007f44cd16f780} for &apos;org/openjdk/jcstress/infra/results/IntResult2&apos; cache=0x00007f44cd16fe00
 - access:            0x81000001  public 
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;()V&apos;
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef760: 0xb0000000 i2c: 0x00007f44b9145620 c2i: 0x00007f44b914575a c2iUV: 0x00007f44b914572d
 - compiled entry     0x00007f44b9306b60
 - code size:         5
 - code start:        0x00007f44cd16faa8
 - code end (excl):   0x00007f44cd16faad
 - method data:       0x00007f44cd1777f8
 - checked ex length: 0
 - linenumber start:  0x00007f44cd16faad
 - localvar length:   1
 - localvar start:    0x00007f44cd16fab2
 - compiled code: nmethod   4355  416       3       org.openjdk.jcstress.infra.results.IntResult2::&lt;init&gt; (5 bytes)
#
#  void ( org/openjdk/jcstress/infra/results/IntResult2:NotNull * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/results/IntResult2:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N14: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	N14 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

037   	ret
037

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='443'>
{method}
 - this oop:          0x00007f44cd173370
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair&apos;
 - constants:         0x00007f44cd1731d8 constant pool [24] {0x00007f44cd1731d8} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair&apos; cache=0x00007f44cd175968
 - access:            0x81000000  
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;()V&apos;
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef760: 0xb0000000 i2c: 0x00007f44b9145620 c2i: 0x00007f44b914575a c2iUV: 0x00007f44b914572d
 - compiled entry     0x00007f44b930eaa0
 - code size:         5
 - code start:        0x00007f44cd173358
 - code end (excl):   0x00007f44cd17335d
 - method data:       0x00007f44cd1776a0
 - checked ex length: 0
 - linenumber start:  0x00007f44cd17335d
 - localvar length:   1
 - localvar start:    0x00007f44cd173362
 - compiled code: nmethod   4358  415       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Pair::&lt;init&gt; (5 bytes)
#
#  void ( org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair:NotNull * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N14: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	N14 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

037   	ret
037

</opto_assembly>
<writer thread='139933088626432'/>
<opto_assembly compile_id='439'>
{method}
 - this oop:          0x00007f44cd175490
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2&apos;
 - constants:         0x00007f44cd174d50 constant pool [137] {0x00007f44cd174d50} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2&apos; cache=0x00007f44cd175618
 - access:            0xc1000001  public 
 - name:              &apos;call&apos;
 - signature:         &apos;()Ljava/lang/Void;&apos;
 - max stack:         5
 - max locals:        12
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f44b901eb00
 - adapters:          AHE@0x00007f44c80ef760: 0xb0000000 i2c: 0x00007f44b9145620 c2i: 0x00007f44b914575a c2iUV: 0x00007f44b914572d
 - compiled entry     0x00007f44b9316560
 - code size:         163
 - code start:        0x00007f44cd175360
 - code end (excl):   0x00007f44cd175403
 - method data:       0x00007f44cd177f50
 - checked ex length: 0
 - linenumber start:  0x00007f44cd175403
 - localvar length:   9
 - localvar start:    0x00007f44cd175422
 - compiled code: nmethod   4509  411       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call (163 bytes)
#
#  java/lang/Void:exact * ( org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2:NotNull * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2:NotNull *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1205: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B84 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (312 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movq    RDI, RSI	# spill
02f   	movl    RSI, #-10	# int
034   	movl    R10, [RDI + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
038   	movzbl  R10, [R10 + #33 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/Control.shouldYield
03d   	NullCheck R10
03d
03d   B2: #	B85 B3 &lt;- B1  Freq: 0.999999
03d   	movl    R11, [RDI + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.version
041   	movl    RBP, [R11 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
045   	NullCheck R11
045
045   B3: #	B86 B4 &lt;- B2  Freq: 0.999998
045   	movl    RSI, #-12	# int
04a   	movl    R9, [RDI + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.epoch
04e   	MEMBAR-acquire ! (empty encoding)
04e   	movl    RBX, [RBP + #8 (8-bit)]	# compressed klass ptr
051   	NullCheck RBP
051
051   B4: #	B73 B5 &lt;- B3  Freq: 0.999997
051   	decode_heap_oop_not_null R8,RBP
054   	movl    RSI, #-34	# int
059   	cmpl    RBX, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4488218390:Constant:exact *	# compressed klass ptr
05f   	jne,u  B73  P=0.000000 C=-1.000000
05f
065   B5: #	B61 B6 &lt;- B4  Freq: 0.999997
065   	# checkcastPP of R8
065   	movzbl  RCX, [R8 + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
06a   	testl   RCX, RCX
06c   	jne     B61  P=0.002915 C=343.000000
06c
072   B6: #	B72 B7 &lt;- B5  Freq: 0.997082
072   	decode_heap_oop_not_null RCX,R11
075   	testl   R9, R9	# compressed ptr
078   	je     B72  P=0.000001 C=-1.000000
078
07e   B7: #	B27 &lt;- B6  Freq: 0.997081
07e   	movq    [rsp + #24], RCX	# spill
083   	movl    [rsp + #40], R11	# spill
088   	movl    [rsp + #12], R10	# spill
08d   	movq    [rsp + #0], RDI	# spill
091   	decode_heap_oop_not_null R10,R9
094   	movq    [rsp + #32], R10	# spill
099   	movl    [rsp + #16], R9	# spill
09e   	xorl    R11, R11	# int
0a1   	movl    [rsp + #20], R11	# spill
0a6   	jmp     B27
0a6
0ab   B8: #	B64 B9 &lt;- B59 B53 B38  top-of-loop Freq: 200.767
0ab   	movq    R10, [rsp + #48]	# spill
0b0   	movl    R11, [R10 + #36 (8-bit)]	# compressed ptr ! Field: <!-- safepoint while printing -->
org/openjdk/jcstress/infra/runners/StateHolder.finished
0b4   	testl   R11, R11	# compressed ptr
0b7   	je     B64  P=0.000001 C=-1.000000
0b7
0bd   B9: #	B11 B10 &lt;- B8  Freq: 200.767
0bd   	MEMBAR-release ! (empty encoding)
0bd   	
0bd   	movl    R10, #-1	# int
0c3   	XADDL  [[R11 + #12 (8-bit)]],R10
0c9   	decl    R10	# int
0cc   	
0cc   	MEMBAR-acquire ! (empty encoding)
0cc   	testl   R10, R10
0cf   	jne,s   B11  P=0.498155 C=271.000000
0cf
0d1   B10: #	B11 &lt;- B9  Freq: 100.754
0d1   	MEMBAR-release ! (empty encoding)
0d1   	movq    R10, [rsp + #48]	# spill
0d6   	movb    [R10 + #19 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
0da   	lock addl [rsp + #0], 0	! membar_volatile
0df
0df   B11: #	B14 B12 &lt;- B10 B9  Freq: 200.767
0df   	movq    R10, [rsp + #48]	# spill
0e4   	movzbl  R11, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
0e9   	MEMBAR-acquire ! (empty encoding)
0e9   	movzbl  R10, [R10 + #17 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
0ee   	orl     R11, R10	# int
0f1   	MEMBAR-acquire ! (empty encoding)
0f1   	MEMBAR-release ! (empty encoding)
0f1   	movq    R10, [rsp + #48]	# spill
0f6   	movb    [R10 + #21 (8-bit)], R11	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
0fa   	lock addl [rsp + #0], 0	! membar_volatile
0ff   	movzbl  R11, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
104   	MEMBAR-acquire ! (empty encoding)
104   	testl   R11, R11
107   	je,s   B14  P=0.000145 C=1601492.000000
107
109   B12: #	B70 B13 &lt;- B11  Freq: 200.738
109   	movl    R11, [rsp + #12]	# spill
10e   	testl   R11, R11
111   	jne     B70  P=0.000001 C=-1.000000
      	nop 	# 9 bytes pad for loops and calls

120   B13: #	B13 B14 &lt;- B12 B13 	Loop: B13-B13 inner  Freq: 1.38593e+06
120   	movq    R10, [rsp + #48]	# spill
125   	movzbl  R10, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
12a   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=rsp + #48 L[1]=rsp + #12 STK[0]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=rsp + #0 L[1]=rsp + #20 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #24 L[5]=rsp + #16 L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=298}
130   	MEMBAR-acquire ! (empty encoding)
130   	testl   R10, R10
133   	jne,s   B13  P=0.999855 C=1601492.000000
133
135   B14: #	B16 B15 &lt;- B13 B11  Freq: 200.767
135   	MEMBAR-release ! (empty encoding)
135   	
135   	movl    R11, [rsp + #16]	# spill
13a   	movl    RAX, [rsp + #20]	# spill
13e   	movl    R8, [rsp + #8]	# spill
143   	cmpxchgl [R11 + #12 (8-bit)],R8	# If rax == [R11 + #12 (8-bit)] then store R8 into [R11 + #12 (8-bit)]
	sete    R11
	movzbl  R11, R11
151   	
151   	MEMBAR-acquire ! (empty encoding)
151   	testl   R11, R11
154   	je,s   B16  P=0.108187 C=342.000000
154
156   B15: #	B80 B16 &lt;- B14  Freq: 179.046
156   	movq    RSI, [rsp + #0]	# spill
15a   	movq    RDX, [rsp + #48]	# spill
15f   	call,static  org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #0 L[1]=rsp + #20 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #24 L[5]=rsp + #32 L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=356}
164
164   B16: #	B71 B17 &lt;- B15 B14  Freq: 200.763
164   	movl    R10, [rsp + #16]	# spill
169   	movl    RBP, [R10 + #12 (8-bit)]	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
16d   	MEMBAR-acquire ! (empty encoding)
16d   	movl    R11, [rsp + #8]	# spill
172   	cmpl    R11, RBP
175   	jne     B71  P=0.000000 C=342.000000
175
17b   B17: #	B65 B18 &lt;- B16  Freq: 200.763
17b   	movq    R10, [rsp + #48]	# spill
180   	movl    R11, [R10 + #40 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
184   	decode_heap_oop_not_null RSI,R11
187   	testl   R11, R11	# compressed ptr
18a   	je     B65  P=0.000001 C=-1.000000
18a
190   B18: #	B79 B19 &lt;- B17  Freq: 200.763
      	nop 	# 3 bytes pad for loops and calls
193   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=rsp + #48 L[1]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #24 L[5]=rsp + #32 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=408}
198
198   B19: #	B60 B20 &lt;- B18  Freq: 200.759
        # Block is sole successor of call
198   	testl   RAX, RAX
19a   	je     B60  P=0.100000 C=-1.000000
19a
1a0   B20: #	B23 B21 &lt;- B19 B60  Freq: 200.759
1a0   	movq    R10, [rsp + #48]	# spill
1a5   	movzbl  R11, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1aa   	MEMBAR-acquire ! (empty encoding)
1aa   	testl   R11, R11
1ad   	je,s   B23  P=0.000004 C=954370.000000
1ad
1af   B21: #	B69 B22 &lt;- B20  Freq: 200.758
1af   	movl    R10, [rsp + #12]	# spill
1b4   	testl   R10, R10
1b7   	jne     B69  P=0.000001 C=-1.000000
      	nop 	# 3 bytes pad for loops and calls

1c0   B22: #	B22 B23 &lt;- B21 B22 	Loop: B22-B22 inner  Freq: 4.81165e+07
1c0   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=rsp + #48 L[1]=rsp + #12 STK[0]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #24 L[5]=rsp + #32 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=448}
1c6   	movq    R10, [rsp + #48]	# spill
1cb   	movzbl  R11, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1d0   	MEMBAR-acquire ! (empty encoding)
1d0   	testl   R11, R11
1d3   	jne,s   B22  P=0.999996 C=954370.000000
1d3
1d5   B23: #	B83 B24 &lt;- B22 B20  Freq: 200.758
1d5   	movl    R11, [rsp + #40]	# spill
1da   	movl    RBP, [R11 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
1de   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:160  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #24 L[5]=rsp + #32 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [0]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop off=478}
1e4   	decode_heap_oop_not_null R8,RBP
1e7   	MEMBAR-acquire ! (empty encoding)
1e7   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
1eb   	NullCheck RBP
1eb
1eb   B24: #	B75 B25 &lt;- B23  Freq: 200.758
1eb   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4488218390:Constant:exact *	# compressed klass ptr
1f2   	jne,u  B75  P=0.000000 C=-1.000000
1f2
1f8   B25: #	B61 B26 &lt;- B24  Freq: 200.758
1f8   	# checkcastPP of R8
1f8   	movzbl  R11, [R8 + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
1fd   	testl   R11, R11
200   	jne     B61  P=0.002915 C=342.000000
200
206   B26: #	B27 &lt;- B25  Freq: 200.173
206   	movl    R11, [rsp + #8]	# spill
20b   	movl    [rsp + #20], R11	# spill
20b
210   B27: #	B82 B28 &lt;- B7 B26 	Loop: B27-B26  Freq: 201.174
210   	movl    RCX, [R8 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
214   	decode_heap_oop_not_null R9,RCX
217   	movl    R10, [RCX + #8 (8-bit)]	# compressed klass ptr
21b   	NullCheck RCX
21b
21b   B28: #	B74 B29 &lt;- B27  Freq: 201.174
21b   	cmpl    R10, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f4488218460:Constant:exact *	# compressed klass ptr
222   	jne,u  B74  P=0.000000 C=-1.000000
222
228   B29: #	B62 B30 &lt;- B28  Freq: 201.174
228   	# checkcastPP of R8
228   	movq    [rsp + #48], R8	# spill
22d   	# checkcastPP of R9
22d   	movl    R10, [R8 + #32 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
231   	testl   R10, R10	# compressed ptr
234   	je     B62  P=0.000001 C=-1.000000
234
23a   B30: #	B32 B31 &lt;- B29  Freq: 201.173
23a   	MEMBAR-release ! (empty encoding)
23a   	
23a   	movl    R8, #-1	# int
240   	XADDL  [[R10 + #12 (8-bit)]],R8
246   	decl    R8	# int
249   	
249   	MEMBAR-acquire ! (empty encoding)
249   	testl   R8, R8
24c   	jne,s   B32  P=0.498168 C=273.000000
24c
24e   B31: #	B32 &lt;- B30  Freq: 100.955
24e   	MEMBAR-release ! (empty encoding)
24e   	movq    R10, [rsp + #48]	# spill
253   	movb    [R10 + #18 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
257   	lock addl [rsp + #0], 0	! membar_volatile
25c
25c   B32: #	B35 B33 &lt;- B30 B31  Freq: 201.173
25c   	movq    R10, [rsp + #48]	# spill
261   	movzbl  R11, [R10 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
266   	MEMBAR-acquire ! (empty encoding)
266   	testl   R11, R11
269   	je,s   B35  P=0.000737 C=237460.000000
269
26b   B33: #	B68 B34 &lt;- B32  Freq: 201.025
26b   	movl    R10, [rsp + #12]	# spill
270   	testl   R10, R10
273   	jne     B68  P=0.000001 C=-1.000000
      	nop 	# 7 bytes pad for loops and calls

280   B34: #	B34 B35 &lt;- B33 B34 	Loop: B34-B34 inner  Freq: 272779
280   	movq    R10, [rsp + #48]	# spill
285   	movzbl  R10, [R10 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
28a   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=rsp + #48 L[1]=rsp + #12 STK[0]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=rsp + #0 L[1]=rsp + #20 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #24 L[5]=rsp + #16 L[6]=rsp + #48 L[7]=R9 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{r9=Oop [0]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=650}
290   	MEMBAR-acquire ! (empty encoding)
290   	testl   R10, R10
293   	jne,s   B34  P=0.999263 C=237460.000000
293
295   B35: #	B63 B36 &lt;- B34 B32  Freq: 201.173
295   	movq    R10, [rsp + #48]	# spill
29a   	movl    R10, [R10 + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
29e   	testl   R10, R10	# compressed ptr
2a1   	je     B63  P=0.000001 C=-1.000000
2a1
2a7   B36: #	B38 B37 &lt;- B35  Freq: 201.173
2a7   	MEMBAR-release ! (empty encoding)
2a7   	movl    R11, [R9 + #12 (8-bit)]	# range
2ab   	movl    RAX, R11	# spill
2ae   	movl    R11, [rsp + #20]	# spill
2b3   	incl    R11	# int
2b6   	movl    [rsp + #8], R11	# spill
2bb   	
2bb   	movl    R11, #-1	# int
2c1   	XADDL  [[R10 + #12 (8-bit)]],R11
2c7   	decl    R11	# int
2ca   	
2ca   	MEMBAR-acquire ! (empty encoding)
2ca   	testl   R11, R11
2cd   	jne,s   B38  P=0.507407 C=270.000000
2cd
2cf   B37: #	B38 &lt;- B36  Freq: 99.0963
2cf   	MEMBAR-release ! (empty encoding)
2cf   	movq    R10, [rsp + #48]	# spill
2d4   	movb    [R10 + #17 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
2d8   	lock addl [rsp + #0], 0	! membar_volatile
2dd
2dd   B38: #	B8 B39 &lt;- B37 B36  Freq: 201.173
2dd   	testl   RAX, RAX
2df   	jle     B8  P=0.003009 C=113663.000000
2df
2e5   B39: #	B66 B40 &lt;- B38  Freq: 200.568
2e5   	movl    RCX, RAX	# spill
2e7   	decl    RCX	# int
2e9   	testl  RAX, RAX	# unsigned
2eb   	jbe,u  B66  P=0.000001 C=-1.000000
2eb
2f1   B40: #	B66 B41 &lt;- B39  Freq: 200.568
2f1   	cmpl    RCX, RAX	# unsigned
2f3   	jnb,u  B66  P=0.000001 C=-1.000000
2f3
2f9   B41: #	B76 B42 &lt;- B40  Freq: 200.567
2f9   	movl    R10, [R9 + #16 (8-bit)]	# compressed ptr
2fd   	movl    R11, [R10 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
301   	NullCheck R10
301
301   B42: #	B77 B43 &lt;- B41  Freq: 200.567
301   	movl    R8, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
305   	movl    RDI, [R11 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
30c   	NullCheck R11
30c
30c   B43: #	B78 B44 &lt;- B42  Freq: 200.567
30c   	movl    R10, [R11 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
310   	movl    [R8 + #140 (32-bit)], RDI	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
317   	NullCheck R8
317
317   B44: #	B67 B45 &lt;- B43  Freq: 200.567
317   	movl    [R8 + #272 (32-bit)], R10	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
31e   	cmpl    RCX, #1
321   	jle     B67  P=0.000001 C=-1.000000
321
327   B45: #	B46 &lt;- B44  Freq: 200.567
327   	movl    RDX, #1	# int
      	nop 	# 4 bytes pad for loops and calls

330   B46: #	B76 B47 &lt;- B45 B52 	Loop: B46-B52 inner main of N424 Freq: 66523.7
330   	movslq  R10, RDX	# i2l
333   	movl    R8, [R9 + #16 + RDX &lt;&lt; #2]	# compressed ptr
338   	movl    RBX, [R9 + #20 + R10 &lt;&lt; #2]	# compressed ptr
33d   	movl    R11, [R8 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
341   	NullCheck R8
341
341   B47: #	B77 B48 &lt;- B46  Freq: 66523.6
341   	movl    R8, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
345   	addl    RDX, #2	# int
348   	movl    RDI, [R11 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
34f   	NullCheck R11
34f
34f   B48: #	B78 B49 &lt;- B47  Freq: 66523.6
34f   	movl    [R8 + #140 (32-bit)], RDI	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
356   	NullCheck R8
356
356   B49: #	B76 B50 &lt;- B48  Freq: 66523.5
356   	movl    R10, [R11 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
35a   	movl    [R8 + #272 (32-bit)], R10	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
361   	movl    R10, [RBX + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
365   	NullCheck RBX
365
365   B50: #	B77 B51 &lt;- B49  Freq: 66523.4
365   	movl    R8, [RBX + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
369   	movl    RDI, [R10 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
370   	NullCheck R10
370
370   B51: #	B78 B52 &lt;- B50  Freq: 66523.4
370   	movl    R11, [R10 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
374   	movl    [R8 + #140 (32-bit)], RDI	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
37b   	NullCheck R8
37b
37b   B52: #	B46 B53 &lt;- B51  Freq: 66523.3
37b   	movl    [R8 + #272 (32-bit)], R11	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
382   	cmpl    RDX, RCX
384   	jl,s   B46	# loop end  P=0.996991 C=113321.000000
384
386   B53: #	B8 B54 &lt;- B67 B52  Freq: 200.162
386   	cmpl    RDX, RAX
388   	jge     B8  P=0.500000 C=-1.000000
388
38e   B54: #	B55 &lt;- B53  Freq: 100.081
38e   	# castII of RDX
      	nop 	# 2 bytes pad for loops and calls

390   B55: #	B76 B56 &lt;- B54 B58 	Loop: B55-B58 inner post of N1259 Freq: 200.162
390   	movl    R8, [R9 + #16 + RDX &lt;&lt; #2]	# compressed ptr
395   	movl    R11, [R8 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
399   	NullCheck R8
399
399   B56: #	B77 B57 &lt;- B55  Freq: 200.161
399   	movl    R8, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
39d   	incl    RDX	# int
39f   	movl    RDI, [R11 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
3a6   	NullCheck R11
3a6
3a6   B57: #	B78 B58 &lt;- B56  Freq: 200.161
3a6   	movl    [R8 + #140 (32-bit)], RDI	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
3ad   	NullCheck R8
3ad
3ad   B58: #	B55 B59 &lt;- B57  Freq: 200.161
3ad   	movl    R10, [R11 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
3b1   	movl    [R8 + #272 (32-bit)], R10	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
3b8   	cmpl    RDX, RAX
3ba   	jl,s   B55	# loop end  P=0.500000 C=113321.000000
3ba
3bc   B59: #	B8 &lt;- B58  Freq: 100.081
3bc   	jmp     B8
3bc
3c1   B60: #	B20 &lt;- B19  Freq: 20.0759
3c1   	MEMBAR-release ! (empty encoding)
3c1   	movq    R10, [rsp + #48]	# spill
3c6   	movb    [R10 + #20 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
3ca   	lock addl [rsp + #0], 0	! membar_volatile
3cf   	jmp     B20
3cf
3d4   B61: #	N1205 &lt;- B25 B5  Freq: 0.588215
3d4   	xorl    RAX, RAX	# ptr
3d6   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

3e1   	ret
3e1
3e2   B62: #	N1205 &lt;- B29  Freq: 0.000203845
3e2   	movl    RSI, #-10	# int
3e7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1004}
3ec   	int3	# ShouldNotReachHere
3ec
3f1   B63: #	N1205 &lt;- B35  Freq: 0.000203845
3f1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
3f7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1020}
3fc   	int3	# ShouldNotReachHere
3fc
401   B64: #	N1205 &lt;- B8  Freq: 0.000203433
401   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
407   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1036}
40c   	int3	# ShouldNotReachHere
40c
411   B65: #	N1205 &lt;- B17  Freq: 0.000203429
411   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
417   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1052}
41c   	int3	# ShouldNotReachHere
41c
421   B66: #	N1205 &lt;- B40 B39  Freq: 0.000403799
421   	movq    RBP, [rsp + #0]	# spill
425   	movl    R10, [rsp + #20]	# spill
42a   	movl    [rsp + #0], R10	# spill
42e   	movl    R11, [rsp + #12]	# spill
433   	movl    [rsp + #4], R11	# spill
438   	movl    R10, [rsp + #16]	# spill
43d   	movl    [rsp + #8], R10	# spill
442   	movq    [rsp + #24], R9	# spill
447   	movl    RSI, #-122	# int
44c   	movl    [rsp + #32], RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
453   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:82  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #48 L[7]=_ L[8]=rsp + #24 L[9]=rsp + #32 L[10]=#0 L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [24]=Oop [40]=NarrowOop [48]=Oop off=1112}
458   	int3	# ShouldNotReachHere
458
45d   B67: #	B53 &lt;- B44  Freq: 0.00020323
45d   	movl    RDX, #1	# int
462   	jmp     B53
462
467   B68: #	N1205 &lt;- B33  Freq: 0.000201025
467   	movq    RBP, [rsp + #0]	# spill
46b   	movl    R11, [rsp + #20]	# spill
470   	movl    [rsp + #0], R11	# spill
474   	movl    R11, [rsp + #16]	# spill
479   	movl    [rsp + #8], R11	# spill
47e   	movq    R10, [rsp + #48]	# spill
483   	movq    [rsp + #24], R9	# spill
488   	movq    [rsp + #32], R10	# spill
48d   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
493   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:22  L[0]=rsp + #48 L[1]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #32 L[7]=rsp + #24 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=1176}
498   	int3	# ShouldNotReachHere
498
49d   B69: #	N1205 &lt;- B21  Freq: 0.000200758
49d   	movq    RBP, [rsp + #0]	# spill
4a1   	movl    R10, [rsp + #8]	# spill
4a6   	movl    [rsp + #0], R10	# spill
4aa   	movl    R10, [rsp + #16]	# spill
4af   	movl    [rsp + #8], R10	# spill
4b4   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
4bb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:22  L[0]=rsp + #48 L[1]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=rsp + #8 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [40]=NarrowOop [48]=Oop off=1216}
4c0   	int3	# ShouldNotReachHere
4c0
4c5   B70: #	N1205 &lt;- B12  Freq: 0.000200738
4c5   	movl    RSI, #-122	# int
4ca   	movq    RBP, [rsp + #0]	# spill
4ce   	movl    R10, [rsp + #20]	# spill
4d3   	movl    [rsp + #0], R10	# spill
4d7   	movl    R10, [rsp + #16]	# spill
4dc   	movl    [rsp + #8], R10	# spill
4e1   	movq    R10, [rsp + #48]	# spill
4e6   	movq    [rsp + #24], R10	# spill
4eb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:35  L[0]=rsp + #48 L[1]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [24]=Oop [40]=NarrowOop [48]=Oop off=1264}
4f0   	int3	# ShouldNotReachHere
4f0
4f5   B71: #	N1205 &lt;- B16  Freq: 9.57312e-05
4f5   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
4fb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:141  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=rsp + #16 L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #8 STK[1]=RBP
        # OopMap{[0]=Oop [16]=NarrowOop [40]=NarrowOop [48]=Oop off=1280}
500   	int3	# ShouldNotReachHere
500
505   B72: #	N1205 &lt;- B6  Freq: 1.01032e-06
505   	movq    RBP, RDI	# spill
508   	movl    [rsp + #0], R10	# spill
50c   	movl    [rsp + #4], R9	# spill
511   	movq    [rsp + #8], R8	# spill
516   	movl    [rsp + #16], R11	# spill
51b   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
523   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:47  L[0]=RBP L[1]=#0 L[2]=_ L[3]=rsp + #0 L[4]=rsp + #16 L[5]=rsp + #4 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [4]=NarrowOop [8]=Oop [16]=NarrowOop off=1320}
528   	int3	# ShouldNotReachHere
528
52d   B73: #	N1205 &lt;- B4  Freq: 1e-35
52d   	movq    [rsp + #0], RDI	# spill
531   	movl    [rsp + #8], R10	# spill
536   	movl    [rsp + #12], R9	# spill
53b   	movl    [rsp + #16], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
543   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:32  L[0]=rsp + #0 L[1]=#0 L[2]=_ L[3]=rsp + #8 L[4]=rsp + #16 L[5]=rsp + #12 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [12]=NarrowOop [16]=NarrowOop off=1352}
548   	int3	# ShouldNotReachHere
548
54d   B74: #	N1205 &lt;- B28  Freq: 1e-35
54d   	movq    RBP, [rsp + #0]	# spill
551   	movl    R10, [rsp + #20]	# spill
556   	movl    [rsp + #0], R10	# spill
55a   	movl    R11, [rsp + #12]	# spill
55f   	movl    [rsp + #4], R11	# spill
564   	movl    R10, [rsp + #16]	# spill
569   	movl    [rsp + #8], R10	# spill
56e   	movq    [rsp + #16], R8	# spill
573   	movl    [rsp + #12], RCX	# spill
577   	movl    RSI, #-34	# int
      	nop 	# 3 bytes pad for loops and calls
57f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:52  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #12
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [40]=NarrowOop off=1412}
584   	int3	# ShouldNotReachHere
584
589   B75: #	N1205 &lt;- B24  Freq: 1e-35
589   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
58f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:32  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [16]=NarrowOop [40]=NarrowOop off=1428}
594   	int3	# ShouldNotReachHere
594
599   B76: #	N1205 &lt;- B55 B41 B46 B49  Freq: 0.13522
599   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
59f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:91  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1444}
5a4   	int3	# ShouldNotReachHere
5a4
5a9   B77: #	N1205 &lt;- B56 B42 B47 B50  Freq: 0.13522
5a9   	movl    RBP, R8	# spill
5ac   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
5b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:99  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=NarrowOop off=1464}
5b8   	int3	# ShouldNotReachHere
5b8
5bd   B78: #	N1205 &lt;- B57 B43 B48 B51  Freq: 0.13522
5bd   	movl    RBP, RDI	# spill
5bf   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
5c7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest::actor2 @ bci:12  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:99  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1484}
5cc   	int3	# ShouldNotReachHere
5cc
5d1   B79: #	B81 &lt;- B18  Freq: 0.00200763
5d1   	# exception oop is in rax; no code emitted
5d1   	movq    RSI, RAX	# spill
5d4   	jmp,s   B81
5d4
5d6   B80: #	B81 &lt;- B15  Freq: 0.00179046
5d6   	# exception oop is in rax; no code emitted
5d6   	movq    RSI, RAX	# spill
5d6
5d9   B81: #	N1205 &lt;- B80 B79  Freq: 0.00379809
5d9   	addq    rsp, 80	# Destroy frame
	popq   rbp

5de   	jmp     rethrow_stub
5de
5e3   B82: #	N1205 &lt;- B27  Freq: 0.000203845
5e3   	movq    RBP, [rsp + #0]	# spill
5e7   	movl    R11, [rsp + #20]	# spill
5ec   	movl    [rsp + #0], R11	# spill
5f0   	movl    R10, [rsp + #12]	# spill
5f5   	movl    [rsp + #4], R10	# spill
5fa   	movl    R11, [rsp + #16]	# spill
5ff   	movl    [rsp + #8], R11	# spill
604   	movq    [rsp + #16], R8	# spill
609   	movl    RSI, #-12	# int
      	nop 	# 1 bytes pad for loops and calls
60f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:52  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [8]=NarrowOop [16]=Oop [40]=NarrowOop off=1556}
614   	int3	# ShouldNotReachHere
614
619   B83: #	N1205 &lt;- B23  Freq: 0.000203424
619   	movq    RBP, [rsp + #0]	# spill
61d   	movl    R10, [rsp + #8]	# spill
622   	movl    [rsp + #0], R10	# spill
626   	movl    R11, [rsp + #12]	# spill
62b   	movl    [rsp + #4], R11	# spill
630   	movl    RSI, #-12	# int
      	nop 	# 2 bytes pad for loops and calls
637   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:32  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [16]=NarrowOop [40]=NarrowOop off=1596}
63c   	int3	# ShouldNotReachHere
63c
641   B84: #	N1205 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
643   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:11  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1608}
648   	int3	# ShouldNotReachHere
648
64d   B85: #	N1205 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
64f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:29  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1620}
654   	int3	# ShouldNotReachHere
654
659   B86: #	N1205 &lt;- B3  Freq: 1.01328e-06
659   	movq    RBP, RDI	# spill
65c   	movl    [rsp + #0], R10	# spill
660   	movl    [rsp + #4], R9	# spill
665   	movl    [rsp + #8], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
66b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:32  L[0]=RBP L[1]=#0 L[2]=_ L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #4 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [4]=NarrowOop [8]=NarrowOop off=1648}
670   	int3	# ShouldNotReachHere
670

</opto_assembly>
<writer thread='139933077923584'/>
C1 Runtime statistics:
 _resolve_invoke_virtual_cnt:     49
 _resolve_invoke_opt_virtual_cnt: 238
 _resolve_invoke_static_cnt:      78
 _handle_wrong_method_cnt:        36
 _ic_miss_cnt:                    26
 _generic_arraycopy_cnt:          0
 _generic_arraycopystub_cnt:      0
 _byte_arraycopy_cnt:             0
 _short_arraycopy_cnt:            0
 _int_arraycopy_cnt:              0
 _long_arraycopy_cnt:             0
 _primitive_arraycopy_cnt:        0
 _oop_arraycopy_cnt (C):          0
 _oop_arraycopy_cnt (stub):       0
 _arraycopy_slowcase_cnt:         0
 _arraycopy_checkcast_cnt:        0
 _arraycopy_checkcast_attempt_cnt:0
 _new_type_array_slowcase_cnt:    0
 _new_object_array_slowcase_cnt:  0
 _new_instance_slowcase_cnt:      6
 _new_multi_array_slowcase_cnt:   0
 _monitorenter_slowcase_cnt:      0
 _monitorexit_slowcase_cnt:       0
 _patch_code_slowcase_cnt:        1
 _throw_range_check_exception_count:            0:
 _throw_index_exception_count:                  0:
 _throw_div0_exception_count:                   0:
 _throw_null_pointer_exception_count:           0:
 _throw_class_cast_exception_count:             0:
 _throw_incompatible_class_change_error_count:  0:
 _throw_array_store_exception_count:            0:
 _throw_count:                                  0:

<statistics type='deoptimization'>
Deoptimization traps recorded:
    21 (100.0%) total
  class_check/maybe_recompile/invokevirtual: 4 (19.0%)
                unreached/reinterpret/ifeq: 1 (4.8%)
                       constraint/none/nop: 14 (66.7%)
              unstable_if/reinterpret/ifeq: 1 (4.8%)
         unstable_if/reinterpret/if_acmpne: 1 (4.8%)
</statistics>
<statistics type='SharedRuntime'>
  950 new instance requires GC
    2 new array requires GC
   26 inline cache miss in compiled
   36 wrong method
   78 unresolved static call site
   49 unresolved virtual call site
  238 unresolved opt virtual call site
  132 slow partial subtype
  298 byte array copies
22312 short array copies
  863 int array copies
   12 long array copies
   40 checkcast array copies
AdapterHandlerTable: empty 152 longest 3 total 191 average 1.354610
AdapterHandlerTable: lookups 10793 buckets 11065 equals 10327 hits 10327 compact 10327
</statistics>
<statistics type='nmethod'>
Statistics for 68 native nmethods:
 N. total size  = 63624
 N. relocation  = 5736
 N. main code   = 36584
Statistics for 372 bytecoded nmethods:
 total in heap  = 944816
 relocation     = 61608
 constants      = 64
 main code      = 452160
 stub code      = 75720
 oops           = 456
 scopes data    = 71928
 scopes pcs     = 145776
 dependencies   = 3064
 handler table  = 3520
 nul chk table  = 7336
Debug Data Chunks: 14059, shared 1621+3214, non-SP&apos;s elided 207
PcDesc Statistics:  982 queries, 9.23 comparisons per query
  caches=372 queries=982/0, hits=0+126, tests=3535+5526, adds=855
</statistics>
<statistics type='opto'>
--- Compiler Statistics ---
Methods seen: 172  Methods parsed: 172  Nodes created: 61162
Blocks parsed: 600  Blocks seen: 717
795 original NULL checks - 590 elided (74%); optimizer leaves 243,
159 made implicit (65%)
CCP: 43  constants found: 0
Total frameslots = 484, Max frameslots = 32
Inserted 0 spill loads, 0 spill stores, 0 mem-mem moves and 0 copies.
Total load cost=      0, store cost =      0, mem-mem cost =  0.00, copy cost =     0.
Adjusted spill cost =       0.
Conservatively coalesced 377 copies, 0 pairs, 1112 post alloc.
Used cisc instruction  115,  remained in register 444
Average allocation trips 1.610170
High Pressure Blocks = 0, Low Pressure Blocks = 0
Nops added 0 bytes to total of 48480 bytes, for 0.00%
Peephole: peephole rules applied: 0
PhaseIdealLoop=238, sum _unique=185841
</statistics>
<statistics type='intrinsic'>
Compiler intrinsic usage:
     8 (19.0%) _getClass (worked)
     7 (16.7%) _min (worked)
     4 ( 9.5%) _max (worked)
     5 (11.9%) _arraycopy (worked)
     3 ( 7.1%) _storeFence (worked)
     3 ( 7.1%) _compareAndSwapInt (worked)
    12 (28.6%) _getAndAddInt (worked)
    42 (100.0%) total (worked)
</statistics>
<tty_done stamp='8.871'/>
</tty>
<hotspot_log_done stamp='8.871'/>
</hotspot_log>
