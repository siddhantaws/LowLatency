<?xml version='1.0' encoding='UTF-8'?>
<hotspot_log version='160 1' process='6323' time_ms='1451750988628'>
<vm_version>
<name>
OpenJDK 64-Bit Server VM
</name>
<release>
25.66-b00-fastdebug
</release>
<info>
OpenJDK 64-Bit Server VM (25.66-b00-fastdebug) for linux-amd64 JRE (1.8.0-internal-mohit_2016_01_02_20_06-b00), built on Jan  2 2016 20:22:16 by &quot;mohit&quot; with gcc 4.8.4
</info>
</vm_version>
<vm_arguments>
<args>
-XX:-RestrictContended -XX:+StressLCM -XX:+StressGCM -XX:+WhiteBoxAPI -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineSize=0 
</args>
<command>
org.openjdk.jcstress.ForkedMain -r results/ -minStride 10 -maxStride 10000 -time 1000 -iters 20 -yield false -c 4 -sc 4 -f 0 -v -t org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest --hostName 127.0.1.1 --hostPort 39279
</command>
<launcher>
SUN_STANDARD
</launcher>
<properties>
java.vm.specification.name=Java Virtual Machine Specification
java.vm.version=25.66-b00-fastdebug
java.vm.name=OpenJDK 64-Bit Server VM
java.vm.info=mixed mode, sharing
java.ext.dirs=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/ext:/usr/java/packages/lib/ext
java.endorsed.dirs=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/endorsed
sun.boot.library.path=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/amd64
java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib
java.home=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre
java.class.path=tests-custom/target/jcstress.jar
sun.boot.class.path=/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/resources.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/rt.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/sunrsasign.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/jsse.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/jce.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/charsets.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/lib/jfr.jar:/home/mohit/Work/LowLatency/jdk8udev/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/jre/classes
java.vm.specification.vendor=Oracle Corporation
java.vm.specification.version=1.8
java.vm.vendor=Oracle Corporation
sun.java.command=org.openjdk.jcstress.ForkedMain -r results/ -minStride 10 -maxStride 10000 -time 1000 -iters 20 -yield false -c 4 -sc 4 -f 0 -v -t org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest --hostName 127.0.1.1 --hostPort 39279
sun.java.launcher=SUN_STANDARD
</properties>
</vm_arguments>
<tty>
<blob name='MethodHandlesAdapterBlob' size='182000'>
<sect index='1' size='182000' free='177714'/>
</blob>
<writer thread='139941921097472'/>
Could not load hsdis-amd64.so; library not loadable; PrintAssembly is disabled
<writer thread='139941922150144'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='57'>
{method}
 - this oop:          0x00007f46c66ac830
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f46c66a90e8 constant pool [680] {0x00007f46c66a90e8} for &apos;java/lang/String&apos; cache=0x00007f46c67725e0
 - access:            0x81000001  public 
 - name:              &apos;charAt&apos;
 - signature:         &apos;(I)C&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c91feea0
 - code size:         29
 - code start:        0x00007f46c66ac7f0
 - code end (excl):   0x00007f46c66ac80d
 - method data:       0x00007f46c68618d8
 - checked ex length: 0
 - linenumber start:  0x00007f46c66ac80d
 - localvar length:   2
 - localvar start:    0x00007f46c66ac816
 - compiled code: nmethod    602    3       3       java.lang.String::charAt (29 bytes)
#
#  char ( java/lang/String:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N80: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B7 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
030   	testl   RDX, RDX
032   	jl,s   B7  P=0.000000 C=5632.000000
032
034   B2: #	B9 B3 &lt;- B1  Freq: 1
034   	movl    RBP, [R10 + #12 (8-bit)]	# range
038   	NullCheck R10
038
038   B3: #	B8 B4 &lt;- B2  Freq: 0.999999
038   	cmpl    RDX, RBP
03a   	jge,s   B8  P=0.000000 C=5632.000000
03a
03c   B4: #	B6 B5 &lt;- B3  Freq: 0.999998
03c   	cmpl    RDX, RBP	# unsigned
03e   	jnb,us  B6  P=0.000001 C=-1.000000
03e
040   B5: #	N80 &lt;- B4  Freq: 0.999997
040   	movzwl  RAX, [R10 + #16 + RDX &lt;&lt; #1]	# ushort/char
046   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

051   	ret
051
052   B6: #	N80 &lt;- B4  Freq: 1.01328e-06
052   	movl    RBP, R10	# spill
055   	movl    [rsp + #0], RDX	# spill
058   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
05f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap{rbp=NarrowOop off=100}
064   	int3	# ShouldNotReachHere
064
069   B7: #	N80 &lt;- B1  Freq: 5e-07
069   	movq    RBP, RSI	# spill
06c   	movl    [rsp + #4], RDX	# spill
070   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
077   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # OopMap{rbp=Oop off=124}
07c   	int3	# ShouldNotReachHere
07c
081   B8: #	N80 &lt;- B3  Freq: 4.76836e-07
081   	movq    [rsp + #0], RSI	# spill
085   	movl    [rsp + #12], RDX	# spill
089   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
08f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #0 L[1]=rsp + #12 STK[0]=rsp + #12 STK[1]=RBP
        # OopMap{[0]=Oop off=148}
094   	int3	# ShouldNotReachHere
094
099   B9: #	N80 &lt;- B2  Freq: 1.01328e-06
099   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
09f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=164}
0a4   	int3	# ShouldNotReachHere
0a4

</opto_assembly>
<writer thread='139941923202816'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='88'>
{method}
 - this oop:          0x00007f46c66ae260
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f46c66a90e8 constant pool [680] {0x00007f46c66a90e8} for &apos;java/lang/String&apos; cache=0x00007f46c67725e0
 - access:            0xc1000001  public 
 - name:              &apos;indexOf&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         4
 - max locals:        6
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef7a8: 0xbaa00000 i2c: 0x00007f46c9145ca0 c2i: 0x00007f46c9145de0 c2iUV: 0x00007f46c9145db3
 - compiled entry     0x00007f46c91ff640
 - code size:         70
 - code start:        0x00007f46c66ae1b8
 - code end (excl):   0x00007f46c66ae1fe
 - method data:       0x00007f46c68e4dd8
 - checked ex length: 0
 - linenumber start:  0x00007f46c66ae1fe
 - localvar length:   6
 - localvar start:    0x00007f46c66ae216
 - compiled code: nmethod    717    4       3       java.lang.String::indexOf (70 bytes)
#
#  int ( java/lang/String:NotNull:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N254: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B33 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (160 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	movq    R8, RSI	# spill
02f   	movl    R10, #-2147483648	# int
035   	movl    RSI, #-10	# int
03a   	movl    R9, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
03e   	movl    RBP, [R9 + #12 (8-bit)]	# range
042   	NullCheck R9
042
042   B2: #	B31 B3 &lt;- B1  Freq: 0.999999
042   	movl    R11, RBP	# spill
045   	decl    R11	# int
048   	movl    RSI, #-155	# int
04d   	movl    RAX, #-1	# int
052   	movl    RDI, RBP	# spill
054   	addl    RDI, #-3	# int
057   	cmpl    R11, RDI
05a   	cmovll RDI, R10	# signed, int
05e   	testl   RCX, RCX
060   	jl     B31  P=0.000000 C=658.000000
060
066   B3: #	B22 B4 &lt;- B2  Freq: 0.999999
066   	cmpl    RCX, RBP
068   	jge     B22  P=0.139818 C=658.000000
068
06e   B4: #	B32 B5 &lt;- B3  Freq: 0.860181
06e   	cmpl    RDX, #65536
074   	jge     B32  P=0.000000 C=566.000000
074
07a   B5: #	B29 B6 &lt;- B4  Freq: 0.860181
07a   	cmpl    RCX, RBP	# unsigned
07c   	jnb,u  B29  P=0.000001 C=-1.000000
07c
082   B6: #	B29 B7 &lt;- B5  Freq: 0.86018
082   	movl    R10, RCX	# spill
085   	incl    R10	# int
088   	cmpl    R11, RBP	# unsigned
08b   	jnb,u  B29  P=0.000001 C=-1.000000
08b
091   B7: #	B27 B8 &lt;- B6 B9 	Loop: B7-B9 inner pre of N191 Freq: 1.72025
091   	movzwl  R8, [R9 + #16 + RCX &lt;&lt; #1]	# ushort/char
097   	movl    RBX, RCX	# spill
099   	incl    RBX	# int
09b   	cmpl    R8, RDX
09e   	je     B27  P=0.000060 C=16540.000000
09e
0a4   B8: #	B10 B9 &lt;- B7  Freq: 1.72015
0a4   	cmpl    RBX, R10
0a7   	jge,s   B10	# loop end  P=0.500000 C=16539.000000
0a7
0a9   B9: #	B7 &lt;- B8  Freq: 0.860075
0a9   	movl    RCX, RBX	# spill
0ab   	jmp,s   B7
0ab
0ad   B10: #	B30 B11 &lt;- B8  Freq: 0.860075
0ad   	cmpl    RBX, RDI
0af   	jge     B30  P=0.000001 C=-1.000000
0af
0b5   B11: #	B13 &lt;- B10  Freq: 0.860074
0b5   	# castII of RBX
0b5   	jmp,s   B13
      	nop 	# 9 bytes pad for loops and calls

0c0   B12: #	B13 &lt;- B17  top-of-loop Freq: 24.9951
0c0   	movl    RBX, R8	# spill
0c0
0c3   B13: #	B23 B14 &lt;- B11 B12 	Loop: B13-B12 inner main of N110 Freq: 25.8552
0c3   	movslq  R10, RBX	# i2l
0c6   	movzwl  R11, [R9 + #16 + RBX &lt;&lt; #1]	# ushort/char
0cc   	cmpl    R11, RDX
0cf   	je,s   B23  P=0.000060 C=16540.000000
0cf
0d1   B14: #	B25 B15 &lt;- B13  Freq: 25.8536
0d1   	movl    R11, RBX	# spill
0d4   	addl    R11, #2	# int
0d8   	movzwl  RCX, [R9 + #18 + R10 &lt;&lt; #1]	# ushort/char
0de   	cmpl    RCX, RDX
0e0   	je,s   B25  P=0.000060 C=16540.000000
0e0
0e2   B15: #	B24 B16 &lt;- B14  Freq: 25.8521
0e2   	movzwl  RCX, [R9 + #22 + R10 &lt;&lt; #1]	# ushort/char
0e8   	movl    R8, RBX	# spill
0eb   	addl    R8, #4	# int
0ef   	movzwl  R10, [R9 + #20 + R10 &lt;&lt; #1]	# ushort/char
0f5   	cmpl    R10, RDX
0f8   	je,s   B24  P=0.000060 C=16540.000000
0f8
0fa   B16: #	B25 B17 &lt;- B15  Freq: 25.8505
0fa   	addl    RBX, #2	# int
0fd   	cmpl    RCX, RDX
0ff   	je,s   B25  P=0.000060 C=16540.000000
0ff
101   B17: #	B12 B18 &lt;- B16  Freq: 25.8489
101   	cmpl    R8, RDI
104   	jl,s   B12	# loop end  P=0.966969 C=16539.000000
104
106   B18: #	B22 B19 &lt;- B30 B17  Freq: 0.853825
106   	cmpl    R8, RBP
109   	jge,s   B22  P=0.500000 C=-1.000000
109
10b   B19: #	B20 &lt;- B18  Freq: 0.426912
10b   	# castII of R8
      	nop 	# 1 bytes pad for loops and calls

10c   B20: #	B28 B21 &lt;- B19 B21 	Loop: B20-B21 inner post of N191 Freq: 0.853773
10c   	movzwl  R11, [R9 + #16 + R8 &lt;&lt; #1]	# ushort/char
112   	cmpl    R11, RDX
115   	je,s   B28  P=0.000060 C=16540.000000
115
117   B21: #	B20 B22 &lt;- B20  Freq: 0.853722
117   	incl    R8	# int
11a   	cmpl    R8, RBP
11d   	jl,s   B20	# loop end  P=0.500000 C=16539.000000
11d
11f   B22: #	N254 &lt;- B3 B26 B21 B18  Freq: 0.999996
11f   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

12a   	ret
12a
12b   B23: #	B24 &lt;- B13  Freq: 0.00156267
12b   	movl    R11, RBX	# spill
12b
12e   B24: #	B26 &lt;- B23 B15  Freq: 0.00312514
12e   	movl    RBX, R11	# spill
131   	jmp,s   B26
131
133   B25: #	B26 &lt;- B14 B16  Freq: 0.00312495
133   	incl    RBX	# int
135
135   B26: #	B22 &lt;- B28 B27 B24 B25  Freq: 0.00640567
135   	movl    RAX, RBX	# spill
137   	jmp,s   B22
137
139   B27: #	B26 &lt;- B7  Freq: 0.000103971
139   	movl    RBX, RCX	# spill
13b   	jmp,s   B26
13b
13d   B28: #	B26 &lt;- B20  Freq: 5.16013e-05
13d   	movl    RBX, R8	# spill
140   	jmp,s   B26
140
142   B29: #	N254 &lt;- B6 B5  Freq: 1.7432e-06
142   	movl    [rsp + #0], RDX	# spill
145   	movl    [rsp + #4], R9	# spill
14a   	movl    [rsp + #8], RCX	# spill
14e   	movl    RSI, #-122	# int
153   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:43  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=RBP L[4]=rsp + #4 L[5]=rsp + #8
        # OopMap{[4]=NarrowOop off=344}
158   	int3	# ShouldNotReachHere
158
15d   B30: #	B18 &lt;- B10  Freq: 8.71496e-07
15d   	movl    R8, RBX	# spill
160   	jmp,s   B18
160
162   B31: #	N254 &lt;- B2  Freq: 4.76837e-07
162   	movl    [rsp + #0], RDX	# spill
165   	movl    [rsp + #8], RCX	# spill
169   	movq    [rsp + #16], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
16f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::indexOf @ bci:7  L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=RBP L[4]=_ L[5]=_ STK[0]=rsp + #8
        # OopMap{[16]=Oop off=372}
174   	int3	# ShouldNotReachHere
174
179   B32: #	N254 &lt;- B4  Freq: 4.10166e-07
179   	movl    [rsp + #4], RCX	# spill
17d   	movl    [rsp + #8], RDX	# spill
181   	movq    [rsp + #16], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
187   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::indexOf @ bci:25  L[0]=rsp + #16 L[1]=rsp + #8 L[2]=rsp + #4 L[3]=RBP L[4]=_ L[5]=_ STK[0]=rsp + #8 STK[1]=#65536
        # OopMap{[16]=Oop off=396}
18c   	int3	# ShouldNotReachHere
18c
191   B33: #	N254 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
193   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap{off=408}
198   	int3	# ShouldNotReachHere
198

</opto_assembly>
<writer thread='139942384183040'/>
<dependency_failed type='leaf_type' ctxk='java/util/jar/JarFile' witness='sun/net/www/protocol/jar/URLJarFile' stamp='0.746'/>
<writer thread='139941922150144'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='92'>
{method}
 - this oop:          0x00007f46c66ae070
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f46c66a90e8 constant pool [680] {0x00007f46c66a90e8} for &apos;java/lang/String&apos; cache=0x00007f46c67725e0
 - access:            0xc1000001  public 
 - name:              &apos;hashCode&apos;
 - signature:         &apos;()I&apos;
 - max stack:         4
 - max locals:        4
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      3
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef760: 0xb0000000 i2c: 0x00007f46c9145620 c2i: 0x00007f46c914575a c2iUV: 0x00007f46c914572d
 - compiled entry     0x00007f46c91fbee0
 - code size:         55
 - code start:        0x00007f46c66adff8
 - code end (excl):   0x00007f46c66ae02f
 - method data:       0x00007f46c68b0a20
 - checked ex length: 0
 - linenumber start:  0x00007f46c66ae02f
 - localvar length:   4
 - localvar start:    0x00007f46c66ae03e
 - compiled code: nmethod    784    1       3       java.lang.String::hashCode (55 bytes)
#
#  int ( java/lang/String:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N195: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B15 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (144 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movq    RBX, RSI	# spill
02f   	movl    RAX, [RSI + #16 (8-bit)]	# int ! Field: java/lang/String.hash
032   	testl   RAX, RAX
034   	jne     B15  P=0.356952 C=748.000000
034
03a   B2: #	B19 B3 &lt;- B1  Freq: 0.643048
03a   	movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
03e   	movl    RSI, #-10	# int
043   	movl    RCX, [R10 + #12 (8-bit)]	# range
047   	NullCheck R10
047
047   B3: #	B17 B4 &lt;- B2  Freq: 0.643048
047   	movl    RDX, RCX	# spill
049   	addl    RDX, #-3	# int
04c   	movl    R11, #-2147483648	# int
052   	movl    R9, RCX	# spill
055   	decl    R9	# int
058   	cmpl    R9, RDX
05b   	cmovll RDX, R11	# signed, int
05f   	testl   RCX, RCX
061   	jle     B17  P=0.002079 C=481.000000
061
067   B4: #	B18 B5 &lt;- B3  Freq: 0.641711
067   	testl  RCX, RCX	# unsigned
069   	jbe,u  B18  P=0.000001 C=-1.000000
069
06f   B5: #	B18 B6 &lt;- B4  Freq: 0.64171
06f   	movl    RDI, #1	# int
074   	cmpl    R9, RCX	# unsigned
077   	jnb,u  B18  P=0.000001 C=-1.000000
077
07d   B6: #	B10 B7 &lt;- B5  Freq: 0.641709
07d   	movzwl  R8, [R10 + #16 (8-bit)]	# ushort/char
082   	movl    RAX, R8	# spill
085   	sall    RAX, #5
088   	cmpl    RDX, #1
08b   	jle,s   B10  P=0.000001 C=-1.000000
08b
08d   B7: #	B9 &lt;- B6  Freq: 0.641709
08d   	subl    RAX, R8	# int
090   	jmp,s   B9
090
092   B8: #	B9 &lt;- B9  top-of-loop Freq: 25.4986
092   	subl    RAX, R8	# int
095
095   B9: #	B8 B10 &lt;- B7 B8 	Loop: B9-B8 inner main of N68 Freq: 26.1403
095   	movzwl  R11, [R10 + #16 + RDI &lt;&lt; #1]	# ushort/char
09b   	movslq  R8, RDI	# i2l
09e   	movzwl  RSI, [R10 + #20 + R8 &lt;&lt; #1]	# ushort/char
0a4   	addl    RAX, R11	# int
0a7   	movl    R13, RAX	# spill
0aa   	sall    R13, #5
0ae   	movzwl  R9, [R10 + #22 + R8 &lt;&lt; #1]	# ushort/char
0b4   	subl    R13, RAX	# int
0b7   	movzwl  R11, [R10 + #18 + R8 &lt;&lt; #1]	# ushort/char
0bd   	addl    R13, R11	# int
0c0   	movl    R11, R13	# spill
0c3   	sall    R11, #5
0c7   	subl    R11, R13	# int
0ca   	addl    R11, RSI	# int
0cd   	movl    R8, R11	# spill
0d0   	sall    R8, #5
0d4   	subl    R8, R11	# int
0d7   	addl    R8, R9	# int
0da   	movl    RAX, R8	# spill
0dd   	sall    RAX, #5
0e0   	addl    RDI, #4	# int
0e3   	cmpl    RDI, RDX
0e5   	jl,s   B8	# loop end  P=0.975451 C=19073.000000
0e5
0e7   B10: #	B16 B11 &lt;- B6 B9  Freq: 0.641709
0e7   	cmpl    RDI, RCX
0e9   	jge,s   B16  P=0.500000 C=-1.000000
0e9
0eb   B11: #	B12 &lt;- B10  Freq: 0.320855
0eb   	# castII of RDI
0eb
0eb   B12: #	B14 B13 &lt;- B11 B13 	Loop: B12-B13 inner post of N200 Freq: 0.641709
0eb   	movzwl  R11, [R10 + #16 + RDI &lt;&lt; #1]	# ushort/char
0f1   	subl    RAX, R8	# int
0f4   	addl    RAX, R11	# int
0f7   	incl    RDI	# int
0f9   	cmpl    RDI, RCX
0fb   	jge,s   B14	# loop end  P=0.500000 C=19073.000000
0fb
0fd   B13: #	B12 &lt;- B12  Freq: 0.320855
0fd   	movl    R9, RAX	# spill
100   	sall    R9, #5
104   	movl    R8, RAX	# spill
107   	movl    RAX, R9	# spill
10a   	jmp,s   B12
10a
10c   B14: #	B15 &lt;- B12 B16  Freq: 0.641709
10c   	movl    [RBX + #16 (8-bit)], RAX	# int ! Field: java/lang/String.hash
10c
10f   B15: #	N195 &lt;- B14 B17 B1  Freq: 0.999998
10f   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

11a   	ret
11a
11b   B16: #	B14 &lt;- B10  Freq: 0.320855
11b   	movl    RAX, R8	# spill
11e   	jmp,s   B14
11e
120   B17: #	B15 &lt;- B3  Freq: 0.0013369
120   	xorl    RAX, RAX	# int
122   	jmp,s   B15
122
124   B18: #	N195 &lt;- B5 B4  Freq: 1.29194e-06
124   	movl    RSI, #-122	# int
129   	movl    RBP, R10	# spill
12c   	movq    [rsp + #0], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
133   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::hashCode @ bci:33  L[0]=rsp + #0 L[1]=#0 L[2]=RBP L[3]=#0
        # OopMap{rbp=NarrowOop [0]=Oop off=312}
138   	int3	# ShouldNotReachHere
138
13d   B19: #	N195 &lt;- B2  Freq: 6.51587e-07
      	nop 	# 2 bytes pad for loops and calls
13f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::hashCode @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap{off=324}
144   	int3	# ShouldNotReachHere
144

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139941923202816'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='124'>
{method}
 - this oop:          0x00007f46c67c0688
 - method holder:     &apos;java/lang/Math&apos;
 - constants:         0x00007f46c67bd7e0 constant pool [324] {0x00007f46c67bd7e0} for &apos;java/lang/Math&apos; cache=0x00007f46c67c2240
 - access:            0x81000009  public static 
 - name:              &apos;max&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - intrinsic id:      15 _max
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80f0378: 0xaa000000 i2c: 0x00007f46c9156560 c2i: 0x00007f46c915669c c2iUV: 0x00007f46c915666f
 - compiled entry     0x00007f46c925a440
 - code size:         11
 - code start:        0x00007f46c67c0658
 - code end (excl):   0x00007f46c67c0663
 - method data:       0x00007f46c6a188f0
 - checked ex length: 0
 - linenumber start:  0x00007f46c67c0663
 - localvar length:   2
 - localvar start:    0x00007f46c67c066e
 - compiled code: nmethod    842  101       3       java.lang.Math::max (11 bytes)
#
#  int ( int, int )
#
#r018 rsi   : parm 0: int
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B3  Freq: 1
abababab
000   B1: #	B4 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	cmpl    RSI, RDX
00e   	jl,s   B4  P=0.013960 C=5659.000000
00e
010   B2: #	B3 &lt;- B1  Freq: 0.98604
010   	movl    RAX, RSI	# spill
010
012   B3: #	N1 &lt;- B4 B2  Freq: 1
012   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

01d   	ret
01d
01e   B4: #	B3 &lt;- B1  Freq: 0.0139601
01e   	movl    RAX, RDX	# spill
020   	jmp,s   B3
020

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139941922150144'/>
<opto_assembly compile_id='121'>
{method}
 - this oop:          0x00007f46c6a12d78
 - method holder:     &apos;java/util/regex/Matcher&apos;
 - constants:         0x00007f46c6a0f6e8 constant pool [380] {0x00007f46c6a0f6e8} for &apos;java/util/regex/Matcher&apos; cache=0x00007f46c6a132a8
 - access:            0xc1000000  
 - name:              &apos;search&apos;
 - signature:         &apos;(I)Z&apos;
 - max stack:         5
 - max locals:        3
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c925a920
 - code size:         109
 - code start:        0x00007f46c6a12cc0
 - code end (excl):   0x00007f46c6a12d2d
 - method data:       0x00007f46c6a19568
 - checked ex length: 0
 - linenumber start:  0x00007f46c6a12d2d
 - localvar length:   4
 - localvar start:    0x00007f46c6a12d46
 - compiled code: nmethod    977  107       3       java.util.regex.Matcher::search (109 bytes)
#
#  bool ( java/util/regex/Matcher:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Matcher:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1041: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B65 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (400 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movq    R10, RSI	# spill
02f   	movl    R14, [RSI + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
033   	movl    RSI, #-155	# int
038   	movb    [R10 + #44 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/util/regex/Matcher.hitEnd
03c   	movb    [R10 + #45 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/util/regex/Matcher.requireEnd
040   	movl    R8, [R10 + #36 (8-bit)]	# int ! Field: java/util/regex/Matcher.oldLast
044   	decode_heap_oop_not_null R13,R14
047   	movl    R11, RDX	# spill
04a   	testl   RDX, RDX
04c   	jl     B65  P=0.000000 C=819.000000
04c
052   B2: #	B51 B3 &lt;- B1  Freq: 1
052   	testl   R8, R8
055   	jl     B51  P=0.062271 C=819.000000
055
05b   B3: #	B68 B4 &lt;- B2 B51  Freq: 1
05b   	movl    [R10 + #36 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.oldLast
05f   	movl    [R10 + #28 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.first
063   	movl    RSI, #-10	# int
068   	movl    RBX, [R14 + #12 (8-bit)]	# range
06c   	NullCheck R14
06c
06c   B4: #	B52 B5 &lt;- B3  Freq: 0.999999
06c   	leaq    R9, [R14 + #16 (8-bit)]	# ptr off8narrow
070   	testl   RBX, RBX
072   	jle     B52  P=0.047564 C=17198.000000
072
078   B5: #	B62 B6 &lt;- B4  Freq: 0.952435
078   	movl    R8, RBX	# spill
07b   	decl    R8	# int
07e   	movl    RSI, #-122	# int
083   	movslq  RDX, RBX	# i2l
086   	testl  RBX, RBX	# unsigned
088   	jbe,u  B62  P=0.000001 C=-1.000000
088
08e   B6: #	B62 B7 &lt;- B5  Freq: 0.952434
08e   	cmpl    R8, RBX	# unsigned
091   	jnb,u  B62  P=0.000001 C=-1.000000
091
097   B7: #	B8 &lt;- B6  Freq: 0.952433
097   	movq    [rsp + #0], R9	# spill
09b   	movl    [rsp + #16], R14	# spill
0a0   	movq    [rsp + #24], R10	# spill
0a5   	movl    [rsp + #12], R11	# spill
0aa   	movq    RDI, R9	# spill
0ad   	movl    RSI, #-1	# int
0b2   	call_leaf_nofp,runtime  arrayof_jint_fill
        No JVM State Info
        # 
0bf
0bf   B8: #	B69 B9 &lt;- B7 B52  Freq: 0.999997
0bf   	movl    RSI, #-10	# int
0c4   	movq    R10, [rsp + #24]	# spill
0c9   	movl    R11, [R10 + #48 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.parentPattern
0cd   	movl    [R10 + #24 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/util/regex/Matcher.acceptMode
0d1   	movl    R10, [R10 + #56 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.text
0d5   	movdl   XMM1, R10	# spill
0da   	decode_heap_oop_not_null R9,R10
0dd   	movl    R10, [R11 + #44 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern.root
0e1   	NullCheck R11
0e1
0e1   B9: #	B70 B10 &lt;- B8  Freq: 0.999996
0e1   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
0e5   	NullCheck R10
0e5
0e5   B10: #	B61 B11 &lt;- B9  Freq: 0.999995
0e5   	decode_heap_oop_not_null RCX,R10
0e8   	movq    R8, [rsp + #24]	# spill
0ed   	movl    R8, [R8 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
0f1   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$BnM: 0x00007f46a4046820:Constant:exact *	# compressed klass ptr
0f8   	jne,u  B61  P=0.000001 C=-1.000000
0f8
0fe   B11: #	B71 B12 &lt;- B10  Freq: 0.999994
0fe   	# checkcastPP of RCX
0fe   	movdq   XMM0, RCX	# spill
103   	movq    R10, [rsp + #24]	# spill
108   	movl    R11, [R10 + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
10c   	movl    RCX, [RCX + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.buffer
10f   	decode_heap_oop_not_null RDI,RCX
112   	movl    R10, [RCX + #12 (8-bit)]	# range
116   	NullCheck RCX
116
116   B12: #	B20 &lt;- B11  Freq: 0.999993
116   	movdq   XMM11, RDI	# spill
11b   	movdl   XMM9, R11	# spill
120   	movdq   XMM7, R9	# spill
125   	movdl   XMM10, RBX	# spill
129   	movdq   XMM8, R13	# spill
12e   	movl    [rsp + #32], R10	# spill
133   	movdq   R10, XMM0	# spill
138   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
13c   	movdl   XMM3, R10	# spill
141   	movl    RSI, [rsp + #32]	# spill
145   	decl    RSI	# int
147   	movdq   R10, XMM0	# spill
14c   	movl    R10, [R10 + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
150   	movdl   XMM2, R10	# spill
155   	movl    R10, [rsp + #32]	# spill
15a   	addl    R10, #-2	# int
15e   	movdl   XMM14, R10	# spill
163   	movl    R10, R8	# spill
166   	subl    R10, [RSP + #32 (32-bit)]	# int
16b   	movl    [rsp + #8], R10	# spill
170   	movdq   R10, XMM0	# spill
175   	movl    R10, [R10 + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
179   	movdl   XMM5, R10	# spill
17e   	xorl    R10, R10	# int
181   	movdl   XMM12, R10	# spill
186   	jmp,s   B20
      	nop 	# 8 bytes pad for loops and calls

190   B13: #	B36 &lt;- B37  top-of-loop Freq: 6.10452
190   	movl    R13, RBP	# spill
193   	jmp     B36
193
198   B14: #	B15 &lt;- B42  Freq: 0.2238
198   	movl    R13, RBP	# spill
198
19b   B15: #	B66 B16 &lt;- B14 B32 B36  Freq: 7.47299
19b   	movl    RBP, R13	# spill
19e   	incl    RBP	# int
1a0   	andl    R10, #127	# int
1a4   	movdl   R11, XMM2	# spill
1a9   	movl    R11, [R11 + #12 (8-bit)]	# range
1ad   	NullCheck R11
1ad
1ad   B16: #	B54 B17 &lt;- B15  Freq: 7.47298
1ad   	cmpl    R10, R11	# unsigned
1b0   	jnb,u  B54  P=0.000001 C=-1.000000
1b0
1b6   B17: #	B67 B18 &lt;- B16  Freq: 7.47297
1b6   	movl    RBP, R13	# spill
1b9   	movdl   R11, XMM2	# spill
1be   	subl    RBP, [R11 + #16 + R10 &lt;&lt; #2]	# int
1c3   	movdl   R10, XMM5	# spill
1c8   	movl    R11, [R10 + #12 (8-bit)]	# range
1cc   	NullCheck R10
1cc
1cc   B18: #	B55 B19 &lt;- B17  Freq: 7.47297
1cc   	incl    RBP	# int
1ce   	cmpl    R13, R11	# unsigned
1d1   	jnb,u  B55  P=0.000001 C=-1.000000
1d1
1d7   B19: #	B20 &lt;- B18  Freq: 7.47296
1d7   	movl    R10, [R10 + #16 + RAX]	# int
1dc   	cmpl    RBP, R10
1df   	cmovll RBP, R10	# signed, int
1e3   	movl    R10, [rsp + #12]	# spill
1e8   	addl    R10, RBP	# int
1eb   	movl    [rsp + #12], R10	# spill
1f0   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$BnM::match @ bci:87  L[0]=XMM0 L[1]=rsp + #24 L[2]=R10 L[3]=XMM4 L[4]=XMM11 L[5]=rsp + #32 L[6]=rsp + #8 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{rcx=NarrowOop xmm0=Oop xmm1=NarrowOop xmm2=NarrowOop xmm3=NarrowOop xmm4=Oop xmm5=NarrowOop xmm7=Oop xmm8=Oop xmm11=Oop [0]=Derived_oop_xmm8 [16]=NarrowOop [24]=Oop off=496}
1f6
1f6   B20: #	B50 B21 &lt;- B12 B19 	Loop: B20-B19  Freq: 8.47295
1f6   	movl    R8, [rsp + #12]	# spill
1fb   	incl    R8	# int
1fe   	movl    R10, R8	# spill
201   	sarl    R10, #31
205   	andl    R10, R8	# int
208   	movl    RBX, #-2147483647	# int
20d   	subl    RBX, R10	# int
210   	movl    R11, [rsp + #12]	# spill
215   	cmpl    R11, [RSP + #8 (32-bit)]
21a   	jg     B50  P=0.012266 C=3424.000000
21a
220   B21: #	B45 B22 &lt;- B20  Freq: 8.36902
220   	movl    R10, [rsp + #12]	# spill
225   	addl    R10, [RSP + #32 (32-bit)]	# int
22a   	movdl   XMM6, R10	# spill
22f   	testl   RSI, RSI
231   	jl     B45  P=0.074814 C=8755.000000
231
237   B22: #	B53 B23 &lt;- B21  Freq: 7.7429
237   	movl    R8, R10	# spill
23a   	decl    R8	# int
23d   	movdl   R11, XMM1	# spill
242   	movl    R11, [R11 + #8 (8-bit)]	# compressed klass ptr
246   	NullCheck R11
246
246   B23: #	B53 B24 &lt;- B22  Freq: 7.74289
246   	cmpl    R11, narrowklass: precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# compressed klass ptr
24d   	jne,u  B53  P=0.000001 C=-1.000000
24d
253   B24: #	B53 B25 &lt;- B23  Freq: 7.74288
253   	movdq   R10, XMM7	# spill
258   	# checkcastPP of R10
258   	movdq   XMM4, R10	# spill
25d   	movl    RDI, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
261   	movl    RDX, [RDI + #12 (8-bit)]	# range
264   	NullCheck RDI
264
264   B25: #	B53 B26 &lt;- B24  Freq: 7.74287
264   	movl    RAX, #-1	# int
269   	subl    RAX, [RSP + #12 (32-bit)]	# int
26d   	movl    R10, [rsp + #12]	# spill
272   	cmpl    R10, RDX	# unsigned
275   	jnb,u  B53  P=0.000001 C=-1.000000
275
27b   B26: #	B53 B27 &lt;- B25  Freq: 7.74287
27b   	movl    R11, RDX	# spill
27e   	subl    R11, [RSP + #12 (32-bit)]	# int
283   	cmpl    R8, RDX	# unsigned
286   	jnb,u  B53  P=0.000001 C=-1.000000
286
28c   B27: #	B53 B28 &lt;- B26  Freq: 7.74286
28c   	negl    R10	# int
28f   	movl    R8, [rsp + #32]	# spill
294   	testl  R8, R8	# unsigned
297   	jbe,u  B53  P=0.000001 C=-1.000000
297
29d   B28: #	B53 B29 &lt;- B27  Freq: 7.74285
29d   	movl    R9, R10	# spill
2a0   	sarl    R9, #31
2a4   	cmpl    RBX, RAX
2a6   	cmovllt RBX, RAX	# max
2a9   	cmpl    RSI, R8	# unsigned
2ac   	jnb,u  B53  P=0.000001 C=-1.000000
2ac
2b2   B29: #	B30 &lt;- B28  Freq: 7.74284
2b2   	decl    R11	# int
2b5   	andl    R9, R10	# int
2b8   	movl    R10, #-1	# int
2be   	cmpl    RBX, R10
2c1   	cmovllt RBX, R10	# max
2c5   	addl    R9, #2147483647	# int
2cc   	movl    R13, RSI	# spill
2cc
2cf   B30: #	B56 B31 &lt;- B29 B33 	Loop: B30-B33 inner pre of N1011 Freq: 11.5853
2cf   	movslq  RAX, R13	# i2l
2d2   	movl    R14, R13	# spill
2d5   	addl    R14, [RSP + #12 (32-bit)]	# int
2da   	salq    RAX, #2
2de   	testl   R14, R14
2e1   	jl     B56  P=0.000000 C=5790.000000
2e1
2e7   B31: #	B58 B32 &lt;- B30  Freq: 11.5853
2e7   	movzwl  R10, [RDI + #16 + R14 &lt;&lt; #1]	# ushort/char
2ed   	movl    R8, [RCX + #16 + RAX]	# int
2f2   	cmpl    R14, RDX
2f5   	jge     B58  P=0.000000 C=5790.000000
2f5
2fb   B32: #	B15 B33 &lt;- B31  Freq: 11.5853
2fb   	cmpl    R10, R8
2fe   	jne     B15  P=0.336667 C=8100.000000
2fe
304   B33: #	B30 B34 &lt;- B32  Freq: 7.6849
304   	cmpl    R9, R11
307   	movl    R8, R9	# spill
30a   	cmovlgt R8, R11	# min
30e   	movdl   R10, XMM14	# spill
313   	cmpl    R10, R8
316   	cmovlgt R10, R8	# min
31a   	movl    R8, #-1	# int
320   	cmpl    R10, R8
323   	movl    RAX, #-1	# int
328   	cmovllt R10, RAX	# max
32c   	decl    R13	# int
32f   	cmpl    R13, R10
332   	jg,s   B30	# loop end  P=0.500000 C=5373.000000
332
334   B34: #	B60 B35 &lt;- B33  Freq: 3.84245
334   	cmpl    R13, RBX
337   	jle     B60  P=0.000001 C=-1.000000
337
33d   B35: #	B36 &lt;- B34  Freq: 3.84245
33d   	# castII of R13
33d
33d   B36: #	B15 B37 &lt;- B35 B13 	Loop: B36-B13 inner main of N225 Freq: 9.94697
33d   	movslq  RAX, R13	# i2l
340   	movl    R10, R13	# spill
343   	addl    R10, [RSP + #12 (32-bit)]	# int
348   	movzwl  R10, [RDI + #16 + R10 &lt;&lt; #1]	# ushort/char
34e   	salq    RAX, #2
352   	movl    RBP, R13	# spill
355   	decl    RBP	# int
357   	movl    R8, [RCX + #16 + RAX]	# int
35c   	cmpl    R10, R8
35f   	jne     B15  P=0.336667 C=8100.000000
35f
365   B37: #	B13 B38 &lt;- B36  Freq: 6.59815
365   	cmpl    RBP, RBX
367   	jg     B13	# loop end  P=0.925186 C=5373.000000
367
36d   B38: #	B45 B39 &lt;- B60 B37  Freq: 0.493641
36d   	cmpl    RBP, #-1
370   	jle,s   B45  P=0.100000 C=-1.000000
370
372   B39: #	B40 &lt;- B38  Freq: 0.444277
372   	# castII of RBP
372
372   B40: #	B57 B41 &lt;- B39 B44 	Loop: B40-B44 inner post of N1011 Freq: 0.664753
372   	movslq  RAX, RBP	# i2l
375   	movl    R14, RBP	# spill
378   	addl    R14, [RSP + #12 (32-bit)]	# int
37d   	salq    RAX, #2
381   	testl   R14, R14
384   	jl     B57  P=0.000000 C=5790.000000
384
38a   B41: #	B59 B42 &lt;- B40  Freq: 0.664752
38a   	movl    R11, [RCX + #16 + RAX]	# int
38f   	movl    R9, RBP	# spill
392   	decl    R9	# int
395   	movzwl  R10, [RDI + #16 + R14 &lt;&lt; #1]	# ushort/char
39b   	cmpl    R14, RDX
39e   	jge     B59  P=0.000000 C=5790.000000
39e
3a4   B42: #	B14 B43 &lt;- B41  Freq: 0.664752
3a4   	cmpl    R10, R11
3a7   	jne     B14  P=0.336667 C=8100.000000
3a7
3ad   B43: #	B45 B44 &lt;- B42  Freq: 0.440952
3ad   	cmpl    R9, #-1
3b1   	jle,s   B45	# loop end  P=0.500000 C=5373.000000
3b1
3b3   B44: #	B40 &lt;- B43  Freq: 0.220476
3b3   	movl    RBP, R9	# spill
3b6   	jmp,s   B40
3b6
3b8   B45: #	B72 B46 &lt;- B38 B21 B43  Freq: 0.895963
3b8   	movq    R10, [rsp + #24]	# spill
3bd   	movl    R11, [rsp + #12]	# spill
3c2   	movl    [R10 + #28 (8-bit)], R11	# int ! Field: java/util/regex/Matcher.first
3c6   	movdl   R10, XMM3	# spill
3cb   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
3cf   	NullCheck R10
3cf
3cf   B46: #	B63 B47 &lt;- B45  Freq: 0.895963
3cf   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f4698029a20:Constant:exact *	# compressed klass ptr
3d6   	jne,u  B63  P=0.000001 C=-1.000000
3d6
3dc   B47: #	B64 B48 &lt;- B46  Freq: 0.895962
3dc   	movq    R11, [rsp + #24]	# spill
3e1   	movdl   R8, XMM6	# spill
3e6   	movl    [R11 + #32 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.last
3ea   	movdl   R10, XMM10	# spill
3ef   	cmpl    R10, #1	# unsigned
3f3   	jbe,u  B64  P=0.000001 C=-1.000000
3f3
3f9   B48: #	B49 &lt;- B47  Freq: 0.895961
3f9   	movq    R10, [rsp + #0]	# spill
3fd   	movl    RCX, [rsp + #12]	# spill
401   	movl    [R10], RCX	# int
404   	movl    R9, [rsp + #16]	# spill
409   	movl    [R9 + #20 (8-bit)], R8	# int
40d   	movl    [R10], RCX	# int
410   	movl    [R9 + #20 (8-bit)], R8	# int
414   	movl    R10, #1	# int
414
41a   B49: #	N1041 &lt;- B50 B48  Freq: 0.999893
41a   	movl    [R11 + #36 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.oldLast
41e   	movl    RAX, R10	# spill
421   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

42c   	ret
42c
42d   B50: #	B49 &lt;- B20  Freq: 0.103932
42d   	movq    R11, [rsp + #24]	# spill
432   	movl    [R11 + #28 (8-bit)], #-1	# int ! Field: java/util/regex/Matcher.first
43a   	movb    [R11 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
43f   	movdl   R8, XMM9	# spill
444   	movdl   R10, XMM12	# spill
449   	jmp,s   B49
449
44b   B51: #	B3 &lt;- B2  Freq: 0.062271
44b   	movl    R8, RDX	# spill
44e   	jmp     B3
44e
453   B52: #	B8 &lt;- B4  Freq: 0.0475636
453   	movl    [rsp + #12], RDX	# spill
457   	movq    [rsp + #24], R10	# spill
45c   	movl    [rsp + #16], R14	# spill
461   	movq    [rsp + #0], R9	# spill
465   	jmp     B8
465
46a   B53: #	N1041 &lt;- B28 B22 B23 B24 B25 B26 B27  Freq: 5.47142e-05
46a   	movl    RBP, [rsp + #12]	# spill
46e   	movl    [rsp + #0], RCX	# spill
471   	movl    R10, [rsp + #8]	# spill
476   	movl    [rsp + #4], R10	# spill
47b   	movl    [rsp + #8], RSI	# spill
47f   	movsd   [rsp + #40], XMM0	# spill
485   	movss   [rsp + #12], XMM1	# spill
48b   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
493   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:37  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #12 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [12]=NarrowOop [24]=Oop [40]=Oop off=1176}
498   	int3	# ShouldNotReachHere
498
49d   B54: #	N1041 &lt;- B16  Freq: 7.57222e-06
49d   	movl    [rsp + #0], RCX	# spill
4a0   	movl    R8, [rsp + #8]	# spill
4a5   	movl    [rsp + #4], R8	# spill
4aa   	movl    [rsp + #8], R13	# spill
4af   	movl    [rsp + #16], R10	# spill
4b4   	movsd   [rsp + #40], XMM0	# spill
4ba   	movsd   [rsp + #56], XMM4	# spill
4c0   	movl    R11, [rsp + #32]	# spill
4c5   	movl    [rsp + #20], R11	# spill
4ca   	movss   [rsp + #32], XMM2	# spill
4d0   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
4d7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=rsp + #56 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_ STK[0]=rsp + #12 STK[1]=RBP STK[2]=rsp + #32 STK[3]=rsp + #16
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=NarrowOop [40]=Oop [56]=Oop off=1244}
4dc   	int3	# ShouldNotReachHere
4dc
4e1   B55: #	N1041 &lt;- B18  Freq: 7.5722e-06
4e1   	movl    [rsp + #0], RCX	# spill
4e4   	movl    R11, [rsp + #8]	# spill
4e9   	movl    [rsp + #4], R11	# spill
4ee   	movl    R11, [rsp + #12]	# spill
4f3   	movl    [rsp + #8], R11	# spill
4f8   	movl    [rsp + #12], R13	# spill
4fd   	movsd   [rsp + #40], XMM0	# spill
503   	movsd   [rsp + #48], XMM4	# spill
509   	movss   [rsp + #36], XMM5	# spill
50f   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
517   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=_ L[8]=_ STK[0]=rsp + #8 STK[1]=RBP STK[2]=rsp + #36 STK[3]=rsp + #12
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [36]=NarrowOop [40]=Oop [48]=Oop off=1308}
51c   	int3	# ShouldNotReachHere
51c
521   B56: #	B57 &lt;- B30  Freq: 5.79265e-06
521   	movl    RBP, R13	# spill
521
524   B57: #	N1041 &lt;- B40 B56  Freq: 6.12502e-06
524   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
535   	movl    [rsp + #4], RCX	# spill
539   	movl    [rsp + #16], R14	# spill
53e   	movsd   [rsp + #40], XMM0	# spill
544   	movl    R11, [rsp + #32]	# spill
549   	movl    [rsp + #20], R11	# spill
54e   	movsd   [rsp + #32], XMM4	# spill
554   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
55b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #32 L[1]=rsp + #16 STK[0]=rsp + #16
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=rsp + #0 L[3]=rsp + #32 L[4]=rsp + #4 L[5]=rsp + #20 L[6]=rsp + #8 L[7]=RBP L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=1376}
560   	int3	# ShouldNotReachHere
560
565   B58: #	B59 &lt;- B31  Freq: 5.5243e-06
565   	movl    RBP, R13	# spill
565
568   B59: #	N1041 &lt;- B41 B58  Freq: 5.84127e-06
568   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
579   	movl    [rsp + #4], RCX	# spill
57d   	movl    [rsp + #16], R14	# spill
582   	movl    [rsp + #20], RDX	# spill
586   	movsd   [rsp + #40], XMM0	# spill
58c   	movsd   [rsp + #64], XMM4	# spill
592   	movl    RSI, #-155	# int
597   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #64 L[1]=rsp + #16 STK[0]=rsp + #16 STK[1]=rsp + #20
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=rsp + #0 L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #32 L[6]=rsp + #8 L[7]=RBP L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [24]=Oop [40]=Oop [64]=Oop off=1436}
59c   	int3	# ShouldNotReachHere
59c
5a1   B60: #	B38 &lt;- B34  Freq: 3.89348e-06
5a1   	movl    RBP, R13	# spill
5a4   	jmp     B38
5a4
5a9   B61: #	N1041 &lt;- B10  Freq: 9.99995e-07
5a9   	movl    RBP, [rsp + #12]	# spill
5ad   	movl    RSI, #-34	# int
5b2   	movl    [rsp + #8], R10	# spill
5b7   	movss   [rsp + #12], XMM1	# spill
      	nop 	# 2 bytes pad for loops and calls
5bf   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_ STK[0]=rsp + #8 STK[1]=rsp + #24 STK[2]=RBP STK[3]=rsp + #12
        # OopMap{[8]=NarrowOop [12]=NarrowOop [24]=Oop off=1476}
5c4   	int3	# ShouldNotReachHere
5c4
5c9   B62: #	N1041 &lt;- B6 B5  Freq: 1.91752e-06
5c9   	movl    RBP, R11	# spill
5cc   	movq    [rsp + #0], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
5d3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:55  L[0]=rsp + #0 L[1]=RBP L[2]=#0
        # OopMap{[0]=Oop off=1496}
5d8   	int3	# ShouldNotReachHere
5d8
5dd   B63: #	N1041 &lt;- B46  Freq: 8.95963e-07
5dd   	movl    RSI, #-34	# int
5e2   	movl    RBP, [rsp + #12]	# spill
5e6   	movl    [rsp + #0], RCX	# spill
5e9   	movl    R10, [rsp + #8]	# spill
5ee   	movl    [rsp + #4], R10	# spill
5f3   	movsd   [rsp + #16], XMM0	# spill
5f9   	movss   [rsp + #40], XMM3	# spill
5ff   	movss   [rsp + #44], XMM6	# spill
605   	movss   [rsp + #56], XMM1	# spill
60b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #56 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=_ L[8]=_ STK[0]=rsp + #40 STK[1]=rsp + #24 STK[2]=rsp + #44 STK[3]=rsp + #56
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop [40]=NarrowOop [56]=NarrowOop off=1552}
610   	int3	# ShouldNotReachHere
610
615   B64: #	N1041 &lt;- B47  Freq: 8.95962e-07
615   	movl    RBP, [rsp + #12]	# spill
619   	movl    [rsp + #0], RCX	# spill
61c   	movl    R8, [rsp + #8]	# spill
621   	movl    [rsp + #4], R8	# spill
626   	movsd   [rsp + #40], XMM0	# spill
62c   	movss   [rsp + #12], XMM1	# spill
632   	movl    R10, [rsp + #32]	# spill
637   	movl    [rsp + #20], R10	# spill
63c   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
643   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_ STK[0]=rsp + #16 STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #12 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [12]=NarrowOop [16]=NarrowOop [24]=Oop [40]=Oop off=1608}
648   	int3	# ShouldNotReachHere
648
64d   B65: #	N1041 &lt;- B1  Freq: 4.76837e-07
64d   	movl    [rsp + #0], RDX	# spill
650   	movq    [rsp + #8], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
657   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::search @ bci:11  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #0
        # OopMap{[8]=Oop off=1628}
65c   	int3	# ShouldNotReachHere
65c
661   B66: #	N1041 &lt;- B15  Freq: 7.57222e-06
661   	movl    RBP, R10	# spill
664   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
66b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1648}
670   	int3	# ShouldNotReachHere
670
675   B67: #	N1041 &lt;- B17  Freq: 7.57221e-06
675   	movl    RBP, R13	# spill
678   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
67f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1668}
684   	int3	# ShouldNotReachHere
684
689   B68: #	N1041 &lt;- B3  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
68b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:51  L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1680}
690   	int3	# ShouldNotReachHere
690
695   B69: #	N1041 &lt;- B8  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
697   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:77  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap{off=1692}
69c   	int3	# ShouldNotReachHere
69c
6a1   B70: #	N1041 &lt;- B9  Freq: 1.01327e-06
6a1   	movss   [rsp + #8], XMM1	# spill
6a7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL STK[1]=rsp + #24 STK[2]=rsp + #12 STK[3]=rsp + #8
        # OopMap{[8]=NarrowOop [24]=Oop off=1708}
6ac   	int3	# ShouldNotReachHere
6ac
6b1   B71: #	N1041 &lt;- B11  Freq: 1.01327e-06
      	nop 	# 2 bytes pad for loops and calls
6b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=1720}
6b8   	int3	# ShouldNotReachHere
6b8
6bd   B72: #	N1041 &lt;- B45  Freq: 9.07861e-07
6bd   	movss   [rsp + #0], XMM6	# spill
6c2   	movss   [rsp + #4], XMM1	# spill
6c8   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
6cf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=rsp + #24 STK[2]=rsp + #0 STK[3]=rsp + #4
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{[4]=NarrowOop [24]=Oop off=1748}
6d4   	int3	# ShouldNotReachHere
6d4

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139941923202816'/>
<opto_assembly compile_id='125' compile_kind='osr'>
{method}
 - this oop:          0x00007f46c68646a8
 - method holder:     &apos;java/io/BufferedReader&apos;
 - constants:         0x00007f46c6863390 constant pool [214] {0x00007f46c6863390} for &apos;java/io/BufferedReader&apos; cache=0x00007f46c6866168
 - access:            0xf1000000  
 - name:              &apos;readLine&apos;
 - signature:         &apos;(Z)Ljava/lang/String;&apos;
 - max stack:         7
 - max locals:        11
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      16
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c9261180
 - code size:         304
 - code start:        0x00007f46c68644a8
 - code end (excl):   0x00007f46c68645d8
 - method data:       0x00007f46c6a183f0
 - checked ex length: 1
 - checked ex start:  0x00007f46c68646a4
 - linenumber start:  0x00007f46c68645d8
 - localvar length:   10
 - localvar start:    0x00007f46c6864608
 - compiled code: nmethod   1155  100   !   3       java.io.BufferedReader::readLine (304 bytes)
#
#  java/lang/String:exact * ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 160 --
#r191 rsp+156: in_preserve
#r190 rsp+152: return address
#r189 rsp+148: in_preserve
#r188 rsp+144: saved fp register
#r187 rsp+140: Fixed slot 3
#r186 rsp+136: Fixed slot 2
#r185 rsp+132: Fixed slot 1
#r184 rsp+128: Fixed slot 0
#r223 rsp+124: spill
#r222 rsp+120: spill
#r221 rsp+116: spill
#r220 rsp+112: spill
#r219 rsp+108: spill
#r218 rsp+104: spill
#r217 rsp+100: spill
#r216 rsp+96: spill
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N2050: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B94 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (488 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #144	# Create frame

01f   	movq    R10, [RSI + #96 (8-bit)]	# ptr
023   	movq    [rsp + #32], R10	# spill
028   	movq    R10, [RSI + #88 (8-bit)]	# ptr
02c   	leaq    R11, [rsp + #128]	# box lock
034   	movq    [R11], R10	# ptr
037   	movq    R10, [RSI + #80 (8-bit)]	# ptr
03b   	movq    [rsp + #0], R10	# spill
03f   	movl    R13, [RSI + #24 (8-bit)]	# int
043   	movq    RBP, [RSI + #64 (8-bit)]	# ptr
047   	movl    R14, [RSI + #16 (8-bit)]	# int
04b   	movl    RBX, [RSI + #32 (8-bit)]	# int
04e   	movl    R11, [RSI + #40 (8-bit)]	# int
052   	movl    [rsp + #16], R11	# spill
057   	movq    R10, [RSI + #48 (8-bit)]	# ptr
05b   	movq    [rsp + #40], R10	# spill
060   	movq    RDI, RSI	# spill
063   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
070   	movq    R10, [rsp + #0]	# spill
074   	testq   R10, R10	# ptr
077   	je     B94  P=0.001000 C=-1.000000
077
07d   B2: #	B140 B3 &lt;- B1  Freq: 0.999
07d   	movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
081   	cmpl    R8, narrowklass: precise klass java/io/BufferedReader: 0x00007f469c05b120:Constant:exact *	# compressed klass ptr
088   	jne,u  B140  P=0.000001 C=-1.000000
088
08e   B3: #	B4 &lt;- B2  Freq: 0.998999
08e   	movq    R8, R10	# spill
091   	# checkcastPP of R8
091
091   B4: #	B95 B5 &lt;- B3 B94  Freq: 0.999999
091   	testq   RBP, RBP	# ptr
094   	je     B95  P=0.001000 C=-1.000000
094
09a   B5: #	B140 B6 &lt;- B4  Freq: 0.998999
09a   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
09e   	cmpl    R11, narrowklass: precise klass java/lang/StringBuffer: 0x00007f46d814fb40:Constant:exact *	# compressed klass ptr
0a5   	jne,u  B140  P=0.000001 C=-1.000000
0a5
0ab   B6: #	B7 &lt;- B5  Freq: 0.998998
0ab   	# checkcastPP of RBP
0ab
0ab   B7: #	B136 B8 &lt;- B6 B95  Freq: 0.999998
0ab   	movq    [rsp + #0], R8	# spill
0af   	movl    RSI, #-122	# int
0b4   	testq   R8, R8	# ptr
0b7   	je     B136  P=0.000001 C=-1.000000
0b7
0bd   B8: #	B9 &lt;- B7  Freq: 0.999997
0bd   	movq    [rsp + #56], RBP	# spill
0c2   	movl    R10, #10	# int
0c8   	movl    R11, #7	# long (unsigned 32-bit)
0ce   	movl    [rsp + #84], R10	# spill
0d3   	movq    [rsp + #96], R11	# spill
0d3
0d8   B9: #	B103 B10 &lt;- B8 B102 	Loop: B9-B102  Freq: 1.00044
0d8   	movq    R10, [rsp + #0]	# spill
0dc   	movl    R10, [R10 + #20 (8-bit)]	# int ! Field: java/io/BufferedReader.nChars
0e0   	movl    R11, R14	# spill
0e3   	incl    R11	# int
0e6   	movl    RDI, R11	# spill
0e9   	movq    R11, [rsp + #0]	# spill
0ed   	movl    R11, [R11 + #44 (8-bit)]	# compressed ptr ! Field: java/io/BufferedReader.cb
0f1   	movl    [rsp + #20], R11	# spill
0f6   	movq    R11, [rsp + #0]	# spill
0fa   	movl    R11, [R11 + #24 (8-bit)]	# int ! Field: java/io/BufferedReader.nextChar
0fe   	movl    [rsp + #8], R11	# spill
103   	movl    R11, [rsp + #20]	# spill
108   	decode_heap_oop R11,R11
190   	movq    [rsp + #24], R11	# spill
195   	movl    R8, R14	# spill
198   	subl    R8, [RSP + #8 (32-bit)]	# int
19d   	movl    [rsp + #12], R8	# spill
1a2   	cmpl    R14, R10
1a5   	jge     B103  P=0.000117 C=42599.000000
1a5
1ab   B10: #	B156 B11 &lt;- B9  Freq: 1.00032
1ab   	movl    R8, [rsp + #20]	# spill
1b0   	movl    RAX, [R8 + #12 (8-bit)]	# range
1b4   	NullCheck R8
1b4
1b4   B11: #	B135 B12 &lt;- B10  Freq: 1.00032
1b4   	movl    R11, R14	# spill
1b7   	addl    R11, #2	# int
1bb   	cmpl    R14, RAX	# unsigned
1be   	jnb,u  B135  P=0.000001 C=-1.000000
1be
1c4   B12: #	B93 B13 &lt;- B11  Freq: 1.00032
1c4   	movzwl  R13, [R8 + #16 + R14 &lt;&lt; #1]	# ushort/char
1ca   	cmpl    R13, #10
1ce   	je     B93  P=0.001925 C=42594.000000
1ce
1d4   B13: #	B129 B14 &lt;- B12  Freq: 0.998393
1d4   	cmpl    R10, RAX
1d7   	movl    R8, R10	# spill
1da   	cmovlgt R8, RAX	# min
1de   	cmpl    R13, #13
1e2   	je     B129  P=0.000000 C=42512.000000
1e2
1e8   B14: #	B104 B15 &lt;- B13  Freq: 0.998392
1e8   	xorl    RCX, RCX	# int
1ea   	xorl    R9, R9	# int
1ed   	cmpl    R11, RCX
1f0   	cmovllt R11, R9	# max
1f4   	cmpl    RDI, R10
1f7   	jge     B104  P=0.000117 C=42599.000000
1f7
1fd   B15: #	B16 &lt;- B14  Freq: 0.998275
1fd   	movl    RCX, R8	# spill
200   	addl    RCX, #-7	# int
203   	cmpl    R11, R10
206   	cmovlgt R11, R10	# min
20a   	cmpl    R8, RCX
20d   	movl    R8, #-2147483648	# int
213   	cmovll RCX, R8	# signed, int
213
217   B16: #	B134 B17 &lt;- B15 B20 	Loop: B16-B20 inner pre of N1511 Freq: 1.99271
217   	cmpl    RDI, RAX	# unsigned
219   	jnb,u  B134  P=0.000001 C=-1.000000
219
21f   B17: #	B92 B18 &lt;- B16  Freq: 1.99271
21f   	movl    R8, [rsp + #20]	# spill
224   	movzwl  R13, [R8 + #16 + RDI &lt;&lt; #1]	# ushort/char
22a   	cmpl    R13, #10
22e   	je     B92  P=0.001925 C=42594.000000
22e
234   B18: #	B141 B19 &lt;- B17  Freq: 1.98887
234   	movl    R9, RDI	# spill
237   	incl    R9	# int
23a   	cmpl    R13, #13
23e   	je     B141  P=0.000000 C=42512.000000
23e
244   B19: #	B21 B20 &lt;- B18  Freq: 1.98887
244   	cmpl    R9, R11
247   	jge,s   B21	# loop end  P=0.500000 C=42599.000000
247
249   B20: #	B16 &lt;- B19  Freq: 0.994436
249   	movl    RDI, R9	# spill
24c   	jmp,s   B16
24c
24e   B21: #	B137 B22 &lt;- B19  Freq: 0.994436
24e   	cmpl    R9, RCX
251   	jge     B137  P=0.000001 C=-1.000000
251
257   B22: #	B24 &lt;- B21  Freq: 0.994435
257   	# castII of R9
257   	jmp,s   B24
      	nop 	# 7 bytes pad for loops and calls

260   B23: #	B24 &lt;- B40  top-of-loop Freq: 63.5068
260   	movl    R9, R14	# spill
263   	movdl   RBX, XMM2	# spill
267   	movdl   R10, XMM0	# spill
267
26c   B24: #	B54 B25 &lt;- B22 B23 	Loop: B24-B23 inner main of N303 Freq: 64.5012
26c   	movslq  R11, R9	# i2l
26f   	movl    R14, R9	# spill
272   	addl    R14, #8	# int
276   	movl    RDI, [rsp + #20]	# spill
27a   	movzwl  RDI, [RDI + #16 + R9 &lt;&lt; #1]	# ushort/char
280   	cmpl    RDI, #10
283   	je     B54  P=0.001925 C=42594.000000
283
289   B25: #	B115 B26 &lt;- B24  Freq: 64.377
289   	movl    R8, [rsp + #20]	# spill
28e   	movzwl  RBP, [R8 + #22 + R11 &lt;&lt; #1]	# ushort/char
294   	cmpl    RDI, #13
297   	je     B115  P=0.000000 C=42512.000000
297
29d   B26: #	B56 B27 &lt;- B25  Freq: 64.377
29d   	movzwl  RDI, [R8 + #20 + R11 &lt;&lt; #1]	# ushort/char
2a3   	movzwl  R8, [R8 + #18 + R11 &lt;&lt; #1]	# ushort/char
2a9   	cmpl    R8, #10
2ad   	je     B56  P=0.001925 C=42594.000000
2ad
2b3   B27: #	B122 B28 &lt;- B26  Freq: 64.2531
2b3   	cmpl    R8, #13
2b7   	je     B122  P=0.000000 C=42512.000000
2b7
2bd   B28: #	B52 B29 &lt;- B27  Freq: 64.253
2bd   	movl    RDX, [rsp + #20]	# spill
2c1   	movzwl  R13, [RDX + #30 + R11 &lt;&lt; #1]	# ushort/char
2c7   	movl    RDX, R9	# spill
2ca   	addl    RDX, #4	# int
2cd   	cmpl    RDI, #10
2d0   	je     B52  P=0.001925 C=42594.000000
2d0
2d6   B29: #	B118 B30 &lt;- B28  Freq: 64.1293
2d6   	movl    RSI, [rsp + #20]	# spill
2da   	movzwl  R8, [RSI + #26 + R11 &lt;&lt; #1]	# ushort/char
2e0   	cmpl    RDI, #13
2e3   	je     B118  P=0.000000 C=42512.000000
2e3
2e9   B30: #	B58 B31 &lt;- B29  Freq: 64.1293
2e9   	movl    RSI, R9	# spill
2ec   	addl    RSI, #4	# int
2ef   	cmpl    RBP, #10
2f2   	je     B58  P=0.001925 C=42594.000000
2f2
2f8   B31: #	B125 B32 &lt;- B30  Freq: 64.0058
2f8   	movdl   XMM0, R10	# spill
2fd   	movdl   XMM2, RBX	# spill
301   	movl    R10, [rsp + #20]	# spill
306   	movzwl  RDI, [R10 + #24 + R11 &lt;&lt; #1]	# ushort/char
30c   	movl    RBX, R9	# spill
30f   	addl    RBX, #4	# int
312   	cmpl    RBP, #13
315   	je     B125  P=0.000000 C=42512.000000
315
31b   B32: #	B55 B33 &lt;- B31  Freq: 64.0058
31b   	movl    R10, R9	# spill
31e   	addl    R10, #4	# int
322   	movl    RBP, R9	# spill
325   	addl    RBP, #4	# int
328   	movdl   XMM1, RBP	# spill
32c   	cmpl    RDI, #10
32f   	je     B55  P=0.001925 C=42594.000000
32f
335   B33: #	B116 B34 &lt;- B32  Freq: 63.8826
335   	cmpl    RDI, #13
338   	je     B116  P=0.000000 C=42512.000000
338
33e   B34: #	B57 B35 &lt;- B33  Freq: 63.8825
33e   	movl    R10, R9	# spill
341   	addl    R10, #4	# int
345   	cmpl    R8, #10
349   	je     B57  P=0.001925 C=42594.000000
349
34f   B35: #	B123 B36 &lt;- B34  Freq: 63.7596
34f   	movl    RDX, R9	# spill
352   	addl    RDX, #4	# int
355   	cmpl    R8, #13
359   	je     B123  P=0.000000 C=42512.000000
359
35f   B36: #	B53 B37 &lt;- B35  Freq: 63.7595
35f   	movl    R8, [rsp + #20]	# spill
364   	movzwl  RDI, [R8 + #28 + R11 &lt;&lt; #1]	# ushort/char
36a   	cmpl    RDI, #10
36d   	je     B53  P=0.001925 C=42594.000000
36d
373   B37: #	B119 B38 &lt;- B36  Freq: 63.6368
373   	movl    RBP, R9	# spill
376   	addl    RBP, #7	# int
379   	cmpl    RDI, #13
37c   	je     B119  P=0.000000 C=42512.000000
37c
382   B38: #	B59 B39 &lt;- B37  Freq: 63.6368
382   	cmpl    R13, #10
386   	je     B59  P=0.001925 C=42594.000000
386
38c   B39: #	B126 B40 &lt;- B38  Freq: 63.5142
38c   	addl    R9, #4	# int
390   	cmpl    R13, #13
394   	je     B126  P=0.000000 C=42512.000000
394
39a   B40: #	B23 B41 &lt;- B39  Freq: 63.5142
39a   	cmpl    R14, RCX
39d   	jl     B23	# loop end  P=0.999883 C=42599.000000
39d
3a3   B41: #	B42 &lt;- B40  Freq: 0.00745413
3a3   	movdl   RBX, XMM2	# spill
3a7   	movdl   R10, XMM0	# spill
3a7
3ac   B42: #	B49 B43 &lt;- B137 B41  Freq: 0.00745513
3ac   	incl    RBP	# int
3ae   	cmpl    R14, R10
3b1   	jge,s   B49  P=0.500000 C=-1.000000
3b1
3b3   B43: #	B44 &lt;- B42  Freq: 0.00372757
3b3   	# castII of R14
      	nop 	# 1 bytes pad for loops and calls

3b4   B44: #	B135 B45 &lt;- B43 B48 	Loop: B44-B48 inner post of N1511 Freq: 0.0074408
3b4   	cmpl    R14, RAX	# unsigned
3b7   	jnb,u  B135  P=0.000001 C=-1.000000
3b7
3bd   B45: #	B133 B46 &lt;- B44  Freq: 0.00744079
3bd   	movl    R11, [rsp + #20]	# spill
3c2   	movzwl  R13, [R11 + #16 + R14 &lt;&lt; #1]	# ushort/char
3c8   	cmpl    R13, #10
3cc   	je     B133  P=0.001925 C=42594.000000
3cc
3d2   B46: #	B129 B47 &lt;- B45  Freq: 0.00742647
3d2   	movl    RBP, R14	# spill
3d5   	incl    RBP	# int
3d7   	cmpl    R13, #13
3db   	je     B129  P=0.000000 C=42512.000000
3db
3e1   B47: #	B49 B48 &lt;- B46  Freq: 0.00742646
3e1   	cmpl    RBP, R10
3e4   	jge,s   B49	# loop end  P=0.500000 C=42599.000000
3e4
3e6   B48: #	B44 &lt;- B47  Freq: 0.00371323
3e6   	movl    R14, RBP	# spill
3e9   	jmp,s   B44
3e9
3eb   B49: #	B50 &lt;- B104 B47 B42  Freq: 0.00755797
3eb   	movl    R11, RBP	# spill
3ee   	subl    R11, [RSP + #8 (32-bit)]	# int
3f3   	movl    [rsp + #12], R11	# spill
3f3
3f8   B50: #	B97 B51 &lt;- B103 B49  Freq: 0.00767538
3f8   	movq    R10, [rsp + #0]	# spill
3fc   	movl    [R10 + #24 (8-bit)], RBP	# int ! Field: java/io/BufferedReader.nextChar
400   	movl    R10, narrowklass: precise klass java/lang/StringBuffer: 0x00007f46d814fb40:Constant:exact *	# compressed klass ptr
406   	testl   RBX, RBX
408   	je     B97  P=0.057471 C=87.000000
408
40e   B51: #	B63 &lt;- B50  Freq: 0.00723427
40e   	movl    [rsp + #80], RBP	# spill
412   	movl    [rsp + #84], R13	# spill
417   	movl    RBP, [rsp + #12]	# spill
41b   	jmp,s   B63
41b
41d   B52: #	B53 &lt;- B28  Freq: 0.123698
41d   	movl    R10, R9	# spill
41d
420   B53: #	B55 &lt;- B52 B36  Freq: 0.246446
420   	addl    R10, #2	# int
424   	jmp,s   B55
424
426   B54: #	B55 &lt;- B24  Freq: 0.124176
426   	movl    R10, R9	# spill
426
429   B55: #	B61 &lt;- B54 B32 B53  Freq: 0.493844
429   	movl    R11, R10	# spill
42c   	jmp,s   B61
42c
42e   B56: #	B57 &lt;- B26  Freq: 0.123937
42e   	movl    RBX, R9	# spill
42e
431   B57: #	B60 &lt;- B56 B34  Freq: 0.246921
431   	movl    R11, RBX	# spill
434   	jmp,s   B60
434
436   B58: #	B59 &lt;- B30  Freq: 0.12346
436   	movdl   XMM1, R9	# spill
436
43b   B59: #	B60 &lt;- B58 B38  Freq: 0.245971
43b   	movdl   R11, XMM1	# spill
440   	addl    R11, #2	# int
444
444   B60: #	B61 &lt;- B57 B59  Freq: 0.492893
444   	incl    R11	# int
447
447   B61: #	B62 &lt;- B133 B92 B55 B60  Freq: 0.990587
447   	movl    RBP, R11	# spill
44a   	subl    RBP, [RSP + #8 (32-bit)]	# int
44e
44e   B62: #	B63 &lt;- B93 B61  Freq: 0.992513
44e   	movq    R10, [rsp + #0]	# spill
452   	movl    [R10 + #24 (8-bit)], R11	# int ! Field: java/io/BufferedReader.nextChar
456   	movl    [rsp + #80], R11	# spill
456
45b   B63: #	B85 B64 &lt;- B62 B51  Freq: 0.999747
45b   	movl    [rsp + #12], RBP	# spill
45f   	movslq  R10, RBP	# i2l
462   	salq    R10, #1
465   	addq    R10, #23	# long
469   	movq    [rsp + #88], R10	# spill
46e   	shrq    R10, #3
472   	movq    [rsp + #48], R10	# spill
477   	movq    R10, [rsp + #56]	# spill
47c   	testq   R10, R10	# ptr
47f   	jne     B85  P=0.060976 C=82.000000
47f
485   B64: #	B105 B65 &lt;- B63  Freq: 0.938787
485   	# TLS is in R15
485   	movq    RBX, [R15 + #112 (8-bit)]	# ptr
489   	movq    R10, RBX	# spill
48c   	addq    R10, #24	# ptr
490   	movl    R11, narrowklass: precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# compressed klass ptr
496   	# TLS is in R15
496   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
49d   	jnb,u  B105  P=0.000100 C=-1.000000
49d
4a3   B65: #	B66 &lt;- B64  Freq: 0.938693
4a3   	# TLS is in R15
4a3   	movq    [R15 + #112 (8-bit)], R10	# ptr
4a7   	decode_klass_not_null R11,R11
4ab   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
4b3   	movq    R10, [R11 + #176 (32-bit)]	# ptr
4ba   	movq    [RBX], R10	# ptr
4bd   	movl    [RBX + #8 (8-bit)], narrowklass: precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# compressed klass ptr
4c4   	movl    [RBX + #12 (8-bit)], R12	# int (R12_heapbase==0)
4c8   	movq    [RBX + #16 (8-bit)], R12	# long (R12_heapbase==0)
4c8
4cc   B66: #	B147 B67 &lt;- B106 B65  Freq: 0.938787
4cc   	
4cc   	MEMBAR-storestore (empty encoding)
4cc   	# checkcastPP of RBX
4cc   	movl    R10, [rsp + #8]	# spill
4d1   	testl   R10, R10
4d4   	jl     B147  P=0.000000 C=2544.000000
4d4
4da   B67: #	B88 B68 &lt;- B66  Freq: 0.938787
4da   	movl    RSI, #-10	# int
4df   	movl    R11, [rsp + #12]	# spill
4e4   	testl   R11, R11
4e7   	jle     B88  P=0.004324 C=2544.000000
4e7
4ed   B68: #	B69 &lt;- B67  Freq: 0.934728
4ed   	movl    RCX, [rsp + #20]	# spill
4ed
4f1   B69: #	B157 B70 &lt;- B90 B68  Freq: 0.936757
4f1   	decode_heap_oop_not_null R8,RCX
4f4   	movl    R9, [RCX + #12 (8-bit)]	# range
4f8   	NullCheck RCX
4f8
4f8   B70: #	B148 B71 &lt;- B69  Freq: 0.936756
4f8   	movq    [rsp + #56], R8	# spill
4fd   	movq    [rsp + #24], RBX	# spill
502   	movl    [rsp + #16], R11	# spill
507   	movl    [rsp + #12], R10	# spill
50c   	movl    [rsp + #8], RCX	# spill
510   	movl    R8, R9	# spill
513   	subl    R8, R10	# int
516   	movl    RSI, #-155	# int
51b   	cmpl    R8, R11
51e   	movl    R10, R11	# spill
521   	cmovll R10, R8	# signed, int
525   	movl    [rsp + #20], R10	# spill
52a   	movl    RBP, R9	# spill
52d   	subl    RBP, R11	# int
530   	movslq  R10, R10	# i2l
533   	movq    [rsp + #64], R10	# spill
538   	movq    R8, R10	# spill
53b   	salq    R8, #1
53e   	addq    R8, #16	# long
542   	movq    R10, R8	# spill
545   	shrq    R10, #3
549   	movq    R11, [rsp + #48]	# spill
54e   	subq    R11, R10	# long
551   	movq    [rsp + #72], R11	# spill
556   	movl    R11, [rsp + #12]	# spill
55b   	cmpl    R11, RBP
55e   	jg     B148  P=0.000000 C=2533.000000
55e
564   B71: #	B149 B72 &lt;- B70  Freq: 0.936756
564   	movl    R11, [rsp + #16]	# spill
569   	testl   R11, R11
56c   	jl     B149  P=0.000000 C=2724.000000
56c
572   B72: #	B107 B73 &lt;- B71  Freq: 0.936755
572   	# TLS is in R15
572   	movq    RBP, [R15 + #112 (8-bit)]	# ptr
576   	movq    R10, [rsp + #88]	# spill
57b   	andq    R10, #-8	# long
57f   	movq    RBX, RBP	# spill
582   	addq    RBX, R10	# ptr
585   	movl    RCX, [rsp + #20]	# spill
589   	addl    RCX, [RSP + #12 (32-bit)]	# int
58d   	cmpl    R11, #524288	# unsigned
594   	jnbe,u  B107  P=0.000001 C=-1.000000
594
59a   B73: #	B107 B74 &lt;- B72  Freq: 0.936754
59a   	# TLS is in R15
59a   	cmpq    RBX, [R15 + #128 (32-bit)]	# raw ptr
5a1   	jnb,u  B107  P=0.000100 C=-1.000000
5a1
5a7   B74: #	B75 &lt;- B73  Freq: 0.936661
5a7   	# TLS is in R15
5a7   	movq    [R15 + #112 (8-bit)], RBX	# ptr
5ab   	PREFETCHNTA [RBX + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
5b2   	movq    [RBP], 0x0000000000000001	# ptr
5ba   	PREFETCHNTA [RBX + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
5c1   	movl    [RBP + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f46a400a5a0:Constant:exact *	# compressed klass ptr
5c8   	PREFETCHNTA [RBX + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
5cf   	movl    [RBP + #12 (8-bit)], R11	# int
5d3   	PREFETCHNTA [RBX + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
5d3
5da   B75: #	B142 B76 &lt;- B108 B74  Freq: 0.936755
5da   	movq    RBX, [rsp + #48]	# spill
5df   	addq    RBX, #-2	# long
5e3   	
5e3   	# checkcastPP of RBP
5e3   	movq    R10, RBP	# spill
5e6   	andq    R8, #-7	# long
5ea   	movq    RSI, RBP	# spill
5ed   	addq    RSI, #16	# ptr
5f1   	encode_heap_oop_not_null RBP,RBP
6f9   	movq    RDI, R10	# spill
6fc   	addq    RDI, R8	# ptr
6ff   	cmpl    R9, RCX	# unsigned
702   	jb,u  B142  P=0.000001 C=-1.000000
702
708   B76: #	B142 B77 &lt;- B75  Freq: 0.936754
708   	movl    R8, [rsp + #16]	# spill
70d   	cmpl    R8, [RSP + #20 (32-bit)]	# unsigned
712   	jb,u  B142  P=0.000001 C=-1.000000
712
718   B77: #	B144 B78 &lt;- B76  Freq: 0.936753
718   	movl    R11, [rsp + #20]	# spill
71d   	testl   R11, R11
720   	jle     B144  P=0.000001 C=-1.000000
720
726   B78: #	B96 B79 &lt;- B77  Freq: 0.936752
726   	cmpl    R11, R8
729   	jl     B96  P=0.001000 C=-1.000000
729
72f   B79: #	B80 &lt;- B78 B96  Freq: 0.936752
72f   	movl    R11, [rsp + #8]	# spill
734   	movl    R10, [rsp + #12]	# spill
739   	leaq    RDI, [R11 + #16 + R10 &lt;&lt; #1]	# ptr posidxscaleoffnarrow
73e   	movq    RDX, [rsp + #64]	# spill
743   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
750
750   B80: #	B81 &lt;- B79 B145 B143  Freq: 0.936755
750   	MEMBAR-storestore (empty encoding)
750   	movq    RBX, [rsp + #24]	# spill
755   	movl    [RBX + #12 (8-bit)], RBP	# compressed ptr ! Field: java/lang/String.value
758   	movq    R10, RBX	# ptr -&gt; long
75b   	shrq    R10, #9
75f   	movq    R11, 0x00007f46dbf28000	# ptr
769   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
769
76d   B81: #	B82 &lt;- B91 B80  Freq: 0.938785
76d   	MEMBAR-release ! (empty encoding)
76d
76d   B82: #	B146 B83 &lt;- B87 B81  Freq: 0.999743
76d   	movq    R10, [rsp + #0]	# spill
771   	incl    [R10 + #24 (8-bit)]	# int ! Field: java/io/BufferedReader.nextChar
775   	movl    R11, [rsp + #84]	# spill
77a   	cmpl    R11, #13
77e   	je     B146  P=0.000000 C=82.000000
77e
784   B83: #	B138 B84 &lt;- B82  Freq: 0.999742
784   	MEMBAR-release (a FastUnlock follows so empty encoding)
784   	movq    R11, [rsp + #32]	# spill
789   	movq    R10, [rsp + #96]	# spill
78e   	andq    R10, [R11]	# long
791   	cmpq    R10, #5
795   	jne     B138  P=0.000001 C=-1.000000
795
79b   B84: #	N2050 &lt;- B139 B138 B83  Freq: 0.999742
79b   	movq    RAX, RBX	# spill
79e   	addq    rsp, 144	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

7ac   	ret
7ac
7ad   B85: #	B167 B86 &lt;- B63  Freq: 0.0609602
7ad   	movq    RSI, [rsp + #56]	# spill
7b2   	movq    RDX, [rsp + #24]	# spill
7b7   	movl    RCX, [rsp + #8]	# spill
7bb   	movl    R8, RBP	# spill
      	nop 	# 1 bytes pad for loops and calls
7bf   	call,static  java.lang.StringBuffer::append
        # java.io.BufferedReader::readLine @ bci:226  L[0]=rsp + #0 L[1]=_ L[2]=rsp + #56 L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #84 L[8]=_ L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{[0]=Oop [32]=Oop [40]=Oop [56]=Oop off=1988}
7c4
7c4   B86: #	B168 B87 &lt;- B85  Freq: 0.060959
        # Block is sole successor of call
7c4   	movq    RSI, [rsp + #56]	# spill
7c9   	movq    RBP, [rsp + #0]	# spill
      	nop 	# 2 bytes pad for loops and calls
7cf   	call,static  java.lang.StringBuffer::toString
        # java.io.BufferedReader::readLine @ bci:231  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #84 L[8]=_ L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop off=2004}
7d4
7d4   B87: #	B82 &lt;- B86  Freq: 0.0609578
        # Block is sole successor of call
7d4   	movq    RBX, RAX	# spill
7d7   	jmp,s   B82
7d7
7d9   B88: #	B154 B89 &lt;- B67  Freq: 0.00405922
7d9   	testl   R11, R11
7dc   	jl     B154  P=0.000001 C=-1.000000
7dc
7e2   B89: #	B158 B90 &lt;- B88  Freq: 0.00405922
7e2   	movl    RCX, [rsp + #20]	# spill
7e6   	movl    R8, [RCX + #12 (8-bit)]	# range
7ea   	NullCheck RCX
7ea
7ea   B90: #	B69 B91 &lt;- B89  Freq: 0.00405921
7ea   	cmpl    R10, R8
7ed   	jg     B69  P=0.500000 C=-1.000000
7ed
7f3   B91: #	B81 &lt;- B90  Freq: 0.00202961
7f3   	movq    R10, RBX	# ptr -&gt; long
7f6   	movl    [RBX + #12 (8-bit)], narrowoop: char[int:0]&lt;ciTypeArray length=0 type=&lt;ciTypeArrayKlass name=[C ident=807 address=0x00007f46a400a5a0&gt; ident=836 SCAVENGABLE address=0x00007f4698054ca0&gt; *	# compressed ptr ! Field: java/lang/String.value
7fd   	shrq    R10, #9
801   	movq    R11, 0x00007f46dbf28000	# ptr
80b   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
80f   	jmp     B81
80f
814   B92: #	B61 &lt;- B17  Freq: 0.0038363
814   	movl    R11, RDI	# spill
817   	jmp     B61
817
81c   B93: #	B62 &lt;- B12  Freq: 0.00192578
81c   	movl    R11, R14	# spill
81f   	movl    RBP, [rsp + #12]	# spill
823   	jmp     B62
823
828   B94: #	B4 &lt;- B1  Freq: 0.000999987
828   	xorl    R8, R8	# ptr
82b   	jmp     B4
82b
830   B95: #	B7 &lt;- B4  Freq: 0.000999986
830   	xorl    RBP, RBP	# ptr
832   	jmp     B7
832
837   B96: #	B79 &lt;- B78  Freq: 0.000936753
837   	movq    RCX, [rsp + #72]	# spill
83c   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
846   	jmp     B79
846
84b   B97: #	B109 B98 &lt;- B50  Freq: 0.000441114
84b   	movq    R11, java/lang/Class:exact *	# ptr
855   	movl    R11, [R11 + #116 (8-bit)]	# int ! Field: java/io/BufferedReader.defaultExpectedLineLength
859   	movl    [rsp + #20], R11	# spill
85e   	movslq  R11, R11	# i2l
861   	movq    [rsp + #48], R11	# spill
866   	movq    R11, [rsp + #56]	# spill
86b   	testq   R11, R11	# ptr
86e   	je     B109  P=0.100000 C=-1.000000
86e
874   B98: #	B99 &lt;- B97  Freq: 0.000397003
874   	movq    [rsp + #48], R11	# spill
874
879   B99: #	B166 B100 &lt;- B114 B98  Freq: 0.000441114
879   	movq    RSI, [rsp + #48]	# spill
87e   	movq    RDX, [rsp + #24]	# spill
883   	movl    RCX, [rsp + #8]	# spill
887   	movl    R8, [rsp + #12]	# spill
88c   	movq    RBP, [rsp + #0]	# spill
      	nop 	# 3 bytes pad for loops and calls
893   	call,static  java.lang.StringBuffer::append
        # java.io.BufferedReader::readLine @ bci:289  L[0]=RBP L[1]=_ L[2]=rsp + #48 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop [48]=Oop off=2200}
898
898   B100: #	B130 B101 &lt;- B99  Freq: 0.000441105
        # Block is sole successor of call
898   	movl    R14, [RBP + #24 (8-bit)]	# int ! Field: java/io/BufferedReader.nextChar
89c   	movl    R11, [RBP + #20 (8-bit)]	# int ! Field: java/io/BufferedReader.nChars
8a0   	cmpl    R14, R11
8a3   	jge     B130  P=0.057471 C=5.000000
8a3
8a9   B101: #	B155 B102 &lt;- B131 B100  Freq: 0.000441105
8a9   	movl    R10, [rsp + #16]	# spill
8ae   	testl   R10, R10
8b1   	jne     B155  P=0.000000 C=87.000000
8b1
8b7   B102: #	B9 &lt;- B101  Freq: 0.000441105
8b7   	movq    R10, [rsp + #0]	# spill
8bb   	movb    [R10 + #36 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/io/BufferedReader.skipLF
8bf   	movq    R10, [rsp + #48]	# spill
8c4   	movq    [rsp + #56], R10	# spill
8c9   	xorl    R13, R13	# int
8cc   	xorl    R10, R10	# int
8cf   	movl    [rsp + #16], R10	# spill
8d4   	xorl    RBX, RBX	# int
8d6   	jmp     B9
8d6
8db   B103: #	B50 &lt;- B9  Freq: 0.000117413
8db   	movl    RBP, R14	# spill
8de   	jmp     B50
8de
8e3   B104: #	B49 &lt;- B14  Freq: 0.000117173
8e3   	movl    RBP, RDI	# spill
8e5   	jmp     B49
8e5
8ea   B105: #	B163 B106 &lt;- B64  Freq: 9.38943e-05
8ea   	movq    RSI, precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# ptr
8f4   	movq    RBP, [rsp + #0]	# spill
      	nop 	# 3 bytes pad for loops and calls
8fb   	call,static  wrapper for: _new_instance_Java
        # java.io.BufferedReader::readLine @ bci:195  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #8 L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #84 L[8]=rsp + #80 L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [32]=Oop [40]=Oop off=2304}
900
900   B106: #	B66 &lt;- B105  Freq: 9.38924e-05
        # Block is sole successor of call
900   	movq    RBX, RAX	# spill
903   	jmp     B66
903
908   B107: #	B164 B108 &lt;- B72 B73  Freq: 9.46402e-05
908   	movl    [rsp + #108], RCX	# spill
90c   	movq    [rsp + #112], R8	# spill
911   	movl    [rsp + #104], R9	# spill
916   	movl    RDX, R11	# spill
919   	movq    RBP, [rsp + #0]	# spill
91d   	movq    RSI, precise klass [C: 0x00007f46a400a5a0:Constant:exact *	# ptr
927   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOfRange @ bci:40  L[0]=rsp + #56 L[1]=rsp + #12 L[2]=_ L[3]=rsp + #16 L[4]=_
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # java.io.BufferedReader::readLine @ bci:208  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #84 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #24 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [8]=NarrowOop [24]=Oop [32]=Oop [40]=Oop [56]=Oop off=2348}
92c
92c   B108: #	B75 &lt;- B107  Freq: 9.46383e-05
        # Block is sole successor of call
92c   	movq    RBP, RAX	# spill
92f   	movl    R9, [rsp + #104]	# spill
934   	movq    R8, [rsp + #112]	# spill
939   	movl    RCX, [rsp + #108]	# spill
93d   	jmp     B75
93d
942   B109: #	B150 B110 &lt;- B97  Freq: 4.41114e-05
942   	# TLS is in R15
942   	movq    R11, [R15 + #112 (8-bit)]	# ptr
946   	movq    R8, R11	# spill
949   	addq    R8, #24	# ptr
94d   	decode_klass_not_null R10,R10
951   	# TLS is in R15
951   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
958   	jnb,u  B150  P=0.000100 C=-1.000000
958
95e   B110: #	B111 &lt;- B109  Freq: 4.4107e-05
95e   	# TLS is in R15
95e   	movq    [R15 + #112 (8-bit)], R8	# ptr
962   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
96a   	movq    R10, [R10 + #176 (32-bit)]	# ptr
971   	movq    [R11], R10	# ptr
974   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass java/lang/StringBuffer: 0x00007f46d814fb40:Constant:exact *	# compressed klass ptr
97c   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
980   	movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
980
984   B111: #	B152 B112 &lt;- B151 B110  Freq: 4.41114e-05
984   	movq    R10, [rsp + #48]	# spill
989   	salq    R10, #1
98c   	
98c   	addq    R10, #23	# long
990   	MEMBAR-storestore (empty encoding)
990   	# checkcastPP of R11
990   	movq    [rsp + #48], R11	# spill
995   	movq    R8, R10	# spill
998   	andq    R8, #-8	# long
99c   	# TLS is in R15
99c   	movq    R11, [R15 + #112 (8-bit)]	# ptr
9a0   	shrq    R10, #3
9a4   	movl    R9, [rsp + #20]	# spill
9a9   	cmpl    R9, #524288	# unsigned
9b0   	jnbe,u  B152  P=0.000001 C=-1.000000
9b0
9b6   B112: #	B152 B113 &lt;- B111  Freq: 4.41114e-05
9b6   	movq    R9, R11	# spill
9b9   	addq    R9, R8	# ptr
9bc   	addq    R10, #-2	# long
9c0   	movq    RDI, R11	# spill
9c3   	addq    RDI, #16	# ptr
9c7   	# TLS is in R15
9c7   	cmpq    R9, [R15 + #128 (32-bit)]	# raw ptr
9ce   	jnb,u  B152  P=0.000100 C=-1.000000
9ce
9d4   B113: #	B114 &lt;- B112  Freq: 4.4107e-05
9d4   	# TLS is in R15
9d4   	movq    [R15 + #112 (8-bit)], R9	# ptr
9d8   	PREFETCHNTA [R9 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
9e0   	movq    [R11], 0x0000000000000001	# ptr
9e7   	PREFETCHNTA [R9 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
9ef   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f46a400a5a0:Constant:exact *	# compressed klass ptr
9f7   	PREFETCHNTA [R9 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
9ff   	movl    RCX, [rsp + #20]	# spill
a03   	movl    [R11 + #12 (8-bit)], RCX	# int
a07   	PREFETCHNTA [R9 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
a0f   	movq    RCX, R10	# spill
a12   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
a1c
a1c   B114: #	B99 &lt;- B153 B113  Freq: 4.41114e-05
a1c   	
a1c   	MEMBAR-storestore (empty encoding)
a1c   	movq    R10, R11	# spill
a1f   	# checkcastPP of R10
a1f   	movq    R11, [rsp + #48]	# spill
a24   	movq    R11, R11	# ptr -&gt; long
a24   	encode_heap_oop_not_null R10,R10
b2c   	shrq    R11, #9
b30   	movq    R8, [rsp + #48]	# spill
b35   	movl    [R8 + #16 (8-bit)], R10	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
b39   	movq    R10, 0x00007f46dbf28000	# ptr
b43   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
b47   	jmp     B99
b47
b4c   B115: #	B117 &lt;- B25  Freq: 3.06974e-05
b4c   	movl    RDX, R9	# spill
b4f   	jmp,s   B117
b4f
b51   B116: #	B117 &lt;- B33  Freq: 3.04616e-05
b51   	movdl   RBX, XMM2	# spill
b51
b55   B117: #	B121 &lt;- B115 B116  Freq: 6.11589e-05
b55   	movl    RSI, RDX	# spill
b57   	jmp,s   B121
b57
b59   B118: #	B120 &lt;- B29  Freq: 3.05792e-05
b59   	movl    RSI, R9	# spill
b5c   	jmp,s   B120
b5c
b5e   B119: #	B120 &lt;- B37  Freq: 3.03444e-05
b5e   	movdl   RBX, XMM2	# spill
b5e
b62   B120: #	B121 &lt;- B118 B119  Freq: 6.09236e-05
b62   	addl    RSI, #2	# int
b65
b65   B121: #	B128 &lt;- B117 B120  Freq: 0.000122083
b65   	movl    R9, RSI	# spill
b68   	movl    R13, RDI	# spill
b6b   	jmp,s   B128
b6b
b6d   B122: #	B124 &lt;- B27  Freq: 3.06382e-05
b6d   	movl    RDX, R9	# spill
b70   	jmp,s   B124
b70
b72   B123: #	B124 &lt;- B35  Freq: 3.04029e-05
b72   	movdl   RBX, XMM2	# spill
b72
b76   B124: #	B127 &lt;- B122 B123  Freq: 6.10412e-05
b76   	movl    R9, RDX	# spill
b79   	movl    R13, R8	# spill
b7c   	jmp,s   B127
b7c
b7e   B125: #	B126 &lt;- B31  Freq: 3.05204e-05
b7e   	movl    R13, RBP	# spill
b7e
b81   B126: #	B127 &lt;- B125 B39  Freq: 6.08063e-05
b81   	addl    R9, #2	# int
b85   	movdl   RBX, XMM2	# spill
b85
b89   B127: #	B128 &lt;- B124 B126  Freq: 0.000121847
b89   	incl    R9	# int
b8c
b8c   B128: #	B129 &lt;- B141 B121 B127  Freq: 0.000244878
b8c   	movl    R14, R9	# spill
b8c
b8f   B129: #	N2050 &lt;- B13 B46 B128  Freq: 0.000245358
b8f   	movq    RBP, [rsp + #0]	# spill
b93   	movl    R11, [rsp + #16]	# spill
b98   	movl    [rsp + #8], R11	# spill
b9d   	movl    [rsp + #12], RBX	# spill
ba1   	movl    [rsp + #20], R14	# spill
ba6   	movl    [rsp + #24], R13	# spill
bab   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
bb3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedReader::readLine @ bci:160  L[0]=RBP L[1]=_ L[2]=rsp + #56 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #12 L[7]=rsp + #24 L[8]=rsp + #20 L[9]=_ L[10]=_ STK[0]=rsp + #24 STK[1]=#13 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [32]=Oop [40]=Oop [56]=Oop off=3000}
bb8   	int3	# ShouldNotReachHere
bb8
bbd   B130: #	B162 B131 &lt;- B100  Freq: 2.53509e-05
bbd   	movq    RSI, RBP	# spill
      	nop 	# 3 bytes pad for loops and calls
bc3   	call,static  java.io.BufferedReader::fill
        # java.io.BufferedReader::readLine @ bci:44  L[0]=RBP L[1]=_ L[2]=rsp + #48 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop [48]=Oop off=3016}
bc8
bc8   B131: #	B101 B132 &lt;- B130  Freq: 2.53504e-05
        # Block is sole successor of call
bc8   	movl    R14, [RBP + #24 (8-bit)]	# int ! Field: java/io/BufferedReader.nextChar
bcc   	movl    RBP, [RBP + #20 (8-bit)]	# int ! Field: java/io/BufferedReader.nChars
bcf   	cmpl    R14, RBP
bd2   	jl     B101  P=1.000000 C=87.000000
bd2
bd8   B132: #	N2050 &lt;- B131  Freq: 1.2088e-11
bd8   	movl    [rsp + #20], R14	# spill
bdd   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
be3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedReader::readLine @ bci:55  L[0]=rsp + #0 L[1]=_ L[2]=rsp + #48 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #20 STK[1]=RBP MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{[0]=Oop [32]=Oop [40]=Oop [48]=Oop off=3048}
be8   	int3	# ShouldNotReachHere
be8
bed   B133: #	B61 &lt;- B45  Freq: 1.43248e-05
bed   	movl    R11, R14	# spill
bf0   	jmp     B61
bf0
bf5   B134: #	B135 &lt;- B16  Freq: 2.01917e-06
bf5   	movl    R14, RDI	# spill
bf5
bf8   B135: #	N2050 &lt;- B11 B44 B134  Freq: 3.04031e-06
bf8   	movl    RSI, #-28	# int
bfd   	movq    RBP, [rsp + #0]	# spill
c01   	movl    R10, [rsp + #16]	# spill
c06   	movl    [rsp + #8], R10	# spill
c0b   	movl    [rsp + #12], RBX	# spill
c0f   	movl    [rsp + #24], R14	# spill
      	nop 	# 3 bytes pad for loops and calls
c17   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.io.BufferedReader::readLine @ bci:146  L[0]=RBP L[1]=_ L[2]=rsp + #56 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #12 L[7]=_ L[8]=rsp + #24 L[9]=_ L[10]=_ STK[0]=rsp + #20 STK[1]=rsp + #24 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [20]=NarrowOop [32]=Oop [40]=Oop [56]=Oop off=3100}
c1c   	int3	# ShouldNotReachHere
c1c
c21   B136: #	N2050 &lt;- B7  Freq: 1.01328e-06
c21   	movl    R11, [rsp + #16]	# spill
c26   	movl    [rsp + #8], R11	# spill
c2b   	movl    [rsp + #12], RBX	# spill
c2f   	movl    [rsp + #16], R13	# spill
c34   	movl    [rsp + #20], R14	# spill
      	nop 	# 2 bytes pad for loops and calls
c3b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedReader::readLine @ bci:131  L[0]=rsp + #0 L[1]=_ L[2]=RBP L[3]=_ L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #12 L[7]=rsp + #16 L[8]=rsp + #20 L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [32]=Oop [40]=Oop off=3136}
c40   	int3	# ShouldNotReachHere
c40
c45   B137: #	B42 &lt;- B21  Freq: 1.00764e-06
c45   	movl    RBP, RDI	# spill
c47   	movl    R14, R9	# spill
c4a   	jmp     B42
c4a
c4f   B138: #	B84 B139 &lt;- B83  Freq: 9.99742e-07
c4f   	leaq    RAX, [rsp + #128]	# box lock
c57   	fastunlock R11,RAX	! kills RAX,R10
cd8   	je     B84  P=0.999999 C=-1.000000
cd8
cde   B139: #	B84 &lt;- B138  Freq: 9.99742e-13
cde   	movq    RDI, R11	# spill
ce1   	leaq    RSI, [rsp + #128]	# box lock
ce9   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
cf6   	jmp     B84
cf6
cfb   B140: #	N2050 &lt;- B2 B5  Freq: 1.998e-06
cfb   	movl    R8, [rsp + #16]	# spill
d00   	movl    [rsp + #0], R8	# spill
d04   	movl    [rsp + #4], RBX	# spill
d08   	movl    [rsp + #8], R13	# spill
d0d   	movl    [rsp + #12], R14	# spill
d12   	movl    RSI, #-99	# int
d17   	movq    [rsp + #16], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
d1f   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedReader::readLine @ bci:131  L[0]=rsp + #16 L[1]=_ L[2]=RBP L[3]=_ L[4]=rsp + #40 L[5]=rsp + #0 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=rsp + #12 L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [16]=Oop [32]=Oop [40]=Oop off=3364}
d24   	int3	# ShouldNotReachHere
d24
d29   B141: #	B128 &lt;- B18  Freq: 9.48368e-07
d29   	movl    R9, RDI	# spill
d2c   	jmp     B128
d2c
d31   B142: #	B161 B143 &lt;- B144 B75 B76  Freq: 1.87351e-06
d31   	movq    RCX, RBX	# spill
d34   	movq    RDI, RSI	# spill
d37   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
d41   	movq    RSI, [rsp + #56]	# spill
d46   	movl    RDX, [rsp + #12]	# spill
d4a   	movq    RCX, R10	# spill
d4d   	xorl    R8, R8	# int
d50   	movl    R9, [rsp + #20]	# spill
d55   	movq    [rsp + #56], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
d5b   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOfRange @ bci:57  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #56
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # java.io.BufferedReader::readLine @ bci:208  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #84 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #24 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=NarrowOop [0]=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop off=3424}
d60
d60   B143: #	B80 &lt;- B142  Freq: 1.87347e-06
        # Block is sole successor of call
d60   	jmp     B80
d60
d65   B144: #	B142 B145 &lt;- B77  Freq: 9.36753e-07
d65   	testl   R11, R11
d68   	jl,s   B142  P=0.000001 C=-1.000000
d68
d6a   B145: #	B80 &lt;- B144  Freq: 9.36752e-07
d6a   	movq    RCX, RBX	# spill
d6d   	movq    RDI, RSI	# spill
d70   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
d7a   	
d7a   	jmp     B80
d7a
d7f   B146: #	N2050 &lt;- B82  Freq: 4.76714e-07
d7f   	movq    RBP, R10	# spill
d82   	movl    RSI, #-155	# int
d87   	movq    [rsp + #8], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
d8f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedReader::readLine @ bci:250  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #8 L[10]=_ STK[0]=rsp + #84 STK[1]=#13 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [8]=Oop [32]=Oop [40]=Oop off=3476}
d94   	int3	# ShouldNotReachHere
d94
d99   B147: #	N2050 &lt;- B66  Freq: 4.47649e-07
d99   	movl    RSI, #-155	# int
d9e   	movq    RBP, [rsp + #0]	# spill
da2   	movl    R8, [rsp + #20]	# spill
da7   	movl    [rsp + #0], R8	# spill
dab   	movl    R11, [rsp + #12]	# spill
db0   	movl    [rsp + #8], R11	# spill
db5   	movl    [rsp + #12], R10	# spill
dba   	movq    R10, [rsp + #40]	# spill
dbf   	movq    [rsp + #16], R10	# spill
dc4   	movq    [rsp + #48], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
dcb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:5  L[0]=rsp + #48 L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #8 STK[0]=rsp + #12
        # java.io.BufferedReader::readLine @ bci:208  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #16 L[5]=_ L[6]=_ L[7]=rsp + #84 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #48 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=NarrowOop [16]=Oop [32]=Oop [48]=Oop off=3536}
dd0   	int3	# ShouldNotReachHere
dd0
dd5   B148: #	N2050 &lt;- B70  Freq: 4.4668e-07
      	nop 	# 2 bytes pad for loops and calls
dd7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:55  L[0]=rsp + #24 L[1]=rsp + #8 L[2]=rsp + #12 L[3]=rsp + #16 STK[0]=rsp + #12 STK[1]=RBP
        # java.io.BufferedReader::readLine @ bci:208  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #84 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #24 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{[0]=Oop [8]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=3548}
ddc   	int3	# ShouldNotReachHere
ddc
de1   B149: #	N2050 &lt;- B71  Freq: 4.4668e-07
de1   	movq    RBP, [rsp + #0]	# spill
de5   	movl    [rsp + #0], RCX	# spill
de8   	movl    R10, [rsp + #12]	# spill
ded   	movl    [rsp + #4], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
df3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.Arrays::copyOfRange @ bci:5  L[0]=rsp + #0 L[1]=rsp + #4 L[2]=rsp + #80 L[3]=rsp + #16 L[4]=_ STK[0]=rsp + #16
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # java.io.BufferedReader::readLine @ bci:208  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #84 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #24 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [0]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=3576}
df8   	int3	# ShouldNotReachHere
df8
dfd   B150: #	B159 B151 &lt;- B109  Freq: 4.41187e-09
dfd   	movq    RSI, precise klass java/lang/StringBuffer: 0x00007f46d814fb40:Constant:exact *	# ptr
e07   	call,static  wrapper for: _new_instance_Java
        # java.io.BufferedReader::readLine @ bci:268  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=rsp + #8 L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=RBP L[9]=_ L[10]=_ MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{[0]=Oop [24]=Oop [32]=Oop [40]=Oop off=3596}
e0c
e0c   B151: #	B111 &lt;- B150  Freq: 4.41179e-09
        # Block is sole successor of call
e0c   	movq    R11, RAX	# spill
e0f   	jmp     B111
e0f
e14   B152: #	B160 B153 &lt;- B111 B112  Freq: 4.45657e-09
e14   	movq    RSI, precise klass [C: 0x00007f46a400a5a0:Constant:exact *	# ptr
e1e   	movl    RDX, [rsp + #20]	# spill
      	nop 	# 1 bytes pad for loops and calls
e23   	call,static  wrapper for: _new_array_Java
        # java.lang.AbstractStringBuilder::&lt;init&gt; @ bci:6  L[0]=_ L[1]=_ STK[0]=rsp + #48
        # java.lang.StringBuffer::&lt;init&gt; @ bci:2  L[0]=_ L[1]=_
        # java.io.BufferedReader::readLine @ bci:275  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=rsp + #8 L[4]=rsp + #40 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=RBP L[9]=_ L[10]=_ STK[0]=rsp + #48 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{[0]=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop off=3624}
e28
e28   B153: #	B114 &lt;- B152  Freq: 4.45648e-09
        # Block is sole successor of call
e28   	movq    R11, RAX	# spill
e2b   	jmp     B114
e2b
e30   B154: #	N2050 &lt;- B88  Freq: 4.05922e-09
e30   	movq    RBP, [rsp + #0]	# spill
e34   	movl    [rsp + #0], R11	# spill
e38   	movl    RSI, #6	# int
e3d   	movq    [rsp + #16], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
e43   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;6&apos;)
        # java.lang.String::&lt;init&gt; @ bci:25  L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #0
        # java.io.BufferedReader::readLine @ bci:208  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #84 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #16 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [16]=Oop [32]=Oop [40]=Oop off=3656}
e48   	int3	# ShouldNotReachHere
e48
e4d   B155: #	N2050 &lt;- B101  Freq: 2.10335e-10
e4d   	movq    RBP, [rsp + #0]	# spill
e51   	movl    R10, [rsp + #16]	# spill
e56   	movl    [rsp + #8], R10	# spill
e5b   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
e63   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.io.BufferedReader::readLine @ bci:90  L[0]=RBP L[1]=_ L[2]=rsp + #48 L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=#0 L[7]=#0 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #8 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [32]=Oop [40]=Oop [48]=Oop off=3688}
e68   	int3	# ShouldNotReachHere
e68
e6d   B156: #	N2050 &lt;- B10  Freq: 1.0136e-06
e6d   	movq    RBP, [rsp + #0]	# spill
e71   	movl    R11, [rsp + #16]	# spill
e76   	movl    [rsp + #8], R11	# spill
e7b   	movl    [rsp + #12], RBX	# spill
e7f   	movl    [rsp + #20], R14	# spill
e84   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
e8b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.BufferedReader::readLine @ bci:146  L[0]=RBP L[1]=_ L[2]=rsp + #56 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #8 L[6]=rsp + #12 L[7]=_ L[8]=rsp + #20 L[9]=_ L[10]=_ STK[0]=#NULL STK[1]=rsp + #20 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [32]=Oop [40]=Oop [56]=Oop off=3728}
e90   	int3	# ShouldNotReachHere
e90
e95   B157: #	N2050 &lt;- B69  Freq: 9.49196e-07
e95   	movq    RBP, [rsp + #0]	# spill
e99   	movq    [rsp + #16], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
e9f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:52  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.io.BufferedReader::readLine @ bci:208  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #84 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #16 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [16]=Oop [32]=Oop [40]=Oop off=3748}
ea4   	int3	# ShouldNotReachHere
ea4
ea9   B158: #	N2050 &lt;- B89  Freq: 4.11312e-09
ea9   	movq    RBP, [rsp + #0]	# spill
ead   	movq    [rsp + #16], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
eb3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.io.BufferedReader::readLine @ bci:208  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=_ L[7]=rsp + #84 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #16 MON-BOX0=rsp+128 MON-OBJ[0]=rsp + #32
        # OopMap{rbp=Oop [16]=Oop [32]=Oop [40]=Oop off=3768}
eb8   	int3	# ShouldNotReachHere
eb8
ebd   B159: #	B169 &lt;- B150  Freq: 4.41187e-14
ebd   	# exception oop is in rax; no code emitted
ebd   	movq    RBX, RAX	# spill
ec0   	jmp,s   B169
ec0
ec2   B160: #	B169 &lt;- B152  Freq: 4.45657e-14
ec2   	# exception oop is in rax; no code emitted
ec2   	movq    RBX, RAX	# spill
ec5   	jmp,s   B169
ec5
ec7   B161: #	B165 &lt;- B142  Freq: 1.87351e-11
ec7   	# exception oop is in rax; no code emitted
ec7   	jmp,s   B165
ec7
ec9   B162: #	B169 &lt;- B130  Freq: 2.53509e-10
ec9   	# exception oop is in rax; no code emitted
ec9   	movq    RBX, RAX	# spill
ecc   	jmp,s   B169
ecc
ece   B163: #	B169 &lt;- B105  Freq: 9.38943e-10
ece   	# exception oop is in rax; no code emitted
ece   	movq    RBX, RAX	# spill
ed1   	jmp,s   B169
ed1
ed3   B164: #	B165 &lt;- B107  Freq: 9.46402e-10
ed3   	# exception oop is in rax; no code emitted
ed3
ed3   B165: #	B169 &lt;- B164 B161  Freq: 9.65137e-10
ed3   	movq    RBX, RAX	# spill
ed6   	jmp,s   B169
ed6
ed8   B166: #	B169 &lt;- B99  Freq: 4.41114e-09
ed8   	# exception oop is in rax; no code emitted
ed8   	movq    RBX, RAX	# spill
edb   	jmp,s   B169
edb
edd   B167: #	B169 &lt;- B85  Freq: 6.09602e-07
edd   	# exception oop is in rax; no code emitted
edd   	movq    RBX, RAX	# spill
ee0   	jmp,s   B169
ee0
ee2   B168: #	B169 &lt;- B86  Freq: 6.0959e-07
ee2   	# exception oop is in rax; no code emitted
ee2   	movq    RBX, RAX	# spill
ee2
ee5   B169: #	B171 B170 &lt;- B163 B165 B167 B168 B159 B160 B166 B162  Freq: 1.22576e-06
ee5   	MEMBAR-release (a FastUnlock follows so empty encoding)
ee5   	movq    R11, [rsp + #32]	# spill
eea   	movq    R10, [rsp + #96]	# spill
eef   	andq    R10, [R11]	# long
ef2   	cmpq    R10, #5
ef6   	jne,s   B171  P=0.000001 C=-1.000000
ef6
ef8   B170: #	N2050 &lt;- B172 B171 B169  Freq: 1.22576e-06
ef8   	movq    RSI, RBX	# spill
efb   	addq    rsp, 144	# Destroy frame
	popq   rbp

f03   	jmp     rethrow_stub
f03
f08   B171: #	B170 B172 &lt;- B169  Freq: 1.22576e-12
f08   	leaq    RAX, [rsp + #128]	# box lock
f10   	fastunlock R11,RAX	! kills RAX,R10
f91   	je     B170  P=0.999999 C=-1.000000
f91
f97   B172: #	B170 &lt;- B171  Freq: 1.22576e-18
f97   	movq    RDI, R11	# spill
f9a   	leaq    RSI, [rsp + #128]	# box lock
fa2   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
faf   	jmp     B170
faf

</opto_assembly>
<writer thread='139941922150144'/>
<opto_assembly compile_id='127'>
{method}
 - this oop:          0x00007f46c6a039b8
 - method holder:     &apos;java/util/regex/Pattern$BnM&apos;
 - constants:         0x00007f46c6a03148 constant pool [116] {0x00007f46c6a03148} for &apos;java/util/regex/Pattern$BnM&apos; cache=0x00007f46c6a03b28
 - access:            0xc1000000  
 - name:              &apos;match&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z&apos;
 - max stack:         6
 - max locals:        9
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      8
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d8127b88: 0xbbab0000 i2c: 0x00007f46c915ace0 c2i: 0x00007f46c915ae25 c2iUV: 0x00007f46c915adf8
 - compiled entry     0x00007f46c9263b80
 - code size:         161
 - code start:        0x00007f46c6a03880
 - code end (excl):   0x00007f46c6a03921
 - method data:       0x00007f46c6a19b30
 - checked ex length: 0
 - linenumber start:  0x00007f46c6a03921
 - localvar length:   10
 - localvar start:    0x00007f46c6a0393e
 - compiled code: nmethod   1303  109       3       java.util.regex.Pattern$BnM::match (161 bytes)
#
#  bool ( java/util/regex/Pattern$BnM:NotNull *, java/util/regex/Matcher:exact *, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$BnM:NotNull *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/CharSequence *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N776: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B57 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (296 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movdq   XMM0, R8	# spill
031   	movq    RBX, RSI	# spill
034   	movl    R9, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.buffer
038   	movl    RSI, #-10	# int
03d   	movl    R10, [R9 + #12 (8-bit)]	# range
041   	NullCheck R9
041
041   B2: #	B58 B3 &lt;- B1  Freq: 0.999999
041   	movl    RDI, R10	# spill
044   	decl    RDI	# int
046   	movl    R8, [RDX + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
04a   	NullCheck RDX
04a
04a   B3: #	B11 &lt;- B2  Freq: 0.999998
04a   	movdq   XMM2, RDX	# spill
04f   	movdq   XMM1, RBX	# spill
054   	subl    R8, R10	# int
057   	movl    R11, [RBX + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
05b   	movdl   XMM4, R11	# spill
060   	decode_heap_oop_not_null RDX,R9
063   	movl    R11, [RBX + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
067   	movdl   XMM3, R11	# spill
06c   	movl    R11, R10	# spill
06f   	movl    [rsp + #24], R10	# spill
074   	addl    R11, #-2	# int
078   	movl    R10, [RBX + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
07c   	movdl   XMM6, R10	# spill
081   	movdl   XMM9, R9	# spill
086   	movl    [rsp + #8], R8	# spill
08b   	movq    RSI, RDX	# spill
08e   	movdl   XMM10, R11	# spill
093   	jmp,s   B11
      	nop 	# 11 bytes pad for loops and calls

0a0   B4: #	B28 &lt;- B29  top-of-loop Freq: 5.91335
0a0   	movl    R13, R10	# spill
0a3   	jmp     B28
0a3
0a8   B5: #	B6 &lt;- B23  Freq: 4.19388
0a8   	movl    R13, R10	# spill
0a8
0ab   B6: #	B55 B7 &lt;- B35 B5 B28  Freq: 7.8421
0ab   	andl    R11, #127	# int
0af   	movdl   R10, XMM6	# spill
0b4   	movl    R8, [R10 + #12 (8-bit)]	# range
0b8   	NullCheck R10
0b8
0b8   B7: #	B47 B8 &lt;- B6  Freq: 7.84209
0b8   	movl    RBP, R13	# spill
0bb   	incl    RBP	# int
0bd   	cmpl    R11, R8	# unsigned
0c0   	jnb,u  B47  P=0.000001 C=-1.000000
0c0
0c6   B8: #	B56 B9 &lt;- B7  Freq: 7.84208
0c6   	movdl   R10, XMM4	# spill
0cb   	movl    R10, [R10 + #12 (8-bit)]	# range
0cf   	NullCheck R10
0cf
0cf   B9: #	B48 B10 &lt;- B8  Freq: 7.84207
0cf   	movl    RBP, R13	# spill
0d2   	movdl   R8, XMM6	# spill
0d7   	subl    RBP, [R8 + #16 + R11 &lt;&lt; #2]	# int
0dc   	incl    RBP	# int
0de   	cmpl    R13, R10	# unsigned
0e1   	jnb,u  B48  P=0.000001 C=-1.000000
0e1
0e7   B10: #	B11 &lt;- B9  Freq: 7.84206
0e7   	movdl   R10, XMM4	# spill
0ec   	movl    R10, [R10 + #16 + RDX]	# int
0f1   	cmpl    RBP, R10
0f4   	cmovll RBP, R10	# signed, int
0f8   	addl    RCX, RBP	# int
0fa   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$BnM::match @ bci:87  L[0]=XMM1 L[1]=XMM2 L[2]=RCX L[3]=XMM7 L[4]=RSI L[5]=rsp + #24 L[6]=rsp + #8 L[7]=_ L[8]=_
        # OopMap{rsi=Oop xmm0=Oop xmm1=Oop xmm2=Oop xmm3=NarrowOop xmm4=NarrowOop xmm6=NarrowOop xmm7=Oop xmm9=NarrowOop off=250}
100
100   B11: #	B45 B12 &lt;- B3 B10 	Loop: B11-B10  Freq: 8.84206
100   	movl    R8, RCX	# spill
103   	negl    R8	# int
106   	movl    R9, RCX	# spill
109   	incl    R9	# int
10c   	cmpl    RCX, [RSP + #8 (32-bit)]
110   	jg     B45  P=0.013744 C=63226.000000
110
116   B12: #	B38 B13 &lt;- B11  Freq: 8.72054
116   	movl    R10, RCX	# spill
119   	addl    R10, [RSP + #24 (32-bit)]	# int
11e   	movdl   XMM5, R10	# spill
123   	movl    R10, R9	# spill
126   	sarl    R10, #31
12a   	testl   RDI, RDI
12c   	jl     B38  P=0.072467 C=157036.000000
12c
132   B13: #	B46 B14 &lt;- B12  Freq: 8.08858
132   	andl    R10, R9	# int
135   	movl    R11, R8	# spill
138   	sarl    R11, #31
13c   	andl    R11, R8	# int
13f   	movdq   R8, XMM0	# spill
144   	movl    RBX, [R8 + #8 (8-bit)]	# compressed klass ptr
148   	NullCheck R8
148
148   B14: #	B46 B15 &lt;- B13  Freq: 8.08857
148   	movl    R8, #-1	# int
14e   	subl    R8, RCX	# int
151   	cmpl    RBX, narrowklass: precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# compressed klass ptr
157   	jne,u  B46  P=0.000001 C=-1.000000
157
15d   B15: #	B46 B16 &lt;- B14  Freq: 8.08856
15d   	movdq   R9, XMM0	# spill
162   	# checkcastPP of R9
162   	movdq   XMM7, R9	# spill
167   	movl    RBP, #-2147483647	# int
16c   	subl    RBP, R10	# int
16f   	movl    RBX, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
173   	cmpl    RBP, R8
176   	cmovllt RBP, R8	# max
17a   	movl    RAX, [RBX + #12 (8-bit)]	# range
17d   	NullCheck RBX
17d
17d   B16: #	B46 B17 &lt;- B15  Freq: 8.08856
17d   	movl    R10, #-1	# int
183   	cmpl    RBP, R10
186   	movl    R8, #-1	# int
18c   	cmovllt RBP, R8	# max
190   	cmpl    RCX, RAX	# unsigned
192   	jnb,u  B46  P=0.000001 C=-1.000000
192
198   B17: #	B46 B18 &lt;- B16  Freq: 8.08855
198   	movdl   R10, XMM5	# spill
19d   	decl    R10	# int
1a0   	cmpl    R10, RAX	# unsigned
1a3   	jnb,u  B46  P=0.000001 C=-1.000000
1a3
1a9   B18: #	B46 B19 &lt;- B17  Freq: 8.08854
1a9   	movl    R8, RAX	# spill
1ac   	subl    R8, RCX	# int
1af   	addl    R11, #2147483647	# int
1b6   	decl    R8	# int
1b9   	cmpl    R11, R8
1bc   	cmovlgt R11, R8	# min
1c0   	movdl   R10, XMM10	# spill
1c5   	cmpl    R10, R11
1c8   	movdl   R9, XMM10	# spill
1cd   	cmovlgt R9, R11	# min
1d1   	movl    R10, [rsp + #24]	# spill
1d6   	testl  R10, R10	# unsigned
1d9   	jbe,u  B46  P=0.000001 C=-1.000000
1d9
1df   B19: #	B46 B20 &lt;- B18  Freq: 8.08853
1df   	cmpl    RDI, R10	# unsigned
1e2   	jnb,u  B46  P=0.000001 C=-1.000000
1e2
1e8   B20: #	B21 &lt;- B19  Freq: 8.08852
1e8   	movl    R10, #-1	# int
1ee   	cmpl    R9, R10
1f1   	movl    R11, #-1	# int
1f7   	cmovllt R9, R11	# max
1fb   	movl    R10, RDI	# spill
1fb
1fe   B21: #	B49 B22 &lt;- B20 B25 	Loop: B21-B25 inner pre of N675 Freq: 11.9831
1fe   	movl    R8, R10	# spill
201   	addl    R8, RCX	# int
204   	movslq  RDX, R10	# i2l
207   	movl    R13, R10	# spill
20a   	decl    R13	# int
20d   	salq    RDX, #2
211   	testl   R8, R8
214   	jl     B49  P=0.000000 C=5790.000000
214
21a   B22: #	B50 B23 &lt;- B21  Freq: 11.9831
21a   	cmpl    R8, RAX
21d   	jge     B50  P=0.000000 C=5790.000000
21d
223   B23: #	B5 B24 &lt;- B22  Freq: 11.9831
223   	movdl   R11, XMM9	# spill
228   	movl    R14, [R11 + #16 + RDX]	# int
22d   	movzwl  R11, [RBX + #16 + R8 &lt;&lt; #1]	# ushort/char
233   	cmpl    R11, R14
236   	jne     B5  P=0.349982 C=145656.000000
236
23c   B24: #	B26 B25 &lt;- B23  Freq: 7.78925
23c   	cmpl    R13, R9
23f   	jle,s   B26	# loop end  P=0.500000 C=94679.000000
23f
241   B25: #	B21 &lt;- B24  Freq: 3.89463
241   	movl    R10, R13	# spill
244   	jmp,s   B21
244
246   B26: #	B51 B27 &lt;- B24  Freq: 3.89463
246   	cmpl    R13, RBP
249   	jle     B51  P=0.000001 C=-1.000000
249
24f   B27: #	B28 &lt;- B26  Freq: 3.89462
24f   	# castII of R13
24f
24f   B28: #	B6 B29 &lt;- B27 B4 	Loop: B28-B4 inner main of N150 Freq: 9.80797
24f   	movslq  RDX, R13	# i2l
252   	salq    RDX, #2
256   	movl    R11, R13	# spill
259   	addl    R11, RCX	# int
25c   	movzwl  R11, [RBX + #16 + R11 &lt;&lt; #1]	# ushort/char
262   	movdl   R8, XMM9	# spill
267   	movl    R9, [R8 + #16 + RDX]	# int
26c   	movl    R10, R13	# spill
26f   	decl    R10	# int
272   	cmpl    R11, R9
275   	jne     B6  P=0.349982 C=145656.000000
275
27b   B29: #	B4 B30 &lt;- B28  Freq: 6.37536
27b   	cmpl    R10, RBP
27e   	jg     B4	# loop end  P=0.927533 C=94679.000000
27e
284   B30: #	B38 B31 &lt;- B51 B29  Freq: 0.46201
284   	cmpl    R10, #-1
288   	jle,s   B38  P=0.100000 C=-1.000000
288
28a   B31: #	B32 &lt;- B30  Freq: 0.415809
28a   	# castII of R10
28a
28a   B32: #	B49 B33 &lt;- B31 B37 	Loop: B32-B37 inner post of N675 Freq: 0.616021
28a   	movslq  RDX, R10	# i2l
28d   	movl    R8, R10	# spill
290   	addl    R8, RCX	# int
293   	salq    RDX, #2
297   	testl   R8, R8
29a   	jl     B49  P=0.000000 C=5790.000000
29a
2a0   B33: #	B50 B34 &lt;- B32  Freq: 0.616021
2a0   	movdl   R11, XMM9	# spill
2a5   	movl    R9, [R11 + #16 + RDX]	# int
2aa   	movzwl  R11, [RBX + #16 + R8 &lt;&lt; #1]	# ushort/char
2b0   	cmpl    R8, RAX
2b3   	jge     B50  P=0.000000 C=5790.000000
2b3
2b9   B34: #	B36 B35 &lt;- B33  Freq: 0.61602
2b9   	movl    R8, R10	# spill
2bc   	decl    R8	# int
2bf   	cmpl    R11, R9
2c2   	je,s   B36  P=0.650018 C=145656.000000
2c2
2c4   B35: #	B6 &lt;- B34  Freq: 0.215596
2c4   	movl    R13, R10	# spill
2c7   	jmp     B6
2c7
2cc   B36: #	B38 B37 &lt;- B34  Freq: 0.400424
2cc   	cmpl    R8, #-1
2d0   	jle,s   B38	# loop end  P=0.500000 C=94679.000000
2d0
2d2   B37: #	B32 &lt;- B36  Freq: 0.200212
2d2   	movl    R10, R8	# spill
2d5   	jmp,s   B32
2d5
2d7   B38: #	B59 B39 &lt;- B30 B12 B36  Freq: 0.878368
2d7   	movdq   R11, XMM2	# spill
2dc   	movl    [R11 + #28 (8-bit)], RCX	# int ! Field: java/util/regex/Matcher.first
2e0   	movdl   R10, XMM3	# spill
2e5   	movl    R9, [R10 + #8 (8-bit)]	# compressed klass ptr
2e9   	NullCheck R10
2e9
2e9   B39: #	B52 B40 &lt;- B38  Freq: 0.878367
2e9   	movl    RBP, [R11 + #24 (8-bit)]	# int ! Field: java/util/regex/Matcher.acceptMode
2ed   	cmpl    R9, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f46a40e9de0:Constant:exact *	# compressed klass ptr
2f4   	jne,u  B52  P=0.000001 C=-1.000000
2f4
2fa   B40: #	B54 B41 &lt;- B39  Freq: 0.878367
2fa   	movl    RAX, #1	# int
2ff   	movl    RSI, #-28	# int
304   	cmpl    RBP, #1
307   	je     B54  P=0.000000 C=11687.000000
307
30d   B41: #	B60 B42 &lt;- B40  Freq: 0.878366
30d   	movl    RBP, [R11 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
311   	movdl   R10, XMM5	# spill
316   	movl    [R11 + #32 (8-bit)], R10	# int ! Field: java/util/regex/Matcher.last
31a   	movl    R8, [RBP + #12 (8-bit)]	# range
31e   	NullCheck RBP
31e
31e   B42: #	B53 B43 &lt;- B41  Freq: 0.878365
31e   	cmpl    R8, #1	# unsigned
322   	jbe,u  B53  P=0.000001 C=-1.000000
322
328   B43: #	B44 &lt;- B42  Freq: 0.878364
328   	movl    [RBP + #16 (8-bit)], RCX	# int
32b   	movl    [RBP + #20 (8-bit)], R10	# int
32f   	movl    [RBP + #16 (8-bit)], RCX	# int
332   	movl    [RBP + #20 (8-bit)], R10	# int
332
336   B44: #	N776 &lt;- B43 B45  Freq: 0.999893
336   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

341   	ret
341
342   B45: #	B44 &lt;- B11  Freq: 0.121528
342   	movdq   R10, XMM2	# spill
347   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
34c   	xorl    RAX, RAX	# int
34e   	jmp,s   B44
34e
350   B46: #	N776 &lt;- B19 B13 B14 B15 B16 B17 B18  Freq: 5.71569e-05
350   	movl    RBP, RCX	# spill
352   	movss   [rsp + #0], XMM9	# spill
357   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
369   	movl    [rsp + #8], RDI	# spill
36d   	movsd   [rsp + #16], XMM1	# spill
373   	movsd   [rsp + #32], XMM2	# spill
379   	movsd   [rsp + #40], XMM0	# spill
37f   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
387   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:37  L[0]=rsp + #16 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #40 L[4]=rsp + #0 L[5]=rsp + #24 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # OopMap{[0]=NarrowOop [16]=Oop [32]=Oop [40]=Oop off=908}
38c   	int3	# ShouldNotReachHere
38c
391   B47: #	N776 &lt;- B7  Freq: 7.94622e-06
391   	movl    RSI, #-28	# int
396   	movss   [rsp + #0], XMM9	# spill
39b   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
3ad   	movl    [rsp + #8], R13	# spill
3b2   	movl    [rsp + #12], RCX	# spill
3b6   	movl    [rsp + #16], R11	# spill
3bb   	movsd   [rsp + #32], XMM1	# spill
3c1   	movsd   [rsp + #40], XMM2	# spill
3c7   	movsd   [rsp + #48], XMM7	# spill
3cd   	movl    R11, [rsp + #24]	# spill
3d2   	movl    [rsp + #20], R11	# spill
3d7   	movl    [rsp + #24], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
3df   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_ STK[0]=rsp + #12 STK[1]=RBP STK[2]=rsp + #24 STK[3]=rsp + #16
        # OopMap{[0]=NarrowOop [24]=NarrowOop [32]=Oop [40]=Oop [48]=Oop off=996}
3e4   	int3	# ShouldNotReachHere
3e4
3e9   B48: #	N776 &lt;- B9  Freq: 7.94621e-06
3e9   	movl    RSI, #-28	# int
3ee   	movss   [rsp + #0], XMM9	# spill
3f3   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
405   	movl    [rsp + #8], RCX	# spill
409   	movl    [rsp + #12], R13	# spill
40e   	movsd   [rsp + #16], XMM1	# spill
414   	movsd   [rsp + #32], XMM2	# spill
41a   	movsd   [rsp + #40], XMM7	# spill
420   	movss   [rsp + #28], XMM4	# spill
      	nop 	# 1 bytes pad for loops and calls
427   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=rsp + #16 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #0 L[5]=rsp + #24 L[6]=rsp + #4 L[7]=_ L[8]=_ STK[0]=rsp + #8 STK[1]=RBP STK[2]=rsp + #28 STK[3]=rsp + #12
        # OopMap{[0]=NarrowOop [16]=Oop [28]=NarrowOop [32]=Oop [40]=Oop off=1068}
42c   	int3	# ShouldNotReachHere
42c
431   B49: #	N776 &lt;- B32 B21  Freq: 6.29958e-06
431   	movl    RSI, #-155	# int
436   	movl    RBP, RCX	# spill
438   	movss   [rsp + #0], XMM9	# spill
43d   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
44f   	movl    [rsp + #8], R10	# spill
454   	movl    [rsp + #16], R8	# spill
459   	movsd   [rsp + #32], XMM1	# spill
45f   	movsd   [rsp + #40], XMM2	# spill
465   	movl    R10, [rsp + #24]	# spill
46a   	movl    [rsp + #20], R10	# spill
46f   	movsd   [rsp + #24], XMM7	# spill
      	nop 	# 2 bytes pad for loops and calls
477   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #24 L[1]=rsp + #16 STK[0]=rsp + #16
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=RBP L[3]=rsp + #24 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=1148}
47c   	int3	# ShouldNotReachHere
47c
481   B50: #	N776 &lt;- B33 B22  Freq: 6.00775e-06
481   	movl    RSI, #-155	# int
486   	movl    RBP, RCX	# spill
488   	movss   [rsp + #0], XMM9	# spill
48d   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
49f   	movl    [rsp + #8], R10	# spill
4a4   	movl    [rsp + #16], R8	# spill
4a9   	movl    [rsp + #20], RAX	# spill
4ad   	movsd   [rsp + #32], XMM1	# spill
4b3   	movsd   [rsp + #40], XMM2	# spill
4b9   	movsd   [rsp + #56], XMM7	# spill
4bf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #56 L[1]=rsp + #16 STK[0]=rsp + #16 STK[1]=rsp + #20
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=RBP L[3]=rsp + #56 L[4]=rsp + #0 L[5]=rsp + #24 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # OopMap{[0]=NarrowOop [32]=Oop [40]=Oop [56]=Oop off=1220}
4c4   	int3	# ShouldNotReachHere
4c4
4c9   B51: #	B30 &lt;- B26  Freq: 3.94634e-06
4c9   	movl    R10, R13	# spill
4cc   	jmp     B30
4cc
4d1   B52: #	N776 &lt;- B39  Freq: 8.78367e-07
4d1   	movl    RSI, #-34	# int
4d6   	movl    RBP, RCX	# spill
4d8   	movss   [rsp + #0], XMM9	# spill
4dd   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
4ef   	movsd   [rsp + #8], XMM1	# spill
4f5   	movl    [rsp + #28], R10	# spill
4fa   	movq    [rsp + #40], R11	# spill
4ff   	movss   [rsp + #48], XMM5	# spill
505   	movsd   [rsp + #56], XMM0	# spill
50b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #8 L[1]=rsp + #40 L[2]=RBP L[3]=rsp + #56 L[4]=rsp + #0 L[5]=rsp + #24 L[6]=rsp + #4 L[7]=_ L[8]=_ STK[0]=rsp + #28 STK[1]=rsp + #40 STK[2]=rsp + #48 STK[3]=rsp + #56
        # OopMap{[0]=NarrowOop [8]=Oop [28]=NarrowOop [40]=Oop [56]=Oop off=1296}
510   	int3	# ShouldNotReachHere
510
515   B53: #	N776 &lt;- B42  Freq: 8.78365e-07
515   	movss   [rsp + #4], XMM9	# spill
51b   	movl    [rsp + #12], RCX	# spill
51f   	movsd   [rsp + #16], XMM1	# spill
525   	movsd   [rsp + #40], XMM0	# spill
52b   	movq    [rsp + #48], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
533   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #48 L[2]=_ L[3]=_ STK[0]=RBP STK[1]=#0 STK[2]=rsp + #12
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #16 L[1]=rsp + #48 L[2]=rsp + #12 L[3]=rsp + #40 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #8 L[7]=_ L[8]=_
        # OopMap{rbp=NarrowOop [4]=NarrowOop [16]=Oop [40]=Oop [48]=Oop off=1336}
538   	int3	# ShouldNotReachHere
538
53d   B54: #	N776 &lt;- B40  Freq: 4.18838e-07
53d   	movl    RSI, #-155	# int
542   	movl    [rsp + #0], RCX	# spill
545   	movss   [rsp + #4], XMM9	# spill
54b   	movsd   [rsp + #16], XMM1	# spill
551   	movsd   [rsp + #40], XMM0	# spill
557   	movl    R10, [rsp + #24]	# spill
55c   	movl    [rsp + #12], R10	# spill
561   	movq    [rsp + #24], R11	# spill
566   	movss   [rsp + #48], XMM5	# spill
      	nop 	# 3 bytes pad for loops and calls
56f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:5  L[0]=_ L[1]=rsp + #24 L[2]=rsp + #48 L[3]=_ STK[0]=RBP STK[1]=#1
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=rsp + #0 L[3]=rsp + #40 L[4]=rsp + #4 L[5]=rsp + #12 L[6]=rsp + #8 L[7]=_ L[8]=_
        # OopMap{[4]=NarrowOop [16]=Oop [24]=Oop [40]=Oop off=1396}
574   	int3	# ShouldNotReachHere
574
579   B55: #	N776 &lt;- B6  Freq: 7.94623e-06
579   	movl    RBP, R11	# spill
57c   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
583   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # OopMap{off=1416}
588   	int3	# ShouldNotReachHere
588
58d   B56: #	N776 &lt;- B8  Freq: 7.94621e-06
58d   	movl    RBP, R13	# spill
590   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
597   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # OopMap{off=1436}
59c   	int3	# ShouldNotReachHere
59c
5a1   B57: #	N776 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
5a3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # OopMap{off=1448}
5a8   	int3	# ShouldNotReachHere
5a8
5ad   B58: #	N776 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
5af   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:12  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # OopMap{off=1460}
5b4   	int3	# ShouldNotReachHere
5b4
5b9   B59: #	N776 &lt;- B38  Freq: 8.90032e-07
5b9   	movq    RBP, R11	# spill
5bc   	movss   [rsp + #0], XMM5	# spill
5c1   	movsd   [rsp + #8], XMM0	# spill
5c7   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
5cf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=1492}
5d4   	int3	# ShouldNotReachHere
5d4
5d9   B60: #	N776 &lt;- B41  Freq: 8.9003e-07
5d9   	movl    RBP, RCX	# spill
5db   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
5e3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap{off=1512}
5e8   	int3	# ShouldNotReachHere
5e8

</opto_assembly>
<writer thread='139941923202816'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139941922150144'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='182'>
{method}
 - this oop:          0x00007f46c6a01c18
 - method holder:     &apos;java/util/regex/Pattern$Slice&apos;
 - constants:         0x00007f46c6a01800 constant pool [62] {0x00007f46c6a01800} for &apos;java/util/regex/Pattern$Slice&apos; cache=0x00007f46c6a02168
 - access:            0xc1000000  
 - name:              &apos;match&apos;
 - signature:         &apos;(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z&apos;
 - max stack:         5
 - max locals:        7
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d8127b88: 0xbbab0000 i2c: 0x00007f46c915ace0 c2i: 0x00007f46c915ae25 c2iUV: 0x00007f46c915adf8
 - compiled entry     0x00007f46c9273100
 - code size:         79
 - code start:        0x00007f46c6a01b60
 - code end (excl):   0x00007f46c6a01baf
 - method data:       0x00007f46c6a282e0
 - checked ex length: 0
 - linenumber start:  0x00007f46c6a01baf
 - localvar length:   7
 - localvar start:    0x00007f46c6a01bc2
 - compiled code: nmethod   1459  174       3       java.util.regex.Pattern$Slice::match (79 bytes)
#
#  bool ( java/util/regex/Pattern$Slice:NotNull:exact *, java/util/regex/Matcher:exact *, int, java/lang/CharSequence * )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Pattern$Slice:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/util/regex/Matcher:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/CharSequence *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1880: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B139 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (752 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movdq   XMM1, R8	# spill
031   	movdq   XMM0, RDX	# spill
036   	movq    RBX, RSI	# spill
039   	movl    R11, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$SliceNode.buffer
03d   	movl    RSI, #-10	# int
042   	movl    R8, [R11 + #12 (8-bit)]	# range
046   	NullCheck R11
046
046   B2: #	B32 B3 &lt;- B1  Freq: 0.999999
046   	movl    R10, RCX	# spill
049   	addl    R10, R8	# int
04c   	movl    RDX, RCX	# spill
04e   	sarl    RDX, #31
051   	andl    RDX, RCX	# int
053   	movl    R13, #1	# int
059   	movl    R9, #-2147483647	# int
05f   	subl    R9, RDX	# int
062   	testl   R8, R8
065   	jle     B32  P=0.076878 C=44031.000000
065
06b   B3: #	B101 B4 &lt;- B2  Freq: 0.923121
06b   	movl    [rsp + #0], R10	# spill
06f   	movl    [rsp + #16], R8	# spill
074   	movdl   XMM4, R11	# spill
079   	movdq   XMM2, RBX	# spill
07e   	movl    R11, #1	# int
084   	subl    R11, RCX	# int
087   	movl    RBX, R11	# spill
08a   	sarl    RBX, #31
08d   	movdq   R10, XMM0	# spill
092   	movl    R8, [R10 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
096   	NullCheck R10
096
096   B4: #	B101 B5 &lt;- B3  Freq: 0.92312
096   	movl    R10, [rsp + #16]	# spill
09b   	decl    R10	# int
09e   	movl    RDX, RCX	# spill
0a0   	negl    RDX	# int
0a2   	movl    RDI, [rsp + #16]	# spill
0a6   	testl  RDI, RDI	# unsigned
0a8   	jbe,u  B101  P=0.000001 C=-1.000000
0a8
0ae   B5: #	B101 B6 &lt;- B4  Freq: 0.923119
0ae   	cmpl    R10, RDI	# unsigned
0b1   	jnb,u  B101  P=0.000001 C=-1.000000
0b1
0b7   B6: #	B101 B7 &lt;- B5  Freq: 0.923119
0b7   	cmpl    RDX, R9
0ba   	cmovllt RDX, R9	# max
0be   	movdq   R10, XMM1	# spill
0c3   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
0c7   	NullCheck R10
0c7
0c7   B7: #	B101 B8 &lt;- B6  Freq: 0.923118
0c7   	movl    RSI, [rsp + #0]	# spill
0ca   	decl    RSI	# int
0cc   	cmpl    R10, narrowklass: precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# compressed klass ptr
0d3   	jne,u  B101  P=0.000001 C=-1.000000
0d3
0d9   B8: #	B101 B9 &lt;- B7  Freq: 0.923117
0d9   	movdq   R10, XMM1	# spill
0de   	# checkcastPP of R10
0de   	movdq   XMM3, R10	# spill
0e3   	movl    RDI, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
0e7   	cmpl    RDX, R9
0ea   	cmovllt RDX, R9	# max
0ee   	movl    R10, [RDI + #12 (8-bit)]	# range
0f2   	NullCheck RDI
0f2
0f2   B9: #	B101 B10 &lt;- B8  Freq: 0.923116
0f2   	movl    [rsp + #20], R10	# spill
0f7   	andl    RBX, R11	# int
0fa   	cmpl    RCX, R10	# unsigned
0fd   	jnb,u  B101  P=0.000001 C=-1.000000
0fd
103   B10: #	B101 B11 &lt;- B9  Freq: 0.923115
103   	cmpl    RSI, R10	# unsigned
106   	jnb,u  B101  P=0.000001 C=-1.000000
106
10c   B11: #	B12 &lt;- B10  Freq: 0.923114
10c   	movl    RAX, R8	# spill
10f   	subl    RAX, RCX	# int
111   	movl    RSI, #-155	# int
116   	cmpl    RDX, R13
119   	cmovllt RDX, R13	# max
11d   	addl    RBX, #2147483647	# int
123   	xorl    R14, R14	# int
126   	movl    R10, #-2147483647	# int
12c   	xorl    R11, R11	# int
12f   	movdl   XMM6, R10	# spill
134   	movdl   XMM5, R11	# spill
134
139   B12: #	B103 B13 &lt;- B11 B18 	Loop: B12-B18 inner pre of N1529 Freq: 1.23559
139   	movl    R11, R14	# spill
13c   	addl    R11, RCX	# int
13f   	movzwl  R9, [RDI + #16 + R11 &lt;&lt; #1]	# ushort/char
145   	cmpl    R11, R8
148   	jge     B103  P=0.000000 C=40646.000000
148
14e   B13: #	B102 B14 &lt;- B12  Freq: 1.23559
14e   	movdl   R10, XMM4	# spill
153   	movl    RBP, [R10 + #16 + R14 &lt;&lt; #2]	# int
158   	testl   R11, R11
15b   	jl     B102  P=0.000000 C=5790.000000
15b
161   B14: #	B104 B15 &lt;- B13  Freq: 1.23559
161   	cmpl    R11, [RSP + #20 (32-bit)]
166   	jge     B104  P=0.000000 C=5790.000000
166
16c   B15: #	B18 B16 &lt;- B14  Freq: 1.23559
16c   	incl    R14	# int
16f   	cmpl    RBP, R9
172   	je,s   B18  P=0.505794 C=40645.000000
172
174   B16: #	B17 &lt;- B29 B21 B15  Freq: 0.907858
174   	movdl   RAX, XMM5	# spill
174
178   B17: #	N1880 &lt;- B16 B61 B89 B100 B95  Freq: 0.999988
178   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

183   	ret
183
184   B18: #	B12 B19 &lt;- B15  Freq: 0.624953
184   	cmpl    RDX, [RSP + #16 (32-bit)]
188   	movl    R10, RDX	# spill
18b   	movl    R11, [rsp + #16]	# spill
190   	cmovlgt R10, R11	# min
194   	movl    R11, [rsp + #20]	# spill
199   	subl    R11, RCX	# int
19c   	cmpl    RBX, R11
19f   	movl    R9, RBX	# spill
1a2   	cmovlgt R9, R11	# min
1a6   	cmpl    R14, R10
1a9   	jl,s   B12	# loop end  P=0.500000 C=20558.000000
1a9
1ab   B19: #	B23 B20 &lt;- B18  Freq: 0.312477
1ab   	cmpl    RAX, R9
1ae   	cmovlgt RAX, R9	# min
1b2   	cmpl    RAX, [RSP + #16 (32-bit)]
1b6   	movl    R10, [rsp + #16]	# spill
1bb   	cmovlgt RAX, R10	# min
1bf   	cmpl    R14, RAX
1c2   	jge,s   B23  P=0.000001 C=-1.000000
1c2
1c4   B20: #	B21 &lt;- B19  Freq: 0.312476
1c4   	# castII of R14
      	nop 	# 12 bytes pad for loops and calls

1d0   B21: #	B16 B22 &lt;- B20 B22 	Loop: B21-B22 inner main of N288 Freq: 0.58616
1d0   	movl    R9, R14	# spill
1d3   	addl    R9, RCX	# int
1d6   	movdl   R10, XMM4	# spill
1db   	movl    R10, [R10 + #16 + R14 &lt;&lt; #2]	# int
1e0   	movzwl  R11, [RDI + #16 + R9 &lt;&lt; #1]	# ushort/char
1e6   	cmpl    R10, R11
1e9   	jne,s   B16  P=0.494206 C=40645.000000
1e9
1eb   B22: #	B21 B23 &lt;- B21  Freq: 0.296476
1eb   	incl    R14	# int
1ee   	cmpl    R14, RAX
1f1   	jl,s   B21	# loop end  P=0.923122 C=20558.000000
1f1
1f3   B23: #	B25 B24 &lt;- B19 B22  Freq: 0.0227927
1f3   	cmpl    R14, [RSP + #16 (32-bit)]
1f8   	jl,s   B25  P=0.500000 C=-1.000000
1f8
1fa   B24: #	B33 &lt;- B23  Freq: 0.0113964
1fa   	movdl   R11, XMM6	# spill
1ff   	movdl   R10, XMM5	# spill
204   	jmp,s   B33
204
206   B25: #	B26 &lt;- B23  Freq: 0.0113964
206   	# castII of R14
206
206   B26: #	B103 B27 &lt;- B25 B30 	Loop: B26-B30 inner post of N1529 Freq: 0.0152541
206   	movl    R11, R14	# spill
209   	addl    R11, RCX	# int
20c   	movzwl  R10, [RDI + #16 + R11 &lt;&lt; #1]	# ushort/char
212   	movdl   RBX, XMM4	# spill
216   	movl    RBP, [RBX + #16 + R14 &lt;&lt; #2]	# int
21b   	cmpl    R11, R8
21e   	jge     B103  P=0.000000 C=40646.000000
21e
224   B27: #	B102 B28 &lt;- B26  Freq: 0.0152541
224   	testl   R11, R11
227   	jl     B102  P=0.000000 C=5790.000000
227
22d   B28: #	B104 B29 &lt;- B27  Freq: 0.0152541
22d   	cmpl    R11, [RSP + #20 (32-bit)]
232   	jge     B104  P=0.000000 C=5790.000000
232
238   B29: #	B16 B30 &lt;- B28  Freq: 0.015254
238   	cmpl    RBP, R10
23b   	jne     B16  P=0.494206 C=40645.000000
23b
241   B30: #	B26 B31 &lt;- B29  Freq: 0.00771541
241   	incl    R14	# int
244   	cmpl    R14, [RSP + #16 (32-bit)]
249   	jl,s   B26	# loop end  P=0.500000 C=20558.000000
249
24b   B31: #	B33 &lt;- B30  Freq: 0.0038577
24b   	movdl   R11, XMM6	# spill
250   	movdl   R10, XMM5	# spill
255   	jmp,s   B33
255
257   B32: #	B33 &lt;- B2  Freq: 0.0768776
257   	movdq   XMM2, RBX	# spill
25c   	movl    [rsp + #16], R8	# spill
261   	movl    [rsp + #0], R10	# spill
265   	movl    R11, #-2147483647	# int
26b   	xorl    R10, R10	# int
26e
26e   B33: #	B140 B34 &lt;- B24 B32 B31  Freq: 0.0921316
26e   	movslq  RCX, RCX	# i2l
271   	movdq   R8, XMM2	# spill
276   	movl    R9, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
27a   	movl    RDI, R9	# spill
27d   	movl    RSI, #-58	# int
282   	movl    R9, #-1	# int
288   	subl    R9, [RSP + #0 (32-bit)]	# int
28c   	movl    R8, [RDI + #8 (8-bit)]	# compressed klass ptr
290   	NullCheck RDI
290
290   B34: #	B90 B35 &lt;- B33  Freq: 0.0921315
290   	decode_heap_oop_not_null RBX,RDI
293   	cmpl    R8, narrowklass: precise klass java/util/regex/Pattern$Dot: 0x00007f469c1cf190:Constant:exact *	# compressed klass ptr
29a   	jne,u  B90  P=0.000302 C=-1.000000
29a
2a0   B35: #	B141 B36 &lt;- B34  Freq: 0.0921037
2a0   	movq    R8, RBX	# spill
2a3   	# checkcastPP of R8
2a3   	movq    RDX, R8	# spill
2a6   	movl    RBX, [rsp + #0]	# spill
2a9   	incl    RBX	# int
2ab   	movl    RAX, RBX	# spill
2ad   	movdq   R8, XMM0	# spill
2b2   	movl    R8, [R8 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
2b6   	NullCheck R8
2b6
2b6   B36: #	B116 B37 &lt;- B35  Freq: 0.0921036
2b6   	movl    R14, R8	# spill
2b9   	movl    R8, RBX	# spill
2bc   	sarl    R8, #31
2c0   	andl    R8, RBX	# int
2c3   	movl    RDI, [rsp + #0]	# spill
2c6   	cmpl    RDI, R14
2c9   	jge     B116  P=0.000000 C=3390.000000
2c9
2cf   B37: #	B142 B38 &lt;- B36  Freq: 0.0921036
2cf   	movdl   XMM7, R10	# spill
2d4   	subl    R11, R8	# int
2d7   	movl    RSI, #-34	# int
2dc   	cmpl    R9, R11
2df   	cmovllt R9, R11	# max
2e3   	movdq   R10, XMM1	# spill
2e8   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
2ec   	NullCheck R10
2ec
2ec   B38: #	B106 B39 &lt;- B37  Freq: 0.0921035
2ec   	cmpl    R9, R11
2ef   	cmovllt R9, R11	# max
2f3   	cmpl    R10, narrowklass: precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# compressed klass ptr
2fa   	jne,u  B106  P=0.000001 C=-1.000000
2fa
300   B39: #	B115 B40 &lt;- B38  Freq: 0.0921034
300   	movdq   R10, XMM1	# spill
305   	# checkcastPP of R10
305   	movdq   XMM2, R10	# spill
30a   	movl    RBX, [rsp + #0]	# spill
30d   	negl    RBX	# int
30f   	movl    R8, RBX	# spill
312   	sarl    R8, #31
316   	movl    R11, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
31a   	movdl   XMM4, R11	# spill
31f   	testl   RDI, RDI
321   	jl     B115  P=0.000000 C=5790.000000
321
327   B40: #	B143 B41 &lt;- B39  Freq: 0.0921033
327   	cmpl    R9, R13
32a   	cmovllt R9, R13	# max
32e   	movl    RDI, R14	# spill
331   	subl    RDI, [RSP + #0 (32-bit)]	# int
334   	movslq  R10, [RSP + #16 (32-bit)]	# int -&gt; long
339   	addq    RCX, R10	# long
33c   	movl    R10, [R11 + #12 (8-bit)]	# range
340   	NullCheck R11
340
340   B41: #	B117 B42 &lt;- B40  Freq: 0.0921032
340   	movl    R13, R10	# spill
343   	decl    RDI	# int
345   	movl    R11, [rsp + #0]	# spill
349   	cmpl    R11, R10
34c   	jge     B117  P=0.000000 C=5790.000000
34c
352   B42: #	B105 B43 &lt;- B41  Freq: 0.0921032
352   	movl    RSI, #-28	# int
357   	cmpl    R11, R10	# unsigned
35a   	jnb,u  B105  P=0.000001 C=-1.000000
35a
360   B43: #	B118 B44 &lt;- B42  Freq: 0.0921031
360   	movdl   R10, XMM4	# spill
365   	movzwl  R10, [R10 + #16 + RCX &lt;&lt; #1]	# ushort/char
36b   	movdl   XMM3, R10	# spill
370   	cmpl    R10, #55296
377   	jge     B118  P=0.000000 C=9671.000000
377
37d   B44: #	B119 B45 &lt;- B43  Freq: 0.0921031
37d   	cmpl    R10, #10
381   	je     B119  P=0.000000 C=3390.000000
381
387   B45: #	B120 B46 &lt;- B44  Freq: 0.092103
387   	movl    R11, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
38b   	movdl   XMM1, R11	# spill
390   	movdl   RBP, XMM3	# spill
394   	orl     RBP, #1	# int
397   	movl    RSI, #-155	# int
39c   	movdl   R10, XMM3	# spill
3a1   	cmpl    R10, #13
3a5   	je     B120  P=0.000000 C=3390.000000
3a5
3ab   B46: #	B121 B47 &lt;- B45  Freq: 0.092103
3ab   	movl    R10, R13	# spill
3ae   	subl    R10, [RSP + #0 (32-bit)]	# int
3b2   	cmpl    RBP, #8233
3b8   	je     B121  P=0.000000 C=3390.000000
3b8
3be   B47: #	B122 B48 &lt;- B46  Freq: 0.0921029
3be   	movl    RSI, #-10	# int
3c3   	decl    R10	# int
3c6   	movdl   RCX, XMM3	# spill
3ca   	cmpl    RCX, #133
3d0   	je     B122  P=0.000000 C=3390.000000
3d0
3d6   B48: #	B144 B49 &lt;- B47  Freq: 0.0921029
3d6   	movl    R11, [R11 + #8 (8-bit)]	# compressed klass ptr
3da   	NullCheck R11
3da
3da   B49: #	B107 B50 &lt;- B48  Freq: 0.0921028
3da   	movl    RSI, #-34	# int
3df   	movdl   RDX, XMM1	# spill
3e3   	decode_heap_oop_not_null RCX,RDX
3e6   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$Slice: 0x00007f469c1cea60:Constant:exact *	# compressed klass ptr
3ed   	jne,u  B107  P=0.000001 C=-1.000000
3ed
3f3   B50: #	B145 B51 &lt;- B49  Freq: 0.0921027
3f3   	movq    R11, RCX	# spill
3f6   	# checkcastPP of R11
3f6   	movq    RDX, R11	# spill
3f9   	movl    R11, [R11 + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$SliceNode.buffer
3fd   	movl    RBP, R11	# spill
400   	movl    RCX, [R11 + #12 (8-bit)]	# range
404   	NullCheck R11
404
404   B51: #	B75 B52 &lt;- B50  Freq: 0.0921026
404   	movl    [rsp + #4], RCX	# spill
408   	movl    RCX, [rsp + #0]	# spill
40b   	addl    RCX, [RSP + #4 (32-bit)]	# int
40f   	movdl   XMM3, RCX	# spill
413   	movq    R11, RDX	# spill
416   	movl    R11, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
41a   	movdl   XMM5, R11	# spill
41f   	andl    R8, RBX	# int
422   	movl    RCX, [rsp + #4]	# spill
426   	testl   RCX, RCX
428   	jle     B75  P=0.076878 C=44031.000000
428
42e   B52: #	B108 B53 &lt;- B51  Freq: 0.085022
42e   	cmpl    R10, RDI
431   	cmovlgt R10, RDI	# min
435   	testl  RCX, RCX	# unsigned
437   	jbe,u  B108  P=0.000001 C=-1.000000
437
43d   B53: #	B108 B54 &lt;- B52  Freq: 0.0850219
43d   	decl    RCX	# int
43f   	addl    R8, #2147483647	# int
446   	cmpl    RCX, [RSP + #4 (32-bit)]	# unsigned
44a   	jnb,u  B108  P=0.000001 C=-1.000000
44a
450   B54: #	B108 B55 &lt;- B53  Freq: 0.0850218
450   	cmpl    R8, R10
453   	cmovlgt R8, R10	# min
457   	cmpl    RAX, R13	# unsigned
45a   	jnb,u  B108  P=0.000001 C=-1.000000
45a
460   B55: #	B108 B56 &lt;- B54  Freq: 0.0850217
460   	movdl   R10, XMM3	# spill
465   	cmpl    R10, R13	# unsigned
468   	jnb,u  B108  P=0.000001 C=-1.000000
468
46e   B56: #	B57 &lt;- B55  Freq: 0.0850216
46e   	cmpl    R8, [RSP + #4 (32-bit)]
473   	movl    R11, [rsp + #4]	# spill
478   	cmovlgt R8, R11	# min
47c   	xorl    RCX, RCX	# int
47e
47e   B57: #	B111 B58 &lt;- B56 B63 	Loop: B57-B63 inner pre of N1535 Freq: 0.113802
47e   	movl    R11, [RBP + #16 + RCX &lt;&lt; #2]	# int
483   	movl    RDI, R11	# spill
486   	movl    R11, RCX	# spill
489   	addl    R11, [RSP + #0 (32-bit)]	# int
48d   	movslq  RBX, R11	# i2l
490   	movl    R10, R11	# spill
493   	incl    R10	# int
496   	movdl   XMM1, R10	# spill
49b   	cmpl    R10, R14
49e   	jge     B111  P=0.000000 C=40646.000000
49e
4a4   B58: #	B109 B59 &lt;- B57  Freq: 0.113802
4a4   	movdl   R10, XMM4	# spill
4a9   	movzwl  RBX, [R10 + #18 + RBX &lt;&lt; #1]	# ushort/char
4af   	movdl   R10, XMM1	# spill
4b4   	testl   R10, R10
4b7   	jl     B109  P=0.000000 C=5790.000000
4b7
4bd   B59: #	B113 B60 &lt;- B58  Freq: 0.113802
4bd   	movl    R10, RCX	# spill
4c0   	incl    R10	# int
4c3   	movdl   XMM6, R10	# spill
4c8   	movdl   R10, XMM1	# spill
4cd   	cmpl    R10, R13
4d0   	jge     B113  P=0.000000 C=5790.000000
4d0
4d6   B60: #	B62 B61 &lt;- B59  Freq: 0.113801
4d6   	cmpl    RDI, RBX
4d8   	je,s   B62  P=0.505794 C=40645.000000
4d8
4da   B61: #	B17 &lt;- B73 B66 B60  Freq: 0.0836165
4da   	movdl   RAX, XMM7	# spill
4de   	jmp     B17
4de
4e3   B62: #	B64 B63 &lt;- B60  Freq: 0.0575601
4e3   	cmpl    R9, [RSP + #4 (32-bit)]
4e8   	movl    R11, R9	# spill
4eb   	movl    R10, [rsp + #4]	# spill
4f0   	cmovlgt R11, R10	# min
4f4   	movdl   R10, XMM6	# spill
4f9   	cmpl    R10, R11
4fc   	jge,s   B64	# loop end  P=0.500000 C=20558.000000
4fc
4fe   B63: #	B57 &lt;- B62  Freq: 0.0287801
4fe   	movl    RCX, R10	# spill
501   	jmp     B57
501
506   B64: #	B68 B65 &lt;- B62  Freq: 0.0287801
506   	cmpl    R10, R8
509   	jge,s   B68  P=0.000001 C=-1.000000
509
50b   B65: #	B66 &lt;- B64  Freq: 0.02878
50b   	movl    R11, R10	# spill
50e   	# castII of R11
50e   	movdl   XMM6, R11	# spill
      	nop 	# 13 bytes pad for loops and calls

520   B66: #	B61 B67 &lt;- B65 B67 	Loop: B66-B67 inner main of N401 Freq: 0.0539872
520   	movdl   R11, XMM6	# spill
525   	movl    R9, [RBP + #16 + R11 &lt;&lt; #2]	# int
52a   	movdl   R10, XMM6	# spill
52f   	addl    R10, [RSP + #0 (32-bit)]	# int
533   	incl    R11	# int
536   	movdl   XMM6, R11	# spill
53b   	movslq  R11, R10	# i2l
53e   	movdl   R10, XMM4	# spill
543   	movzwl  R10, [R10 + #18 + R11 &lt;&lt; #1]	# ushort/char
549   	cmpl    R9, R10
54c   	jne,s   B61  P=0.494206 C=40645.000000
54c
54e   B67: #	B66 B68 &lt;- B66  Freq: 0.0273064
54e   	movdl   R11, XMM6	# spill
553   	cmpl    R11, R8
556   	jl,s   B66	# loop end  P=0.923122 C=20558.000000
556
558   B68: #	B75 B69 &lt;- B64 B67  Freq: 0.00209928
558   	movdl   R11, XMM6	# spill
55d   	cmpl    R11, [RSP + #4 (32-bit)]
562   	jge,s   B75  P=0.500000 C=-1.000000
562
564   B69: #	B70 &lt;- B68  Freq: 0.00104964
564   	movdl   R10, XMM6	# spill
569   	# castII of R10
569   	movl    R9, R10	# spill
569
56c   B70: #	B112 B71 &lt;- B69 B74 	Loop: B70-B74 inner post of N1535 Freq: 0.00140495
56c   	movl    R10, R9	# spill
56f   	addl    R10, [RSP + #0 (32-bit)]	# int
573   	movl    R11, R10	# spill
576   	incl    R11	# int
579   	movdl   XMM1, R11	# spill
57e   	cmpl    R11, R14
581   	jge     B112  P=0.000000 C=40646.000000
581
587   B71: #	B110 B72 &lt;- B70  Freq: 0.00140495
587   	movl    R8, [RBP + #16 + R9 &lt;&lt; #2]	# int
58c   	movl    RDI, R8	# spill
58f   	movdl   R11, XMM1	# spill
594   	testl   R11, R11
597   	jl     B110  P=0.000000 C=5790.000000
597
59d   B72: #	B114 B73 &lt;- B71  Freq: 0.00140494
59d   	cmpl    R11, R13
5a0   	jge     B114  P=0.000000 C=5790.000000
5a0
5a6   B73: #	B61 B74 &lt;- B72  Freq: 0.00140494
5a6   	movslq  R8, R10	# i2l
5a9   	movl    R11, R9	# spill
5ac   	incl    R11	# int
5af   	movl    R9, R11	# spill
5b2   	movdl   R10, XMM4	# spill
5b7   	movzwl  R10, [R10 + #18 + R8 &lt;&lt; #1]	# ushort/char
5bd   	cmpl    RDI, R10
5c0   	jne     B61  P=0.494206 C=40645.000000
5c0
5c6   B74: #	B70 B75 &lt;- B73  Freq: 0.000710612
5c6   	cmpl    R9, [RSP + #4 (32-bit)]
5cb   	jl,s   B70	# loop end  P=0.500000 C=20558.000000
5cb
5cd   B75: #	B147 B76 &lt;- B68 B51 B74  Freq: 0.00848558
5cd   	movdl   R10, XMM3	# spill
5d2   	incl    R10	# int
5d5   	movl    R8, R10	# spill
5d8   	movl    RSI, #-10	# int
5dd   	movdl   R11, XMM5	# spill
5e2   	movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
5e6   	NullCheck R11
5e6
5e6   B76: #	B96 B77 &lt;- B75  Freq: 0.00848557
5e6   	decode_heap_oop_not_null R11,R11
5e6   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Dot: 0x00007f469c1cf190:Constant:exact *	# compressed klass ptr
5ed   	jne,u  B96  P=0.000302 C=-1.000000
5ed
5f3   B77: #	B126 B78 &lt;- B76  Freq: 0.00848301
5f3   	movq    R10, R11	# spill
5f6   	# checkcastPP of R10
5f6   	movq    RCX, R10	# spill
5f9   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
5fd   	movl    RDI, R10	# spill
600   	decode_heap_oop_not_null R9,R10
603   	cmpl    R8, R14
606   	jge     B126  P=0.000000 C=3390.000000
606
60c   B78: #	B125 B79 &lt;- B77  Freq: 0.008483
60c   	movdl   R10, XMM3	# spill
611   	addl    R10, #2	# int
615   	movl    RBX, R10	# spill
618   	testl   R8, R8
61b   	jl     B125  P=0.000000 C=5790.000000
61b
621   B79: #	B127 B80 &lt;- B78  Freq: 0.008483
621   	movl    R10, R8	# spill
624   	cmpl    R10, R13
627   	jge     B127  P=0.000000 C=5790.000000
627
62d   B80: #	B123 B81 &lt;- B79  Freq: 0.00848299
62d   	movslq  R10, [RSP + #4 (32-bit)]	# int -&gt; long
632   	movslq  RDX, [RSP + #0 (32-bit)]	# int -&gt; long
636   	addq    RDX, R10	# long
639   	movl    R10, R8	# spill
63c   	cmpl    R10, R13	# unsigned
63f   	jnb,u  B123  P=0.000001 C=-1.000000
63f
645   B81: #	B128 B82 &lt;- B80  Freq: 0.00848299
645   	movdl   R11, XMM4	# spill
64a   	movzwl  R10, [R11 + #18 + RDX &lt;&lt; #1]	# ushort/char
650   	movl    RSI, #-155	# int
655   	cmpl    R10, #55296
65c   	jge     B128  P=0.000000 C=9671.000000
65c
662   B82: #	B129 B83 &lt;- B81  Freq: 0.00848298
662   	cmpl    R10, #10
666   	je     B129  P=0.000000 C=3390.000000
666
66c   B83: #	B130 B84 &lt;- B82  Freq: 0.00848298
66c   	movl    RBP, R10	# spill
66f   	orl     RBP, #1	# int
672   	cmpl    R10, #13
676   	je     B130  P=0.000000 C=3390.000000
676
67c   B84: #	B131 B85 &lt;- B83  Freq: 0.00848297
67c   	cmpl    RBP, #8233
682   	je     B131  P=0.000000 C=3390.000000
682
688   B85: #	B132 B86 &lt;- B84  Freq: 0.00848297
688   	cmpl    R10, #133
68f   	je     B132  P=0.000000 C=3390.000000
68f
695   B86: #	B148 B87 &lt;- B85  Freq: 0.00848297
695   	movl    R8, RDI	# spill
698   	movl    R11, [R8 + #8 (8-bit)]	# compressed klass ptr
69c   	NullCheck R8
69c
69c   B87: #	B124 B88 &lt;- B86  Freq: 0.00848296
69c   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$Slice: 0x00007f469c1cea60:Constant:exact *	# compressed klass ptr
6a3   	jne,u  B124  P=0.000001 C=-1.000000
6a3
6a9   B88: #	B146 B89 &lt;- B87  Freq: 0.00848295
6a9   	# checkcastPP of R9
6a9   	movdq   RDX, XMM0	# spill
6ae   	movl    RCX, RBX	# spill
6b0   	movdq   R8, XMM2	# spill
6b5   	movq    RSI, R9	# spill
      	nop 	# 3 bytes pad for loops and calls
6bb   	call,static  java.util.regex.Pattern$Slice::match
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=1728}
6c0
6c0   B89: #	B17 &lt;- B88  Freq: 0.00848278
        # Block is sole successor of call
6c0   	jmp     B17
6c0
6c5   B90: #	B133 B91 &lt;- B34  Freq: 2.78253e-05
6c5   	cmpl    R8, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f469c1cf260:Constant:exact *	# compressed klass ptr
6cc   	jne,u  B133  P=0.000001 C=-1.000000
6cc
6d2   B91: #	B149 B92 &lt;- B90  Freq: 2.78252e-05
6d2   	movl    RSI, #-155	# int
6d7   	movdq   R10, XMM0	# spill
6dc   	movl    R8, [R10 + #24 (8-bit)]	# int ! Field: java/util/regex/Matcher.acceptMode
6e0   	NullCheck R10
6e0
6e0   B92: #	B135 B93 &lt;- B91  Freq: 2.78252e-05
6e0   	movl    R9, [R10 + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
6e4   	movl    RBP, [R10 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
6e8   	cmpl    R8, #1
6ec   	je     B135  P=0.000000 C=11687.000000
6ec
6f2   B93: #	B150 B94 &lt;- B92  Freq: 2.78252e-05
6f2   	movl    R8, [rsp + #0]	# spill
6f6   	movl    [R10 + #32 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.last
6fa   	movl    R11, [RBP + #12 (8-bit)]	# range
6fe   	NullCheck RBP
6fe
6fe   B94: #	B134 B95 &lt;- B93  Freq: 2.78252e-05
6fe   	cmpl    R11, #1	# unsigned
702   	jbe,u  B134  P=0.000001 C=-1.000000
702
708   B95: #	B17 &lt;- B94  Freq: 2.78251e-05
708   	movl    [RBP + #16 (8-bit)], R9	# int
70c   	movl    [RBP + #20 (8-bit)], R8	# int
710   	movl    RAX, #1	# int
715   	jmp     B17
715
71a   B96: #	B136 B97 &lt;- B76  Freq: 2.56278e-06
71a   	movl    RSI, #-155	# int
71f   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f469c1cf260:Constant:exact *	# compressed klass ptr
726   	jne,u  B136  P=0.000001 C=-1.000000
726
72c   B97: #	B138 B98 &lt;- B96  Freq: 2.56278e-06
72c   	movdq   R10, XMM0	# spill
731   	movl    RCX, [R10 + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
735   	movl    RBP, [R10 + #24 (8-bit)]	# int ! Field: java/util/regex/Matcher.acceptMode
739   	cmpl    RBP, #1
73c   	je     B138  P=0.000000 C=11687.000000
73c
742   B98: #	B151 B99 &lt;- B97  Freq: 2.56278e-06
742   	movl    RSI, #-28	# int
747   	movl    [R10 + #32 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.last
74b   	movl    RBP, [R10 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
74f   	movl    R11, [RBP + #12 (8-bit)]	# range
753   	NullCheck RBP
753
753   B99: #	B137 B100 &lt;- B98  Freq: 2.56278e-06
753   	cmpl    R11, #1	# unsigned
757   	jbe,u  B137  P=0.000001 C=-1.000000
757
75d   B100: #	B17 &lt;- B99  Freq: 2.56278e-06
75d   	movl    [RBP + #16 (8-bit)], RCX	# int
760   	movl    [RBP + #20 (8-bit)], R8	# int
764   	movl    RAX, #1	# int
769   	jmp     B17
769
76e   B101: #	N1880 &lt;- B10 B3 B4 B5 B6 B7 B8 B9  Freq: 7.45849e-06
76e   	movl    RBP, RCX	# spill
770   	movsd   [rsp + #0], XMM2	# spill
775   	movsd   [rsp + #8], XMM0	# spill
77b   	movsd   [rsp + #24], XMM1	# spill
781   	movss   [rsp + #20], XMM4	# spill
787   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
78f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:21  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=rsp + #24 L[4]=rsp + #20 L[5]=rsp + #16 L[6]=#0
        # OopMap{[0]=Oop [8]=Oop [20]=NarrowOop [24]=Oop off=1940}
794   	int3	# ShouldNotReachHere
794
799   B102: #	N1880 &lt;- B27 B13  Freq: 6.25422e-07
799   	movl    [rsp + #0], RCX	# spill
79c   	movl    [rsp + #4], R14	# spill
7a1   	movl    [rsp + #12], R11	# spill
7a6   	movsd   [rsp + #24], XMM2	# spill
7ac   	movsd   [rsp + #32], XMM0	# spill
7b2   	movss   [rsp + #20], XMM4	# spill
7b8   	movsd   [rsp + #48], XMM3	# spill
      	nop 	# 1 bytes pad for loops and calls
7bf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #48 L[1]=rsp + #12 STK[0]=rsp + #12
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #0 L[3]=rsp + #48 L[4]=rsp + #20 L[5]=rsp + #16 L[6]=rsp + #4 STK[0]=RBP
        # OopMap{[20]=NarrowOop [24]=Oop [32]=Oop [48]=Oop off=1988}
7c4   	int3	# ShouldNotReachHere
7c4
7c9   B103: #	N1880 &lt;- B26 B12  Freq: 5.96449e-07
7c9   	movl    RBP, RCX	# spill
7cb   	movl    [rsp + #0], R14	# spill
7cf   	movl    [rsp + #4], R11	# spill
7d4   	movl    [rsp + #8], R8	# spill
7d9   	movsd   [rsp + #24], XMM2	# spill
7df   	movsd   [rsp + #32], XMM0	# spill
7e5   	movsd   [rsp + #40], XMM1	# spill
7eb   	movss   [rsp + #12], XMM4	# spill
7f1   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
7f7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:29  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #40 L[4]=rsp + #12 L[5]=rsp + #16 L[6]=rsp + #0 STK[0]=rsp + #4 STK[1]=rsp + #8
        # OopMap{[12]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=2044}
7fc   	int3	# ShouldNotReachHere
7fc
801   B104: #	N1880 &lt;- B28 B14  Freq: 5.96449e-07
801   	movl    [rsp + #0], RCX	# spill
804   	movl    [rsp + #4], R14	# spill
809   	movl    [rsp + #12], R11	# spill
80e   	movsd   [rsp + #24], XMM2	# spill
814   	movsd   [rsp + #32], XMM0	# spill
81a   	movss   [rsp + #48], XMM4	# spill
820   	movsd   [rsp + #56], XMM3	# spill
826   	movl    RSI, #-155	# int
82b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #56 L[1]=rsp + #12 STK[0]=rsp + #12 STK[1]=rsp + #20
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #0 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #16 L[6]=rsp + #4 STK[0]=RBP
        # OopMap{[24]=Oop [32]=Oop [48]=NarrowOop [56]=Oop off=2096}
830   	int3	# ShouldNotReachHere
830
835   B105: #	N1880 &lt;- B42  Freq: 9.33262e-08
835   	movq    RBP, RDX	# spill
838   	movsd   [rsp + #8], XMM0	# spill
83e   	movsd   [rsp + #16], XMM1	# spill
844   	movsd   [rsp + #24], XMM2	# spill
84a   	movss   [rsp + #32], XMM4	# spill
      	nop 	# 3 bytes pad for loops and calls
853   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #0
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #24 L[1]=rsp + #0 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [24]=Oop [32]=NarrowOop off=2136}
858   	int3	# ShouldNotReachHere
858
85d   B106: #	N1880 &lt;- B38  Freq: 9.21035e-08
85d   	movq    RBP, RDX	# spill
860   	movsd   [rsp + #8], XMM0	# spill
866   	movsd   [rsp + #24], XMM1	# spill
86c   	movsd   [rsp + #32], XMM1	# spill
      	nop 	# 1 bytes pad for loops and calls
873   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=_ L[3]=_ STK[0]=rsp + #24 STK[1]=rsp + #0
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [32]=Oop off=2168}
878   	int3	# ShouldNotReachHere
878
87d   B107: #	N1880 &lt;- B49  Freq: 9.21028e-08
87d   	movl    RBP, RDX	# spill
87f   	movsd   [rsp + #0], XMM0	# spill
884   	movl    [rsp + #8], RAX	# spill
888   	movsd   [rsp + #16], XMM2	# spill
      	nop 	# 1 bytes pad for loops and calls
88f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #8 STK[3]=rsp + #16
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [0]=Oop [16]=Oop off=2196}
894   	int3	# ShouldNotReachHere
894
899   B108: #	N1880 &lt;- B55 B52 B53 B54  Freq: 3.43474e-07
899   	movq    [rsp + #8], RDX	# spill
89e   	movsd   [rsp + #16], XMM0	# spill
8a4   	movl    [rsp + #0], RAX	# spill
8a7   	movsd   [rsp + #24], XMM2	# spill
8ad   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
8b3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:21  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #0 L[3]=rsp + #24 L[4]=RBP L[5]=rsp + #4 L[6]=#0
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [24]=Oop off=2232}
8b8   	int3	# ShouldNotReachHere
8b8
8bd   B109: #	B110 &lt;- B58  Freq: 5.69008e-08
8bd   	movl    R9, RCX	# spill
8bd
8c0   B110: #	N1880 &lt;- B71 B109  Freq: 5.76033e-08
8c0   	movl    RSI, #-155	# int
8c5   	movq    [rsp + #8], RDX	# spill
8ca   	movsd   [rsp + #16], XMM0	# spill
8d0   	movl    [rsp + #0], RAX	# spill
8d3   	movl    [rsp + #32], R9	# spill
8d8   	movl    [rsp + #36], RDI	# spill
8dc   	movsd   [rsp + #40], XMM2	# spill
8e2   	movss   [rsp + #52], XMM1	# spill
      	nop 	# 3 bytes pad for loops and calls
8eb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #40 L[1]=rsp + #52 STK[0]=rsp + #52
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #0 L[3]=rsp + #40 L[4]=RBP L[5]=rsp + #4 L[6]=rsp + #32 STK[0]=rsp + #36
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [40]=Oop off=2288}
8f0   	int3	# ShouldNotReachHere
8f0
8f5   B111: #	B112 &lt;- B57  Freq: 5.42649e-08
8f5   	movl    R9, RCX	# spill
8f5
8f8   B112: #	N1880 &lt;- B70 B111  Freq: 5.49348e-08
8f8   	movq    [rsp + #8], RDX	# spill
8fd   	movsd   [rsp + #16], XMM0	# spill
903   	movl    [rsp + #0], RAX	# spill
906   	movsd   [rsp + #24], XMM2	# spill
90c   	movl    [rsp + #32], R9	# spill
911   	movss   [rsp + #36], XMM1	# spill
917   	movl    [rsp + #40], R14	# spill
91c   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
923   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:29  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #0 L[3]=rsp + #24 L[4]=RBP L[5]=rsp + #4 L[6]=rsp + #32 STK[0]=rsp + #36 STK[1]=rsp + #40
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [24]=Oop off=2344}
928   	int3	# ShouldNotReachHere
928
92d   B113: #	B114 &lt;- B59  Freq: 5.42648e-08
92d   	movl    R9, RCX	# spill
92d
930   B114: #	N1880 &lt;- B72 B113  Freq: 5.49347e-08
930   	movq    [rsp + #8], RDX	# spill
935   	movsd   [rsp + #16], XMM0	# spill
93b   	movl    [rsp + #0], RAX	# spill
93e   	movl    [rsp + #32], R9	# spill
943   	movl    [rsp + #36], RDI	# spill
947   	movsd   [rsp + #40], XMM2	# spill
94d   	movss   [rsp + #52], XMM1	# spill
953   	movl    [rsp + #56], R13	# spill
958   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
95f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #40 L[1]=rsp + #52 STK[0]=rsp + #52 STK[1]=rsp + #56
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #0 L[3]=rsp + #40 L[4]=RBP L[5]=rsp + #4 L[6]=rsp + #32 STK[0]=rsp + #36
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [40]=Oop off=2404}
964   	int3	# ShouldNotReachHere
964
969   B115: #	N1880 &lt;- B39  Freq: 4.60517e-08
969   	movq    RBP, RDX	# spill
96c   	movsd   [rsp + #8], XMM0	# spill
972   	movsd   [rsp + #16], XMM1	# spill
978   	movsd   [rsp + #32], XMM2	# spill
97e   	movl    RSI, #-155	# int
983   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #32 L[1]=rsp + #0 STK[0]=rsp + #0
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [32]=Oop off=2440}
988   	int3	# ShouldNotReachHere
988
98d   B116: #	N1880 &lt;- B36  Freq: 4.39184e-08
98d   	movl    RSI, #-155	# int
992   	movq    RBP, RDX	# spill
995   	movsd   [rsp + #8], XMM0	# spill
99b   	movsd   [rsp + #16], XMM1	# spill
9a1   	movl    [rsp + #24], R14	# spill
      	nop 	# 1 bytes pad for loops and calls
9a7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:5  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=_ STK[0]=rsp + #0 STK[1]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop off=2476}
9ac   	int3	# ShouldNotReachHere
9ac
9b1   B117: #	N1880 &lt;- B41  Freq: 4.39182e-08
9b1   	movl    RSI, #-155	# int
9b6   	movq    RBP, RDX	# spill
9b9   	movsd   [rsp + #8], XMM0	# spill
9bf   	movsd   [rsp + #16], XMM1	# spill
9c5   	movsd   [rsp + #32], XMM2	# spill
9cb   	movl    [rsp + #48], R13	# spill
      	nop 	# 3 bytes pad for loops and calls
9d3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #32 L[1]=rsp + #0 STK[0]=rsp + #0 STK[1]=rsp + #48
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [32]=Oop off=2520}
9d8   	int3	# ShouldNotReachHere
9d8
9dd   B118: #	N1880 &lt;- B43  Freq: 4.39182e-08
9dd   	movl    RSI, #-155	# int
9e2   	movq    RBP, RDX	# spill
9e5   	movsd   [rsp + #8], XMM0	# spill
9eb   	movsd   [rsp + #16], XMM1	# spill
9f1   	movsd   [rsp + #24], XMM2	# spill
9f7   	movss   [rsp + #36], XMM3	# spill
9fd   	movss   [rsp + #40], XMM3	# spill
a03   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #40 STK[0]=rsp + #36 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #24 L[1]=rsp + #0 L[2]=rsp + #36 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [24]=Oop off=2568}
a08   	int3	# ShouldNotReachHere
a08
a0d   B119: #	N1880 &lt;- B44  Freq: 4.39182e-08
a0d   	movq    RBP, RDX	# spill
a10   	movsd   [rsp + #8], XMM0	# spill
a16   	movsd   [rsp + #16], XMM2	# spill
a1c   	movl    [rsp + #24], R10	# spill
a21   	movl    [rsp + #28], R10	# spill
a26   	movl    RSI, #-155	# int
a2b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #24 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop off=2608}
a30   	int3	# ShouldNotReachHere
a30
a35   B120: #	N1880 &lt;- B45  Freq: 4.39181e-08
a35   	movq    RBP, RDX	# spill
a38   	movsd   [rsp + #8], XMM0	# spill
a3e   	movsd   [rsp + #16], XMM2	# spill
a44   	movl    [rsp + #24], R10	# spill
a49   	movl    [rsp + #28], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
a4f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #24 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop off=2644}
a54   	int3	# ShouldNotReachHere
a54
a59   B121: #	N1880 &lt;- B46  Freq: 4.39181e-08
a59   	movq    [rsp + #8], RDX	# spill
a5e   	movsd   [rsp + #16], XMM0	# spill
a64   	movsd   [rsp + #24], XMM2	# spill
a6a   	movss   [rsp + #32], XMM3	# spill
      	nop 	# 3 bytes pad for loops and calls
a73   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #32 STK[0]=RBP STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #0 L[3]=rsp + #24 L[4]=rsp + #32
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{[8]=Oop [16]=Oop [24]=Oop off=2680}
a78   	int3	# ShouldNotReachHere
a78
a7d   B122: #	N1880 &lt;- B47  Freq: 4.39181e-08
a7d   	movq    RBP, RDX	# spill
a80   	movsd   [rsp + #8], XMM0	# spill
a86   	movsd   [rsp + #16], XMM2	# spill
a8c   	movl    [rsp + #24], RCX	# spill
a90   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
a97   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop off=2716}
a9c   	int3	# ShouldNotReachHere
a9c
aa1   B123: #	N1880 &lt;- B80  Freq: 8.59564e-09
aa1   	movl    RSI, #-28	# int
aa6   	movq    RBP, RCX	# spill
aa9   	movsd   [rsp + #0], XMM0	# spill
aae   	movsd   [rsp + #24], XMM2	# spill
ab4   	movl    [rsp + #12], R10	# spill
ab9   	movss   [rsp + #32], XMM4	# spill
abf   	movl    [rsp + #36], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
ac7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #12
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #24 L[1]=rsp + #36 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [32]=NarrowOop off=2764}
acc   	int3	# ShouldNotReachHere
acc
ad1   B124: #	N1880 &lt;- B87  Freq: 8.48296e-09
ad1   	movl    RBP, R8	# spill
ad4   	movsd   [rsp + #0], XMM0	# spill
ad9   	movl    [rsp + #8], RBX	# spill
add   	movsd   [rsp + #16], XMM2	# spill
ae3   	movl    RSI, #-34	# int
      	nop 	# 3 bytes pad for loops and calls
aeb   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #8 STK[3]=rsp + #16
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [0]=Oop [16]=Oop off=2800}
af0   	int3	# ShouldNotReachHere
af0
af5   B125: #	N1880 &lt;- B78  Freq: 4.2415e-09
af5   	movl    RSI, #-155	# int
afa   	movq    RBP, RCX	# spill
afd   	movsd   [rsp + #0], XMM0	# spill
b02   	movsd   [rsp + #24], XMM2	# spill
b08   	movl    [rsp + #12], R8	# spill
b0d   	movsd   [rsp + #32], XMM2	# spill
b13   	movl    [rsp + #40], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
b1b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #24 L[1]=rsp + #12 STK[0]=rsp + #12
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [32]=Oop off=2848}
b20   	int3	# ShouldNotReachHere
b20
b25   B126: #	N1880 &lt;- B77  Freq: 4.04501e-09
b25   	movl    RSI, #-155	# int
b2a   	movq    RBP, RCX	# spill
b2d   	movsd   [rsp + #0], XMM0	# spill
b32   	movsd   [rsp + #16], XMM2	# spill
b38   	movl    [rsp + #12], R8	# spill
b3d   	movl    [rsp + #24], R14	# spill
      	nop 	# 1 bytes pad for loops and calls
b43   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:5  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=_ STK[0]=rsp + #12 STK[1]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=2888}
b48   	int3	# ShouldNotReachHere
b48
b4d   B127: #	N1880 &lt;- B79  Freq: 4.04501e-09
b4d   	movl    RSI, #-155	# int
b52   	movq    RBP, RCX	# spill
b55   	movsd   [rsp + #0], XMM0	# spill
b5a   	movsd   [rsp + #24], XMM2	# spill
b60   	movl    [rsp + #12], R10	# spill
b65   	movsd   [rsp + #32], XMM2	# spill
b6b   	movl    [rsp + #40], R10	# spill
b70   	movl    [rsp + #48], R13	# spill
      	nop 	# 2 bytes pad for loops and calls
b77   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #24 L[1]=rsp + #12 STK[0]=rsp + #12 STK[1]=rsp + #48
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [24]=Oop [32]=Oop off=2940}
b7c   	int3	# ShouldNotReachHere
b7c
b81   B128: #	N1880 &lt;- B81  Freq: 4.045e-09
b81   	movq    RBP, RCX	# spill
b84   	movsd   [rsp + #0], XMM0	# spill
b89   	movsd   [rsp + #24], XMM2	# spill
b8f   	movl    [rsp + #12], R8	# spill
b94   	movl    [rsp + #36], R10	# spill
b99   	movl    [rsp + #40], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
b9f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #40 STK[0]=rsp + #36 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #24 L[1]=rsp + #12 L[2]=rsp + #36 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #24 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [24]=Oop off=2980}
ba4   	int3	# ShouldNotReachHere
ba4
ba9   B129: #	N1880 &lt;- B82  Freq: 4.045e-09
ba9   	movq    RBP, RCX	# spill
bac   	movsd   [rsp + #0], XMM0	# spill
bb1   	movl    [rsp + #8], R8	# spill
bb6   	movsd   [rsp + #16], XMM2	# spill
bbc   	movl    [rsp + #24], R10	# spill
bc1   	movl    [rsp + #28], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
bc7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #24 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=3020}
bcc   	int3	# ShouldNotReachHere
bcc
bd1   B130: #	N1880 &lt;- B83  Freq: 4.045e-09
bd1   	movq    RBP, RCX	# spill
bd4   	movsd   [rsp + #0], XMM0	# spill
bd9   	movl    [rsp + #8], R8	# spill
bde   	movsd   [rsp + #16], XMM2	# spill
be4   	movl    [rsp + #24], R10	# spill
be9   	movl    [rsp + #28], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
bef   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #24 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=3060}
bf4   	int3	# ShouldNotReachHere
bf4
bf9   B131: #	N1880 &lt;- B84  Freq: 4.045e-09
bf9   	movq    [rsp + #0], RCX	# spill
bfd   	movsd   [rsp + #8], XMM0	# spill
c03   	movl    [rsp + #16], R8	# spill
c08   	movsd   [rsp + #24], XMM2	# spill
c0e   	movl    [rsp + #32], R10	# spill
c13   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #32 STK[0]=RBP STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #24 L[4]=rsp + #32
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{[0]=Oop [8]=Oop [24]=Oop off=3096}
c18   	int3	# ShouldNotReachHere
c18
c1d   B132: #	N1880 &lt;- B85  Freq: 4.045e-09
c1d   	movq    RBP, RCX	# spill
c20   	movsd   [rsp + #0], XMM0	# spill
c25   	movl    [rsp + #8], R8	# spill
c2a   	movsd   [rsp + #16], XMM2	# spill
c30   	movl    [rsp + #24], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
c37   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=3132}
c3c   	int3	# ShouldNotReachHere
c3c
c41   B133: #	N1880 &lt;- B90  Freq: 2.78253e-11
c41   	movl    RBP, RDI	# spill
c43   	movsd   [rsp + #8], XMM0	# spill
c49   	movsd   [rsp + #16], XMM1	# spill
c4f   	call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP STK[1]=rsp + #8 STK[2]=rsp + #0 STK[3]=rsp + #16
        # OopMap{rbp=NarrowOop [8]=Oop [16]=Oop off=3156}
c54   	int3	# ShouldNotReachHere
c54
c59   B134: #	N1880 &lt;- B94  Freq: 2.78252e-11
c59   	movq    [rsp + #0], R10	# spill
c5d   	movl    [rsp + #8], R9	# spill
c62   	movl    RSI, #-28	# int
c67   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=_ STK[0]=RBP STK[1]=#0 STK[2]=rsp + #8
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [0]=Oop off=3180}
c6c   	int3	# ShouldNotReachHere
c6c
c71   B135: #	N1880 &lt;- B92  Freq: 1.32681e-11
c71   	movq    RBP, R10	# spill
c74   	movl    [rsp + #4], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
c7b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:5  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=_ STK[0]=rsp + #4 STK[1]=#1
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop off=3200}
c80   	int3	# ShouldNotReachHere
c80
c85   B136: #	N1880 &lt;- B96  Freq: 2.56278e-12
c85   	movdl   RBP, XMM5	# spill
c89   	movsd   [rsp + #0], XMM0	# spill
c8e   	movl    [rsp + #8], R8	# spill
c93   	movsd   [rsp + #16], XMM2	# spill
c99   	movl    RSI, #-58	# int
      	nop 	# 1 bytes pad for loops and calls
c9f   	call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #8 STK[3]=rsp + #16
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [0]=Oop [16]=Oop off=3236}
ca4   	int3	# ShouldNotReachHere
ca4
ca9   B137: #	N1880 &lt;- B99  Freq: 2.56278e-12
ca9   	movq    [rsp + #0], R10	# spill
cad   	movl    [rsp + #8], RCX	# spill
      	nop 	# 2 bytes pad for loops and calls
cb3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=_ STK[0]=RBP STK[1]=#0 STK[2]=rsp + #8
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=NarrowOop [0]=Oop off=3256}
cb8   	int3	# ShouldNotReachHere
cb8
cbd   B138: #	N1880 &lt;- B97  Freq: 1.22203e-12
cbd   	movq    [rsp + #0], R10	# spill
cc1   	movl    [rsp + #8], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
cc7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:5  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ STK[0]=RBP STK[1]=#1
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{[0]=Oop off=3276}
ccc   	int3	# ShouldNotReachHere
ccc
cd1   B139: #	N1880 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
cd3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=3288}
cd8   	int3	# ShouldNotReachHere
cd8
cdd   B140: #	N1880 &lt;- B33  Freq: 9.33551e-08
cdd   	movdq   RBP, XMM0	# spill
ce2   	movsd   [rsp + #8], XMM1	# spill
ce8   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
cef   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=3316}
cf4   	int3	# ShouldNotReachHere
cf4
cf9   B141: #	N1880 &lt;- B35  Freq: 9.33268e-08
cf9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
cff   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3332}
d04   	int3	# ShouldNotReachHere
d04
d09   B142: #	N1880 &lt;- B37  Freq: 9.33266e-08
d09   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
d0f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=rsp + #0
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3348}
d14   	int3	# ShouldNotReachHere
d14
d19   B143: #	N1880 &lt;- B40  Freq: 9.33264e-08
d19   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
d1f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3364}
d24   	int3	# ShouldNotReachHere
d24
d29   B144: #	N1880 &lt;- B48  Freq: 9.33259e-08
d29   	movdq   RBP, XMM0	# spill
d2e   	movl    [rsp + #0], RAX	# spill
d31   	movsd   [rsp + #8], XMM2	# spill
d37   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop off=3388}
d3c   	int3	# ShouldNotReachHere
d3c
d41   B145: #	N1880 &lt;- B50  Freq: 9.33257e-08
d41   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
d47   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3404}
d4c   	int3	# ShouldNotReachHere
d4c
d51   B146: #	N1880 &lt;- B88  Freq: 8.48295e-08
d51   	# exception oop is in rax; no code emitted
d51   	movq    RSI, RAX	# spill
d54   	addq    rsp, 80	# Destroy frame
	popq   rbp

d59   	jmp     rethrow_stub
d59
d5e   B147: #	N1880 &lt;- B75  Freq: 8.59826e-09
d5e   	movdq   RBP, XMM0	# spill
d63   	movl    [rsp + #0], R8	# spill
d67   	movsd   [rsp + #8], XMM2	# spill
      	nop 	# 2 bytes pad for loops and calls
d6f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop off=3444}
d74   	int3	# ShouldNotReachHere
d74
d79   B148: #	N1880 &lt;- B86  Freq: 8.59561e-09
d79   	movdq   RBP, XMM0	# spill
d7e   	movl    [rsp + #0], RBX	# spill
d81   	movsd   [rsp + #8], XMM2	# spill
d87   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
d8f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{rbp=Oop [8]=Oop off=3476}
d94   	int3	# ShouldNotReachHere
d94
d99   B149: #	N1880 &lt;- B91  Freq: 2.81947e-11
d99   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
d9f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3492}
da4   	int3	# ShouldNotReachHere
da4
da9   B150: #	N1880 &lt;- B93  Freq: 2.81947e-11
da9   	movl    RBP, R9	# spill
dac   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
db3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3512}
db8   	int3	# ShouldNotReachHere
db8
dbd   B151: #	N1880 &lt;- B98  Freq: 2.59681e-12
dbd   	movl    RBP, RCX	# spill
dbf   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
dc7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=3532}
dcc   	int3	# ShouldNotReachHere
dcc

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='126'>
{method}
 - this oop:          0x00007f46c67c09d8
 - method holder:     &apos;java/lang/Math&apos;
 - constants:         0x00007f46c67bd7e0 constant pool [324] {0x00007f46c67bd7e0} for &apos;java/lang/Math&apos; cache=0x00007f46c67c2240
 - access:            0x81000009  public static 
 - name:              &apos;min&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - intrinsic id:      14 _min
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80f0378: 0xaa000000 i2c: 0x00007f46c9156560 c2i: 0x00007f46c915669c c2iUV: 0x00007f46c915666f
 - compiled entry     0x00007f46c922f1c0
 - code size:         11
 - code start:        0x00007f46c67c09a8
 - code end (excl):   0x00007f46c67c09b3
 - method data:       0x00007f46c68e5258
 - checked ex length: 0
 - linenumber start:  0x00007f46c67c09b3
 - localvar length:   2
 - localvar start:    0x00007f46c67c09be
 - compiled code: nmethod   1600    7       3       java.lang.Math::min (11 bytes)
#
#  int ( int, int )
#
#r018 rsi   : parm 0: int
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B1  Freq: 1
abababab
000   B1: #	N1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	cmpl    RSI, RDX
00e   	movl    RAX, RDX	# spill
010   	cmovlle RAX, RSI	# signed, int
013   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

01e   	ret
01e

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='156'>
{method}
 - this oop:          0x00007f46c67eaf38
 - method holder:     &apos;java/util/Arrays&apos;
 - constants:         0x00007f46c67e10d8 constant pool [901]/operands[28] {0x00007f46c67e10d8} for &apos;java/util/Arrays&apos; cache=0x00007f46c67ee7b0
 - access:            0x81000009  public static 
 - name:              &apos;copyOfRange&apos;
 - signature:         &apos;([CII)[C&apos;
 - max stack:         7
 - max locals:        5
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef7a8: 0xbaa00000 i2c: 0x00007f46c9145ca0 c2i: 0x00007f46c9145de0 c2iUV: 0x00007f46c9145db3
 - compiled entry     0x00007f46c9234880
 - code size:         63
 - code start:        0x00007f46c67eaea8
 - code end (excl):   0x00007f46c67eaee7
 - method data:       0x00007f46c694b2e8
 - checked ex length: 0
 - linenumber start:  0x00007f46c67eaee7
 - localvar length:   5
 - localvar start:    0x00007f46c67eaefa
 - compiled code: nmethod   1624   20       3       java.util.Arrays::copyOfRange (63 bytes)
#
#  char[int:&gt;=0]:exact * ( char[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: char[int:&gt;=0]:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B20 B21 B12 B24  Freq: 1
abababab
000   B1: #	B20 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (176 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c   	movq    [rsp + #8], RSI	# spill
011   	movl    [rsp + #0], RDX	# spill
014   	movl    R11, RCX	# spill
017   	subl    R11, RDX	# int
01a   	movslq  R10, R11	# i2l
01d   	salq    R10, #1
020   	testl   R11, R11
023   	jl     B20  P=0.000000 C=14598.000000
023
029   B2: #	B14 B3 &lt;- B1  Freq: 1
029   	addq    R10, #23	# long
02d   	movq    RCX, R10	# spill
030   	shrq    RCX, #3
034   	movq    RDI, RCX	# spill
037   	addq    RDI, #-2	# long
03b   	movq    RSI, precise klass [C: 0x00007f46a400a5a0:Constant:exact *	# ptr
045   	andq    R10, #-8	# long
049   	cmpl    R11, #524288	# unsigned
050   	jnbe,u  B14  P=0.000001 C=-1.000000
050
056   B3: #	B14 B4 &lt;- B2  Freq: 0.999999
056   	# TLS is in R15
056   	movq    RBP, [R15 + #112 (8-bit)]	# ptr
05a   	movq    R8, RBP	# spill
05d   	addq    R8, R10	# ptr
060   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
067   	jnb,u  B14  P=0.000100 C=-1.000000
067
06d   B4: #	B5 &lt;- B3  Freq: 0.999898
06d   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
075   	movq    [R15 + #112 (8-bit)], R8	# ptr
079   	PREFETCHNTA [R8 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
081   	movq    [RBP], 0x0000000000000001	# ptr
089   	PREFETCHNTA [R8 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
091   	movl    [RBP + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f46a400a5a0:Constant:exact *	# compressed klass ptr
098   	PREFETCHNTA [R8 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0a0   	movl    [RBP + #12 (8-bit)], R11	# int
0a0
0a4   B5: #	B21 B6 &lt;- B15 B4  Freq: 1
0a4   	
0a4   	# checkcastPP of RBP
0a4   	movq    RSI, RBP	# spill
0a7   	addq    RSI, #16	# ptr
0ab   	movq    R13, [rsp + #8]	# spill
0b0   	movl    R8, [R13 + #12 (8-bit)]	# range
0b4   	NullCheck R13
0b4
0b4   B6: #	B16 B7 &lt;- B5  Freq: 0.999999
0b4   	movl    R10, R8	# spill
0b7   	subl    R10, [RSP + #0 (32-bit)]	# int
0bb   	cmpl    R10, R11
0be   	movl    R9, R11	# spill
0c1   	cmovll R9, R10	# signed, int
0c5   	movl    R10, [rsp + #0]	# spill
0c9   	addl    R10, R9	# int
0cc   	movl    RBX, [rsp + #0]	# spill
0cf   	testl   RBX, RBX
0d1   	jl     B16  P=0.000001 C=-1.000000
0d1
0d7   B7: #	B16 B8 &lt;- B6  Freq: 0.999997
0d7   	movslq  RDX, R9	# i2l
0da   	cmpl    R8, R10	# unsigned
0dd   	jb,u  B16  P=0.000001 C=-1.000000
0dd
0e3   B8: #	B16 B9 &lt;- B7  Freq: 0.999996
0e3   	movq    R10, RDX	# spill
0e6   	salq    R10, #1
0e9   	addq    R10, #16	# long
0ed   	movq    R8, R10	# spill
0f0   	shrq    R8, #3
0f4   	cmpl    R11, R9	# unsigned
0f7   	jb,us  B16  P=0.000001 C=-1.000000
0f7
0f9   B9: #	B18 B10 &lt;- B8  Freq: 0.999995
0f9   	andq    R10, #-7	# long
0fd   	testl   R9, R9
100   	jle     B18  P=0.000001 C=-1.000000
100
106   B10: #	B13 B11 &lt;- B9  Freq: 0.999994
106   	subq    RCX, R8	# long
109   	cmpl    R9, R11
10c   	jl,s   B13  P=0.001000 C=-1.000000
10c
10e   B11: #	B12 &lt;- B10 B13  Freq: 0.999994
10e   	leaq    RDI, [R13 + #16 + RBX &lt;&lt; #1]	# ptr posidxscaleoff
113   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
120
120   B12: #	N1 &lt;- B11 B19 B17  Freq: 0.999998
120   	MEMBAR-storestore (empty encoding)
120   	movq    RAX, RBP	# spill
123   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

12e   	ret
12e
12f   B13: #	B11 &lt;- B10  Freq: 0.000999994
12f   	movq    RDI, RBP	# spill
132   	addq    RDI, R10	# ptr
135   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
13f   	jmp,s   B11
13f
141   B14: #	B23 B15 &lt;- B2 B3  Freq: 0.00010103
141   	movq    [rsp + #24], RDI	# spill
146   	movq    [rsp + #16], RCX	# spill
14b   	movl    RBP, R11	# spill
14e   	movl    RDX, R11	# spill
      	nop 	# 2 bytes pad for loops and calls
153   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOfRange @ bci:40  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=_ L[3]=RBP L[4]=_
        # OopMap{[8]=Oop off=344}
158
158   B15: #	B5 &lt;- B14  Freq: 0.000101028
        # Block is sole successor of call
158   	movl    R11, RBP	# spill
15b   	movq    RCX, [rsp + #16]	# spill
160   	movq    RDI, [rsp + #24]	# spill
165   	movq    RBP, RAX	# spill
168   	jmp     B5
168
16d   B16: #	B22 B17 &lt;- B6 B7 B8 B18  Freq: 2.99999e-06
16d   	movq    RCX, RDI	# spill
170   	movq    RDI, RSI	# spill
173   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
17d   	movq    RSI, R13	# spill
180   	movl    RDX, RBX	# spill
182   	movq    RCX, RBP	# spill
185   	xorl    R8, R8	# int
      	nop 	# 3 bytes pad for loops and calls
18b   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOfRange @ bci:57  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=RBP
        # OopMap{rbp=Oop off=400}
190
190   B17: #	B12 &lt;- B16  Freq: 2.99993e-06
        # Block is sole successor of call
190   	jmp,s   B12
190
192   B18: #	B16 B19 &lt;- B9  Freq: 9.99995e-07
192   	testl   R9, R9
195   	jl,s   B16  P=0.000001 C=-1.000000
195
197   B19: #	B12 &lt;- B18  Freq: 9.99994e-07
197   	movq    RCX, RDI	# spill
19a   	movq    RDI, RSI	# spill
19d   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
1a7   	
1a7   	jmp     B12
1a7
1ac   B20: #	N1 &lt;- B1  Freq: 4.76837e-07
1ac   	movl    RSI, #-155	# int
1b1   	movq    RBP, [rsp + #8]	# spill
1b6   	movl    [rsp + #4], RCX	# spill
1ba   	movl    [rsp + #12], R11	# spill
1bf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.Arrays::copyOfRange @ bci:5  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #12 L[4]=_ STK[0]=rsp + #12
        # OopMap{rbp=Oop off=452}
1c4   	int3	# ShouldNotReachHere
1c4
1c9   B21: #	N1 &lt;- B5  Freq: 1.01328e-06
1c9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1cf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.Arrays::copyOfRange @ bci:50  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_ STK[4]=#NULL
        # OopMap{off=468}
1d4   	int3	# ShouldNotReachHere
1d4
1d9   B22: #	B24 &lt;- B16  Freq: 2.99999e-11
1d9   	# exception oop is in rax; no code emitted
1d9   	movq    RSI, RAX	# spill
1dc   	jmp,s   B24
1dc
1de   B23: #	B24 &lt;- B14  Freq: 1.0103e-09
1de   	# exception oop is in rax; no code emitted
1de   	movq    RSI, RAX	# spill
1de
1e1   B24: #	N1 &lt;- B23 B22  Freq: 1.0403e-09
1e1   	addq    rsp, 48	# Destroy frame
	popq   rbp

1e6   	jmp     rethrow_stub
1e6

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='164'>
{method}
 - this oop:          0x00007f46c66ab8c0
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f46c66a90e8 constant pool [680] {0x00007f46c66a90e8} for &apos;java/lang/String&apos; cache=0x00007f46c67725e0
 - access:            0x81000001  public 
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;([CII)V&apos;
 - max stack:         6
 - max locals:        4
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80efbe0: 0xbbaa0000 i2c: 0x00007f46c9148ae0 c2i: 0x00007f46c9148c25 c2iUV: 0x00007f46c9148bf8
 - compiled entry     0x00007f46c9236ec0
 - code size:         82
 - code start:        0x00007f46c66ab828
 - code end (excl):   0x00007f46c66ab87a
 - method data:       0x00007f46c694ca18
 - checked ex length: 0
 - linenumber start:  0x00007f46c66ab87a
 - localvar length:   4
 - localvar start:    0x00007f46c66ab88e
 - compiled code: nmethod   1654   23       3       java.lang.String::&lt;init&gt; (82 bytes)
#
#  void ( java/lang/String:NotNull:exact *, char[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx:rdx   : parm 1: char[int:&gt;=0]:exact *
#r010 rcx   : parm 2: int
#r004 r8   : parm 3: int
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N444: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B27 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (296 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movq    R10, RDX	# spill
02f   	movq    [rsp + #0], RSI	# spill
033   	movslq  RDI, R8	# i2l
036   	salq    RDI, #1
039   	addq    RDI, #23	# long
03d   	movq    RDX, RDI	# spill
040   	shrq    RDX, #3
044   	movq    RAX, RDX	# spill
047   	addq    RAX, #-2	# long
04b   	movl    R9, RCX	# spill
04e   	testl   RCX, RCX
050   	jl     B27  P=0.000000 C=14560.000000
050
056   B2: #	B16 B3 &lt;- B1  Freq: 1
056   	andq    RDI, #-8	# long
05a   	# TLS is in R15
05a   	movl    RSI, #-155	# int
05f   	testl   R8, R8
062   	jle     B16  P=0.004258 C=14560.000000
062
068   B3: #	B32 B4 &lt;- B2  Freq: 0.995741
068   	movq    RBX, R10	# spill
06b   	movl    R10, [R10 + #12 (8-bit)]	# range
06f   	NullCheck R10
06f
06f   B4: #	B28 B5 &lt;- B3  Freq: 0.99574
06f   	movl    RBP, R10	# spill
072   	subl    RBP, R8	# int
075   	movl    [rsp + #48], R10	# spill
07a   	subl    R10, RCX	# int
07d   	cmpl    R10, R8
080   	movl    R11, R8	# spill
083   	cmovll R11, R10	# signed, int
087   	movslq  R10, R11	# i2l
08a   	addl    RCX, R11	# int
08d   	movl    [rsp + #52], RCX	# spill
091   	movq    RCX, R10	# spill
094   	salq    RCX, #1
097   	addq    RCX, #16	# long
09b   	movq    [rsp + #56], RCX	# spill
0a0   	shrq    RCX, #3
0a4   	movq    [rsp + #64], RCX	# spill
0a9   	cmpl    R9, RBP
0ac   	jg     B28  P=0.000000 C=14498.000000
0ac
0b2   B5: #	B29 B6 &lt;- B4  Freq: 0.99574
0b2   	testl   R8, R8
0b5   	jl     B29  P=0.000000 C=14638.000000
0b5
0bb   B6: #	B21 B7 &lt;- B5  Freq: 0.995739
0bb   	movq    RBP, [R15 + #112 (8-bit)]	# ptr
0bf   	movq    RCX, RBP	# spill
0c2   	addq    RCX, RDI	# ptr
0c5   	cmpl    R8, #524288	# unsigned
0cc   	jnbe,u  B21  P=0.000001 C=-1.000000
0cc
0d2   B7: #	B21 B8 &lt;- B6  Freq: 0.995738
0d2   	cmpq    RCX, [R15 + #128 (32-bit)]	# raw ptr
0d9   	jnb,u  B21  P=0.000100 C=-1.000000
0d9
0df   B8: #	B9 &lt;- B7  Freq: 0.995639
0df   	movq    [R15 + #112 (8-bit)], RCX	# ptr
0e3   	PREFETCHNTA [RCX + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0ea   	PREFETCHNTA [RCX + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0f1   	PREFETCHNTA [RCX + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0f8   	movq    [RBP], 0x0000000000000001	# ptr
100   	PREFETCHNTA [RCX + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
107   	movl    [RBP + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f46a400a5a0:Constant:exact *	# compressed klass ptr
10e   	movl    [RBP + #12 (8-bit)], R8	# int
10e
112   B9: #	B23 B10 &lt;- B22 B8  Freq: 0.995739
112   	movq    RCX, [rsp + #56]	# spill
117   	andq    RCX, #-7	# long
11b   	
11b   	# checkcastPP of RBP
11b   	subq    RDX, [RSP + #64 (32-bit)]	# long
120   	movq    R13, RBP	# spill
123   	addq    R13, #16	# ptr
127   	movl    RSI, [rsp + #48]	# spill
12b   	cmpl    RSI, [RSP + #52 (32-bit)]	# unsigned
12f   	jb,u  B23  P=0.000001 C=-1.000000
12f
135   B10: #	B23 B11 &lt;- B9  Freq: 0.995738
135   	cmpl    R8, R11	# unsigned
138   	jb,u  B23  P=0.000001 C=-1.000000
138
13e   B11: #	B25 B12 &lt;- B10  Freq: 0.995737
13e   	leaq    RSI, [RBX + #16 + R9 &lt;&lt; #1]	# ptr posidxscaleoff
143   	testl   R11, R11
146   	jle     B25  P=0.000001 C=-1.000000
146
14c   B12: #	B20 B13 &lt;- B11  Freq: 0.995736
14c   	movq    RDI, RBP	# spill
14f   	addq    RDI, RCX	# ptr
152   	cmpl    R11, R8
155   	jl     B20  P=0.001000 C=-1.000000
155
15b   B13: #	B14 &lt;- B12 B20  Freq: 0.995736
15b   	movq    RDI, RSI	# spill
15e   	movq    RSI, R13	# spill
161   	movq    RDX, R10	# spill
164   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
171
171   B14: #	B15 &lt;- B13 B26 B24  Freq: 0.995739
171   	encode_heap_oop_not_null R11,RBP
27c   	MEMBAR-storestore (empty encoding)
27c   	movq    R8, [rsp + #0]	# spill
280   	movq    R10, R8	# ptr -&gt; long
283   	movl    [R8 + #12 (8-bit)], R11	# compressed ptr ! Field: java/lang/String.value
287   	shrq    R10, #9
28b   	movq    R11, 0x00007f46dbf28000	# ptr
295   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
295
299   B15: #	N444 &lt;- B19 B14  Freq: 0.999998
299   	MEMBAR-release ! (empty encoding)
299   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

2a4   	ret
2a4
2a5   B16: #	B30 B17 &lt;- B2  Freq: 0.00425821
2a5   	testl   R8, R8
2a8   	jl     B30  P=0.000000 C=62.000000
2a8
2ae   B17: #	B33 B18 &lt;- B16  Freq: 0.00425821
2ae   	movl    RSI, #-10	# int
2b3   	movl    RBP, [R10 + #12 (8-bit)]	# range
2b7   	NullCheck R10
2b7
2b7   B18: #	B31 B19 &lt;- B17  Freq: 0.00425821
2b7   	cmpl    RCX, RBP
2b9   	jg     B31  P=0.000000 C=62.000000
2b9
2bf   B19: #	B15 &lt;- B18  Freq: 0.00425821
2bf   	movq    R10, [rsp + #0]	# spill
2c3   	movl    [R10 + #12 (8-bit)], narrowoop: char[int:0]&lt;ciTypeArray length=0 type=&lt;ciTypeArrayKlass name=[C ident=807 address=0x00007f46a400a5a0&gt; ident=826 SCAVENGABLE address=0x00007f46980317b0&gt; *	# compressed ptr ! Field: java/lang/String.value
2cb   	movq    R10, R10	# ptr -&gt; long
2cb   	shrq    R10, #9
2cf   	movq    R11, 0x00007f46dbf28000	# ptr
2d9   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
2dd   	jmp,s   B15
2dd
2df   B20: #	B13 &lt;- B12  Freq: 0.000995736
2df   	movq    RCX, RDX	# spill
2e2   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
2ec   	jmp     B13
2ec
2f1   B21: #	B35 B22 &lt;- B6 B7  Freq: 0.000100599
2f1   	movq    [rsp + #40], R10	# spill
2f6   	movl    [rsp + #20], R11	# spill
2fb   	movq    [rsp + #32], RAX	# spill
300   	movq    [rsp + #24], RDX	# spill
305   	movl    [rsp + #16], R8	# spill
30a   	movq    [rsp + #8], RBX	# spill
30f   	movl    RBP, R9	# spill
312   	movl    RDX, R8	# spill
315   	movq    RSI, precise klass [C: 0x00007f46a400a5a0:Constant:exact *	# ptr
31f   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOfRange @ bci:40  L[0]=rsp + #8 L[1]=RBP L[2]=_ L[3]=rsp + #16 L[4]=_
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop off=804}
324
324   B22: #	B9 &lt;- B21  Freq: 0.000100597
        # Block is sole successor of call
324   	movq    RCX, RAX	# spill
327   	movl    R9, RBP	# spill
32a   	movq    RBX, [rsp + #8]	# spill
32f   	movl    R8, [rsp + #16]	# spill
334   	movq    RDX, [rsp + #24]	# spill
339   	movq    RAX, [rsp + #32]	# spill
33e   	movl    R11, [rsp + #20]	# spill
343   	movq    R10, [rsp + #40]	# spill
348   	movq    RBP, RCX	# spill
34b   	jmp     B9
34b
350   B23: #	B34 B24 &lt;- B25 B9 B10  Freq: 1.99148e-06
350   	movq    RCX, RAX	# spill
353   	movq    RDI, R13	# spill
356   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
360   	xorl    R8, R8	# int
363   	movq    RSI, RBX	# spill
366   	movl    RDX, R9	# spill
369   	movq    RCX, RBP	# spill
36c   	movl    R9, R11	# spill
36f   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOfRange @ bci:57  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=RBP
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #0
        # OopMap{rbp=Oop [0]=Oop off=884}
374
374   B24: #	B14 &lt;- B23  Freq: 1.99144e-06
        # Block is sole successor of call
374   	jmp     B14
374
379   B25: #	B23 B26 &lt;- B11  Freq: 9.95737e-07
379   	testl   R11, R11
37c   	jl,s   B23  P=0.000001 C=-1.000000
37c
37e   B26: #	B14 &lt;- B25  Freq: 9.95736e-07
37e   	movq    RCX, RAX	# spill
381   	movq    RDI, R13	# spill
384   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
38e   	
38e   	jmp     B14
38e
393   B27: #	N444 &lt;- B1  Freq: 4.76837e-07
393   	movl    RSI, #-155	# int
398   	movq    RBP, [rsp + #0]	# spill
39c   	movq    [rsp + #0], R10	# spill
3a0   	movl    [rsp + #12], R8	# spill
3a5   	movl    [rsp + #16], RCX	# spill
      	nop 	# 2 bytes pad for loops and calls
3ab   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:5  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #16 L[3]=rsp + #12 STK[0]=rsp + #16
        # OopMap{rbp=Oop [0]=Oop off=944}
3b0   	int3	# ShouldNotReachHere
3b0
3b5   B28: #	N444 &lt;- B4  Freq: 4.74806e-07
3b5   	movq    [rsp + #8], RBX	# spill
3ba   	movl    [rsp + #20], R8	# spill
3bf   	movl    [rsp + #24], R9	# spill
      	nop 	# 3 bytes pad for loops and calls
3c7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:55  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #24 L[3]=rsp + #20 STK[0]=rsp + #24 STK[1]=RBP
        # OopMap{[0]=Oop [8]=Oop off=972}
3cc   	int3	# ShouldNotReachHere
3cc
3d1   B29: #	N444 &lt;- B5  Freq: 4.74806e-07
3d1   	movl    RBP, R9	# spill
3d4   	addl    RBP, R8	# int
3d7   	movq    [rsp + #8], RBX	# spill
3dc   	movl    [rsp + #16], R9	# spill
3e1   	movl    [rsp + #24], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
3e7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.Arrays::copyOfRange @ bci:5  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #24 L[4]=_ STK[0]=rsp + #24
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop off=1004}
3ec   	int3	# ShouldNotReachHere
3ec
3f1   B30: #	N444 &lt;- B16  Freq: 2.03047e-09
3f1   	movq    RBP, [rsp + #0]	# spill
3f5   	movq    [rsp + #0], R10	# spill
3f9   	movl    [rsp + #8], RCX	# spill
3fd   	movl    [rsp + #16], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
403   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:22  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 STK[0]=rsp + #16
        # OopMap{rbp=Oop [0]=Oop off=1032}
408   	int3	# ShouldNotReachHere
408
40d   B31: #	N444 &lt;- B18  Freq: 2.03047e-09
40d   	movl    RSI, #-155	# int
412   	movq    [rsp + #8], R10	# spill
417   	movl    [rsp + #20], R8	# spill
41c   	movl    [rsp + #24], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
423   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:37  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #24 L[3]=rsp + #20 STK[0]=rsp + #24 STK[1]=RBP
        # OopMap{[0]=Oop [8]=Oop off=1064}
428   	int3	# ShouldNotReachHere
428
42d   B32: #	N444 &lt;- B3  Freq: 1.00896e-06
42d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
433   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:52  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1080}
438   	int3	# ShouldNotReachHere
438
43d   B33: #	N444 &lt;- B17  Freq: 4.31476e-09
      	nop 	# 2 bytes pad for loops and calls
43f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1092}
444   	int3	# ShouldNotReachHere
444
449   B34: #	B36 &lt;- B23  Freq: 1.99148e-11
449   	# exception oop is in rax; no code emitted
449   	movq    RSI, RAX	# spill
44c   	jmp,s   B36
44c
44e   B35: #	B36 &lt;- B21  Freq: 1.00599e-09
44e   	# exception oop is in rax; no code emitted
44e   	movq    RSI, RAX	# spill
44e
451   B36: #	N444 &lt;- B35 B34  Freq: 1.02591e-09
451   	addq    rsp, 96	# Destroy frame
	popq   rbp

456   	jmp     rethrow_stub
456

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='161'>
{method}
 - this oop:          0x00007f46c6796080
 - method holder:     &apos;java/util/ArrayList&apos;
 - constants:         0x00007f46c6793fb0 constant pool [411] {0x00007f46c6793fb0} for &apos;java/util/ArrayList&apos; cache=0x00007f46c6797e70
 - access:            0x81000001  public 
 - name:              &apos;add&apos;
 - signature:         &apos;(Ljava/lang/Object;)Z&apos;
 - max stack:         6
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef7f0: 0xbb000000 i2c: 0x00007f46c9145fa0 c2i: 0x00007f46c91460de c2iUV: 0x00007f46c91460b1
 - compiled entry     0x00007f46c9267600
 - code size:         29
 - code start:        0x00007f46c6796040
 - code end (excl):   0x00007f46c679605d
 - method data:       0x00007f46c695bf40
 - checked ex length: 0
 - linenumber start:  0x00007f46c679605d
 - localvar length:   2
 - localvar start:    0x00007f46c6796064
 - compiled code: nmethod   1683  103       3       java.util.ArrayList::add (29 bytes)
#
#  bool ( java/util/ArrayList:NotNull *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/util/ArrayList:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 128 --
#r191 rsp+124: in_preserve
#r190 rsp+120: return address
#r189 rsp+116: in_preserve
#r188 rsp+112: saved fp register
#r187 rsp+108: pad2, stack alignment
#r186 rsp+104: pad2, stack alignment
#r185 rsp+100: Fixed slot 1
#r184 rsp+96: Fixed slot 0
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N398: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (536 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

02c   	movq    [rsp + #8], RDX	# spill
031   	movl    R11, #10	# int
037   	movq    R14, RSI	# spill
03a   	movl    R9, [RSI + #16 (8-bit)]	# int ! Field: java/util/ArrayList.size
03e   	movl    RBP, R9	# spill
041   	incl    RBP	# int
043   	movl    RSI, #-10	# int
048   	cmpl    RBP, #10
04b   	movl    RDI, RBP	# spill
04d   	cmovlle RDI, R11	# signed, int
051   	movl    R10, [R14 + #20 (8-bit)]	# compressed ptr ! Field: java/util/ArrayList.elementData
055   	cmpl    R10, narrowoop: narrowoop: java/lang/Object *[int:0]&lt;ciObjArray length=0 type=&lt;ciObjArrayKlass name=[Ljava/lang/Object; ident=824 address=0x00007f469c172730&gt; ident=827 SCAVENGABLE address=0x00007f469c173c70&gt; *	# compressed ptr
05c   	je,us  B3  P=0.125503 C=14908.000000
05c
05e   B2: #	B3 &lt;- B1  Freq: 0.874497
05e   	movl    RDI, RBP	# spill
05e
060   B3: #	B28 B4 &lt;- B1 B2  Freq: 1
060   	incl    [R14 + #12 (8-bit)]	# int ! Field: java/util/AbstractList.modCount
064   	movl    R8, [R10 + #12 (8-bit)]	# range
068   	NullCheck R10
068
068   B4: #	B9 B5 &lt;- B3  Freq: 0.999999
068   	movl    RDX, RDI	# spill
06a   	subl    RDX, R8	# int
06d   	decode_heap_oop RBX,R10
0f8   	movl    R11, R8	# spill
0fb   	sarl    R11, #1
0fe   	addl    R11, R8	# int
101   	movl    RCX, R11	# spill
104   	subl    RCX, RDI	# int
106   	testl   RDX, RDX
108   	jg     B9  P=0.197679 C=14908.000000
108
10e   B5: #	B6 &lt;- B4  Freq: 0.80232
10e   	movl    [R14 + #16 (8-bit)], RBP	# int ! Field: java/util/ArrayList.size
10e
112   B6: #	B23 B7 &lt;- B19 B5  Freq: 0.999999
112   	movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
116   	movl    RAX, #1	# int
11b   	movl    R8, [RBX + #12 (8-bit)]	# range
11f   	movl    RSI, #-28	# int
124   	cmpl    R9, R8	# unsigned
127   	jnb,u  B23  P=0.000001 C=-1.000000
127
12d   B7: #	B24 B8 &lt;- B6  Freq: 0.999998
12d   	movl    RSI, #-42	# int
132   	leaq    R11, [RBX + #16 + R9 &lt;&lt; #2]	# ptr posidxscaleoff
137   	cmpl    R10, narrowklass: precise klass [Ljava/lang/Object;: 0x00007f469c172730:Constant:exact *	# compressed klass ptr
13e   	jne,u  B24  P=0.000001 C=-1.000000
13e
144   B8: #	N398 &lt;- B7  Freq: 0.999997
144   	movq    R10, [rsp + #8]	# spill
149   	encode_heap_oop R10,R10
1d1   	movq    R8, R11	# ptr -&gt; long
1d4   	movl    [R11], R10	# compressed ptr
1d7   	shrq    R8, #9
1db   	movq    R10, 0x00007f46dbf28000	# ptr
1e5   	movb    [R10 + R8], R12	# short/char (R12_heapbase==0)
1e9   	addq    rsp, 112	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

1f4   	ret
1f4
1f5   B9: #	B11 B10 &lt;- B4  Freq: 0.197679
1f5   	testl   RCX, RCX
1f7   	jge,s   B11  P=0.359464 C=2985.000000
1f7
1f9   B10: #	B11 &lt;- B9  Freq: 0.12662
1f9   	movl    R11, RDI	# spill
1f9
1fc   B11: #	B27 B12 &lt;- B10 B9  Freq: 0.197679
1fc   	movl    RBP, R11	# spill
1ff   	addl    RBP, #-2147483639	# int
205   	movl    RCX, [R10 + #8 (8-bit)]	# compressed klass ptr
209   	movslq  R9, R11	# i2l
20c   	movl    RSI, #-155	# int
211   	salq    R9, #2
215   	# TLS is in R15
215   	cmpl    R8, R11
218   	movl    RBX, R11	# spill
21b   	cmovll RBX, R8	# signed, int
21f   	movslq  R8, RBX	# i2l
222   	movq    RAX, R8	# spill
225   	salq    RAX, #2
229   	addq    RAX, #16	# long
22d   	movq    RDX, RAX	# spill
230   	andq    RDX, #-5	# long
234   	testl   RBP, RBP
236   	jg     B27  P=0.000000 C=2985.000000
236
23c   B12: #	B26 B13 &lt;- B11  Freq: 0.197679
23c   	addq    R9, #23	# long
240   	decode_klass_not_null RSI,RCX
24e   	movq    R13, [RSI + #112 (8-bit)]	# ptr
252   	testl   R11, R11
255   	jl     B26  P=0.000001 C=-1.000000
255
25b   B13: #	B21 B14 &lt;- B12  Freq: 0.197679
25b   	movq    [rsp + #80], RDX	# spill
260   	movq    [rsp + #72], RAX	# spill
265   	movl    [rsp + #20], RBX	# spill
269   	movq    RAX, R9	# spill
26c   	shrq    RAX, #3
270   	andq    R9, #-8	# long
274   	movq    RBX, [R15 + #112 (8-bit)]	# ptr
278   	movq    RDI, RAX	# spill
27b   	addq    RDI, #-2	# long
27f   	decode_heap_oop_not_null RBP,R10
282   	leaq    RDX, [R10 + #16 (8-bit)]	# ptr off8narrow
286   	movq    R10, RBX	# spill
289   	addq    R10, R9	# ptr
28c   	cmpl    R11, #262144	# unsigned
293   	jnbe,u  B21  P=0.000001 C=-1.000000
293
299   B14: #	B21 B15 &lt;- B13  Freq: 0.197678
299   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
2a0   	jnb,u  B21  P=0.000100 C=-1.000000
2a0
2a6   B15: #	B16 &lt;- B14  Freq: 0.197659
2a6   	movq    [R15 + #112 (8-bit)], R10	# ptr
2aa   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
2b2   	PREFETCHNTA [R10 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
2ba   	PREFETCHNTA [R10 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
2c2   	PREFETCHNTA [R10 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
2ca   	movq    [RBX], 0x0000000000000001	# ptr
2d1   	movl    [RBX + #8 (8-bit)], RCX	# compressed klass ptr
2d4   	movl    [RBX + #12 (8-bit)], R11	# int
2d4
2d8   B16: #	B25 B17 &lt;- B22 B15  Freq: 0.197679
2d8   	
2d8   	# checkcastPP of RBX
2d8   	movq    RSI, RBX	# spill
2db   	addq    RSI, #16	# ptr
2df   	encode_heap_oop_not_null RBP,RBX
3ea   	movl    R10, [rsp + #20]	# spill
3ef   	testl   R10, R10
3f2   	je     B25  P=0.000001 C=-1.000000
3f2
3f8   B17: #	B20 B18 &lt;- B16  Freq: 0.197678
3f8   	movq    RDI, RBX	# spill
3fb   	movq    R9, [rsp + #80]	# spill
400   	addq    RDI, R9	# ptr
403   	cmpl    R10, R11
406   	jl,s   B20  P=0.001000 C=-1.000000
406
408   B18: #	B19 &lt;- B17 B20  Freq: 0.197678
408   	movq    RDI, RDX	# spill
40b   	movq    RDX, R8	# spill
40e   	call_leaf_nofp,runtime  arrayof_jint_disjoint_arraycopy
        No JVM State Info
        # 
41b
41b   B19: #	B6 &lt;- B18 B25  Freq: 0.197679
41b   	MEMBAR-storestore (empty encoding)
41b   	movq    R10, R14	# ptr -&gt; long
41e   	movl    [R14 + #20 (8-bit)], RBP	# compressed ptr ! Field: java/util/ArrayList.elementData
422   	movl    R9, [R14 + #16 (8-bit)]	# int ! Field: java/util/ArrayList.size
426   	shrq    R10, #9
42a   	movl    R11, R9	# spill
42d   	incl    R11	# int
430   	movq    R8, 0x00007f46dbf28000	# ptr
43a   	movb    [R8 + R10], R12	# short/char (R12_heapbase==0)
43e   	movl    [R14 + #16 (8-bit)], R11	# int ! Field: java/util/ArrayList.size
442   	jmp     B6
442
447   B20: #	B18 &lt;- B17  Freq: 0.000197678
447   	movq    R10, [rsp + #72]	# spill
44c   	shrq    R10, #3
450   	subq    RAX, R10	# long
453   	movq    RCX, RAX	# spill
456   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
460   	jmp,s   B18
460
462   B21: #	B29 B22 &lt;- B13 B14  Freq: 1.99714e-05
462   	movq    [rsp + #48], RDX	# spill
467   	movq    [rsp + #40], RDI	# spill
46c   	movq    [rsp + #32], RAX	# spill
471   	movq    [rsp + #24], R8	# spill
476   	movl    [rsp + #16], R11	# spill
47b   	movq    [rsp + #0], R14	# spill
47f   	movl    RDX, R11	# spill
482   	movq    [rsp + #64], R13	# spill
487   	call,static  wrapper for: _new_array_Java
        # java.util.Arrays::copyOf @ bci:6  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #16 STK[2]=rsp + #64
        # java.util.ArrayList::grow @ bci:38  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #0
        # java.util.ArrayList::ensureExplicitCapacity @ bci:22  L[0]=_ L[1]=_
        # java.util.ArrayList::ensureCapacityInternal @ bci:19  L[0]=_ L[1]=_
        # java.util.ArrayList::add @ bci:7  L[0]=rsp + #0 L[1]=rsp + #8
        # OopMap{rbp=Oop [0]=Oop [8]=Oop [48]=Derived_oop_rbp [64]=Oop off=1164}
48c
48c   B22: #	B16 &lt;- B21  Freq: 1.9971e-05
        # Block is sole successor of call
48c   	movq    R14, [rsp + #0]	# spill
490   	movq    RBX, RAX	# spill
493   	movl    R11, [rsp + #16]	# spill
498   	movq    R8, [rsp + #24]	# spill
49d   	movq    RAX, [rsp + #32]	# spill
4a2   	movq    RDI, [rsp + #40]	# spill
4a7   	movq    RDX, [rsp + #48]	# spill
4ac   	jmp     B16
4ac
4b1   B23: #	N398 &lt;- B6  Freq: 1.01328e-06
4b1   	movl    RBP, R9	# spill
4b4   	movq    R10, [rsp + #8]	# spill
4b9   	movq    [rsp + #0], R10	# spill
4bd   	movq    [rsp + #8], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
4c3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.ArrayList::add @ bci:26  L[0]=_ L[1]=_ STK[0]=rsp + #8 STK[1]=RBP STK[2]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop off=1224}
4c8   	int3	# ShouldNotReachHere
4c8
4cd   B24: #	N398 &lt;- B7  Freq: 9.99998e-07
4cd   	movl    RBP, R9	# spill
4d0   	movq    R10, [rsp + #8]	# spill
4d5   	movq    [rsp + #0], R10	# spill
4d9   	movq    [rsp + #8], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
4df   	call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.ArrayList::add @ bci:26  L[0]=_ L[1]=_ STK[0]=rsp + #8 STK[1]=RBP STK[2]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop off=1252}
4e4   	int3	# ShouldNotReachHere
4e4
4e9   B25: #	B19 &lt;- B16  Freq: 2.00304e-07
4e9   	movq    RCX, RDI	# spill
4ec   	movq    RDI, RSI	# spill
4ef   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
4f9   	
4f9   	jmp     B19
4f9
4fe   B26: #	N398 &lt;- B12  Freq: 1.97679e-07
4fe   	movq    RBP, R14	# spill
501   	movq    R8, [rsp + #8]	# spill
506   	movq    [rsp + #0], R8	# spill
50a   	movl    [rsp + #16], R10	# spill
50f   	movl    RSI, #-50	# int
514   	movl    [rsp + #20], R11	# spill
519   	movq    [rsp + #24], R13	# spill
      	nop 	# 1 bytes pad for loops and calls
51f   	call,static  wrapper for: uncommon_trap(reason=&apos;intrinsic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.Arrays::copyOf @ bci:6  L[0]=_ L[1]=_ STK[0]=rsp + #16 STK[1]=rsp + #20 STK[2]=rsp + #24
        # java.util.ArrayList::grow @ bci:38  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP
        # java.util.ArrayList::ensureExplicitCapacity @ bci:22  L[0]=_ L[1]=_
        # java.util.ArrayList::ensureCapacityInternal @ bci:19  L[0]=_ L[1]=_
        # java.util.ArrayList::add @ bci:7  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [24]=Oop off=1316}
524   	int3	# ShouldNotReachHere
524
529   B27: #	N398 &lt;- B11  Freq: 9.42606e-08
529   	movq    [rsp + #16], R14	# spill
52e   	movl    [rsp + #24], RDI	# spill
532   	movl    [rsp + #28], R11	# spill
537   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.ArrayList::grow @ bci:24  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=_ L[3]=rsp + #28 STK[0]=RBP
        # java.util.ArrayList::ensureExplicitCapacity @ bci:22  L[0]=_ L[1]=_
        # java.util.ArrayList::ensureCapacityInternal @ bci:19  L[0]=_ L[1]=_
        # java.util.ArrayList::add @ bci:7  L[0]=rsp + #16 L[1]=rsp + #8
        # OopMap{[8]=Oop [16]=Oop off=1340}
53c   	int3	# ShouldNotReachHere
53c
541   B28: #	N398 &lt;- B3  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
543   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.ArrayList::ensureExplicitCapacity @ bci:15  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.ArrayList::ensureCapacityInternal @ bci:19  L[0]=_ L[1]=_
        # java.util.ArrayList::add @ bci:7  L[0]=_ L[1]=_
        # OopMap{off=1352}
548   	int3	# ShouldNotReachHere
548
54d   B29: #	N398 &lt;- B21  Freq: 1.99714e-10
54d   	# exception oop is in rax; no code emitted
54d   	movq    RSI, RAX	# spill
550   	addq    rsp, 112	# Destroy frame
	popq   rbp

555   	jmp     rethrow_stub
555

</opto_assembly>
<writer thread='139941923202816'/>
<opto_assembly compile_id='181'>
{method}
 - this oop:          0x00007f46c6a12d78
 - method holder:     &apos;java/util/regex/Matcher&apos;
 - constants:         0x00007f46c6a0f6e8 constant pool [380] {0x00007f46c6a0f6e8} for &apos;java/util/regex/Matcher&apos; cache=0x00007f46c6a132a8
 - access:            0xc1000000  
 - name:              &apos;search&apos;
 - signature:         &apos;(I)Z&apos;
 - max stack:         5
 - max locals:        3
 - size of params:    2
 - method size:       12
 - highest level:     4
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c91469dd
 - code size:         109
 - code start:        0x00007f46c6a12cc0
 - code end (excl):   0x00007f46c6a12d2d
 - method data:       0x00007f46c6a19568
 - checked ex length: 0
 - linenumber start:  0x00007f46c6a12d2d
 - localvar length:   4
 - localvar start:    0x00007f46c6a12d46
#
#  bool ( java/util/regex/Matcher:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/util/regex/Matcher:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 128 --
#r191 rsp+124: in_preserve
#r190 rsp+120: return address
#r189 rsp+116: in_preserve
#r188 rsp+112: saved fp register
#r187 rsp+108: pad2, stack alignment
#r186 rsp+104: pad2, stack alignment
#r185 rsp+100: Fixed slot 1
#r184 rsp+96: Fixed slot 0
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N3749: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B181 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (976 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

02c   	movq    R10, RSI	# spill
02f   	movb    [RSI + #44 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/util/regex/Matcher.hitEnd
033   	movb    [RSI + #45 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: java/util/regex/Matcher.requireEnd
037   	movl    R9, [RSI + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
03b   	decode_heap_oop_not_null R13,R9
03e   	testl   RDX, RDX
040   	jl     B181  P=0.000000 C=13255.000000
040
046   B2: #	B54 B3 &lt;- B1  Freq: 1
046   	movl    [RSI + #28 (8-bit)], RDX	# int ! Field: java/util/regex/Matcher.first
049   	movl    RSI, #-10	# int
04e   	movl    R8, [R10 + #36 (8-bit)]	# int ! Field: java/util/regex/Matcher.oldLast
052   	testl   R8, R8
055   	jl     B54  P=0.132931 C=13255.000000
055
05b   B3: #	B223 B4 &lt;- B2 B54  Freq: 1
05b   	movl    [rsp + #16], R9	# spill
060   	movq    [rsp + #24], R10	# spill
065   	movl    [rsp + #12], RDX	# spill
069   	leaq    R10, [R9 + #16 (8-bit)]	# ptr off8narrow
06d   	movq    [rsp + #0], R10	# spill
071   	movq    R10, [rsp + #24]	# spill
076   	movl    [R10 + #36 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.oldLast
07a   	movl    RBX, [R9 + #12 (8-bit)]	# range
07e   	NullCheck R9
07e
07e   B4: #	B8 B5 &lt;- B3  Freq: 0.999999
07e   	testl   RBX, RBX
080   	jle,s   B8  P=0.047619 C=278355.000000
080
082   B5: #	B173 B6 &lt;- B4  Freq: 0.95238
082   	movslq  RDX, RBX	# i2l
085   	movl    R11, RBX	# spill
088   	decl    R11	# int
08b   	testl  RBX, RBX	# unsigned
08d   	jbe,u  B173  P=0.000001 C=-1.000000
08d
093   B6: #	B173 B7 &lt;- B5  Freq: 0.952379
093   	cmpl    R11, RBX	# unsigned
096   	jnb,u  B173  P=0.000001 C=-1.000000
096
09c   B7: #	B8 &lt;- B6  Freq: 0.952378
09c   	movq    RDI, [rsp + #0]	# spill
0a0   	movl    RSI, #-1	# int
0a5   	call_leaf_nofp,runtime  arrayof_jint_fill
        No JVM State Info
        # 
0b2
0b2   B8: #	B224 B9 &lt;- B7 B4  Freq: 0.999997
0b2   	movq    R10, [rsp + #24]	# spill
0b7   	movl    R10, [R10 + #56 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.text
0bb   	movl    [rsp + #20], R10	# spill
0c0   	movq    R10, [rsp + #24]	# spill
0c5   	movl    [R10 + #24 (8-bit)], R12	# int (R12_heapbase==0) ! Field: java/util/regex/Matcher.acceptMode
0c9   	movl    R8, [R10 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
0cd   	movl    R11, [R10 + #48 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.parentPattern
0d1   	movl    R11, [R11 + #44 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern.root
0d5   	NullCheck R11
0d5
0d5   B9: #	B225 B10 &lt;- B8  Freq: 0.999996
0d5   	decode_heap_oop_not_null R9,R11
0d8   	movl    RSI, #-10	# int
0dd   	movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
0e1   	NullCheck R11
0e1
0e1   B10: #	B56 B11 &lt;- B9  Freq: 0.999995
0e1   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$BnM: 0x00007f469c1bef70:Constant:exact *	# compressed klass ptr
0e8   	jne,u  B56  P=0.067049 C=-1.000000
0e8
0ee   B11: #	B226 B12 &lt;- B10  Freq: 0.932946
0ee   	# checkcastPP of R9
0ee   	movdq   XMM0, R9	# spill
0f3   	movl    RCX, [R9 + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.buffer
0f7   	movl    R10, [RCX + #12 (8-bit)]	# range
0fb   	NullCheck RCX
0fb
0fb   B12: #	B20 &lt;- B11  Freq: 0.932945
0fb   	movdl   XMM10, RBX	# spill
0ff   	movdq   XMM8, R13	# spill
104   	movl    [rsp + #32], R10	# spill
109   	movl    RDI, R10	# spill
10c   	decl    RDI	# int
10e   	addl    R10, #-2	# int
112   	movdl   XMM11, R10	# spill
117   	subl    R8, [RSP + #32 (32-bit)]	# int
11c   	movl    [rsp + #8], R8	# spill
121   	movl    R10, [R9 + #20 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.lastOcc
125   	movdl   XMM2, R10	# spill
12a   	movl    R11, [rsp + #20]	# spill
12f   	decode_heap_oop_not_null R10,R11
132   	movdq   XMM6, R10	# spill
137   	movl    R10, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
13b   	movdl   XMM3, R10	# spill
140   	movl    R10, [R9 + #24 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$BnM.optoSft
144   	movdl   XMM1, R10	# spill
149   	decode_heap_oop_not_null R10,RCX
14c   	movdq   XMM9, R10	# spill
151   	movl    R10, #1	# int
157   	movdl   XMM7, R10	# spill
15c   	jmp,s   B20
      	nop 	# 2 bytes pad for loops and calls

160   B13: #	B37 &lt;- B38  top-of-loop Freq: 5.51685
160   	movl    RDX, R11	# spill
163   	jmp     B37
163
168   B14: #	B15 &lt;- B32  Freq: 3.91267
168   	movl    RDX, R11	# spill
168
16b   B15: #	B219 B16 &lt;- B44 B14 B37  Freq: 7.31626
16b   	andl    R8, #127	# int
16f   	movdl   R10, XMM2	# spill
174   	movl    R10, [R10 + #12 (8-bit)]	# range
178   	NullCheck R10
178
178   B16: #	B159 B17 &lt;- B15  Freq: 7.31625
178   	cmpl    R8, R10	# unsigned
17b   	jnb,u  B159  P=0.000001 C=-1.000000
17b
181   B17: #	B220 B18 &lt;- B16  Freq: 7.31625
181   	movl    RBP, RDX	# spill
183   	movdl   R10, XMM2	# spill
188   	subl    RBP, [R10 + #16 + R8 &lt;&lt; #2]	# int
18d   	incl    RBP	# int
18f   	movdl   R10, XMM1	# spill
194   	movl    R11, [R10 + #12 (8-bit)]	# range
198   	NullCheck R10
198
198   B18: #	B160 B19 &lt;- B17  Freq: 7.31624
198   	cmpl    RDX, R11	# unsigned
19b   	jnb,u  B160  P=0.000001 C=-1.000000
19b
1a1   B19: #	B20 &lt;- B18  Freq: 7.31623
1a1   	movl    R10, [R10 + #16 + RAX]	# int
1a6   	cmpl    RBP, R10
1a9   	cmovll RBP, R10	# signed, int
1ad   	movl    R10, [rsp + #12]	# spill
1b2   	addl    R10, RBP	# int
1b5   	movl    [rsp + #12], R10	# spill
1ba   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.regex.Pattern$BnM::match @ bci:87  L[0]=XMM0 L[1]=rsp + #24 L[2]=R10 L[3]=XMM5 L[4]=XMM9 L[5]=rsp + #32 L[6]=rsp + #8 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{rcx=NarrowOop xmm0=Oop xmm1=NarrowOop xmm2=NarrowOop xmm3=NarrowOop xmm5=Oop xmm6=Oop xmm8=Oop xmm9=Oop [0]=Derived_oop_xmm8 [16]=NarrowOop [20]=NarrowOop [24]=Oop off=442}
1c0
1c0   B20: #	B55 B21 &lt;- B12 B19 	Loop: B20-B19  Freq: 8.24918
1c0   	movl    R11, [rsp + #12]	# spill
1c5   	negl    R11	# int
1c8   	movl    R9, [rsp + #12]	# spill
1cd   	incl    R9	# int
1d0   	movl    R10, R9	# spill
1d3   	sarl    R10, #31
1d7   	movl    R8, R11	# spill
1da   	sarl    R8, #31
1de   	andl    R8, R11	# int
1e1   	addl    R8, #2147483647	# int
1e8   	movl    RBX, [rsp + #12]	# spill
1ec   	cmpl    RBX, [RSP + #8 (32-bit)]
1f0   	jg     B55  P=0.013744 C=63226.000000
1f0
1f6   B21: #	B47 B22 &lt;- B20  Freq: 8.1358
1f6   	movl    R11, [rsp + #12]	# spill
1fb   	addl    R11, [RSP + #32 (32-bit)]	# int
200   	movdl   XMM4, R11	# spill
205   	testl   RDI, RDI
207   	jl     B47  P=0.072467 C=157036.000000
207
20d   B22: #	B158 B23 &lt;- B21  Freq: 7.54622
20d   	andl    R10, R9	# int
210   	movl    R9, [rsp + #20]	# spill
215   	movl    R11, [R9 + #8 (8-bit)]	# compressed klass ptr
219   	NullCheck R9
219
219   B23: #	B158 B24 &lt;- B22  Freq: 7.54621
219   	cmpl    R11, narrowklass: precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# compressed klass ptr
220   	jne,u  B158  P=0.000001 C=-1.000000
220
226   B24: #	B158 B25 &lt;- B23  Freq: 7.5462
226   	movdq   R11, XMM6	# spill
22b   	# checkcastPP of R11
22b   	movdq   XMM5, R11	# spill
230   	movl    R9, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
234   	movl    RBX, #-2147483647	# int
239   	subl    RBX, R10	# int
23c   	movl    RSI, [R9 + #12 (8-bit)]	# range
240   	NullCheck R9
240
240   B25: #	B158 B26 &lt;- B24  Freq: 7.54619
240   	movl    R11, RSI	# spill
243   	subl    R11, [RSP + #12 (32-bit)]	# int
248   	decl    R11	# int
24b   	cmpl    R8, R11
24e   	cmovlgt R8, R11	# min
252   	movdl   R10, XMM11	# spill
257   	cmpl    R10, R8
25a   	cmovlgt R10, R8	# min
25e   	movl    R8, [rsp + #12]	# spill
263   	cmpl    R8, RSI	# unsigned
266   	jnb,u  B158  P=0.000001 C=-1.000000
266
26c   B26: #	B158 B27 &lt;- B25  Freq: 7.54619
26c   	movl    R8, #-1	# int
272   	subl    R8, [RSP + #12 (32-bit)]	# int
277   	movdl   R11, XMM4	# spill
27c   	decl    R11	# int
27f   	cmpl    RBX, R8
282   	cmovllt RBX, R8	# max
286   	cmpl    R11, RSI	# unsigned
289   	jnb,u  B158  P=0.000001 C=-1.000000
289
28f   B27: #	B158 B28 &lt;- B26  Freq: 7.54618
28f   	movl    R11, [rsp + #32]	# spill
294   	testl  R11, R11	# unsigned
297   	jbe,u  B158  P=0.000001 C=-1.000000
297
29d   B28: #	B158 B29 &lt;- B27  Freq: 7.54617
29d   	cmpl    RDI, R11	# unsigned
2a0   	jnb,u  B158  P=0.000001 C=-1.000000
2a0
2a6   B29: #	B30 &lt;- B28  Freq: 7.54616
2a6   	movl    R11, #-1	# int
2ac   	cmpl    R10, R11
2af   	cmovllt R10, R11	# max
2b3   	movl    R11, RDI	# spill
2b3
2b6   B30: #	B161 B31 &lt;- B29 B34 	Loop: B30-B34 inner pre of N2868 Freq: 11.1796
2b6   	movl    RDX, R11	# spill
2b9   	decl    RDX	# int
2bb   	movl    R14, R11	# spill
2be   	addl    R14, [RSP + #12 (32-bit)]	# int
2c3   	movslq  RAX, R11	# i2l
2c6   	testl   R14, R14
2c9   	jl     B161  P=0.000000 C=5790.000000
2c9
2cf   B31: #	B162 B32 &lt;- B30  Freq: 11.1796
2cf   	salq    RAX, #2
2d3   	movl    RBP, [RCX + #16 + RAX]	# int
2d7   	cmpl    R14, RSI
2da   	jge     B162  P=0.000000 C=5790.000000
2da
2e0   B32: #	B14 B33 &lt;- B31  Freq: 11.1796
2e0   	movzwl  R8, [R9 + #16 + R14 &lt;&lt; #1]	# ushort/char
2e6   	cmpl    R8, RBP
2e9   	jne     B14  P=0.349982 C=145656.000000
2e9
2ef   B33: #	B35 B34 &lt;- B32  Freq: 7.26696
2ef   	movl    R11, #-1	# int
2f5   	cmpl    RBX, R11
2f8   	movl    R13, RBX	# spill
2fb   	cmovllt R13, R11	# max
2ff   	cmpl    RDX, R10
302   	jle,s   B35	# loop end  P=0.500000 C=94679.000000
302
304   B34: #	B30 &lt;- B33  Freq: 3.63348
304   	movl    R11, RDX	# spill
307   	jmp,s   B30
307
309   B35: #	B168 B36 &lt;- B33  Freq: 3.63348
309   	cmpl    RDX, R13
30c   	jle     B168  P=0.000001 C=-1.000000
30c
312   B36: #	B37 &lt;- B35  Freq: 3.63348
312   	# castII of RDX
312
312   B37: #	B15 B38 &lt;- B36 B13 	Loop: B37-B13 inner main of N833 Freq: 9.15032
312   	movl    R8, RDX	# spill
315   	addl    R8, [RSP + #12 (32-bit)]	# int
31a   	movl    R11, RDX	# spill
31d   	decl    R11	# int
320   	movslq  RAX, RDX	# i2l
323   	movzwl  R8, [R9 + #16 + R8 &lt;&lt; #1]	# ushort/char
329   	salq    RAX, #2
32d   	movl    R10, [RCX + #16 + RAX]	# int
332   	cmpl    R8, R10
335   	jne     B15  P=0.349982 C=145656.000000
335
33b   B38: #	B13 B39 &lt;- B37  Freq: 5.94787
33b   	cmpl    R11, R13
33e   	jg     B13	# loop end  P=0.927533 C=94679.000000
33e
344   B39: #	B47 B40 &lt;- B168 B38  Freq: 0.431031
344   	cmpl    R11, #-1
348   	jle,s   B47  P=0.100000 C=-1.000000
348
34a   B40: #	B41 &lt;- B39  Freq: 0.387928
34a   	# castII of R11
34a
34a   B41: #	B161 B42 &lt;- B40 B46 	Loop: B41-B46 inner post of N2868 Freq: 0.574715
34a   	movl    R14, R11	# spill
34d   	addl    R14, [RSP + #12 (32-bit)]	# int
352   	movl    R10, R11	# spill
355   	decl    R10	# int
358   	movslq  RAX, R11	# i2l
35b   	testl   R14, R14
35e   	jl     B161  P=0.000000 C=5790.000000
35e
364   B42: #	B162 B43 &lt;- B41  Freq: 0.574715
364   	movzwl  R8, [R9 + #16 + R14 &lt;&lt; #1]	# ushort/char
36a   	salq    RAX, #2
36e   	cmpl    R14, RSI
371   	jge     B162  P=0.000000 C=5790.000000
371
377   B43: #	B45 B44 &lt;- B42  Freq: 0.574715
377   	movl    RDX, [RCX + #16 + RAX]	# int
37b   	cmpl    R8, RDX
37e   	je,s   B45  P=0.650018 C=145656.000000
37e
380   B44: #	B15 &lt;- B43  Freq: 0.20114
380   	movl    RDX, R11	# spill
383   	jmp     B15
383
388   B45: #	B47 B46 &lt;- B43  Freq: 0.373575
388   	cmpl    R10, #-1
38c   	jle,s   B47	# loop end  P=0.500000 C=94679.000000
38c
38e   B46: #	B41 &lt;- B45  Freq: 0.186787
38e   	movl    R11, R10	# spill
391   	jmp,s   B41
391
393   B47: #	B227 B48 &lt;- B39 B21 B45  Freq: 0.819471
393   	movq    R10, [rsp + #24]	# spill
398   	movl    R11, [rsp + #12]	# spill
39d   	movl    [R10 + #28 (8-bit)], R11	# int ! Field: java/util/regex/Matcher.first
3a1   	movl    RSI, #-28	# int
3a6   	movdl   R11, XMM3	# spill
3ab   	movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
3af   	NullCheck R11
3af
3af   B48: #	B179 B49 &lt;- B47  Freq: 0.81947
3af   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f4698008420:Constant:exact *	# compressed klass ptr
3b6   	jne,u  B179  P=0.000001 C=-1.000000
3b6
3bc   B49: #	B180 B50 &lt;- B48  Freq: 0.819469
3bc   	movq    R10, [rsp + #24]	# spill
3c1   	movdl   R11, XMM4	# spill
3c6   	movl    [R10 + #32 (8-bit)], R11	# int ! Field: java/util/regex/Matcher.last
3ca   	movdl   R8, XMM10	# spill
3cf   	cmpl    R8, #1	# unsigned
3d3   	jbe,u  B180  P=0.000001 C=-1.000000
3d3
3d9   B50: #	B51 &lt;- B49  Freq: 0.819469
3d9   	movq    R8, [rsp + #0]	# spill
3dd   	movl    RCX, [rsp + #12]	# spill
3e1   	movl    [R8], RCX	# int
3e4   	movl    R9, [rsp + #16]	# spill
3e9   	movl    [R9 + #20 (8-bit)], R11	# int
3ed   	movl    [R8], RCX	# int
3f0   	movl    [R9 + #20 (8-bit)], R11	# int
3f4   	movdl   R11, XMM7	# spill
3f4
3f9   B51: #	B53 B52 &lt;- B50 B55 B149 B157 B148  Freq: 0.999876
3f9   	movl    R8, [R10 + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
3fd   	testl   R11, R11
400   	je,s   B53  P=0.133193 C=13259.000000
400
402   B52: #	N3749 &lt;- B53 B51  Freq: 0.999876
402   	movl    [R10 + #36 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.oldLast
406   	movl    RAX, R11	# spill
409   	addq    rsp, 112	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

414   	ret
414
415   B53: #	B52 &lt;- B51  Freq: 0.133176
415   	movl    [R10 + #28 (8-bit)], #-1	# int ! Field: java/util/regex/Matcher.first
41d   	jmp,s   B52
41d
41f   B54: #	B3 &lt;- B2  Freq: 0.132931
41f   	movl    R8, RDX	# spill
422   	jmp     B3
422
427   B55: #	B51 &lt;- B20  Freq: 0.11338
427   	movq    R10, [rsp + #24]	# spill
42c   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
431   	xorl    R11, R11	# int
434   	jmp,s   B51
434
436   B56: #	B200 B57 &lt;- B10  Freq: 0.0670484
436   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Start: 0x00007f469c1bf040:Constant:exact *	# compressed klass ptr
43d   	jne,u  B200  P=0.000001 C=-1.000000
43d
443   B57: #	B149 B58 &lt;- B56  Freq: 0.0670484
443   	movq    R10, R9	# spill
446   	# checkcastPP of R10
446   	movq    [rsp + #0], R10	# spill
44a   	movl    R10, R8	# spill
44d   	movq    R11, [rsp + #0]	# spill
451   	subl    R10, [R11 + #16 (8-bit)]	# int
455   	movl    [rsp + #8], R10	# spill
45a   	movl    R11, [rsp + #12]	# spill
45f   	cmpl    R11, R10
462   	jg     B149  P=0.043939 C=660.000000
462
468   B58: #	B201 B59 &lt;- B57  Freq: 0.0641023
468   	cmpl    R10, #2147483646
46f   	jg     B201  P=0.000001 C=-1.000000
46f
475   B59: #	B77 &lt;- B58  Freq: 0.0641022
475   	movl    R11, R10	# spill
478   	incl    R11	# int
47b   	movl    [rsp + #32], R11	# spill
480   	movl    R10, [rsp + #20]	# spill
485   	decode_heap_oop_not_null R10,R10
485   	movq    [rsp + #40], R10	# spill
48a   	movl    R11, [rsp + #20]	# spill
48f   	decode_heap_oop_not_null R10,R11
492   	movq    [rsp + #48], R10	# spill
497   	movl    R10, [rsp + #12]	# spill
49c   	movl    [rsp + #68], R10	# spill
4a1   	movl    R11, #1	# int
4a7   	xorl    R10, R10	# int
4aa   	xorl    RCX, RCX	# int
4ac   	movl    [rsp + #72], R11	# spill
4b1   	movl    [rsp + #76], R10	# spill
4b6   	movdl   XMM6, RCX	# spill
4ba   	jmp     B77
4ba
4bf   B60: #	B234 B61 &lt;- B140 B124 B146  top-of-loop Freq: 0.0134343
4bf   	movl    RSI, #-10	# int
4c4   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
4c8   	NullCheck RBP
4c8
4c8   B61: #	B163 B62 &lt;- B60  Freq: 0.0134343
4c8   	movl    RSI, #-28	# int
4cd   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Dot: 0x00007f4698008350:Constant:exact *	# compressed klass ptr
4d4   	jne,u  B163  P=0.000302 C=-1.000000
4d4
4da   B62: #	B205 B63 &lt;- B61  Freq: 0.0134303
4da   	decode_heap_oop_not_null R10,RBP
4dd   	# checkcastPP of R10
4dd   	movq    RCX, R10	# spill
4e0   	movdl   R10, XMM3	# spill
4e5   	cmpl    R10, R8
4e8   	jge     B205  P=0.000000 C=3390.000000
4e8
4ee   B63: #	B204 B64 &lt;- B62  Freq: 0.0134302
4ee   	testl   R10, R10
4f1   	jl     B204  P=0.000000 C=5790.000000
4f1
4f7   B64: #	B206 B65 &lt;- B63  Freq: 0.0134302
4f7   	cmpl    R10, [RSP + #36 (32-bit)]
4fc   	jge     B206  P=0.000000 C=5790.000000
4fc
502   B65: #	B202 B66 &lt;- B64  Freq: 0.0134302
502   	cmpl    R10, [RSP + #36 (32-bit)]	# unsigned
507   	jnb,u  B202  P=0.000001 C=-1.000000
507
50d   B66: #	B207 B67 &lt;- B65  Freq: 0.0134302
50d   	movzwl  R11, [R14 + #18 + RBX &lt;&lt; #1]	# ushort/char
513   	movl    R8, R11	# spill
516   	movl    RSI, #-155	# int
51b   	cmpl    R11, #55296
522   	jge     B207  P=0.000000 C=9671.000000
522
528   B67: #	B208 B68 &lt;- B66  Freq: 0.0134302
528   	movq    R10, RCX	# spill
52b   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
52f   	movl    RDI, R10	# spill
532   	cmpl    R11, #10
536   	je     B208  P=0.000000 C=3390.000000
536
53c   B68: #	B209 B69 &lt;- B67  Freq: 0.0134302
53c   	decode_heap_oop_not_null R9,RDI
53f   	movl    RBP, R8	# spill
542   	orl     RBP, #1	# int
545   	cmpl    R8, #13
549   	je     B209  P=0.000000 C=3390.000000
549
54f   B69: #	B210 B70 &lt;- B68  Freq: 0.0134302
54f   	cmpl    RBP, #8233
555   	je     B210  P=0.000000 C=3390.000000
555
55b   B70: #	B211 B71 &lt;- B69  Freq: 0.0134302
55b   	movl    R11, R8	# spill
55e   	cmpl    R11, #133
565   	je     B211  P=0.000000 C=3390.000000
565
56b   B71: #	B235 B72 &lt;- B70  Freq: 0.0134302
56b   	movdl   R10, XMM1	# spill
570   	addl    R10, #2	# int
574   	movl    R11, [RDI + #8 (8-bit)]	# compressed klass ptr
578   	NullCheck RDI
578
578   B72: #	B203 B73 &lt;- B71  Freq: 0.0134302
578   	cmpl    R11, narrowklass: precise klass java/util/regex/Pattern$Slice: 0x00007f46980033b0:Constant:exact *	# compressed klass ptr
57f   	jne,u  B203  P=0.000001 C=-1.000000
57f
585   B73: #	B233 B74 &lt;- B72  Freq: 0.0134302
585   	# checkcastPP of R9
585   	movq    RDX, [rsp + #24]	# spill
58a   	movl    RCX, R10	# spill
58d   	movq    R8, R13	# spill
590   	movq    RBP, RDX	# spill
593   	movq    RSI, R9	# spill
      	nop 	# 1 bytes pad for loops and calls
597   	call,static  java.util.regex.Pattern$Slice::match
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #20 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [24]=Oop [40]=Oop [48]=Oop off=1436}
59c
59c   B74: #	B178 B75 &lt;- B73  Freq: 0.0134299
        # Block is sole successor of call
59c   	testl   RAX, RAX
59e   	jne     B178  P=0.000067 C=14946.000000
59e
5a4   B75: #	B148 B76 &lt;- B104 B97 B92 B145 B138 B133 B74  Freq: 1.58313
5a4   	movq    R10, [rsp + #24]	# spill
5a9   	movl    R8, [R10 + #16 (8-bit)]	# int ! Field: java/util/regex/Matcher.to
5ad   	movl    R11, [R10 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
5b1   	movl    [rsp + #16], R11	# spill
5b6   	movl    R10, [rsp + #68]	# spill
5bb   	incl    R10	# int
5be   	movl    [rsp + #68], R10	# spill
5c3   	cmpl    R10, [RSP + #32 (32-bit)]
5c8   	jge     B148	# loop end  P=0.040447 C=14945.000000
5c8
5ce   B76: #	B77 &lt;- B75  Freq: 1.51909
5ce   	movq    R10, [rsp + #24]	# spill
5d3   	movl    R10, [R10 + #28 (8-bit)]	# int ! Field: java/util/regex/Matcher.first
5d7   	movl    [rsp + #12], R10	# spill
5dc   	movq    R10, [rsp + #24]	# spill
5e1   	movl    R11, [R10 + #24 (8-bit)]	# int ! Field: java/util/regex/Matcher.acceptMode
5e5   	movdl   XMM6, R11	# spill
5e5
5ea   B77: #	B221 B78 &lt;- B59 B76 	Loop: B77-B76  Freq: 1.5832
5ea   	movq    R10, [rsp + #0]	# spill
5ee   	movl    RCX, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
5f2   	movl    R11, [rsp + #68]	# spill
5f7   	negl    R11	# int
5fa   	movl    R9, [RCX + #8 (8-bit)]	# compressed klass ptr
5fe   	NullCheck RCX
5fe
5fe   B78: #	B169 B79 &lt;- B77  Freq: 1.5832
5fe   	movl    R10, [rsp + #68]	# spill
603   	sarl    R10, #31
607   	movl    RDX, #1	# int
60c   	subl    RDX, [RSP + #68 (32-bit)]	# int
610   	decode_heap_oop_not_null RBX,RCX
613   	cmpl    R9, narrowklass: precise klass java/util/regex/Pattern$Slice: 0x00007f46980033b0:Constant:exact *	# compressed klass ptr
61a   	jne,u  B169  P=0.000001 C=-1.000000
61a
620   B79: #	B222 B80 &lt;- B78  Freq: 1.58319
620   	# checkcastPP of RBX
620   	movq    RAX, RBX	# spill
623   	movl    R9, [RBX + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$SliceNode.buffer
627   	movl    R13, R9	# spill
62a   	andl    R10, [RSP + #68 (32-bit)]	# int
62f   	movl    R9, [RBX + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
633   	movl    R14, R9	# spill
636   	movl    RCX, #-2147483647	# int
63b   	subl    RCX, R10	# int
63e   	movl    R9, RDX	# spill
641   	sarl    R9, #31
645   	cmpl    R11, RCX
648   	cmovllt R11, RCX	# max
64c   	movl    RBX, R8	# spill
64f   	subl    RBX, [RSP + #68 (32-bit)]	# int
653   	cmpl    R11, RCX
656   	cmovllt R11, RCX	# max
65a   	movl    R10, [R13 + #12 (8-bit)]	# range
65e   	NullCheck R13
65e
65e   B80: #	B107 B81 &lt;- B79  Freq: 1.58319
65e   	movl    [rsp + #36], R10	# spill
663   	movl    R10, [rsp + #68]	# spill
668   	addl    R10, [RSP + #36 (32-bit)]	# int
66d   	movl    [rsp + #56], R10	# spill
672   	cmpl    R11, [RSP + #72 (32-bit)]
677   	movl    R10, [rsp + #72]	# spill
67c   	cmovllt R11, R10	# max
680   	movl    RCX, #-1	# int
685   	subl    RCX, [RSP + #56 (32-bit)]	# int
689   	movl    R10, [rsp + #56]	# spill
68e   	incl    R10	# int
691   	movl    [rsp + #60], R10	# spill
696   	sarl    R10, #31
69a   	andl    R10, [RSP + #60 (32-bit)]	# int
69f   	movl    RSI, #-2147483647	# int
6a4   	subl    RSI, R10	# int
6a7   	cmpl    RCX, RSI
6a9   	cmovllt RCX, RSI	# max
6ac   	cmpl    RCX, RSI
6ae   	cmovllt RCX, RSI	# max
6b1   	movl    R10, [rsp + #36]	# spill
6b6   	testl   R10, R10
6b9   	jle     B107  P=0.076878 C=44031.000000
6b9
6bf   B81: #	B170 B82 &lt;- B80  Freq: 1.46148
6bf   	movl    RDI, R10	# spill
6c2   	decl    RDI	# int
6c4   	andl    R9, RDX	# int
6c7   	testl  R10, R10	# unsigned
6ca   	jbe,u  B170  P=0.000001 C=-1.000000
6ca
6d0   B82: #	B170 B83 &lt;- B81  Freq: 1.46148
6d0   	movl    RSI, [rsp + #56]	# spill
6d4   	decl    RSI	# int
6d6   	cmpl    RDI, R10	# unsigned
6d9   	jnb,u  B170  P=0.000001 C=-1.000000
6d9
6df   B83: #	B170 B84 &lt;- B82  Freq: 1.46148
6df   	addl    R9, #2147483647	# int
6e6   	movl    RDI, [rsp + #20]	# spill
6ea   	movl    R10, [RDI + #8 (8-bit)]	# compressed klass ptr
6ee   	NullCheck RDI
6ee
6ee   B84: #	B170 B85 &lt;- B83  Freq: 1.46148
6ee   	cmpl    R11, [RSP + #36 (32-bit)]
6f3   	movl    RDI, [rsp + #36]	# spill
6f7   	cmovlgt R11, RDI	# min
6fb   	cmpl    R10, narrowklass: precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# compressed klass ptr
702   	jne,u  B170  P=0.000001 C=-1.000000
702
708   B85: #	B170 B86 &lt;- B84  Freq: 1.46147
708   	movq    R10, [rsp + #40]	# spill
70d   	# checkcastPP of R10
70d   	movq    RBP, R10	# spill
710   	movl    RDI, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
714   	movl    R10, [RDI + #12 (8-bit)]	# range
718   	NullCheck RDI
718
718   B86: #	B170 B87 &lt;- B85  Freq: 1.46147
718   	movl    [rsp + #64], R10	# spill
71d   	movl    RDX, R10	# spill
720   	subl    RDX, [RSP + #68 (32-bit)]	# int
724   	movl    R10, [rsp + #68]	# spill
729   	cmpl    R10, [RSP + #64 (32-bit)]	# unsigned
72e   	jnb,u  B170  P=0.000001 C=-1.000000
72e
734   B87: #	B170 B88 &lt;- B86  Freq: 1.46147
734   	cmpl    R9, RDX
737   	cmovlgt R9, RDX	# min
73b   	cmpl    RSI, [RSP + #64 (32-bit)]	# unsigned
73f   	jnb,u  B170  P=0.000001 C=-1.000000
73f
745   B88: #	B89 &lt;- B87  Freq: 1.46147
745   	cmpl    RBX, R9
748   	cmovlgt RBX, R9	# min
74c   	cmpl    RBX, [RSP + #36 (32-bit)]
750   	movl    R10, [rsp + #36]	# spill
755   	cmovlgt RBX, R10	# min
759   	xorl    R9, R9	# int
75c
75c   B89: #	B174 B90 &lt;- B88 B94 	Loop: B89-B94 inner pre of N2853 Freq: 1.95618
75c   	movl    R10, R9	# spill
75f   	incl    R10	# int
762   	movl    RDX, R10	# spill
765   	movl    R10, R9	# spill
768   	addl    R10, [RSP + #68 (32-bit)]	# int
76d   	movdl   XMM0, R10	# spill
772   	cmpl    R10, R8
775   	jge     B174  P=0.000000 C=40646.000000
775
77b   B90: #	B171 B91 &lt;- B89  Freq: 1.95618
77b   	movl    R10, [R13 + #16 + R9 &lt;&lt; #2]	# int
780   	movdl   XMM2, R10	# spill
785   	movdl   R10, XMM0	# spill
78a   	testl   R10, R10
78d   	jl     B171  P=0.000000 C=5790.000000
78d
793   B91: #	B176 B92 &lt;- B90  Freq: 1.95618
793   	cmpl    R10, [RSP + #64 (32-bit)]
798   	jge     B176  P=0.000000 C=5790.000000
798
79e   B92: #	B75 B93 &lt;- B91  Freq: 1.95618
79e   	movzwl  R10, [RDI + #16 + R10 &lt;&lt; #1]	# ushort/char
7a4   	movdl   R9, XMM2	# spill
7a9   	cmpl    R9, R10
7ac   	jne     B75  P=0.494206 C=40645.000000
7ac
7b2   B93: #	B95 B94 &lt;- B92  Freq: 0.989423
7b2   	movl    R10, RDX	# spill
7b5   	cmpl    R10, R11
7b8   	jge,s   B95	# loop end  P=0.500000 C=20558.000000
7b8
7ba   B94: #	B89 &lt;- B93  Freq: 0.494712
7ba   	movl    R9, R10	# spill
7bd   	jmp,s   B89
7bd
7bf   B95: #	B99 B96 &lt;- B93  Freq: 0.494712
7bf   	cmpl    R10, RBX
7c2   	jge,s   B99  P=0.000001 C=-1.000000
7c2
7c4   B96: #	B97 &lt;- B95  Freq: 0.494711
7c4   	# castII of R10
7c4   	movl    RDX, R10	# spill
      	nop 	# 9 bytes pad for loops and calls

7d0   B97: #	B75 B98 &lt;- B96 B98 	Loop: B97-B98 inner main of N374 Freq: 0.928006
7d0   	movl    R10, [R13 + #16 + RDX &lt;&lt; #2]	# int
7d5   	movl    R11, RDX	# spill
7d8   	addl    R11, [RSP + #68 (32-bit)]	# int
7dd   	movzwl  R9, [RDI + #16 + R11 &lt;&lt; #1]	# ushort/char
7e3   	cmpl    R10, R9
7e6   	jne     B75  P=0.494206 C=40645.000000
7e6
7ec   B98: #	B97 B99 &lt;- B97  Freq: 0.46938
7ec   	movl    R10, RDX	# spill
7ef   	incl    R10	# int
7f2   	movl    RDX, R10	# spill
7f5   	cmpl    R10, RBX
7f8   	jl,s   B97	# loop end  P=0.923122 C=20558.000000
7f8
7fa   B99: #	B107 B100 &lt;- B95 B98  Freq: 0.0360853
7fa   	cmpl    RDX, [RSP + #36 (32-bit)]
7fe   	jge,s   B107  P=0.500000 C=-1.000000
7fe
800   B100: #	B101 &lt;- B99  Freq: 0.0180427
800   	movl    R11, RDX	# spill
803   	# castII of R11
803   	movdl   XMM1, R11	# spill
803
808   B101: #	B175 B102 &lt;- B100 B106 	Loop: B101-B106 inner post of N2853 Freq: 0.0241502
808   	movdl   R10, XMM1	# spill
80d   	addl    R10, [RSP + #68 (32-bit)]	# int
812   	movdl   XMM0, R10	# spill
817   	movdl   R11, XMM1	# spill
81c   	incl    R11	# int
81f   	movdl   R9, XMM1	# spill
824   	movl    R10, [R13 + #16 + R9 &lt;&lt; #2]	# int
829   	movdl   XMM2, R10	# spill
82e   	movdl   R9, XMM0	# spill
833   	cmpl    R9, R8
836   	jge     B175  P=0.000000 C=40646.000000
836
83c   B102: #	B172 B103 &lt;- B101  Freq: 0.0241502
83c   	movl    R10, R9	# spill
83f   	movzwl  R10, [RDI + #16 + R10 &lt;&lt; #1]	# ushort/char
845   	testl   R9, R9
848   	jl     B172  P=0.000000 C=5790.000000
848
84e   B103: #	B177 B104 &lt;- B102  Freq: 0.0241501
84e   	cmpl    R9, [RSP + #64 (32-bit)]
853   	jge     B177  P=0.000000 C=5790.000000
853
859   B104: #	B75 B105 &lt;- B103  Freq: 0.0241501
859   	movdl   R9, XMM2	# spill
85e   	cmpl    R9, R10
861   	jne     B75  P=0.494206 C=40645.000000
861
867   B105: #	B107 B106 &lt;- B104  Freq: 0.012215
867   	cmpl    R11, [RSP + #36 (32-bit)]
86c   	jge,s   B107	# loop end  P=0.500000 C=20558.000000
86c
86e   B106: #	B101 &lt;- B105  Freq: 0.0061075
86e   	movdl   XMM1, R11	# spill
873   	jmp,s   B101
873
875   B107: #	B228 B108 &lt;- B99 B80 B105  Freq: 0.145862
875   	movslq  R11, [RSP + #68 (32-bit)]	# int -&gt; long
87a   	movl    R10, [R14 + #8 (8-bit)]	# compressed klass ptr
87e   	NullCheck R14
87e
87e   B108: #	B150 B109 &lt;- B107  Freq: 0.145862
87e   	movl    R9, R14	# spill
881   	decode_heap_oop_not_null R9,R9
881   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Dot: 0x00007f4698008350:Constant:exact *	# compressed klass ptr
888   	jne,u  B150  P=0.000302 C=-1.000000
888
88e   B109: #	B193 B110 &lt;- B108  Freq: 0.145818
88e   	# checkcastPP of R9
88e   	movq    RAX, R9	# spill
891   	movslq  R9, [RSP + #36 (32-bit)]	# int -&gt; long
896   	movl    R10, [rsp + #56]	# spill
89b   	cmpl    R10, R8
89e   	jge     B193  P=0.000000 C=3390.000000
89e
8a4   B110: #	B229 B111 &lt;- B109  Freq: 0.145818
8a4   	addq    R11, R9	# long
8a7   	movl    R9, [rsp + #20]	# spill
8ac   	movl    R10, [R9 + #8 (8-bit)]	# compressed klass ptr
8b0   	NullCheck R9
8b0
8b0   B111: #	B183 B112 &lt;- B110  Freq: 0.145818
8b0   	cmpl    R10, narrowklass: precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# compressed klass ptr
8b7   	jne,u  B183  P=0.000001 C=-1.000000
8b7
8bd   B112: #	B192 B113 &lt;- B111  Freq: 0.145818
8bd   	movq    R10, [rsp + #48]	# spill
8c2   	# checkcastPP of R10
8c2   	movq    R13, R10	# spill
8c5   	movl    RDX, [rsp + #56]	# spill
8c9   	negl    RDX	# int
8cb   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
8cf   	movl    R14, R10	# spill
8d2   	movl    R10, [rsp + #56]	# spill
8d7   	testl   R10, R10
8da   	jl     B192  P=0.000000 C=5790.000000
8da
8e0   B113: #	B230 B114 &lt;- B112  Freq: 0.145818
8e0   	movl    R10, R14	# spill
8e3   	movl    R10, [R10 + #12 (8-bit)]	# range
8e7   	NullCheck R10
8e7
8e7   B114: #	B194 B115 &lt;- B113  Freq: 0.145817
8e7   	movl    [rsp + #36], R10	# spill
8ec   	movl    R9, R8	# spill
8ef   	subl    R9, [RSP + #56 (32-bit)]	# int
8f4   	decl    R9	# int
8f7   	movl    R10, [rsp + #56]	# spill
8fc   	cmpl    R10, [RSP + #36 (32-bit)]
901   	jge     B194  P=0.000000 C=5790.000000
901
907   B115: #	B182 B116 &lt;- B114  Freq: 0.145817
907   	movl    R10, [RAX + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
90b   	movdl   XMM0, R10	# spill
910   	movl    R10, [rsp + #56]	# spill
915   	cmpl    R10, [RSP + #36 (32-bit)]	# unsigned
91a   	jnb,u  B182  P=0.000001 C=-1.000000
91a
920   B116: #	B195 B117 &lt;- B115  Freq: 0.145817
920   	movl    R10, R14	# spill
923   	movzwl  R10, [R10 + #16 + R11 &lt;&lt; #1]	# ushort/char
929   	movdl   XMM2, R10	# spill
92e   	movslq  RBX, [RSP + #56 (32-bit)]	# int -&gt; long
933   	cmpl    R10, #55296
93a   	jge     B195  P=0.000000 C=9671.000000
93a
940   B117: #	B196 B118 &lt;- B116  Freq: 0.145817
940   	movl    R11, [rsp + #36]	# spill
945   	subl    R11, [RSP + #56 (32-bit)]	# int
94a   	decl    R11	# int
94d   	cmpl    R10, #10
951   	je     B196  P=0.000000 C=3390.000000
951
957   B118: #	B197 B119 &lt;- B117  Freq: 0.145817
957   	cmpl    RCX, [RSP + #72 (32-bit)]
95b   	movl    RDI, [rsp + #72]	# spill
95f   	cmovllt RCX, RDI	# max
962   	cmpl    R10, #13
966   	je     B197  P=0.000000 C=3390.000000
966
96c   B119: #	B198 B120 &lt;- B118  Freq: 0.145817
96c   	movdl   R10, XMM0	# spill
971   	decode_heap_oop_not_null RDI,R10
974   	movdl   RBP, XMM2	# spill
978   	orl     RBP, #1	# int
97b   	cmpl    RBP, #8233
981   	je     B198  P=0.000000 C=3390.000000
981
987   B120: #	B199 B121 &lt;- B119  Freq: 0.145817
987   	movdl   R10, XMM2	# spill
98c   	cmpl    R10, #133
993   	je     B199  P=0.000000 C=3390.000000
993
999   B121: #	B231 B122 &lt;- B120  Freq: 0.145817
999   	movdl   R10, XMM0	# spill
99e   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
9a2   	NullCheck R10
9a2
9a2   B122: #	B184 B123 &lt;- B121  Freq: 0.145817
9a2   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$Slice: 0x00007f46980033b0:Constant:exact *	# compressed klass ptr
9a9   	jne,u  B184  P=0.000001 C=-1.000000
9a9
9af   B123: #	B232 B124 &lt;- B122  Freq: 0.145817
9af   	# checkcastPP of RDI
9af   	movq    RAX, RDI	# spill
9b2   	movl    R10, [RDI + #16 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$SliceNode.buffer
9b6   	movdl   XMM0, R10	# spill
9bb   	cmpl    R9, R11
9be   	cmovlgt R9, R11	# min
9c2   	movl    R10, [R10 + #12 (8-bit)]	# range
9c6   	NullCheck R10
9c6
9c6   B124: #	B60 B125 &lt;- B123  Freq: 0.145816
9c6   	movl    [rsp + #64], R10	# spill
9cb   	movl    RDI, RDX	# spill
9cd   	sarl    RDI, #31
9d0   	movslq  R11, R10	# i2l
9d3   	movl    R10, [rsp + #56]	# spill
9d8   	addl    R10, [RSP + #64 (32-bit)]	# int
9dd   	movdl   XMM1, R10	# spill
9e2   	addq    RBX, R11	# long
9e5   	incl    R10	# int
9e8   	movdl   XMM3, R10	# spill
9ed   	movl    R10, [RAX + #12 (8-bit)]	# compressed ptr ! Field: java/util/regex/Pattern$Node.next
9f1   	movl    RBP, R10	# spill
9f4   	movl    R10, [rsp + #64]	# spill
9f9   	testl   R10, R10
9fc   	jle     B60  P=0.076878 C=44031.000000
9fc
a02   B125: #	B185 B126 &lt;- B124  Freq: 0.134606
a02   	andl    RDI, RDX	# int
a04   	testl  R10, R10	# unsigned
a07   	jbe,u  B185  P=0.000001 C=-1.000000
a07
a0d   B126: #	B185 B127 &lt;- B125  Freq: 0.134606
a0d   	addl    RDI, #2147483647	# int
a13   	decl    R10	# int
a16   	cmpl    RDI, R9
a19   	cmovlgt RDI, R9	# min
a1d   	cmpl    R10, [RSP + #64 (32-bit)]	# unsigned
a22   	jnb,u  B185  P=0.000001 C=-1.000000
a22
a28   B127: #	B185 B128 &lt;- B126  Freq: 0.134606
a28   	movl    R10, [rsp + #60]	# spill
a2d   	cmpl    R10, [RSP + #36 (32-bit)]	# unsigned
a32   	jnb,u  B185  P=0.000001 C=-1.000000
a32
a38   B128: #	B185 B129 &lt;- B127  Freq: 0.134606
a38   	movdl   R10, XMM1	# spill
a3d   	cmpl    R10, [RSP + #36 (32-bit)]	# unsigned
a42   	jnb,u  B185  P=0.000001 C=-1.000000
a42
a48   B129: #	B130 &lt;- B128  Freq: 0.134606
a48   	cmpl    RDI, [RSP + #64 (32-bit)]
a4c   	movl    R10, [rsp + #64]	# spill
a51   	cmovlgt RDI, R10	# min
a55   	cmpl    RCX, R10
a58   	cmovlgt RCX, R10	# min
a5c   	xorl    R10, R10	# int
a5f
a5f   B130: #	B188 B131 &lt;- B129 B135 	Loop: B130-B135 inner pre of N2859 Freq: 0.18017
a5f   	movdl   R11, XMM0	# spill
a64   	movl    R11, [R11 + #16 + R10 &lt;&lt; #2]	# int
a69   	movdl   XMM2, R11	# spill
a6e   	movl    R11, R10	# spill
a71   	incl    R11	# int
a74   	movl    RDX, R11	# spill
a77   	movl    R11, R10	# spill
a7a   	addl    R11, [RSP + #56 (32-bit)]	# int
a7f   	movslq  R9, R11	# i2l
a82   	incl    R11	# int
a85   	movdl   XMM5, R11	# spill
a8a   	movzwl  R11, [R14 + #18 + R9 &lt;&lt; #1]	# ushort/char
a90   	movdl   R9, XMM5	# spill
a95   	cmpl    R9, R8
a98   	jge     B188  P=0.000000 C=40646.000000
a98
a9e   B131: #	B186 B132 &lt;- B130  Freq: 0.18017
a9e   	testl   R9, R9
aa1   	jl     B186  P=0.000000 C=5790.000000
aa1
aa7   B132: #	B190 B133 &lt;- B131  Freq: 0.18017
aa7   	cmpl    R9, [RSP + #36 (32-bit)]
aac   	jge     B190  P=0.000000 C=5790.000000
aac
ab2   B133: #	B75 B134 &lt;- B132  Freq: 0.18017
ab2   	movdl   R10, XMM2	# spill
ab7   	cmpl    R10, R11
aba   	jne     B75  P=0.494206 C=40645.000000
aba
ac0   B134: #	B136 B135 &lt;- B133  Freq: 0.0911289
ac0   	cmpl    RDX, RCX
ac2   	jge,s   B136	# loop end  P=0.500000 C=20558.000000
ac2
ac4   B135: #	B130 &lt;- B134  Freq: 0.0455645
ac4   	movl    R10, RDX	# spill
ac7   	jmp,s   B130
ac7
ac9   B136: #	B140 B137 &lt;- B134  Freq: 0.0455645
ac9   	movl    R11, RDX	# spill
acc   	cmpl    R11, RDI
acf   	jge,s   B140  P=0.000001 C=-1.000000
acf
ad1   B137: #	B138 &lt;- B136  Freq: 0.0455644
ad1   	movl    R10, R11	# spill
ad4   	# castII of R10
ad4   	movl    RDX, R10	# spill
      	nop 	# 9 bytes pad for loops and calls

ae0   B138: #	B75 B139 &lt;- B137 B139 	Loop: B138-B139 inner main of N418 Freq: 0.0854722
ae0   	movdl   R11, XMM0	# spill
ae5   	movl    R10, [R11 + #16 + RDX &lt;&lt; #2]	# int
aea   	movl    R11, RDX	# spill
aed   	addl    R11, [RSP + #56 (32-bit)]	# int
af2   	movslq  R11, R11	# i2l
af5   	movzwl  R9, [R14 + #18 + R11 &lt;&lt; #1]	# ushort/char
afb   	cmpl    R10, R9
afe   	jne     B75  P=0.494206 C=40645.000000
afe
b04   B139: #	B138 B140 &lt;- B138  Freq: 0.0432313
b04   	movl    R11, RDX	# spill
b07   	incl    R11	# int
b0a   	movl    RDX, R11	# spill
b0d   	cmpl    R11, RDI
b10   	jl,s   B138	# loop end  P=0.923122 C=20558.000000
b10
b12   B140: #	B60 B141 &lt;- B136 B139  Freq: 0.00332357
b12   	cmpl    RDX, [RSP + #64 (32-bit)]
b16   	jge     B60  P=0.500000 C=-1.000000
b16
b1c   B141: #	B142 &lt;- B140  Freq: 0.00166179
b1c   	movl    R11, RDX	# spill
b1f   	# castII of R11
b1f   	movl    RDI, R11	# spill
      	nop 	# 2 bytes pad for loops and calls

b24   B142: #	B189 B143 &lt;- B141 B147 	Loop: B142-B147 inner post of N2859 Freq: 0.0022243
b24   	movdl   R11, XMM0	# spill
b29   	movl    R10, [R11 + #16 + RDI &lt;&lt; #2]	# int
b2e   	movdl   XMM2, R10	# spill
b33   	movl    R10, RDI	# spill
b36   	addl    R10, [RSP + #56 (32-bit)]	# int
b3b   	movl    R11, R10	# spill
b3e   	incl    R11	# int
b41   	movdl   XMM5, R11	# spill
b46   	cmpl    R11, R8
b49   	jge     B189  P=0.000000 C=40646.000000
b49
b4f   B143: #	B187 B144 &lt;- B142  Freq: 0.0022243
b4f   	movslq  R11, R10	# i2l
b52   	movl    R9, RDI	# spill
b55   	incl    R9	# int
b58   	movl    R10, R14	# spill
b5b   	movzwl  R11, [R10 + #18 + R11 &lt;&lt; #1]	# ushort/char
b61   	movdl   R10, XMM5	# spill
b66   	testl   R10, R10
b69   	jl     B187  P=0.000000 C=5790.000000
b69
b6f   B144: #	B191 B145 &lt;- B143  Freq: 0.0022243
b6f   	cmpl    R10, [RSP + #36 (32-bit)]
b74   	jge     B191  P=0.000000 C=5790.000000
b74
b7a   B145: #	B75 B146 &lt;- B144  Freq: 0.0022243
b7a   	movdl   R10, XMM2	# spill
b7f   	cmpl    R10, R11
b82   	jne     B75  P=0.494206 C=40645.000000
b82
b88   B146: #	B60 B147 &lt;- B145  Freq: 0.00112504
b88   	cmpl    R9, [RSP + #64 (32-bit)]
b8d   	jge     B60	# loop end  P=0.500000 C=20558.000000
b8d
b93   B147: #	B142 &lt;- B146  Freq: 0.000562519
b93   	movl    RDI, R9	# spill
b96   	jmp,s   B142
b96
b98   B148: #	B51 &lt;- B75  Freq: 0.0640324
b98   	movq    R10, [rsp + #24]	# spill
b9d   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
ba2   	movl    R11, [rsp + #76]	# spill
ba7   	jmp     B51
ba7
bac   B149: #	B51 &lt;- B57  Freq: 0.00294607
bac   	movq    R10, [rsp + #24]	# spill
bb1   	movb    [R10 + #44 (8-bit)], #1	# byte ! Field: java/util/regex/Matcher.hitEnd
bb6   	xorl    R11, R11	# int
bb9   	jmp     B51
bb9
bbe   B150: #	B213 B151 &lt;- B108  Freq: 4.40528e-05
bbe   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f4698008420:Constant:exact *	# compressed klass ptr
bc5   	jne,u  B213  P=0.000001 C=-1.000000
bc5
bcb   B151: #	B215 B152 &lt;- B150  Freq: 4.40528e-05
bcb   	movdl   R8, XMM6	# spill
bd0   	cmpl    R8, #1
bd4   	je     B215  P=0.000000 C=11687.000000
bd4
bda   B152: #	B237 B153 &lt;- B151  Freq: 4.40527e-05
bda   	movq    R10, [rsp + #24]	# spill
bdf   	movl    R8, [rsp + #56]	# spill
be4   	movl    [R10 + #32 (8-bit)], R8	# int ! Field: java/util/regex/Matcher.last
be8   	movl    R11, [rsp + #16]	# spill
bed   	movl    R9, [R11 + #12 (8-bit)]	# range
bf1   	NullCheck R11
bf1
bf1   B153: #	B214 B154 &lt;- B152  Freq: 4.40527e-05
bf1   	movl    RSI, #-28	# int
bf6   	cmpl    R9, #1	# unsigned
bfa   	jbe,u  B214  P=0.000001 C=-1.000000
bfa
c00   B154: #	B155 &lt;- B153  Freq: 4.40526e-05
c00   	movl    RCX, [rsp + #12]	# spill
c04   	movl    [R11 + #16 (8-bit)], RCX	# int
c08   	movl    [R11 + #20 (8-bit)], R8	# int
c0c   	movl    R11, R8	# spill
c0c
c0f   B155: #	B236 B156 &lt;- B178 B167 B154  Freq: 4.9009e-05
c0f   	movl    RCX, [rsp + #68]	# spill
c13   	movl    [R10 + #28 (8-bit)], RCX	# int ! Field: java/util/regex/Matcher.first
c17   	movl    RBP, [R10 + #52 (8-bit)]	# compressed ptr ! Field: java/util/regex/Matcher.groups
c1b   	movl    R8, [RBP + #12 (8-bit)]	# range
c1f   	NullCheck RBP
c1f
c1f   B156: #	B212 B157 &lt;- B155  Freq: 4.90089e-05
c1f   	cmpl    R8, #1	# unsigned
c23   	jbe,u  B212  P=0.000001 C=-1.000000
c23
c29   B157: #	B51 &lt;- B156  Freq: 4.90089e-05
c29   	movl    [RBP + #16 (8-bit)], RCX	# int
c2c   	movl    [RBP + #20 (8-bit)], R11	# int
c30   	movl    R11, #1	# int
c36   	jmp     B51
c36
c3b   B158: #	N3749 &lt;- B28 B22 B23 B24 B25 B26 B27  Freq: 5.33244e-05
c3b   	movl    RBP, [rsp + #12]	# spill
c3f   	movl    [rsp + #0], RCX	# spill
c42   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
c54   	movl    [rsp + #8], RDI	# spill
c58   	movsd   [rsp + #40], XMM0	# spill
c5e   	movl    RSI, #-122	# int
c63   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:37  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #20 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [20]=NarrowOop [24]=Oop [40]=Oop off=3176}
c68   	int3	# ShouldNotReachHere
c68
c6d   B159: #	N3749 &lt;- B16  Freq: 7.41341e-06
c6d   	movl    RBP, RDX	# spill
c6f   	incl    RBP	# int
c71   	movl    [rsp + #0], RCX	# spill
c74   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
c86   	movl    [rsp + #8], RDX	# spill
c8a   	movl    [rsp + #16], R8	# spill
c8f   	movsd   [rsp + #40], XMM0	# spill
c95   	movsd   [rsp + #56], XMM5	# spill
c9b   	movl    R10, [rsp + #32]	# spill
ca0   	movl    [rsp + #20], R10	# spill
ca5   	movss   [rsp + #32], XMM2	# spill
cab   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
cb3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=rsp + #56 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_ STK[0]=rsp + #12 STK[1]=RBP STK[2]=rsp + #32 STK[3]=rsp + #16
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=NarrowOop [40]=Oop [56]=Oop off=3256}
cb8   	int3	# ShouldNotReachHere
cb8
cbd   B160: #	N3749 &lt;- B18  Freq: 7.41339e-06
cbd   	movl    [rsp + #0], RCX	# spill
cc0   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
cd2   	movl    R11, [rsp + #12]	# spill
cd7   	movl    [rsp + #8], R11	# spill
cdc   	movl    [rsp + #12], RDX	# spill
ce0   	movsd   [rsp + #40], XMM0	# spill
ce6   	movsd   [rsp + #48], XMM5	# spill
cec   	movss   [rsp + #36], XMM1	# spill
cf2   	movl    RSI, #-28	# int
cf7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=_ L[8]=_ STK[0]=rsp + #8 STK[1]=RBP STK[2]=rsp + #36 STK[3]=rsp + #12
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [36]=NarrowOop [40]=Oop [48]=Oop off=3324}
cfc   	int3	# ShouldNotReachHere
cfc
d01   B161: #	N3749 &lt;- B41 B30  Freq: 5.87718e-06
d01   	movl    RBP, [rsp + #12]	# spill
d05   	movl    [rsp + #0], RCX	# spill
d08   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
d1a   	movl    [rsp + #8], R11	# spill
d1f   	movl    [rsp + #16], R14	# spill
d24   	movsd   [rsp + #40], XMM0	# spill
d2a   	movl    R10, [rsp + #32]	# spill
d2f   	movl    [rsp + #20], R10	# spill
d34   	movsd   [rsp + #32], XMM5	# spill
d3a   	movl    RSI, #-155	# int
d3f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #32 L[1]=rsp + #16 STK[0]=rsp + #16
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=3396}
d44   	int3	# ShouldNotReachHere
d44
d49   B162: #	N3749 &lt;- B42 B31  Freq: 5.60491e-06
d49   	movl    RBP, [rsp + #12]	# spill
d4d   	movl    [rsp + #0], RCX	# spill
d50   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
d62   	movl    [rsp + #8], R11	# spill
d67   	movl    [rsp + #16], R14	# spill
d6c   	movl    [rsp + #20], RSI	# spill
d70   	movsd   [rsp + #40], XMM0	# spill
d76   	movsd   [rsp + #64], XMM5	# spill
d7c   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
d83   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #64 L[1]=rsp + #16 STK[0]=rsp + #16 STK[1]=rsp + #20
        # java.util.regex.Pattern$BnM::match @ bci:42  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #64 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=rsp + #8 L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [24]=Oop [40]=Oop [64]=Oop off=3464}
d88   	int3	# ShouldNotReachHere
d88
d8d   B163: #	B216 B164 &lt;- B61  Freq: 4.05739e-06
d8d   	movl    RSI, #-155	# int
d92   	cmpl    R10, narrowklass: precise klass java/util/regex/Pattern$LastNode: 0x00007f4698008420:Constant:exact *	# compressed klass ptr
d99   	jne,u  B216  P=0.000001 C=-1.000000
d99
d9f   B164: #	B218 B165 &lt;- B163  Freq: 4.05738e-06
d9f   	movdl   R10, XMM6	# spill
da4   	cmpl    R10, #1
da8   	je     B218  P=0.000000 C=11687.000000
da8
dae   B165: #	B238 B166 &lt;- B164  Freq: 4.05738e-06
dae   	movq    R10, [rsp + #24]	# spill
db3   	movdl   R11, XMM3	# spill
db8   	movl    [R10 + #32 (8-bit)], R11	# int ! Field: java/util/regex/Matcher.last
dbc   	movl    R8, [rsp + #16]	# spill
dc1   	movl    R9, [R8 + #12 (8-bit)]	# range
dc5   	NullCheck R8
dc5
dc5   B166: #	B217 B167 &lt;- B165  Freq: 4.05738e-06
dc5   	cmpl    R9, #1	# unsigned
dc9   	jbe,u  B217  P=0.000001 C=-1.000000
dc9
dcf   B167: #	B155 &lt;- B166  Freq: 4.05737e-06
dcf   	movl    RCX, [rsp + #12]	# spill
dd3   	movl    [R8 + #16 (8-bit)], RCX	# int
dd7   	movl    [R8 + #20 (8-bit)], R11	# int
ddb   	jmp     B155
ddb
de0   B168: #	B39 &lt;- B35  Freq: 3.68173e-06
de0   	movl    R11, RDX	# spill
de3   	jmp     B39
de3
de8   B169: #	N3749 &lt;- B78  Freq: 1.58319e-06
de8   	movl    RSI, #-34	# int
ded   	movq    RBP, [rsp + #24]	# spill
df2   	movl    [rsp + #32], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
df7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #20 L[4]=rsp + #8 STK[0]=rsp + #32 STK[1]=RBP STK[2]=rsp + #68 STK[3]=rsp + #20
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [32]=NarrowOop off=3580}
dfc   	int3	# ShouldNotReachHere
dfc
e01   B170: #	N3749 &lt;- B87 B81 B82 B83 B84 B85 B86  Freq: 1.03274e-05
e01   	movl    RSI, #-122	# int
e06   	movq    RBP, [rsp + #24]	# spill
e0b   	movq    [rsp + #40], RAX	# spill
e10   	movl    [rsp + #56], R13	# spill
      	nop 	# 2 bytes pad for loops and calls
e17   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:21  L[0]=rsp + #40 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #20 L[4]=rsp + #56 L[5]=rsp + #36 L[6]=#0
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #20 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [40]=Oop [56]=NarrowOop off=3612}
e1c   	int3	# ShouldNotReachHere
e1c
e21   B171: #	B172 &lt;- B90  Freq: 9.7809e-07
e21   	movdl   XMM1, R9	# spill
e21
e26   B172: #	N3749 &lt;- B102 B171  Freq: 9.90165e-07
e26   	movl    RSI, #-155	# int
e2b   	movl    R10, [rsp + #20]	# spill
e30   	movl    [rsp + #16], R10	# spill
e35   	movq    [rsp + #48], RAX	# spill
e3a   	movl    R11, [rsp + #68]	# spill
e3f   	movl    [rsp + #20], R11	# spill
e44   	movl    [rsp + #32], R13	# spill
e49   	movss   [rsp + #64], XMM1	# spill
e4f   	movss   [rsp + #68], XMM2	# spill
e55   	movss   [rsp + #84], XMM0	# spill
e5b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=RBP L[1]=rsp + #84 STK[0]=rsp + #84
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #48 L[1]=rsp + #24 L[2]=rsp + #20 L[3]=RBP L[4]=rsp + #32 L[5]=rsp + #36 L[6]=rsp + #64 STK[0]=rsp + #68
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=rsp + #24 L[2]=rsp + #20 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [24]=Oop [32]=NarrowOop [48]=Oop off=3680}
e60   	int3	# ShouldNotReachHere
e60
e65   B173: #	N3749 &lt;- B6 B5  Freq: 1.9174e-06
e65   	movl    RBP, [rsp + #12]	# spill
e69   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
e6f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:55  L[0]=rsp + #24 L[1]=RBP L[2]=#0
        # OopMap{[24]=Oop off=3700}
e74   	int3	# ShouldNotReachHere
e74
e79   B174: #	B175 &lt;- B89  Freq: 9.3278e-07
e79   	movdl   XMM1, R9	# spill
e79
e7e   B175: #	N3749 &lt;- B101 B174  Freq: 9.44295e-07
e7e   	movl    RBP, R8	# spill
e81   	movl    RSI, #-155	# int
e86   	movq    [rsp + #48], RAX	# spill
e8b   	movl    R11, [rsp + #68]	# spill
e90   	movl    [rsp + #32], R11	# spill
e95   	movl    [rsp + #64], R13	# spill
e9a   	movss   [rsp + #68], XMM1	# spill
ea0   	movss   [rsp + #72], XMM0	# spill
      	nop 	# 1 bytes pad for loops and calls
ea7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:29  L[0]=rsp + #48 L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #20 L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #68 STK[0]=rsp + #72 STK[1]=RBP
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #20 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [20]=NarrowOop [24]=Oop [48]=Oop [64]=NarrowOop off=3756}
eac   	int3	# ShouldNotReachHere
eac
eb1   B176: #	B177 &lt;- B91  Freq: 9.32779e-07
eb1   	movdl   XMM1, R9	# spill
eb1
eb6   B177: #	N3749 &lt;- B103 B176  Freq: 9.44295e-07
eb6   	movl    RSI, #-155	# int
ebb   	movl    R11, [rsp + #20]	# spill
ec0   	movl    [rsp + #16], R11	# spill
ec5   	movq    [rsp + #48], RAX	# spill
eca   	movl    R10, [rsp + #68]	# spill
ecf   	movl    [rsp + #20], R10	# spill
ed4   	movl    [rsp + #32], R13	# spill
ed9   	movss   [rsp + #68], XMM1	# spill
edf   	movss   [rsp + #72], XMM2	# spill
ee5   	movss   [rsp + #88], XMM0	# spill
eeb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=RBP L[1]=rsp + #88 STK[0]=rsp + #88 STK[1]=rsp + #64
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #48 L[1]=rsp + #24 L[2]=rsp + #20 L[3]=RBP L[4]=rsp + #32 L[5]=rsp + #36 L[6]=rsp + #68 STK[0]=rsp + #72
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=rsp + #24 L[2]=rsp + #20 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [24]=Oop [32]=NarrowOop [48]=Oop off=3824}
ef0   	int3	# ShouldNotReachHere
ef0
ef5   B178: #	B155 &lt;- B74  Freq: 8.98944e-07
ef5   	movq    R10, RBP	# spill
ef8   	movl    R11, [R10 + #32 (8-bit)]	# int ! Field: java/util/regex/Matcher.last
efc   	jmp     B155
efc
f01   B179: #	N3749 &lt;- B48  Freq: 8.1947e-07
f01   	movl    RBP, [rsp + #12]	# spill
f05   	movl    [rsp + #0], RCX	# spill
f08   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
f1a   	movq    R10, [rsp + #24]	# spill
f1f   	movq    [rsp + #8], R10	# spill
f24   	movsd   [rsp + #40], XMM0	# spill
f2a   	movl    [rsp + #36], R11	# spill
f2f   	movss   [rsp + #56], XMM4	# spill
f35   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
f3b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #40 L[1]=rsp + #8 L[2]=RBP L[3]=rsp + #20 L[4]=rsp + #0 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=_ L[8]=_ STK[0]=rsp + #36 STK[1]=rsp + #8 STK[2]=rsp + #56 STK[3]=rsp + #20
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #8 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [8]=Oop [20]=NarrowOop [36]=NarrowOop [40]=Oop off=3904}
f40   	int3	# ShouldNotReachHere
f40
f45   B180: #	N3749 &lt;- B49  Freq: 8.19469e-07
f45   	movl    RBP, [rsp + #12]	# spill
f49   	movl    [rsp + #0], RCX	# spill
f4c   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
f5e   	movsd   [rsp + #40], XMM0	# spill
f64   	movl    R11, [rsp + #20]	# spill
f69   	movl    [rsp + #12], R11	# spill
f6e   	movl    R11, [rsp + #32]	# spill
f73   	movl    [rsp + #20], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
f7b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_ STK[0]=rsp + #16 STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #12 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=_ L[8]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=NarrowOop [12]=NarrowOop [16]=NarrowOop [24]=Oop [40]=Oop off=3968}
f80   	int3	# ShouldNotReachHere
f80
f85   B181: #	N3749 &lt;- B1  Freq: 4.76837e-07
f85   	movl    RSI, #-155	# int
f8a   	movl    [rsp + #0], RDX	# spill
f8d   	movq    [rsp + #8], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
f93   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Matcher::search @ bci:11  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #0
        # OopMap{[8]=Oop off=3992}
f98   	int3	# ShouldNotReachHere
f98
f9d   B182: #	N3749 &lt;- B115  Freq: 1.47754e-07
f9d   	movl    RSI, #-28	# int
fa2   	movq    RBP, [rsp + #24]	# spill
fa7   	movl    R11, [rsp + #68]	# spill
fac   	movl    [rsp + #12], R11	# spill
fb1   	movq    [rsp + #32], RAX	# spill
fb6   	movl    R10, [rsp + #56]	# spill
fbb   	movq    [rsp + #64], R13	# spill
fc0   	movl    [rsp + #52], R10	# spill
fc5   	movl    [rsp + #60], R14	# spill
      	nop 	# 1 bytes pad for loops and calls
fcb   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #60 STK[1]=rsp + #52
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #64 L[1]=rsp + #56 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #52 L[3]=rsp + #20 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12 L[3]=rsp + #20 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [32]=Oop [60]=NarrowOop [64]=Oop off=4048}
fd0   	int3	# ShouldNotReachHere
fd0
fd5   B183: #	N3749 &lt;- B111  Freq: 1.45818e-07
fd5   	movl    RSI, #-34	# int
fda   	movq    RBP, [rsp + #24]	# spill
fdf   	movq    [rsp + #32], RAX	# spill
fe4   	movl    R11, [rsp + #56]	# spill
fe9   	movl    [rsp + #48], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
fef   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #20 L[1]=rsp + #48 L[2]=_ L[3]=_ STK[0]=rsp + #20 STK[1]=rsp + #48
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #48 L[3]=rsp + #20 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #20 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [32]=Oop off=4084}
ff4   	int3	# ShouldNotReachHere
ff4
ff9   B184: #	N3749 &lt;- B122  Freq: 1.45817e-07
ff9   	movl    RSI, #-34	# int
ffe   	movq    RBP, [rsp + #24]	# spill
1003   	movl    R11, [rsp + #20]	# spill
1008   	movl    [rsp + #16], R11	# spill
100d   	movss   [rsp + #20], XMM0	# spill
1013   	movq    [rsp + #48], R13	# spill
      	nop 	# 3 bytes pad for loops and calls
101b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #20 STK[1]=RBP STK[2]=rsp + #60 STK[3]=rsp + #48
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop [48]=Oop off=4128}
1020   	int3	# ShouldNotReachHere
1020
1025   B185: #	N3749 &lt;- B128 B125 B126 B127  Freq: 5.43787e-07
1025   	movl    RSI, #-122	# int
102a   	movq    RBP, [rsp + #24]	# spill
102f   	movl    R11, [rsp + #20]	# spill
1034   	movl    [rsp + #16], R11	# spill
1039   	movq    [rsp + #32], RAX	# spill
103e   	movl    R10, [rsp + #60]	# spill
1043   	movl    [rsp + #20], R10	# spill
1048   	movq    [rsp + #48], R13	# spill
104d   	movss   [rsp + #56], XMM0	# spill
1053   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:21  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #20 L[3]=rsp + #48 L[4]=rsp + #56 L[5]=rsp + #64 L[6]=#0
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [32]=Oop [48]=Oop [56]=NarrowOop off=4184}
1058   	int3	# ShouldNotReachHere
1058
105d   B186: #	B187 &lt;- B131  Freq: 9.00851e-08
105d   	movl    RDI, R10	# spill
105d
1060   B187: #	N3749 &lt;- B143 B186  Freq: 9.11973e-08
1060   	movl    RSI, #-155	# int
1065   	movq    RBP, [rsp + #24]	# spill
106a   	movl    R10, [rsp + #68]	# spill
106f   	movl    [rsp + #12], R10	# spill
1074   	movl    R11, [rsp + #20]	# spill
1079   	movl    [rsp + #16], R11	# spill
107e   	movq    [rsp + #40], RAX	# spill
1083   	movl    R10, [rsp + #60]	# spill
1088   	movl    [rsp + #20], R10	# spill
108d   	movss   [rsp + #56], XMM0	# spill
1093   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #64]
	movl    [rsp + #60], rax
	movq    rax, [rsp - #8]
10a5   	movl    [rsp + #64], RDI	# spill
10a9   	movss   [rsp + #68], XMM2	# spill
10af   	movq    [rsp + #72], R13	# spill
10b4   	movss   [rsp + #84], XMM5	# spill
      	nop 	# 1 bytes pad for loops and calls
10bb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #72 L[1]=rsp + #84 STK[0]=rsp + #84
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #40 L[1]=RBP L[2]=rsp + #20 L[3]=rsp + #72 L[4]=rsp + #56 L[5]=rsp + #60 L[6]=rsp + #64 STK[0]=rsp + #68
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [40]=Oop [56]=NarrowOop [72]=Oop off=4288}
10c0   	int3	# ShouldNotReachHere
10c0
10c5   B188: #	B189 &lt;- B130  Freq: 8.59119e-08
10c5   	movl    RDI, R10	# spill
10c5
10c8   B189: #	N3749 &lt;- B142 B188  Freq: 8.69725e-08
10c8   	movl    RBP, R8	# spill
10cb   	movl    RSI, #-155	# int
10d0   	movl    R10, [rsp + #68]	# spill
10d5   	movl    [rsp + #12], R10	# spill
10da   	movl    R10, [rsp + #20]	# spill
10df   	movl    [rsp + #16], R10	# spill
10e4   	movq    [rsp + #40], RAX	# spill
10e9   	movl    R11, [rsp + #60]	# spill
10ee   	movl    [rsp + #20], R11	# spill
10f3   	movq    [rsp + #56], R13	# spill
10f8   	movss   [rsp + #68], XMM0	# spill
10fe   	movl    [rsp + #72], RDI	# spill
1102   	movss   [rsp + #76], XMM5	# spill
      	nop 	# 3 bytes pad for loops and calls
110b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:29  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=rsp + #20 L[3]=rsp + #56 L[4]=rsp + #68 L[5]=rsp + #64 L[6]=rsp + #72 STK[0]=rsp + #76 STK[1]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=rsp + #24 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [16]=NarrowOop [24]=Oop [40]=Oop [56]=Oop [68]=NarrowOop off=4368}
1110   	int3	# ShouldNotReachHere
1110
1115   B190: #	B191 &lt;- B132  Freq: 8.59118e-08
1115   	movl    RDI, R10	# spill
1115
1118   B191: #	N3749 &lt;- B144 B190  Freq: 8.69724e-08
1118   	movl    RSI, #-155	# int
111d   	movq    RBP, [rsp + #24]	# spill
1122   	movl    R11, [rsp + #68]	# spill
1127   	movl    [rsp + #12], R11	# spill
112c   	movl    R11, [rsp + #20]	# spill
1131   	movl    [rsp + #16], R11	# spill
1136   	movq    [rsp + #48], RAX	# spill
113b   	movl    R11, [rsp + #60]	# spill
1140   	movl    [rsp + #20], R11	# spill
1145   	movss   [rsp + #32], XMM0	# spill
114b   	movl    [rsp + #68], RDI	# spill
114f   	movss   [rsp + #72], XMM2	# spill
1155   	movq    [rsp + #80], R13	# spill
115a   	movss   [rsp + #88], XMM5	# spill
      	nop 	# 3 bytes pad for loops and calls
1163   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #80 L[1]=rsp + #88 STK[0]=rsp + #88 STK[1]=rsp + #36
        # java.util.regex.Pattern$Slice::match @ bci:49  L[0]=rsp + #48 L[1]=RBP L[2]=rsp + #20 L[3]=rsp + #80 L[4]=rsp + #32 L[5]=rsp + #64 L[6]=rsp + #68 STK[0]=rsp + #72
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [32]=NarrowOop [48]=Oop [80]=Oop off=4456}
1168   	int3	# ShouldNotReachHere
1168
116d   B192: #	N3749 &lt;- B112  Freq: 7.29088e-08
116d   	movl    RSI, #-155	# int
1172   	movq    RBP, [rsp + #24]	# spill
1177   	movl    R11, [rsp + #68]	# spill
117c   	movl    [rsp + #12], R11	# spill
1181   	movq    [rsp + #32], RAX	# spill
1186   	movl    R10, [rsp + #56]	# spill
118b   	movl    [rsp + #52], R10	# spill
1190   	movq    [rsp + #72], R13	# spill
      	nop 	# 2 bytes pad for loops and calls
1197   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #72 L[1]=rsp + #52 STK[0]=rsp + #52
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #72 L[1]=rsp + #56 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #52 L[3]=rsp + #20 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12 L[3]=rsp + #20 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [32]=Oop [72]=Oop off=4508}
119c   	int3	# ShouldNotReachHere
119c
11a1   B193: #	N3749 &lt;- B109  Freq: 6.95315e-08
11a1   	movl    RBP, R8	# spill
11a4   	movl    RSI, #-155	# int
11a9   	movq    [rsp + #40], RAX	# spill
      	nop 	# 1 bytes pad for loops and calls
11af   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:5  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=rsp + #56 L[3]=rsp + #20 L[4]=_ STK[0]=rsp + #56 STK[1]=RBP
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=rsp + #24 L[2]=rsp + #68 L[3]=rsp + #20 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [20]=NarrowOop [24]=Oop [40]=Oop off=4532}
11b4   	int3	# ShouldNotReachHere
11b4
11b9   B194: #	N3749 &lt;- B114  Freq: 6.95312e-08
11b9   	movl    RSI, #-155	# int
11be   	movq    RBP, [rsp + #24]	# spill
11c3   	movl    R10, [rsp + #68]	# spill
11c8   	movl    [rsp + #12], R10	# spill
11cd   	movq    [rsp + #40], RAX	# spill
11d2   	movq    [rsp + #72], R13	# spill
11d7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #72 L[1]=rsp + #56 STK[0]=rsp + #56 STK[1]=rsp + #36
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #72 L[1]=rsp + #56 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #40 L[1]=RBP L[2]=rsp + #56 L[3]=rsp + #20 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12 L[3]=rsp + #20 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [40]=Oop [72]=Oop off=4572}
11dc   	int3	# ShouldNotReachHere
11dc
11e1   B195: #	N3749 &lt;- B116  Freq: 6.95311e-08
11e1   	movl    RSI, #-155	# int
11e6   	movq    RBP, [rsp + #24]	# spill
11eb   	movl    R10, [rsp + #68]	# spill
11f0   	movl    [rsp + #12], R10	# spill
11f5   	movq    [rsp + #32], RAX	# spill
11fa   	movl    R10, [rsp + #56]	# spill
11ff   	movq    [rsp + #64], R13	# spill
1204   	movl    [rsp + #52], R10	# spill
1209   	movss   [rsp + #60], XMM2	# spill
120f   	movss   [rsp + #72], XMM2	# spill
      	nop 	# 2 bytes pad for loops and calls
1217   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #72 STK[0]=rsp + #60 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #64 L[1]=rsp + #52 L[2]=rsp + #60 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #52 L[3]=rsp + #20 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12 L[3]=rsp + #20 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [32]=Oop [64]=Oop off=4636}
121c   	int3	# ShouldNotReachHere
121c
1221   B196: #	N3749 &lt;- B117  Freq: 6.9531e-08
1221   	movl    RSI, #-155	# int
1226   	movq    RBP, [rsp + #24]	# spill
122b   	movl    R10, [rsp + #20]	# spill
1230   	movl    [rsp + #16], R10	# spill
1235   	movq    [rsp + #32], RAX	# spill
123a   	movl    R10, [rsp + #56]	# spill
123f   	movl    [rsp + #20], R10	# spill
1244   	movq    [rsp + #48], R13	# spill
1249   	movss   [rsp + #60], XMM2	# spill
124f   	movss   [rsp + #64], XMM2	# spill
      	nop 	# 2 bytes pad for loops and calls
1257   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #64 STK[0]=rsp + #60 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #20 L[3]=rsp + #48 L[4]=rsp + #60
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [32]=Oop [48]=Oop off=4700}
125c   	int3	# ShouldNotReachHere
125c
1261   B197: #	N3749 &lt;- B118  Freq: 6.9531e-08
1261   	movl    RSI, #-155	# int
1266   	movq    RBP, [rsp + #24]	# spill
126b   	movl    R11, [rsp + #20]	# spill
1270   	movl    [rsp + #16], R11	# spill
1275   	movq    [rsp + #32], RAX	# spill
127a   	movl    R10, [rsp + #56]	# spill
127f   	movl    [rsp + #20], R10	# spill
1284   	movq    [rsp + #48], R13	# spill
1289   	movss   [rsp + #60], XMM2	# spill
128f   	movss   [rsp + #64], XMM2	# spill
      	nop 	# 2 bytes pad for loops and calls
1297   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #64 STK[0]=rsp + #60 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #20 L[3]=rsp + #48 L[4]=rsp + #60
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [32]=Oop [48]=Oop off=4764}
129c   	int3	# ShouldNotReachHere
129c
12a1   B198: #	N3749 &lt;- B119  Freq: 6.9531e-08
12a1   	movl    RSI, #-155	# int
12a6   	movl    R11, [rsp + #68]	# spill
12ab   	movl    [rsp + #12], R11	# spill
12b0   	movl    R10, [rsp + #20]	# spill
12b5   	movl    [rsp + #16], R10	# spill
12ba   	movq    [rsp + #40], RAX	# spill
12bf   	movl    R10, [rsp + #56]	# spill
12c4   	movl    [rsp + #20], R10	# spill
12c9   	movq    [rsp + #56], R13	# spill
12ce   	movss   [rsp + #68], XMM2	# spill
      	nop 	# 3 bytes pad for loops and calls
12d7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #68 STK[0]=RBP STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=rsp + #20 L[3]=rsp + #56 L[4]=rsp + #68
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=rsp + #24 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [16]=NarrowOop [24]=Oop [40]=Oop [56]=Oop off=4828}
12dc   	int3	# ShouldNotReachHere
12dc
12e1   B199: #	N3749 &lt;- B120  Freq: 6.95309e-08
12e1   	movl    RSI, #-155	# int
12e6   	movq    RBP, [rsp + #24]	# spill
12eb   	movl    R10, [rsp + #20]	# spill
12f0   	movl    [rsp + #16], R10	# spill
12f5   	movq    [rsp + #32], RAX	# spill
12fa   	movl    R11, [rsp + #56]	# spill
12ff   	movl    [rsp + #20], R11	# spill
1304   	movq    [rsp + #48], R13	# spill
1309   	movss   [rsp + #60], XMM2	# spill
130f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #60 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #20 L[3]=rsp + #48 L[4]=rsp + #60
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [32]=Oop [48]=Oop off=4884}
1314   	int3	# ShouldNotReachHere
1314
1319   B200: #	N3749 &lt;- B56  Freq: 6.70484e-08
1319   	movl    RBP, [rsp + #12]	# spill
131d   	movl    [rsp + #8], R11	# spill
1322   	movl    RSI, #-58	# int
1327   	call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_ STK[0]=rsp + #8 STK[1]=rsp + #24 STK[2]=RBP STK[3]=rsp + #20
        # OopMap{[8]=NarrowOop [20]=NarrowOop [24]=Oop off=4908}
132c   	int3	# ShouldNotReachHere
132c
1331   B201: #	N3749 &lt;- B58  Freq: 6.49535e-08
1331   	movl    RBP, R11	# spill
1334   	movl    RSI, #-130	# int
      	nop 	# 2 bytes pad for loops and calls
133b   	call,static  wrapper for: uncommon_trap(reason=&apos;loop_limit_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Start::match @ bci:37  L[0]=rsp + #0 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #20 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [20]=NarrowOop [24]=Oop off=4928}
1340   	int3	# ShouldNotReachHere
1340
1345   B202: #	N3749 &lt;- B65  Freq: 1.36086e-08
1345   	movq    RBP, [rsp + #24]	# spill
134a   	movl    R10, [rsp + #68]	# spill
134f   	movl    [rsp + #12], R10	# spill
1354   	movl    R11, [rsp + #20]	# spill
1359   	movl    [rsp + #16], R11	# spill
135e   	movq    [rsp + #32], RCX	# spill
1363   	movq    [rsp + #56], R13	# spill
1368   	movss   [rsp + #64], XMM3	# spill
136e   	movl    [rsp + #68], R14	# spill
1373   	movss   [rsp + #72], XMM3	# spill
      	nop 	# 2 bytes pad for loops and calls
137b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #68 STK[1]=rsp + #64
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #56 L[1]=rsp + #72 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #64 L[3]=rsp + #56 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [32]=Oop [56]=Oop [68]=NarrowOop off=4992}
1380   	int3	# ShouldNotReachHere
1380
1385   B203: #	N3749 &lt;- B72  Freq: 1.34302e-08
1385   	movl    RSI, #-34	# int
138a   	movq    RBP, [rsp + #24]	# spill
138f   	movl    R8, [rsp + #20]	# spill
1394   	movl    [rsp + #16], R8	# spill
1399   	movl    [rsp + #20], RDI	# spill
139d   	movl    [rsp + #40], R10	# spill
13a2   	movq    [rsp + #48], R13	# spill
13a7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #20 STK[1]=RBP STK[2]=rsp + #40 STK[3]=rsp + #48
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop [48]=Oop off=5036}
13ac   	int3	# ShouldNotReachHere
13ac
13b1   B204: #	N3749 &lt;- B63  Freq: 6.71513e-09
13b1   	movl    RSI, #-155	# int
13b6   	movq    RBP, [rsp + #24]	# spill
13bb   	movl    R11, [rsp + #68]	# spill
13c0   	movl    [rsp + #12], R11	# spill
13c5   	movl    R10, [rsp + #20]	# spill
13ca   	movl    [rsp + #16], R10	# spill
13cf   	movq    [rsp + #32], RCX	# spill
13d4   	movq    [rsp + #56], R13	# spill
13d9   	movss   [rsp + #64], XMM3	# spill
13df   	movq    [rsp + #72], R13	# spill
13e4   	movss   [rsp + #68], XMM3	# spill
      	nop 	# 1 bytes pad for loops and calls
13eb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #56 L[1]=rsp + #64 STK[0]=rsp + #64
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #72 L[1]=rsp + #68 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #64 L[3]=rsp + #56 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [32]=Oop [56]=Oop [72]=Oop off=5104}
13f0   	int3	# ShouldNotReachHere
13f0
13f5   B205: #	N3749 &lt;- B62  Freq: 6.40404e-09
13f5   	movl    RBP, R8	# spill
13f8   	movl    RSI, #-155	# int
13fd   	movl    R11, [rsp + #20]	# spill
1402   	movl    [rsp + #16], R11	# spill
1407   	movq    [rsp + #40], RCX	# spill
140c   	movq    [rsp + #56], R13	# spill
1411   	movss   [rsp + #64], XMM3	# spill
1417   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:5  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=rsp + #64 L[3]=rsp + #56 L[4]=_ STK[0]=rsp + #64 STK[1]=RBP
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=rsp + #24 L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [16]=NarrowOop [24]=Oop [40]=Oop [56]=Oop off=5148}
141c   	int3	# ShouldNotReachHere
141c
1421   B206: #	N3749 &lt;- B64  Freq: 6.40404e-09
1421   	movl    RSI, #-155	# int
1426   	movq    RBP, [rsp + #24]	# spill
142b   	movl    R11, [rsp + #68]	# spill
1430   	movl    [rsp + #12], R11	# spill
1435   	movl    R10, [rsp + #20]	# spill
143a   	movl    [rsp + #16], R10	# spill
143f   	movq    [rsp + #40], RCX	# spill
1444   	movq    [rsp + #64], R13	# spill
1449   	movss   [rsp + #32], XMM3	# spill
144f   	movq    [rsp + #72], R13	# spill
1454   	movss   [rsp + #80], XMM3	# spill
      	nop 	# 1 bytes pad for loops and calls
145b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #64 L[1]=rsp + #32 STK[0]=rsp + #32 STK[1]=rsp + #36
        # java.lang.Character::codePointAt @ bci:2  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #40 L[1]=RBP L[2]=rsp + #32 L[3]=rsp + #64 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [40]=Oop [64]=Oop [72]=Oop off=5216}
1460   	int3	# ShouldNotReachHere
1460
1465   B207: #	N3749 &lt;- B66  Freq: 6.40403e-09
1465   	movq    RBP, [rsp + #24]	# spill
146a   	movl    R10, [rsp + #68]	# spill
146f   	movl    [rsp + #12], R10	# spill
1474   	movl    R11, [rsp + #20]	# spill
1479   	movl    [rsp + #16], R11	# spill
147e   	movq    [rsp + #32], RCX	# spill
1483   	movq    [rsp + #56], R13	# spill
1488   	movss   [rsp + #64], XMM3	# spill
148e   	movl    [rsp + #72], R8	# spill
1493   	movl    [rsp + #76], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
149b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Character::isHighSurrogate @ bci:3  L[0]=rsp + #76 STK[0]=rsp + #72 STK[1]=#55296
        # java.lang.Character::codePointAt @ bci:9  L[0]=rsp + #56 L[1]=rsp + #64 L[2]=rsp + #72 L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #64 L[3]=rsp + #56 L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [32]=Oop [56]=Oop off=5280}
14a0   	int3	# ShouldNotReachHere
14a0
14a5   B208: #	N3749 &lt;- B67  Freq: 6.40403e-09
14a5   	movq    RBP, [rsp + #24]	# spill
14aa   	movl    R11, [rsp + #20]	# spill
14af   	movl    [rsp + #16], R11	# spill
14b4   	movq    [rsp + #32], RCX	# spill
14b9   	movss   [rsp + #20], XMM3	# spill
14bf   	movq    [rsp + #48], R13	# spill
14c4   	movl    [rsp + #60], R8	# spill
14c9   	movl    [rsp + #64], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
14cf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:3  L[0]=_ L[1]=rsp + #64 STK[0]=rsp + #60 STK[1]=#10
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #20 L[3]=rsp + #48 L[4]=rsp + #60
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [32]=Oop [48]=Oop off=5332}
14d4   	int3	# ShouldNotReachHere
14d4
14d9   B209: #	N3749 &lt;- B68  Freq: 6.40402e-09
14d9   	movq    RBP, [rsp + #24]	# spill
14de   	movl    R10, [rsp + #20]	# spill
14e3   	movl    [rsp + #16], R10	# spill
14e8   	movq    [rsp + #32], RCX	# spill
14ed   	movss   [rsp + #20], XMM3	# spill
14f3   	movq    [rsp + #48], R13	# spill
14f8   	movl    [rsp + #60], R8	# spill
14fd   	movl    [rsp + #64], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
1503   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:9  L[0]=_ L[1]=rsp + #64 STK[0]=rsp + #60 STK[1]=#13
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #20 L[3]=rsp + #48 L[4]=rsp + #60
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [32]=Oop [48]=Oop off=5384}
1508   	int3	# ShouldNotReachHere
1508
150d   B210: #	N3749 &lt;- B69  Freq: 6.40402e-09
150d   	movl    R10, [rsp + #68]	# spill
1512   	movl    [rsp + #12], R10	# spill
1517   	movl    R11, [rsp + #20]	# spill
151c   	movl    [rsp + #16], R11	# spill
1521   	movq    [rsp + #40], RCX	# spill
1526   	movss   [rsp + #20], XMM3	# spill
152c   	movq    [rsp + #56], R13	# spill
1531   	movl    [rsp + #68], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
1537   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:18  L[0]=_ L[1]=rsp + #68 STK[0]=RBP STK[1]=#8233
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=rsp + #20 L[3]=rsp + #56 L[4]=rsp + #68
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=rsp + #24 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [16]=NarrowOop [24]=Oop [40]=Oop [56]=Oop off=5436}
153c   	int3	# ShouldNotReachHere
153c
1541   B211: #	N3749 &lt;- B70  Freq: 6.40402e-09
1541   	movq    RBP, [rsp + #24]	# spill
1546   	movl    R11, [rsp + #20]	# spill
154b   	movl    [rsp + #16], R11	# spill
1550   	movq    [rsp + #32], RCX	# spill
1555   	movss   [rsp + #20], XMM3	# spill
155b   	movq    [rsp + #48], R13	# spill
1560   	movl    [rsp + #60], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
1567   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$Dot::isSatisfiedBy @ bci:25  L[0]=_ L[1]=_ STK[0]=rsp + #60 STK[1]=#133
        # java.util.regex.Pattern$CharProperty::match @ bci:18  L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #20 L[3]=rsp + #48 L[4]=rsp + #60
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop [32]=Oop [48]=Oop off=5484}
156c   	int3	# ShouldNotReachHere
156c
1571   B212: #	N3749 &lt;- B156  Freq: 4.90089e-11
1571   	movl    RSI, #-28	# int
1576   	movq    [rsp + #8], R10	# spill
157b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$Start::match @ bci:64  L[0]=_ L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP STK[1]=#0 STK[2]=rsp + #68
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #8 L[1]=_ L[2]=_
        # OopMap{rbp=NarrowOop [8]=Oop off=5504}
1580   	int3	# ShouldNotReachHere
1580
1585   B213: #	N3749 &lt;- B150  Freq: 4.40528e-11
1585   	movl    RSI, #-58	# int
158a   	movq    RBP, [rsp + #24]	# spill
158f   	movl    [rsp + #40], R14	# spill
      	nop 	# 3 bytes pad for loops and calls
1597   	call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #40 STK[1]=RBP STK[2]=rsp + #56 STK[3]=rsp + #20
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #20 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [40]=NarrowOop off=5532}
159c   	int3	# ShouldNotReachHere
159c
15a1   B214: #	N3749 &lt;- B153  Freq: 4.40527e-11
15a1   	movl    RBP, [rsp + #12]	# spill
15a5   	movl    R9, [rsp + #20]	# spill
15aa   	movl    [rsp + #16], R9	# spill
15af   	movl    [rsp + #20], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
15b7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_ STK[0]=rsp + #20 STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=rsp + #24 L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [16]=NarrowOop [20]=NarrowOop [24]=Oop off=5564}
15bc   	int3	# ShouldNotReachHere
15bc
15c1   B215: #	N3749 &lt;- B151  Freq: 2.1006e-11
15c1   	movl    RSI, #-155	# int
15c6   	movq    RBP, [rsp + #24]	# spill
15cb   	movl    R11, [rsp + #20]	# spill
15d0   	movl    [rsp + #16], R11	# spill
15d5   	movss   [rsp + #40], XMM6	# spill
15db   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:5  L[0]=_ L[1]=RBP L[2]=rsp + #56 L[3]=_ STK[0]=rsp + #40 STK[1]=#1
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop off=5600}
15e0   	int3	# ShouldNotReachHere
15e0
15e5   B216: #	N3749 &lt;- B163  Freq: 4.05739e-12
15e5   	movl    RSI, #-58	# int
15ea   	movl    R11, [rsp + #20]	# spill
15ef   	movl    [rsp + #16], R11	# spill
15f4   	movss   [rsp + #20], XMM3	# spill
15fa   	movq    [rsp + #48], R13	# spill
15ff   	call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP STK[1]=rsp + #24 STK[2]=rsp + #20 STK[3]=rsp + #48
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=rsp + #24 L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{rbp=NarrowOop [0]=Oop [16]=NarrowOop [24]=Oop [48]=Oop off=5636}
1604   	int3	# ShouldNotReachHere
1604
1609   B217: #	N3749 &lt;- B166  Freq: 4.05738e-12
1609   	movl    RBP, [rsp + #12]	# spill
160d   	movl    R9, [rsp + #20]	# spill
1612   	movl    [rsp + #16], R9	# spill
1617   	movl    [rsp + #20], R8	# spill
161c   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
1623   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_ STK[0]=rsp + #20 STK[1]=#0 STK[2]=RBP
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=rsp + #24 L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=rsp + #24 L[1]=_ L[2]=_
        # OopMap{[0]=Oop [16]=NarrowOop [20]=NarrowOop [24]=Oop off=5672}
1628   	int3	# ShouldNotReachHere
1628
162d   B218: #	N3749 &lt;- B164  Freq: 1.93471e-12
162d   	movq    RBP, [rsp + #24]	# spill
1632   	movl    R8, [rsp + #20]	# spill
1637   	movl    [rsp + #16], R8	# spill
163c   	movss   [rsp + #20], XMM3	# spill
1642   	movss   [rsp + #40], XMM6	# spill
      	nop 	# 3 bytes pad for loops and calls
164b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:5  L[0]=_ L[1]=RBP L[2]=rsp + #20 L[3]=_ STK[0]=rsp + #40 STK[1]=#1
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #68 L[3]=rsp + #16 L[4]=rsp + #8
        # java.util.regex.Matcher::search @ bci:86  L[0]=RBP L[1]=_ L[2]=_
        # OopMap{rbp=Oop [0]=Oop [16]=NarrowOop off=5712}
1650   	int3	# ShouldNotReachHere
1650
1655   B219: #	N3749 &lt;- B15  Freq: 7.41341e-06
1655   	movl    RBP, R8	# spill
1658   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
165f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:73  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=5732}
1664   	int3	# ShouldNotReachHere
1664
1669   B220: #	N3749 &lt;- B17  Freq: 7.4134e-06
1669   	movl    RBP, RDX	# spill
166b   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
1673   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=5752}
1678   	int3	# ShouldNotReachHere
1678
167d   B221: #	N3749 &lt;- B77  Freq: 1.60422e-06
167d   	movl    RSI, #-10	# int
1682   	movq    RBP, [rsp + #24]	# spill
1687   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #68 STK[3]=rsp + #20
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=Oop [20]=NarrowOop off=5772}
168c   	int3	# ShouldNotReachHere
168c
1691   B222: #	N3749 &lt;- B79  Freq: 1.60422e-06
1691   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1697   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=5788}
169c   	int3	# ShouldNotReachHere
169c
16a1   B223: #	N3749 &lt;- B3  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
16a3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:51  L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=5800}
16a8   	int3	# ShouldNotReachHere
16a8
16ad   B224: #	N3749 &lt;- B8  Freq: 1.01328e-06
16ad   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
16b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:77  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap{off=5816}
16b8   	int3	# ShouldNotReachHere
16b8
16bd   B225: #	N3749 &lt;- B9  Freq: 1.01327e-06
16bd   	movl    RBP, [rsp + #12]	# spill
      	nop 	# 2 bytes pad for loops and calls
16c3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL STK[1]=rsp + #24 STK[2]=RBP STK[3]=rsp + #20
        # OopMap{[20]=NarrowOop [24]=Oop off=5832}
16c8   	int3	# ShouldNotReachHere
16c8
16cd   B226: #	N3749 &lt;- B11  Freq: 9.45335e-07
      	nop 	# 2 bytes pad for loops and calls
16cf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=5844}
16d4   	int3	# ShouldNotReachHere
16d4
16d9   B227: #	N3749 &lt;- B47  Freq: 8.30353e-07
16d9   	movq    RBP, [rsp + #24]	# spill
16de   	movss   [rsp + #0], XMM4	# spill
16e3   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
16eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$BnM::match @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #20
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=Oop [20]=NarrowOop off=5872}
16f0   	int3	# ShouldNotReachHere
16f0
16f5   B228: #	N3749 &lt;- B107  Freq: 1.47799e-07
16f5   	movl    RSI, #-10	# int
16fa   	movq    RBP, [rsp + #24]	# spill
16ff   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #56 STK[3]=rsp + #20
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=Oop [20]=NarrowOop off=5892}
1704   	int3	# ShouldNotReachHere
1704
1709   B229: #	N3749 &lt;- B110  Freq: 1.47754e-07
1709   	movl    RSI, #-10	# int
170e   	movl    RBP, [rsp + #56]	# spill
      	nop 	# 1 bytes pad for loops and calls
1713   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=5912}
1718   	int3	# ShouldNotReachHere
1718
171d   B230: #	N3749 &lt;- B113  Freq: 1.47754e-07
171d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1723   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.Character::codePointAt @ bci:2  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=5928}
1728   	int3	# ShouldNotReachHere
1728
172d   B231: #	N3749 &lt;- B121  Freq: 1.47753e-07
172d   	movl    RSI, #-10	# int
1732   	movq    RBP, [rsp + #24]	# spill
1737   	movq    [rsp + #8], R13	# spill
      	nop 	# 3 bytes pad for loops and calls
173f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #60 STK[3]=rsp + #8
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=Oop [8]=Oop off=5956}
1744   	int3	# ShouldNotReachHere
1744
1749   B232: #	N3749 &lt;- B123  Freq: 1.47753e-07
1749   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
174f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=5972}
1754   	int3	# ShouldNotReachHere
1754
1759   B233: #	N3749 &lt;- B73  Freq: 1.34302e-07
1759   	# exception oop is in rax; no code emitted
1759   	movq    RSI, RAX	# spill
175c   	addq    rsp, 112	# Destroy frame
	popq   rbp

1761   	jmp     rethrow_stub
1761
1766   B234: #	N3749 &lt;- B60  Freq: 1.36127e-08
1766   	movq    RBP, [rsp + #24]	# spill
176b   	movss   [rsp + #0], XMM3	# spill
1770   	movq    [rsp + #8], R13	# spill
      	nop 	# 2 bytes pad for loops and calls
1777   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=Oop [8]=Oop off=6012}
177c   	int3	# ShouldNotReachHere
177c
1781   B235: #	N3749 &lt;- B71  Freq: 1.36085e-08
1781   	movq    RBP, [rsp + #24]	# spill
1786   	movl    [rsp + #0], R10	# spill
178a   	movq    [rsp + #8], R13	# spill
178f   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
1797   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=rsp + #8
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{rbp=Oop [8]=Oop off=6044}
179c   	int3	# ShouldNotReachHere
179c
17a1   B236: #	N3749 &lt;- B155  Freq: 4.96597e-11
17a1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
17a7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$Start::match @ bci:64  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=#0 STK[2]=rsp + #68
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=6060}
17ac   	int3	# ShouldNotReachHere
17ac
17b1   B237: #	N3749 &lt;- B152  Freq: 4.46377e-11
17b1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
17b7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=rsp + #12
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=6076}
17bc   	int3	# ShouldNotReachHere
17bc
17c1   B238: #	N3749 &lt;- B165  Freq: 4.11126e-12
17c1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
17c7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.regex.Pattern$LastNode::match @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=#0 STK[2]=rsp + #12
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$CharProperty::match @ bci:37  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Pattern$Slice::match @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # java.util.regex.Pattern$Start::match @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.util.regex.Matcher::search @ bci:86  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=6092}
17cc   	int3	# ShouldNotReachHere
17cc

</opto_assembly>
<writer thread='139941922150144'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='275'>
{method}
 - this oop:          0x00007f46c66ad2e0
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f46c66a90e8 constant pool [680] {0x00007f46c66a90e8} for &apos;java/lang/String&apos; cache=0x00007f46c67725e0
 - access:            0xc1000001  public 
 - name:              &apos;equals&apos;
 - signature:         &apos;(Ljava/lang/Object;)Z&apos;
 - max stack:         4
 - max locals:        7
 - size of params:    2
 - method size:       12
 - intrinsic id:      67 _equals
 - highest level:     3
 - vtable index:      1
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef7f0: 0xbb000000 i2c: 0x00007f46c9145fa0 c2i: 0x00007f46c91460de c2iUV: 0x00007f46c91460b1
 - compiled entry     0x00007f46c922e420
 - code size:         81
 - code start:        0x00007f46c66ad220
 - code end (excl):   0x00007f46c66ad271
 - method data:       0x00007f46c68ecc40
 - checked ex length: 0
 - linenumber start:  0x00007f46c66ad271
 - localvar length:   7
 - localvar start:    0x00007f46c66ad28a
 - compiled code: nmethod   2022    8       3       java.lang.String::equals (81 bytes)
#
#  bool ( java/lang/String:NotNull:exact *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N357: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B30 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (168 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	movq    R11, RSI	# spill
02f   	cmpq    RSI, RDX	# ptr
032   	je,u  B30  P=0.096181 C=4190.000000
032
038   B2: #	B28 B3 &lt;- B1  Freq: 0.903819
038   	movl    RDI, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
03b   	testq   RDX, RDX	# ptr
03e   	je     B28  P=0.001000 C=-1.000000
03e
044   B3: #	B34 B4 &lt;- B2  Freq: 0.902915
044   	movl    R9, #-1	# int
04a   	movl    R10, [RDX + #8 (8-bit)]	# compressed klass ptr
04e   	cmpl    R10, narrowklass: precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# compressed klass ptr
055   	jne,u  B34  P=0.000000 C=-1.000000
055
05b   B4: #	B35 B5 &lt;- B3  Freq: 0.902915
05b   	movl    RSI, #-10	# int
060   	movl    RBX, [RDI + #12 (8-bit)]	# range
063   	NullCheck RDI
063
063   B5: #	B36 B6 &lt;- B4  Freq: 0.902914
063   	# checkcastPP of RDX
063   	movl    RCX, RBX	# spill
065   	addl    RCX, #-2	# int
068   	movl    RAX, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
06b   	cmpl    RCX, R9
06e   	cmovllt RCX, R9	# max
072   	movl    R11, [RAX + #12 (8-bit)]	# range
076   	NullCheck RAX
076
076   B6: #	B28 B7 &lt;- B5  Freq: 0.902913
076   	movl    R10, RBX	# spill
079   	subl    R10, R11	# int
07c   	decl    R10	# int
07f   	cmpl    R10, R9
082   	cmovllt R10, R9	# max
086   	cmpl    RBX, R11
089   	jne     B28  P=0.330164 C=3786.000000
089
08f   B7: #	B27 B8 &lt;- B6  Freq: 0.604804
08f   	testl   RBX, RBX
091   	je     B27  P=0.075121 C=33386.000000
091
097   B8: #	B9 &lt;- B7  Freq: 0.55937
097   	movl    [rsp + #0], R11	# spill
09b   	movl    R9, R10	# spill
09e   	addl    R9, #3	# int
0a2   	movl    R14, RBX	# spill
0a5   	decl    R14	# int
0a8   	movslq  R8, RBX	# i2l
0ab   	movl    R13, #2147483647	# int
0b1   	movl    RDX, R14	# spill
0b4   	xorl    R11, R11	# int
0b7   	movdl   XMM1, R11	# spill
0b7
0bc   B9: #	B32 B10 &lt;- B8 B12 	Loop: B9-B12 inner pre of N329 Freq: 1.11772
0bc   	movl    R11, R14	# spill
0bf   	subl    R11, RDX	# int
0c2   	movslq  RBP, RDX	# i2l
0c5   	movq    RSI, R8	# spill
0c8   	subq    RSI, RBP	# long
0cb   	cmpl    R11, RBX	# unsigned
0ce   	jnb,u  B32  P=0.000001 C=-1.000000
0ce
0d4   B10: #	B33 B11 &lt;- B9  Freq: 1.11772
0d4   	movzwl  RBP, [RDI + #14 + RSI &lt;&lt; #1]	# ushort/char
0d9   	cmpl    R11, [RSP + #0 (32-bit)]	# unsigned
0dd   	jnb,u  B33  P=0.000001 C=-1.000000
0dd
0e3   B11: #	B31 B12 &lt;- B10  Freq: 1.11772
0e3   	movzwl  R11, [RAX + #14 + RSI &lt;&lt; #1]	# ushort/char
0e9   	cmpl    RBP, R11
0ec   	jne     B31  P=0.000907 C=30878.000000
0ec
0f2   B12: #	B9 B13 &lt;- B11  Freq: 1.11671
0f2   	decl    RDX	# int
0f4   	cmpl    RDX, RCX
0f6   	jg,s   B9	# loop end  P=0.500000 C=30850.000000
0f6
0f8   B13: #	B20 B14 &lt;- B12  Freq: 0.558355
0f8   	cmpl    R10, R9
0fb   	cmovlg R9, R13	# signed, int
0ff   	cmpl    RDX, R9
102   	jle,s   B20  P=0.000001 C=-1.000000
102
104   B14: #	B15 &lt;- B13  Freq: 0.558354
104   	# castII of RDX
104
104   B15: #	B31 B16 &lt;- B14 B19 	Loop: B15-B19 inner main of N125 Freq: 7.11539
104   	movslq  R10, RDX	# i2l
107   	movl    RBP, RDX	# spill
109   	addl    RBP, #-2	# int
10c   	movq    R11, R8	# spill
10f   	subq    R11, R10	# long
112   	movzwl  R10, [RAX + #14 + R11 &lt;&lt; #1]	# ushort/char
118   	movzwl  RSI, [RDI + #14 + R11 &lt;&lt; #1]	# ushort/char
11e   	movslq  RCX, RBP	# i2l
121   	movq    R13, R8	# spill
124   	subq    R13, RCX	# long
127   	movzwl  RCX, [RAX + #16 + R13 &lt;&lt; #1]	# ushort/char
12d   	movzwl  RBP, [RAX + #14 + R13 &lt;&lt; #1]	# ushort/char
133   	cmpl    RSI, R10
136   	jne     B31  P=0.000907 C=30878.000000
136
13c   B16: #	B31 B17 &lt;- B15  Freq: 7.10894
13c   	movzwl  R10, [RAX + #16 + R11 &lt;&lt; #1]	# ushort/char
142   	movzwl  RSI, [RDI + #16 + R11 &lt;&lt; #1]	# ushort/char
148   	cmpl    RSI, R10
14b   	jne,s   B31  P=0.000907 C=30878.000000
14b
14d   B17: #	B31 B18 &lt;- B16  Freq: 7.10249
14d   	movzwl  R10, [RDI + #16 + R13 &lt;&lt; #1]	# ushort/char
153   	addl    RDX, #-4	# int
156   	movzwl  R11, [RDI + #14 + R13 &lt;&lt; #1]	# ushort/char
15c   	cmpl    R11, RBP
15f   	jne,s   B31  P=0.000907 C=30878.000000
15f
161   B18: #	B31 B19 &lt;- B17  Freq: 7.09605
161   	cmpl    R10, RCX
164   	jne,s   B31  P=0.000907 C=30878.000000
164
166   B19: #	B15 B20 &lt;- B18  Freq: 7.08962
166   	cmpl    RDX, R9
169   	jg,s   B15	# loop end  P=0.924879 C=30850.000000
169
16b   B20: #	B27 B21 &lt;- B13 B19  Freq: 0.532582
16b   	cmpl    RDX, #-1
16e   	je,s   B27  P=0.500000 C=-1.000000
16e
170   B21: #	B22 &lt;- B20  Freq: 0.266291
170   	# castII of RDX
170
170   B22: #	B32 B23 &lt;- B21 B26 	Loop: B22-B26 inner post of N329 Freq: 0.532098
170   	movl    R10, RDX	# spill
173   	decl    R10	# int
176   	movl    R11, R14	# spill
179   	subl    R11, RDX	# int
17c   	cmpl    R11, RBX	# unsigned
17f   	jnb,us  B32  P=0.000001 C=-1.000000
17f
181   B23: #	B33 B24 &lt;- B22  Freq: 0.532098
181   	movslq  R9, RDX	# i2l
184   	movq    RCX, R8	# spill
187   	subq    RCX, R9	# long
18a   	movzwl  RBP, [RDI + #14 + RCX &lt;&lt; #1]	# ushort/char
18f   	cmpl    R11, [RSP + #0 (32-bit)]	# unsigned
193   	jnb,us  B33  P=0.000001 C=-1.000000
193
195   B24: #	B31 B25 &lt;- B23  Freq: 0.532097
195   	movzwl  R9, [RAX + #14 + RCX &lt;&lt; #1]	# ushort/char
19b   	cmpl    RBP, R9
19e   	jne,s   B31  P=0.000907 C=30878.000000
19e
1a0   B25: #	B27 B26 &lt;- B24  Freq: 0.531615
1a0   	cmpl    R10, #-1
1a4   	je,s   B27	# loop end  P=0.500000 C=30850.000000
1a4
1a6   B26: #	B22 &lt;- B25  Freq: 0.265807
1a6   	movl    RDX, R10	# spill
1a9   	jmp,s   B22
1a9
1ab   B27: #	B29 &lt;- B20 B7 B25  Freq: 0.577532
1ab   	movl    RAX, #1	# int
1b0   	jmp,s   B29
1b0
1b2   B28: #	B29 &lt;- B6 B2  Freq: 0.299013
1b2   	xorl    RAX, RAX	# int
1b4
1b4   B29: #	N357 &lt;- B30 B31 B27 B28  Freq: 0.999995
1b4   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

1bf   	ret
1bf
1c0   B30: #	B29 &lt;- B1  Freq: 0.0961814
1c0   	movl    RAX, #1	# int
1c5   	jmp,s   B29
1c5
1c7   B31: #	B29 &lt;- B24 B17 B11 B15 B16 B18  Freq: 0.0272689
1c7   	movdl   RAX, XMM1	# spill
1cb   	jmp,s   B29
1cb
1cd   B32: #	N357 &lt;- B22 B9  Freq: 1.67173e-06
1cd   	movl    RBP, RDX	# spill
1cf   	movl    [rsp + #4], RAX	# spill
1d3   	movl    [rsp + #12], RDI	# spill
1d7   	movl    [rsp + #16], R11	# spill
1dc   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
1e3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::equals @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=RBP L[4]=rsp + #12 L[5]=rsp + #4 L[6]=rsp + #16 STK[0]=rsp + #12 STK[1]=rsp + #16
        # OopMap{[4]=NarrowOop [12]=NarrowOop off=488}
1e8   	int3	# ShouldNotReachHere
1e8
1ed   B33: #	N357 &lt;- B23 B10  Freq: 1.67173e-06
1ed   	movl    [rsp + #0], RDX	# spill
1f0   	movl    [rsp + #4], RDI	# spill
1f4   	movl    [rsp + #16], RAX	# spill
1f8   	movl    [rsp + #20], R11	# spill
1fd   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
203   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::equals @ bci:65  L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #0 L[4]=rsp + #4 L[5]=rsp + #16 L[6]=rsp + #20 STK[0]=RBP STK[1]=rsp + #16 STK[2]=rsp + #20
        # OopMap{[4]=NarrowOop [16]=NarrowOop off=520}
208   	int3	# ShouldNotReachHere
208
20d   B34: #	N357 &lt;- B3  Freq: 1e-35
20d   	movl    RSI, #-34	# int
212   	movq    RBP, R11	# spill
215   	movq    [rsp + #8], RDX	# spill
      	nop 	# 1 bytes pad for loops and calls
21b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::equals @ bci:8  L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=544}
220   	int3	# ShouldNotReachHere
220
225   B35: #	N357 &lt;- B4  Freq: 9.14905e-07
      	nop 	# 2 bytes pad for loops and calls
227   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::equals @ bci:23  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=556}
22c   	int3	# ShouldNotReachHere
22c
231   B36: #	N357 &lt;- B5  Freq: 9.14904e-07
      	nop 	# 2 bytes pad for loops and calls
233   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::equals @ bci:30  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=568}
238   	int3	# ShouldNotReachHere
238

</opto_assembly>
<writer thread='139941923202816'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='298'>
{method}
 - this oop:          0x00007f46c6a920e8
 - method holder:     &apos;jdk/internal/org/objectweb/asm/ByteVector&apos;
 - constants:         0x00007f46c6a913d8 constant pool [90] {0x00007f46c6a913d8} for &apos;jdk/internal/org/objectweb/asm/ByteVector&apos; cache=0x00007f46c6a925f8
 - access:            0xc1000001  public 
 - name:              &apos;putUTF8&apos;
 - signature:         &apos;(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/ByteVector;&apos;
 - max stack:         5
 - max locals:        7
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      7
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef7f0: 0xbb000000 i2c: 0x00007f46c9145fa0 c2i: 0x00007f46c91460de c2iUV: 0x00007f46c91460b1
 - compiled entry     0x00007f46c929c820
 - code size:         142
 - code start:        0x00007f46c6a91fe8
 - code end (excl):   0x00007f46c6a92076
 - method data:       0x00007f46c6af3250
 - checked ex length: 0
 - linenumber start:  0x00007f46c6a92076
 - localvar length:   7
 - localvar start:    0x00007f46c6a92092
 - compiled code: nmethod   2068  215       3       jdk.internal.org.objectweb.asm.ByteVector::putUTF8 (142 bytes)
#
#  jdk/internal/org/objectweb/asm/ByteVector * ( jdk/internal/org/objectweb/asm/ByteVector:NotNull *, java/lang/String:exact * )
#
#r018 rsi:rsi   : parm 0: jdk/internal/org/objectweb/asm/ByteVector:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/String:exact *
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N800: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B71 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (264 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c   	movq    R10, RSI	# spill
02f   	movl    R14, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
033   	NullCheck RDX
033
033   B2: #	B72 B3 &lt;- B1  Freq: 0.999999
033   	movl    RSI, #-155	# int
038   	movl    RBX, [R14 + #12 (8-bit)]	# range
03c   	NullCheck R14
03c
03c   B3: #	B68 B4 &lt;- B2  Freq: 0.999998
03c   	movq    R13, R10	# spill
03f   	movl    RAX, [R10 + #12 (8-bit)]	# int ! Field: jdk/internal/org/objectweb/asm/ByteVector.length
043   	cmpl    RBX, #65535
049   	jg     B68  P=0.000000 C=748.000000
049
04f   B4: #	B73 B5 &lt;- B3  Freq: 0.999997
04f   	movl    R10, RAX	# spill
052   	incl    R10	# int
055   	movsbl  RBP, RBX	# i2b
058   	movl    R11, RBX	# spill
05b   	addl    R11, RAX	# int
05e   	movl    RSI, #-10	# int
063   	movl    RCX, [R13 + #16 (8-bit)]	# compressed ptr ! Field: jdk/internal/org/objectweb/asm/ByteVector.data
067   	movl    R8, RBX	# spill
06a   	shrl    R8, #8
06e   	movsbl  R9, R8	# i2b
072   	movl    RDI, [RCX + #12 (8-bit)]	# range
075   	NullCheck RCX
075
075   B5: #	B9 B6 &lt;- B4  Freq: 0.999996
075   	movl    [rsp + #36], R8	# spill
07a   	movl    [rsp + #32], RBP	# spill
07e   	movl    [rsp + #12], R10	# spill
083   	movl    [rsp + #4], RAX	# spill
087   	movl    [rsp + #8], RBX	# spill
08b   	movq    [rsp + #24], R13	# spill
090   	movq    [rsp + #16], RDX	# spill
095   	movl    [rsp + #0], R11	# spill
099   	addl    R11, #2	# int
09d   	movslq  RBP, RAX	# i2l
0a0   	movl    RDX, RBX	# spill
0a2   	addl    RDX, #2	# int
0a5   	cmpl    R11, RDI
0a8   	jle,s   B9  P=0.792781 C=748.000000
0a8
0aa   B6: #	B70 B7 &lt;- B5  Freq: 0.207219
0aa   	movl    [rsp + #40], R9	# spill
0af   	movq    RSI, R13	# spill
      	nop 	# 1 bytes pad for loops and calls
0b3   	call,static  jdk.internal.org.objectweb.asm.ByteVector::enlarge
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:41  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #8 L[3]=rsp + #4 L[4]=_ L[5]=_ L[6]=_
        # OopMap{[16]=Oop [24]=Oop off=184}
0b8
0b8   B7: #	B69 B8 &lt;- B6  Freq: 0.207214
        # Block is sole successor of call
0b8   	movq    R10, [rsp + #24]	# spill
0bd   	movl    RCX, [R10 + #16 (8-bit)]	# compressed ptr ! Field: jdk/internal/org/objectweb/asm/ByteVector.data
0c1   	testl   RCX, RCX	# compressed ptr
0c3   	je     B69  P=0.000001 C=-1.000000
0c3
0c9   B8: #	B9 &lt;- B7  Freq: 0.207214
0c9   	movq    R11, [rsp + #16]	# spill
0ce   	movl    R14, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
0d2   	movl    R9, [rsp + #40]	# spill
0d2
0d7   B9: #	B58 B10 &lt;- B8 B5  Freq: 0.999992
0d7   	movslq  RDI, [RSP + #4 (32-bit)]	# int -&gt; long
0dc   	movl    R8, [RCX + #12 (8-bit)]	# range
0e0   	movl    RBX, [rsp + #8]	# spill
0e4   	decl    RBX	# int
0e6   	movl    R10, [rsp + #4]	# spill
0eb   	cmpl    R10, R8	# unsigned
0ee   	jnb,u  B58  P=0.000001 C=-1.000000
0ee
0f4   B10: #	B59 B11 &lt;- B9  Freq: 0.999991
0f4   	xorl    R9, R9	# int
0f7   	movl    R11, [rsp + #36]	# spill
0fc   	movb    [RCX + #16 + RDI], R11	# byte
101   	movl    RSI, #-28	# int
106   	movl    RDX, R10	# spill
109   	addl    RDX, #2	# int
10c   	movl    R11, [rsp + #12]	# spill
111   	cmpl    R11, R8	# unsigned
114   	jnb,u  B59  P=0.000001 C=-1.000000
114
11a   B11: #	B44 B12 &lt;- B10  Freq: 0.99999
11a   	movl    R11, [rsp + #8]	# spill
11f   	movb    [RCX + #17 + RBP], R11	# byte
124   	movl    RSI, #-122	# int
129   	testl   R11, R11
12c   	jle     B44  P=0.029343 C=25492.000000
12c
132   B12: #	B60 B13 &lt;- B11  Freq: 0.970648
132   	movl    RBP, [rsp + #0]	# spill
135   	incl    RBP	# int
137   	movl    RDI, [R14 + #12 (8-bit)]	# range
13b   	NullCheck R14
13b
13b   B13: #	B60 B14 &lt;- B12  Freq: 0.970647
13b   	testl  RDI, RDI	# unsigned
13d   	jbe,u  B60  P=0.000001 C=-1.000000
13d
143   B14: #	B60 B15 &lt;- B13  Freq: 0.970646
143   	cmpl    RBX, RDI	# unsigned
145   	jnb,u  B60  P=0.000001 C=-1.000000
145
14b   B15: #	B60 B16 &lt;- B14  Freq: 0.970645
14b   	movl    R10, #1	# int
151   	cmpl    RDX, R8	# unsigned
154   	jnb,u  B60  P=0.000001 C=-1.000000
154
15a   B16: #	B60 B17 &lt;- B15  Freq: 0.970644
15a   	movl    [rsp + #32], R11	# spill
15f   	movl    [rsp + #36], RDI	# spill
163   	cmpl    R11, RDI
166   	movl    RBX, R11	# spill
169   	cmovlgt RBX, RDI	# min
16c   	movl    RAX, #-2147483648	# int
171   	movl    R11, [rsp + #8]	# spill
176   	cmpl    R11, R10
179   	movl    RDI, R11	# spill
17c   	cmovlgt RDI, R10	# min
180   	cmpl    RBP, R8	# unsigned
183   	jnb,u  B60  P=0.000001 C=-1.000000
183
189   B17: #	B18 &lt;- B16  Freq: 0.970643
189   	movl    RBP, RBX	# spill
18b   	addl    RBP, #-3	# int
18e   	cmpl    RBX, RBP
190   	cmovll RBP, RAX	# signed, int
190
193   B18: #	B62 B19 &lt;- B17 B22 	Loop: B18-B22 inner pre of N412 Freq: 1.94128
193   	movl    RDX, R9	# spill
196   	addl    RDX, [RSP + #4 (32-bit)]	# int
19a   	movl    R11, RDX	# spill
19d   	addl    R11, #2	# int
1a1   	testl   R9, R9
1a4   	jl     B62  P=0.000000 C=5790.000000
1a4
1aa   B19: #	B66 B20 &lt;- B18  Freq: 1.94128
1aa   	movl    R10, RDX	# spill
1ad   	addl    R10, #2	# int
1b1   	cmpl    R9, [RSP + #36 (32-bit)]
1b6   	jge     B66  P=0.000000 C=5790.000000
1b6
1bc   B20: #	B65 B21 &lt;- B19  Freq: 1.94128
1bc   	movzwl  R13, [R14 + #16 + R9 &lt;&lt; #1]	# ushort/char
1c2   	cmpl    R13, #1
1c6   	jl     B65  P=0.000000 C=24744.000000
1c6
1cc   B21: #	B56 B22 &lt;- B20  Freq: 1.94128
1cc   	movl    R10, RDX	# spill
1cf   	addl    R10, #2	# int
1d3   	movslq  R11, RDX	# i2l
1d6   	cmpl    R13, #127
1da   	jg     B56  P=0.000000 C=24744.000000
1da
1e0   B22: #	B18 B23 &lt;- B21  Freq: 1.94128
1e0   	movb    [RCX + #18 + R11], R13	# byte
1e5   	incl    R9	# int
1e8   	cmpl    R9, RDI
1eb   	jl,s   B18	# loop end  P=0.500000 C=24744.000000
1eb
1ed   B23: #	B61 B24 &lt;- B22  Freq: 0.970639
1ed   	cmpl    R9, RBP
1f0   	jge     B61  P=0.000001 C=-1.000000
1f0
1f6   B24: #	B26 &lt;- B23  Freq: 0.970638
1f6   	# castII of R9
1f6   	jmp,s   B26
      	nop 	# 8 bytes pad for loops and calls

200   B25: #	B26 &lt;- B34  top-of-loop Freq: 32.1046
200   	movl    R9, RBX	# spill
200
203   B26: #	B45 B27 &lt;- B24 B25 	Loop: B26-B25 inner main of N245 Freq: 33.0753
203   	movzwl  RDI, [R14 + #16 + R9 &lt;&lt; #1]	# ushort/char
209   	movslq  RAX, R9	# i2l
20c   	movl    RDX, R9	# spill
20f   	addl    RDX, [RSP + #4 (32-bit)]	# int
213   	movl    R8, RDX	# spill
216   	addl    R8, #4	# int
21a   	movl    RSI, RDX	# spill
21c   	addl    RSI, #2	# int
21f   	cmpl    RDI, #1
222   	jl     B45  P=0.000000 C=24744.000000
222
228   B27: #	B51 B28 &lt;- B26  Freq: 33.0753
228   	movl    R10, RDX	# spill
22b   	addl    R10, #5	# int
22f   	movzwl  R11, [R14 + #20 + RAX &lt;&lt; #1]	# ushort/char
235   	movl    RBX, RDX	# spill
237   	addl    RBX, #3	# int
23a   	movzwl  R13, [R14 + #22 + RAX &lt;&lt; #1]	# ushort/char
240   	cmpl    RDI, #127
243   	jg     B51  P=0.000000 C=24744.000000
243
249   B28: #	B47 B29 &lt;- B27  Freq: 33.0752
249   	movzwl  RAX, [R14 + #18 + RAX &lt;&lt; #1]	# ushort/char
24f   	movslq  RSI, RDX	# i2l
252   	movb    [RCX + #18 + RSI], RDI	# byte
257   	cmpl    RAX, #1
25a   	jl     B47  P=0.000000 C=24744.000000
25a
260   B29: #	B53 B30 &lt;- B28  Freq: 33.0752
260   	movl    RDI, RDX	# spill
262   	addl    RDI, #3	# int
265   	cmpl    RAX, #127
268   	jg     B53  P=0.000000 C=24744.000000
268
26e   B30: #	B46 B31 &lt;- B29  Freq: 33.0752
26e   	movb    [RCX + #19 + RSI], RAX	# byte
272   	movl    RDI, R9	# spill
275   	addl    RDI, #2	# int
278   	cmpl    R11, #1
27c   	jl     B46  P=0.000000 C=24744.000000
27c
282   B31: #	B52 B32 &lt;- B30  Freq: 33.0752
282   	addl    RDX, #3	# int
285   	movl    RBX, R9	# spill
288   	addl    RBX, #4	# int
28b   	movl    RAX, R9	# spill
28e   	addl    RAX, #2	# int
291   	cmpl    R11, #127
295   	jg     B52  P=0.000000 C=24744.000000
295
29b   B32: #	B48 B33 &lt;- B31  Freq: 33.0752
29b   	movl    RDI, R9	# spill
29e   	addl    RDI, #2	# int
2a1   	movb    [RCX + #20 + RSI], R11	# byte
2a6   	cmpl    R13, #1
2aa   	jl     B48  P=0.000000 C=24744.000000
2aa
2b0   B33: #	B54 B34 &lt;- B32  Freq: 33.0752
2b0   	cmpl    R13, #127
2b4   	jg     B54  P=0.000000 C=24744.000000
2b4
2ba   B34: #	B25 B35 &lt;- B33  Freq: 33.0752
2ba   	movb    [RCX + #21 + RSI], R13	# byte
2bf   	cmpl    RBX, RBP
2c1   	jl     B25	# loop end  P=0.970657 C=24744.000000
2c1
2c7   B35: #	B43 B36 &lt;- B61 B34  Freq: 0.97051
2c7   	cmpl    RBX, [RSP + #32 (32-bit)]
2cb   	jge,s   B43  P=0.500000 C=-1.000000
2cb
2cd   B36: #	B37 &lt;- B35  Freq: 0.485255
2cd   	# castII of RBX
      	nop 	# 3 bytes pad for loops and calls

2d0   B37: #	B63 B38 &lt;- B36 B42 	Loop: B37-B42 inner post of N412 Freq: 0.970508
2d0   	movl    RDX, RBX	# spill
2d2   	addl    RDX, [RSP + #4 (32-bit)]	# int
2d6   	movl    R11, RBX	# spill
2d9   	incl    R11	# int
2dc   	testl   RBX, RBX
2de   	jl     B63  P=0.000000 C=5790.000000
2de
2e4   B38: #	B67 B39 &lt;- B37  Freq: 0.970507
2e4   	movl    RBP, RDX	# spill
2e6   	addl    RBP, #2	# int
2e9   	movzwl  R13, [R14 + #16 + RBX &lt;&lt; #1]	# ushort/char
2ef   	cmpl    RBX, [RSP + #36 (32-bit)]
2f3   	jge     B67  P=0.000000 C=5790.000000
2f3
2f9   B39: #	B50 B40 &lt;- B38  Freq: 0.970507
2f9   	movl    R10, RDX	# spill
2fc   	addl    R10, #2	# int
300   	cmpl    R13, #1
304   	jl,s   B50  P=0.000000 C=24744.000000
304
306   B40: #	B57 B41 &lt;- B39  Freq: 0.970506
306   	movslq  R8, RDX	# i2l
309   	movl    R10, RDX	# spill
30c   	addl    R10, #2	# int
310   	cmpl    R13, #127
314   	jg     B57  P=0.000000 C=24744.000000
314
31a   B41: #	B43 B42 &lt;- B40  Freq: 0.970506
31a   	movb    [RCX + #18 + R8], R13	# byte
31f   	cmpl    R11, [RSP + #32 (32-bit)]
324   	jge,s   B43	# loop end  P=0.500000 C=24744.000000
324
326   B42: #	B37 &lt;- B41  Freq: 0.485253
326   	movl    RBX, R11	# spill
329   	jmp,s   B37
329
32b   B43: #	B44 &lt;- B41 B35  Freq: 0.970508
32b   	addl    RDX, #3	# int
32e
32e   B44: #	N800 &lt;- B43 B11  Freq: 0.99985
32e   	movq    RAX, [rsp + #24]	# spill
333   	movl    [RAX + #12 (8-bit)], RDX	# int ! Field: jdk/internal/org/objectweb/asm/ByteVector.length
336   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

341   	ret
341
342   B45: #	B46 &lt;- B26  Freq: 1.65376e-05
342   	movl    R8, RDX	# spill
345   	addl    R8, #2	# int
349   	movl    R11, RDI	# spill
34c   	movl    RDI, R9	# spill
34c
34f   B46: #	B49 &lt;- B45 B30  Freq: 3.30752e-05
34f   	movl    R13, R11	# spill
352   	movl    R10, R8	# spill
355   	jmp,s   B49
355
357   B47: #	B48 &lt;- B28  Freq: 1.65376e-05
357   	movl    R13, RAX	# spill
35a   	movl    RDI, R9	# spill
35d   	movl    R10, RBX	# spill
35d
360   B48: #	B49 &lt;- B47 B32  Freq: 3.30752e-05
360   	incl    RDI	# int
362
362   B49: #	B50 &lt;- B65 B46 B48  Freq: 6.71211e-05
362   	movl    RBX, RDI	# spill
362
364   B50: #	N800 &lt;- B39 B49  Freq: 6.76064e-05
364   	movl    RBP, R10	# spill
367   	movl    [rsp + #0], RCX	# spill
36a   	movl    [rsp + #4], RBX	# spill
36e   	movl    [rsp + #12], R13	# spill
373   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
37b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:91  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #12 STK[0]=rsp + #12 STK[1]=#1
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=896}
380   	int3	# ShouldNotReachHere
380
385   B51: #	B52 &lt;- B27  Freq: 1.57715e-05
385   	movl    R11, RDI	# spill
388   	movl    RAX, R9	# spill
38b   	movl    R8, RSI	# spill
38b
38e   B52: #	B56 &lt;- B51 B31  Freq: 3.1543e-05
38e   	movl    R13, R11	# spill
391   	movl    R9, RAX	# spill
394   	movl    R10, R8	# spill
397   	jmp,s   B56
397
399   B53: #	B55 &lt;- B29  Freq: 1.57715e-05
399   	movl    R13, RAX	# spill
39c   	movl    R10, RDI	# spill
39f   	jmp,s   B55
39f
3a1   B54: #	B55 &lt;- B33  Freq: 1.57715e-05
3a1   	addl    R9, #2	# int
3a5
3a5   B55: #	B56 &lt;- B53 B54  Freq: 3.1543e-05
3a5   	incl    R9	# int
3a8
3a8   B56: #	B57 &lt;- B21 B52 B55  Freq: 6.40116e-05
3a8   	movl    RBX, R9	# spill
3a8
3ab   B57: #	N800 &lt;- B40 B56  Freq: 6.44744e-05
3ab   	movl    RBP, R10	# spill
3ae   	movl    [rsp + #0], RCX	# spill
3b1   	movl    [rsp + #4], RBX	# spill
3b5   	movl    [rsp + #12], R13	# spill
3ba   	movl    RSI, #-155	# int
3bf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:98  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=rsp + #0 L[5]=rsp + #4 L[6]=rsp + #12 STK[0]=rsp + #12 STK[1]=#127
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=964}
3c4   	int3	# ShouldNotReachHere
3c4
3c9   B58: #	N800 &lt;- B9  Freq: 1.01327e-06
3c9   	movl    RSI, #-28	# int
3ce   	movl    [rsp + #0], RCX	# spill
3d1   	movl    [rsp + #32], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
3d7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:61  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=rsp + #0 L[5]=_ L[6]=_ STK[0]=rsp + #0 STK[1]=rsp + #4 STK[2]=rsp + #32
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=988}
3dc   	int3	# ShouldNotReachHere
3dc
3e1   B59: #	N800 &lt;- B10  Freq: 1.01327e-06
3e1   	movl    RBP, RDX	# spill
3e3   	movl    [rsp + #4], RCX	# spill
3e7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:70  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #8 L[3]=RBP L[4]=rsp + #4 L[5]=_ L[6]=_ STK[0]=rsp + #4 STK[1]=rsp + #12 STK[2]=rsp + #32
        # OopMap{[4]=NarrowOop [16]=Oop [24]=Oop off=1004}
3ec   	int3	# ShouldNotReachHere
3ec
3f1   B60: #	N800 &lt;- B16 B12 B13 B14 B15  Freq: 4.90479e-06
3f1   	movl    RBP, RDX	# spill
3f3   	movl    [rsp + #0], RCX	# spill
3f6   	movl    [rsp + #4], R11	# spill
3fb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:80  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #4 L[3]=RBP L[4]=rsp + #0 L[5]=#0 L[6]=_
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=1024}
400   	int3	# ShouldNotReachHere
400
405   B61: #	B35 &lt;- B23  Freq: 9.83528e-07
405   	movl    RBX, R9	# spill
408   	jmp     B35
408
40d   B62: #	B64 &lt;- B18  Freq: 9.70641e-07
40d   	movl    RBX, R9	# spill
410   	movl    RDX, R11	# spill
413   	jmp,s   B64
413
415   B63: #	B64 &lt;- B37  Freq: 4.85254e-07
415   	addl    RDX, #2	# int
418
418   B64: #	N800 &lt;- B63 B62  Freq: 1.45589e-06
418   	movl    RBP, RDX	# spill
41a   	movl    [rsp + #0], RCX	# spill
41d   	movl    [rsp + #8], RBX	# spill
421   	movl    [rsp + #12], RBX	# spill
425   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
42b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #16 L[1]=rsp + #12 STK[0]=rsp + #8
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:83  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=rsp + #0 L[5]=rsp + #8 L[6]=_
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=1072}
430   	int3	# ShouldNotReachHere
430
435   B65: #	B49 &lt;- B20  Freq: 9.7064e-07
435   	movl    RDI, R9	# spill
438   	jmp     B49
438
43d   B66: #	B67 &lt;- B19  Freq: 9.25675e-07
43d   	movl    RBP, RDX	# spill
43f   	addl    RBP, #2	# int
442   	movl    RBX, R9	# spill
442
445   B67: #	N800 &lt;- B38 B66  Freq: 1.38845e-06
445   	movl    [rsp + #0], RCX	# spill
448   	movl    [rsp + #8], RBX	# spill
44c   	movl    [rsp + #12], RBX	# spill
450   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
457   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #16 L[1]=rsp + #12 STK[0]=rsp + #8 STK[1]=rsp + #36
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:83  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=rsp + #0 L[5]=rsp + #8 L[6]=_
        # OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=1116}
45c   	int3	# ShouldNotReachHere
45c
461   B68: #	N800 &lt;- B3  Freq: 4.76836e-07
461   	movq    RBP, R10	# spill
464   	movq    [rsp + #0], RDX	# spill
468   	movl    [rsp + #12], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
46f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:8  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #12 STK[1]=#65535
        # OopMap{rbp=Oop [0]=Oop off=1140}
474   	int3	# ShouldNotReachHere
474
479   B69: #	N800 &lt;- B7  Freq: 2.09966e-07
479   	movl    RBP, [rsp + #4]	# spill
47d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
483   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:61  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #40
        # OopMap{off=1160}
488   	int3	# ShouldNotReachHere
488
48d   B70: #	N800 &lt;- B6  Freq: 2.07218e-06
48d   	# exception oop is in rax; no code emitted
48d   	movq    RSI, RAX	# spill
490   	addq    rsp, 64	# Destroy frame
	popq   rbp

495   	jmp     rethrow_stub
495
49a   B71: #	N800 &lt;- B1  Freq: 1.01328e-06
49a   	movl    RSI, #-10	# int
49f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=1188}
4a4   	int3	# ShouldNotReachHere
4a4
4a9   B72: #	N800 &lt;- B2  Freq: 1.01328e-06
4a9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
4af   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap{off=1204}
4b4   	int3	# ShouldNotReachHere
4b4
4b9   B73: #	N800 &lt;- B4  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
4bb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:33  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1216}
4c0   	int3	# ShouldNotReachHere
4c0

</opto_assembly>
<writer thread='139941922150144'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='311'>
{method}
 - this oop:          0x00007f46c66ae588
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f46c66a90e8 constant pool [680] {0x00007f46c66a90e8} for &apos;java/lang/String&apos; cache=0x00007f46c67725e0
 - access:            0xc1000001  public 
 - name:              &apos;lastIndexOf&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         4
 - max locals:        5
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef7a8: 0xbaa00000 i2c: 0x00007f46c9145ca0 c2i: 0x00007f46c9145de0 c2iUV: 0x00007f46c9145db3
 - compiled entry     0x00007f46c9239400
 - code size:         52
 - code start:        0x00007f46c66ae500
 - code end (excl):   0x00007f46c66ae534
 - method data:       0x00007f46c694d788
 - checked ex length: 0
 - linenumber start:  0x00007f46c66ae534
 - localvar length:   5
 - localvar start:    0x00007f46c66ae54a
 - compiled code: nmethod   2104   27       3       java.lang.String::lastIndexOf (52 bytes)
#
#  int ( java/lang/String:NotNull:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N232: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B30 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (152 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movq    R10, RSI	# spill
02f   	movl    R9, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
033   	cmpl    RDX, #65536
039   	jge     B30  P=0.000000 C=1018.000000
039
03f   B2: #	B31 B3 &lt;- B1  Freq: 1
03f   	movl    RSI, #-10	# int
044   	movl    R11, [R9 + #12 (8-bit)]	# range
048   	NullCheck R9
048
048   B3: #	B22 B4 &lt;- B2  Freq: 0.999999
048   	movl    RAX, R11	# spill
04b   	decl    RAX	# int
04d   	movl    RSI, #-122	# int
052   	cmpl    RCX, RAX
054   	cmovll RAX, RCX	# signed, int
057   	testl   RAX, RAX
059   	jl     B22  P=0.002768 C=25646.000000
059
05f   B4: #	B28 B5 &lt;- B3  Freq: 0.99723
05f   	testl  R11, R11	# unsigned
062   	jbe,u  B28  P=0.000001 C=-1.000000
062
068   B5: #	B28 B6 &lt;- B4  Freq: 0.997229
068   	cmpl    RAX, R11	# unsigned
06b   	jnb,u  B28  P=0.000001 C=-1.000000
06b
071   B6: #	B7 &lt;- B5  Freq: 0.997228
071   	movl    R10, RAX	# spill
074   	decl    R10	# int
077
077   B7: #	B26 B8 &lt;- B6 B9 	Loop: B7-B9 inner pre of N162 Freq: 1.92324
077   	movl    R11, RAX	# spill
07a   	decl    R11	# int
07d   	movzwl  R8, [R9 + #16 + RAX &lt;&lt; #1]	# ushort/char
083   	cmpl    R8, RDX
086   	je     B26  P=0.037028 C=25575.000000
086
08c   B8: #	B10 B9 &lt;- B7  Freq: 1.85203
08c   	cmpl    R11, R10
08f   	jle,s   B10	# loop end  P=0.500000 C=24628.000000
08f
091   B9: #	B7 &lt;- B8  Freq: 0.926014
091   	movl    RAX, R11	# spill
094   	jmp,s   B7
094
096   B10: #	B29 B11 &lt;- B8  Freq: 0.926014
096   	cmpl    R11, #2
09a   	jle     B29  P=0.000001 C=-1.000000
09a
0a0   B11: #	B13 &lt;- B10  Freq: 0.926013
0a0   	# castII of R11
0a0   	jmp,s   B13
0a0
0a2   B12: #	B13 &lt;- B17  top-of-loop Freq: 5.57375
0a2   	movl    R11, R10	# spill
0a2
0a5   B13: #	B25 B14 &lt;- B11 B12 	Loop: B13-B12 inner main of N97 Freq: 6.49976
0a5   	movzwl  R10, [R9 + #16 + R11 &lt;&lt; #1]	# ushort/char
0ab   	cmpl    R10, RDX
0ae   	je,s   B25  P=0.037028 C=25575.000000
0ae
0b0   B14: #	B23 B15 &lt;- B13  Freq: 6.25909
0b0   	movl    R10, R11	# spill
0b3   	addl    R10, #-4	# int
0b7   	movl    RAX, R11	# spill
0ba   	addl    RAX, #-2	# int
0bd   	movzwl  RCX, [R9 + #12 + R11 &lt;&lt; #1]	# ushort/char
0c3   	movzwl  R8, [R9 + #14 + R11 &lt;&lt; #1]	# ushort/char
0c9   	cmpl    R8, RDX
0cc   	je,s   B23  P=0.037028 C=25575.000000
0cc
0ce   B15: #	B26 B16 &lt;- B14  Freq: 6.02732
0ce   	movzwl  R11, [R9 + #10 + R11 &lt;&lt; #1]	# ushort/char
0d4   	cmpl    RCX, RDX
0d6   	je,s   B26  P=0.037028 C=25575.000000
0d6
0d8   B16: #	B24 B17 &lt;- B15  Freq: 5.80414
0d8   	cmpl    R11, RDX
0db   	je,s   B24  P=0.037028 C=25575.000000
0db
0dd   B17: #	B12 B18 &lt;- B16  Freq: 5.58922
0dd   	cmpl    R10, #2
0e1   	jg,s   B12	# loop end  P=0.997232 C=24628.000000
0e1
0e3   B18: #	B22 B19 &lt;- B29 B17  Freq: 0.0154745
0e3   	cmpl    R10, #-1
0e7   	jle,s   B22  P=0.500000 C=-1.000000
0e7
0e9   B19: #	B20 &lt;- B18  Freq: 0.00773723
0e9   	# castII of R10
      	nop 	# 3 bytes pad for loops and calls

0ec   B20: #	B27 B21 &lt;- B19 B21 	Loop: B20-B21 inner post of N162 Freq: 0.0149219
0ec   	movzwl  R11, [R9 + #16 + R10 &lt;&lt; #1]	# ushort/char
0f2   	cmpl    R11, RDX
0f5   	je,s   B27  P=0.037028 C=25575.000000
0f5
0f7   B21: #	B20 B22 &lt;- B20  Freq: 0.0143694
0f7   	decl    R10	# int
0fa   	cmpl    R10, #-1
0fe   	jg,s   B20	# loop end  P=0.500000 C=24628.000000
0fe
100   B22: #	B26 &lt;- B18 B3 B21  Freq: 0.0176904
100   	movl    RAX, #-1	# int
105   	jmp,s   B26
105
107   B23: #	B24 &lt;- B14  Freq: 0.231764
107   	movl    RAX, R11	# spill
107
10a   B24: #	B26 &lt;- B23 B16  Freq: 0.446682
10a   	decl    RAX	# int
10c   	jmp,s   B26
10c
10e   B25: #	B26 &lt;- B13  Freq: 0.240676
10e   	movl    RAX, R11	# spill
10e
111   B26: #	N232 &lt;- B27 B7 B25 B15 B24 B22  Freq: 0.999997
111   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

11c   	ret
11c
11d   B27: #	B26 &lt;- B20  Freq: 0.000552535
11d   	movl    RAX, R10	# spill
120   	jmp,s   B26
120
122   B28: #	N232 &lt;- B5 B4  Freq: 2.0077e-06
122   	movl    RBP, RDX	# spill
124   	movl    [rsp + #0], R9	# spill
128   	movl    [rsp + #4], RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
12f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::lastIndexOf @ bci:26  L[0]=_ L[1]=RBP L[2]=_ L[3]=rsp + #0 L[4]=rsp + #4
        # OopMap{[0]=NarrowOop off=308}
134   	int3	# ShouldNotReachHere
134
139   B29: #	B18 &lt;- B10  Freq: 9.3831e-07
139   	movl    R10, R11	# spill
13c   	jmp,s   B18
13c
13e   B30: #	N232 &lt;- B1  Freq: 4.76837e-07
13e   	movl    RSI, #-155	# int
143   	movl    [rsp + #0], RDX	# spill
146   	movq    [rsp + #8], R10	# spill
14b   	movl    [rsp + #4], RCX	# spill
14f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::lastIndexOf @ bci:3  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ L[4]=_ STK[0]=rsp + #0 STK[1]=#65536
        # OopMap{[8]=Oop off=340}
154   	int3	# ShouldNotReachHere
154
159   B31: #	N232 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
15b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::lastIndexOf @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=352}
160   	int3	# ShouldNotReachHere
160

</opto_assembly>
<writer thread='139941923202816'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='318' compile_kind='osr'>
{method}
 - this oop:          0x00007f46c6ae0d40
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f46c6ae07d0 constant pool [84] {0x00007f46c6ae07d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f46c6ae0fa8
 - access:            0xc1000001  public 
 - name:              &apos;preRun&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - vtable index:      5
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c91469dd
 - code size:         48
 - code start:        0x00007f46c6ae0ce8
 - code end (excl):   0x00007f46c6ae0d18
 - method data:       0x00007f46c6ae38c8
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae0d18
 - localvar length:   2
 - localvar start:    0x00007f46c6ae0d26
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N98: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B9 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	movl    RBP, [RSI]	# int
01e   	movq    RBX, [RSI + #8 (8-bit)]	# ptr
022   	movq    RDI, RSI	# spill
025   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
032   	movl    R11, [RBX + #8 (8-bit)]	# compressed klass ptr
036   	NullCheck RBX
036
036   B2: #	B8 B3 &lt;- B1  Freq: 0.999999
036   	movl    RSI, #-99	# int
03b   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4698083120:Constant:exact *	# compressed klass ptr
042   	jne,us  B8  P=0.000001 C=-1.000000
042
044   B3: #	B10 B4 &lt;- B2  Freq: 0.999998
044   	# checkcastPP of RBX
044   	testl   RBP, RBP
046   	jne,s   B10  P=0.000001 C=-1.000000
046
048   B4: #	B6 &lt;- B3  Freq: 0.999997
048   	movl    RSI, #-155	# int
04d   	jmp,s   B6
      	nop 	# 1 bytes pad for loops and calls

050   B5: #	B6 &lt;- B6  top-of-loop Freq: 999996
050   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=RBX L[1]=RBP STK[0]=RBP
        # OopMap{rbx=Oop off=80}
056
056   B6: #	B5 B7 &lt;- B4 B5 	Loop: B6-B5 inner  Freq: 999997
056   	movzbl  R11, [RBX + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
05b   	MEMBAR-acquire ! (empty encoding)
05b   	testl   R11, R11
05e   	jne,s   B5  P=1.000000 C=24123.000000
05e
060   B7: #	N98 &lt;- B6  Freq: 0.999997
060   	movq    [rsp + #0], RBX	# spill
064   	movl    [rsp + #8], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
06b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:19  L[0]=rsp + #0 L[1]=RBP STK[0]=rsp + #8
        # OopMap{[0]=Oop off=112}
070   	int3	# ShouldNotReachHere
070
075   B8: #	N98 &lt;- B2  Freq: 9.99999e-07
075   	movq    [rsp + #0], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
07b   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:15  L[0]=rsp + #0 L[1]=RBP
        # OopMap{[0]=Oop off=128}
080   	int3	# ShouldNotReachHere
080
085   B9: #	B10 &lt;- B1  Freq: 1.01328e-06
085   	xorl    RBX, RBX	# ptr
087
087   B10: #	N98 &lt;- B3 B9  Freq: 2.01328e-06
087   	movl    RSI, #-122	# int
08c   	movq    [rsp + #0], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
093   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:15  L[0]=rsp + #0 L[1]=RBP
        # OopMap{[0]=Oop off=152}
098   	int3	# ShouldNotReachHere
098

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='320' compile_kind='osr'>
{method}
 - this oop:          0x00007f46c6ae0f30
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f46c6ae07d0 constant pool [84] {0x00007f46c6ae07d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f46c6ae0fa8
 - access:            0xc1000001  public 
 - name:              &apos;postConsume&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - vtable index:      7
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c91469dd
 - code size:         33
 - code start:        0x00007f46c6ae0ee8
 - code end (excl):   0x00007f46c6ae0f09
 - method data:       0x00007f46c6ae3cb8
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae0f09
 - localvar length:   2
 - localvar start:    0x00007f46c6ae0f16
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N95: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B8 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	movl    RBP, [RSI]	# int
01e   	movq    RBX, [RSI + #8 (8-bit)]	# ptr
022   	movq    RDI, RSI	# spill
025   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
032   	testq   RBX, RBX	# ptr
035   	je,s   B8  P=0.000001 C=-1.000000
035
037   B2: #	B10 B3 &lt;- B1  Freq: 0.999999
037   	movl    R11, [RBX + #8 (8-bit)]	# compressed klass ptr
03b   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4698054880:Constant:exact *	# compressed klass ptr
042   	jne,us  B10  P=0.000001 C=-1.000000
042
044   B3: #	B9 B4 &lt;- B2  Freq: 0.999998
044   	# checkcastPP of RBX
044   	testl   RBP, RBP
046   	jne,s   B9  P=0.000001 C=-1.000000
046
048   B4: #	B6 &lt;- B3  Freq: 0.999997
048   	movl    RSI, #-155	# int
04d   	jmp,s   B6
      	nop 	# 1 bytes pad for loops and calls

050   B5: #	B6 &lt;- B6  top-of-loop Freq: 999996
050   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=RBX L[1]=RBP STK[0]=RBP
        # OopMap{rbx=Oop off=80}
056
056   B6: #	B5 B7 &lt;- B4 B5 	Loop: B6-B5 inner  Freq: 999997
056   	movzbl  R11, [RBX + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
05b   	MEMBAR-acquire ! (empty encoding)
05b   	testl   R11, R11
05e   	jne,s   B5  P=1.000000 C=24767.000000
05e
060   B7: #	N95 &lt;- B6  Freq: 0.999997
060   	movq    [rsp + #0], RBX	# spill
064   	movl    [rsp + #8], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
06b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:19  L[0]=rsp + #0 L[1]=RBP STK[0]=rsp + #8
        # OopMap{[0]=Oop off=112}
070   	int3	# ShouldNotReachHere
070
075   B8: #	B9 &lt;- B1  Freq: 1.01328e-06
075   	xorl    RBX, RBX	# ptr
077
077   B9: #	N95 &lt;- B3 B8  Freq: 2.01328e-06
077   	movl    RSI, #-122	# int
07c   	movq    [rsp + #0], RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
083   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:15  L[0]=rsp + #0 L[1]=RBP
        # OopMap{[0]=Oop off=136}
088   	int3	# ShouldNotReachHere
088
08d   B10: #	N95 &lt;- B2  Freq: 9.99999e-07
08d   	movl    RSI, #-99	# int
092   	movq    [rsp + #0], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
097   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:15  L[0]=rsp + #0 L[1]=RBP
        # OopMap{[0]=Oop off=156}
09c   	int3	# ShouldNotReachHere
09c

</opto_assembly>
<writer thread='139941922150144'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='321'>
{method}
 - this oop:          0x00007f46c6ae0f30
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f46c6ae07d0 constant pool [84] {0x00007f46c6ae07d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f46c6ae0fa8
 - access:            0xc1000001  public 
 - name:              &apos;postConsume&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - vtable index:      7
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c91469dd
 - code size:         33
 - code start:        0x00007f46c6ae0ee8
 - code end (excl):   0x00007f46c6ae0f09
 - method data:       0x00007f46c6ae3cb8
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae0f09
 - localvar length:   2
 - localvar start:    0x00007f46c6ae0f16
#
#  void ( org/openjdk/jcstress/infra/runners/StateHolder:NotNull *, bool )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/runners/StateHolder:NotNull *
#r016 rdx   : parm 1: bool
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N139: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B9 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    [rsp + #8], RDX	# spill
030   	movq    [rsp + #0], RSI	# spill
034   	movl    R10, [RSI + #40 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
038   	decode_heap_oop_not_null RSI,R10
03b   	testl   R10, R10	# compressed ptr
03e   	je,s   B9  P=0.000001 C=-1.000000
03e
040   B2: #	B12 B3 &lt;- B1  Freq: 0.999999
      	nop 	# 3 bytes pad for loops and calls
043   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=rsp + #0 L[1]=rsp + #8
        # OopMap{[0]=Oop off=72}
048
048   B3: #	B8 B4 &lt;- B2  Freq: 0.999979
        # Block is sole successor of call
048   	movl    RSI, #-155	# int
04d   	testl   RAX, RAX
04f   	je,s   B8  P=0.100000 C=-1.000000
04f
051   B4: #	B11 B5 &lt;- B3 B8  Freq: 0.999979
051   	movq    R10, [rsp + #0]	# spill
055   	movzbl  RBP, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
05a   	MEMBAR-acquire ! (empty encoding)
05a   	testl   RBP, RBP
05c   	je,s   B11  P=0.000000 C=2612224.000000
05c
05e   B5: #	B10 B6 &lt;- B4  Freq: 0.999978
05e   	movl    R11, [rsp + #8]	# spill
063   	testl   R11, R11
066   	jne,s   B10  P=0.000001 C=-1.000000
      	nop 	# 8 bytes pad for loops and calls

070   B6: #	B6 B7 &lt;- B5 B6 	Loop: B6-B6 inner  Freq: 999978
070   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=rsp + #0 L[1]=R11 STK[0]=R11
        # OopMap{[0]=Oop off=112}
076   	movq    R10, [rsp + #0]	# spill
07a   	movzbl  R10, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
07f   	MEMBAR-acquire ! (empty encoding)
07f   	testl   R10, R10
082   	jne,s   B6  P=1.000000 C=2612224.000000
082
084   B7: #	N139 &lt;- B6  Freq: 0.999977
084   	movq    RBP, [rsp + #0]	# spill
088   	movl    [rsp + #0], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
08f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:19  L[0]=RBP L[1]=#0 STK[0]=rsp + #0
        # OopMap{rbp=Oop off=148}
094   	int3	# ShouldNotReachHere
094
099   B8: #	B4 &lt;- B3  Freq: 0.0999979
099   	MEMBAR-release ! (empty encoding)
099   	movq    R10, [rsp + #0]	# spill
09d   	movb    [R10 + #20 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
0a1   	lock addl [rsp + #0], 0	! membar_volatile
0a6   	jmp,s   B4
0a6
0a8   B9: #	N139 &lt;- B1  Freq: 1.01328e-06
0a8   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
0af   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap{off=180}
0b4   	int3	# ShouldNotReachHere
0b4
0b9   B10: #	N139 &lt;- B5  Freq: 9.99979e-07
0b9   	movq    RBP, R10	# spill
0bc   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
0c3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:22  L[0]=RBP L[1]=rsp + #8
        # OopMap{rbp=Oop off=200}
0c8   	int3	# ShouldNotReachHere
0c8
0cd   B11: #	N139 &lt;- B4  Freq: 4.76827e-07
      	nop 	# 2 bytes pad for loops and calls
0cf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:19  L[0]=rsp + #0 L[1]=rsp + #8 STK[0]=RBP
        # OopMap{[0]=Oop off=212}
0d4   	int3	# ShouldNotReachHere
0d4
0d9   B12: #	N139 &lt;- B2  Freq: 9.99999e-06
0d9   	# exception oop is in rax; no code emitted
0d9   	movq    RSI, RAX	# spill
0dc   	addq    rsp, 32	# Destroy frame
	popq   rbp

0e1   	jmp     rethrow_stub
0e1

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='328'>
{method}
 - this oop:          0x00007f46c68aab98
 - method holder:     &apos;java/lang/CharacterData&apos;
 - constants:         0x00007f46c68a9a00 constant pool [76] {0x00007f46c68a9a00} for &apos;java/lang/CharacterData&apos; cache=0x00007f46c68aabf8
 - access:            0x81000018  static final 
 - name:              &apos;of&apos;
 - signature:         &apos;(I)Ljava/lang/CharacterData;&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80efa78: 0xa0000000 i2c: 0x00007f46c9147ba0 c2i: 0x00007f46c9147cd9 c2iUV: 0x00007f46c9147cac
 - compiled entry     0x00007f46c9232680
 - code size:         120
 - code start:        0x00007f46c68aab00
 - code end (excl):   0x00007f46c68aab78
 - method data:       0x00007f46c6930170
 - checked ex length: 0
 - linenumber start:  0x00007f46c68aab78
 - localvar length:   1
 - localvar start:    0x00007f46c68aab8a
 - compiled code: nmethod   2295   16       3       java.lang.CharacterData::of (120 bytes)
#
#  java/lang/CharacterDataLatin1 * ( int )
#
#r018 rsi   : parm 0: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B3 B2  Freq: 1
abababab
000   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (112 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c   	movl    R11, RSI	# spill
00f   	shrl    R11, #8
013   	movq    RAX, java/lang/CharacterDataLatin1:exact *	# ptr
01d   	testl   R11, R11
020   	jne,s   B3  P=0.000000 C=5478.000000
020
022   B2: #	N1 &lt;- B1  Freq: 1
022   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

02d   	ret
02d
02e   B3: #	N1 &lt;- B1  Freq: 5e-07
02e   	movl    RBP, RSI	# spill
030   	movl    [rsp + #0], R11	# spill
034   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
03b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.CharacterData::of @ bci:4  L[0]=RBP STK[0]=rsp + #0
        # OopMap{off=64}
040   	int3	# ShouldNotReachHere
040

</opto_assembly>
<writer thread='139941923202816'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='334'>
{method}
 - this oop:          0x00007f46c66af1c0
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007f46c66a90e8 constant pool [680] {0x00007f46c66a90e8} for &apos;java/lang/String&apos; cache=0x00007f46c67725e0
 - access:            0x81000001  public 
 - name:              &apos;substring&apos;
 - signature:         &apos;(II)Ljava/lang/String;&apos;
 - max stack:         6
 - max locals:        4
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef7a8: 0xbaa00000 i2c: 0x00007f46c9145ca0 c2i: 0x00007f46c9145de0 c2iUV: 0x00007f46c9145db3
 - compiled entry     0x00007f46c925e820
 - code size:         79
 - code start:        0x00007f46c66af130
 - code end (excl):   0x00007f46c66af17f
 - method data:       0x00007f46c6a19318
 - checked ex length: 0
 - linenumber start:  0x00007f46c66af17f
 - localvar length:   4
 - localvar start:    0x00007f46c66af18e
 - compiled code: nmethod   2361  106       3       java.lang.String::substring (79 bytes)
#
#  java/lang/String:exact * ( java/lang/String:NotNull:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N607: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B36 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (416 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movq    R11, RSI	# spill
02f   	movl    RSI, #-10	# int
034   	movl    R8, RCX	# spill
037   	subl    R8, RDX	# int
03a   	movslq  RDI, R8	# i2l
03d   	salq    RDI, #1
040   	addq    RDI, #23	# long
044   	movq    R10, RDI	# spill
047   	shrq    R10, #3
04b   	movdq   XMM0, R10	# spill
050   	addq    R10, #-2	# long
054   	movdq   XMM1, R10	# spill
059   	movl    R10, RDX	# spill
05c   	testl   RDX, RDX
05e   	jl     B36  P=0.000000 C=13823.000000
05e
064   B2: #	B41 B3 &lt;- B1  Freq: 1
064   	movq    R9, R11	# spill
067   	movl    RBX, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
06b   	movl    RBP, [RBX + #12 (8-bit)]	# range
06e   	NullCheck RBX
06e
06e   B3: #	B37 B4 &lt;- B2  Freq: 0.999999
06e   	movl    RSI, #-155	# int
073   	andq    RDI, #-8	# long
077   	movq    [rsp + #32], RDI	# spill
07c   	movl    R11, RCX	# spill
07f   	cmpl    RCX, RBP
081   	jg     B37  P=0.000000 C=13823.000000
081
087   B4: #	B38 B5 &lt;- B3  Freq: 0.999998
087   	testl   R8, R8
08a   	jl     B38  P=0.000000 C=13823.000000
08a
090   B5: #	B22 B6 &lt;- B4  Freq: 0.999998
090   	movl    RBX, narrowklass: precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# compressed klass ptr
095   	decode_klass_not_null RCX,RBX
0a3   	testl   RDX, RDX
0a5   	je     B22  P=0.076828 C=13823.000000
0a5
0ab   B6: #	B28 B7 &lt;- B22 B5  Freq: 0.998769
0ab   	# TLS is in R15
0ab   	movq    RBX, [R15 + #112 (8-bit)]	# ptr
0af   	movq    R11, RBX	# spill
0b2   	addq    R11, #24	# ptr
0b6   	# TLS is in R15
0b6   	cmpq    R11, [R15 + #128 (32-bit)]	# raw ptr
0bd   	jnb,u  B28  P=0.000100 C=-1.000000
0bd
0c3   B7: #	B8 &lt;- B6  Freq: 0.998669
0c3   	PREFETCHNTA [R11 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0cb   	# TLS is in R15
0cb   	movq    [R15 + #112 (8-bit)], R11	# ptr
0cf   	movq    R11, [RCX + #176 (32-bit)]	# ptr
0d6   	movq    [RBX], R11	# ptr
0d9   	movl    [RBX + #8 (8-bit)], narrowklass: precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# compressed klass ptr
0e0   	movl    [RBX + #12 (8-bit)], R12	# int (R12_heapbase==0)
0e4   	movq    [RBX + #16 (8-bit)], R12	# long (R12_heapbase==0)
0e4
0e8   B8: #	B24 B9 &lt;- B29 B7  Freq: 0.998769
0e8   	movq    RSI, precise klass [C: 0x00007f46a400a5a0:Constant:exact *	# ptr
0f2   	
0f2   	MEMBAR-storestore (empty encoding)
0f2   	# checkcastPP of RBX
0f2   	movl    R9, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
0f6   	testl   R8, R8
0f9   	jle     B24  P=0.004252 C=14583.000000
0f9
0ff   B9: #	B42 B10 &lt;- B8  Freq: 0.994523
0ff   	decode_heap_oop_not_null R13,R9
102   	leaq    R14, [R9 + #16 + R10 &lt;&lt; #1]	# ptr posidxscaleoffnarrow
107   	movl    RCX, [R9 + #12 (8-bit)]	# range
10b   	NullCheck R9
10b
10b   B10: #	B39 B11 &lt;- B9  Freq: 0.994522
10b   	movl    R11, RCX	# spill
10e   	subl    R11, R8	# int
111   	movl    RAX, R11	# spill
114   	movl    RDI, RCX	# spill
116   	subl    RDI, R10	# int
119   	cmpl    RDI, R8
11c   	movl    R11, R8	# spill
11f   	cmovll R11, RDI	# signed, int
123   	movslq  RDX, R11	# i2l
126   	movq    RBP, RDX	# spill
129   	salq    RBP, #1
12c   	cmpl    R10, RAX
12f   	jg     B39  P=0.000000 C=14521.000000
12f
135   B11: #	B30 B12 &lt;- B10  Freq: 0.994521
135   	# TLS is in R15
135   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
139   	addq    RBP, #16	# long
13d   	movq    RDI, RAX	# spill
140   	movq    R9, [rsp + #32]	# spill
145   	addq    RDI, R9	# ptr
148   	movq    R9, RBP	# spill
14b   	shrq    R9, #3
14f   	movq    [rsp + #72], R9	# spill
154   	cmpl    R8, #524288	# unsigned
15b   	jnbe,u  B30  P=0.000001 C=-1.000000
15b
161   B12: #	B30 B13 &lt;- B11  Freq: 0.99452
161   	# TLS is in R15
161   	cmpq    RDI, [R15 + #128 (32-bit)]	# raw ptr
168   	jnb,u  B30  P=0.000100 C=-1.000000
168
16e   B13: #	B14 &lt;- B12  Freq: 0.994421
16e   	# TLS is in R15
16e   	movq    [R15 + #112 (8-bit)], RDI	# ptr
172   	PREFETCHNTA [RDI + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
179   	movq    [RAX], 0x0000000000000001	# ptr
180   	PREFETCHNTA [RDI + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
187   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f46a400a5a0:Constant:exact *	# compressed klass ptr
18e   	PREFETCHNTA [RDI + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
195   	movl    [RAX + #12 (8-bit)], R8	# int
199   	PREFETCHNTA [RDI + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
199
1a0   B14: #	B32 B15 &lt;- B31 B13  Freq: 0.994521
1a0   	movl    RDI, R10	# spill
1a3   	addl    RDI, R11	# int
1a6   	
1a6   	# checkcastPP of RAX
1a6   	movq    RSI, RAX	# spill
1a9   	addq    RSI, #16	# ptr
1ad   	encode_heap_oop_not_null R9,RAX
2b8   	movl    [rsp + #16], R9	# spill
2bd   	cmpl    RCX, RDI	# unsigned
2bf   	jb,u  B32  P=0.000001 C=-1.000000
2bf
2c5   B15: #	B32 B16 &lt;- B14  Freq: 0.99452
2c5   	cmpl    R8, R11	# unsigned
2c8   	jb,u  B32  P=0.000001 C=-1.000000
2c8
2ce   B16: #	B34 B17 &lt;- B15  Freq: 0.994519
2ce   	testl   R11, R11
2d1   	jle     B34  P=0.000001 C=-1.000000
2d1
2d7   B17: #	B27 B18 &lt;- B16  Freq: 0.994518
2d7   	andq    RBP, #-7	# long
2db   	addq    RAX, RBP	# ptr
2de   	cmpl    R11, R8
2e1   	jl,s   B27  P=0.001000 C=-1.000000
2e1
2e3   B18: #	B19 &lt;- B17 B27  Freq: 0.994518
2e3   	movq    RDI, R14	# spill
2e6   	call_leaf_nofp,runtime  jshort_arraycopy
        No JVM State Info
        # 
2f3
2f3   B19: #	B20 &lt;- B18 B35 B33  Freq: 0.994521
2f3   	MEMBAR-storestore (empty encoding)
2f3   	movq    R10, RBX	# ptr -&gt; long
2f6   	movl    R11, [rsp + #16]	# spill
2fb   	movl    [RBX + #12 (8-bit)], R11	# compressed ptr ! Field: java/lang/String.value
2ff   	shrq    R10, #9
303   	movq    R11, 0x00007f46dbf28000	# ptr
30d   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
30d
311   B20: #	B21 &lt;- B26 B19  Freq: 0.998767
311   	MEMBAR-release ! (empty encoding)
311
311   B21: #	N607 &lt;- B20 B23  Freq: 0.999996
311   	movq    RAX, RBX	# spill
314   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

31f   	ret
31f
320   B22: #	B6 B23 &lt;- B5  Freq: 0.0768283
320   	cmpl    R11, RBP
323   	jne     B6  P=0.984008 C=1063.000000
323
329   B23: #	B21 &lt;- B22  Freq: 0.00122867
329   	movq    RBX, R9	# spill
32c   	jmp,s   B21
32c
32e   B24: #	B43 B25 &lt;- B8  Freq: 0.00424631
32e   	movl    RBP, [R9 + #12 (8-bit)]	# range
332   	NullCheck R9
332
332   B25: #	B40 B26 &lt;- B24  Freq: 0.0042463
332   	cmpl    R10, RBP
335   	jg     B40  P=0.000000 C=62.000000
335
33b   B26: #	B20 &lt;- B25  Freq: 0.0042463
33b   	movl    [RBX + #12 (8-bit)], narrowoop: char[int:0]&lt;ciTypeArray length=0 type=&lt;ciTypeArrayKlass name=[C ident=807 address=0x00007f46a400a5a0&gt; ident=828 SCAVENGABLE address=0x00007f4698086780&gt; *	# compressed ptr ! Field: java/lang/String.value
342   	movq    R10, RBX	# ptr -&gt; long
345   	shrq    R10, #9
349   	movq    R11, 0x00007f46dbf28000	# ptr
353   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
357   	jmp,s   B20
357
359   B27: #	B18 &lt;- B17  Freq: 0.000994518
359   	movdq   R10, XMM0	# spill
35e   	subq    R10, [RSP + #72 (32-bit)]	# long
363   	movq    RCX, R10	# spill
366   	movq    RDI, RAX	# spill
369   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
373   	jmp     B18
373
378   B28: #	B47 B29 &lt;- B6  Freq: 9.98935e-05
378   	movsd   [rsp + #24], XMM1	# spill
37e   	movsd   [rsp + #16], XMM0	# spill
384   	movl    [rsp + #8], R8	# spill
389   	movq    [rsp + #0], R9	# spill
38d   	movl    RBP, RDX	# spill
38f   	movq    RSI, precise klass java/lang/String: 0x00007f46d814d2f0:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
39b   	call,static  wrapper for: _new_instance_Java
        # java.lang.String::substring @ bci:65  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=rsp + #8
        # OopMap{[0]=Oop off=928}
3a0
3a0   B29: #	B8 &lt;- B28  Freq: 9.98915e-05
        # Block is sole successor of call
3a0   	movl    R10, RBP	# spill
3a3   	movq    R9, [rsp + #0]	# spill
3a7   	movl    R8, [rsp + #8]	# spill
3ac   	movsd   XMM0, [rsp + #16]	# spill
3b2   	movsd   XMM1, [rsp + #24]	# spill
3b8   	movq    RBX, RAX	# spill
3bb   	jmp     B8
3bb
3c0   B30: #	B45 B31 &lt;- B11 B12  Freq: 0.000100476
3c0   	movq    [rsp + #56], RDX	# spill
3c5   	movl    [rsp + #52], R11	# spill
3ca   	movl    [rsp + #48], RCX	# spill
3ce   	movq    [rsp + #40], R14	# spill
3d3   	movq    [rsp + #32], R13	# spill
3d8   	movq    [rsp + #24], RBX	# spill
3dd   	movsd   [rsp + #16], XMM1	# spill
3e3   	movsd   [rsp + #8], XMM0	# spill
3e9   	movl    [rsp + #4], R8	# spill
3ee   	movl    [rsp + #0], R10	# spill
3f2   	movl    RDX, R8	# spill
      	nop 	# 2 bytes pad for loops and calls
3f7   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOfRange @ bci:40  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=_
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # OopMap{[24]=Oop [32]=Oop [40]=Derived_oop_[32] off=1020}
3fc
3fc   B31: #	B14 &lt;- B30  Freq: 0.000100474
        # Block is sole successor of call
3fc   	movl    R10, [rsp + #0]	# spill
400   	movl    R8, [rsp + #4]	# spill
405   	movsd   XMM0, [rsp + #8]	# spill
40b   	movsd   XMM1, [rsp + #16]	# spill
411   	movq    RBX, [rsp + #24]	# spill
416   	movq    R13, [rsp + #32]	# spill
41b   	movq    R14, [rsp + #40]	# spill
420   	movl    RCX, [rsp + #48]	# spill
424   	movl    R11, [rsp + #52]	# spill
429   	movq    RDX, [rsp + #56]	# spill
42e   	jmp     B14
42e
433   B32: #	B44 B33 &lt;- B34 B14 B15  Freq: 1.98904e-06
433   	movdq   XMM0, RAX	# spill
438   	movl    R14, R11	# spill
43b   	movq    RBP, RBX	# spill
43e   	movdq   RCX, XMM1	# spill
443   	movq    RDI, RSI	# spill
446   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
450   	movq    RSI, R13	# spill
453   	movl    RDX, R10	# spill
456   	movdq   RCX, XMM0	# spill
45b   	xorl    R8, R8	# int
45e   	movl    R9, R14	# spill
461   	movq    [rsp + #8], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
467   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOfRange @ bci:57  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #8
        # java.lang.String::&lt;init&gt; @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [8]=Oop [16]=NarrowOop off=1132}
46c
46c   B33: #	B19 &lt;- B32  Freq: 1.989e-06
        # Block is sole successor of call
46c   	movq    RBX, RBP	# spill
46f   	jmp     B19
46f
474   B34: #	B32 B35 &lt;- B16  Freq: 9.94519e-07
474   	testl   R11, R11
477   	jl,s   B32  P=0.000001 C=-1.000000
477
479   B35: #	B19 &lt;- B34  Freq: 9.94518e-07
479   	movdq   RCX, XMM1	# spill
47e   	movq    RDI, RSI	# spill
481   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
48b   	
48b   	jmp     B19
48b
490   B36: #	N607 &lt;- B1  Freq: 4.76837e-07
490   	movl    RSI, #-155	# int
495   	movq    RBP, R11	# spill
498   	movl    [rsp + #4], RCX	# spill
49c   	movl    [rsp + #8], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
4a3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::substring @ bci:1  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{rbp=Oop off=1192}
4a8   	int3	# ShouldNotReachHere
4a8
4ad   B37: #	N607 &lt;- B3  Freq: 4.76836e-07
4ad   	movq    [rsp + #0], R9	# spill
4b1   	movl    [rsp + #8], RDX	# spill
4b5   	movl    [rsp + #16], RCX	# spill
      	nop 	# 2 bytes pad for loops and calls
4bb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::substring @ bci:19  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=_ STK[0]=rsp + #16 STK[1]=RBP
        # OopMap{[0]=Oop off=1216}
4c0   	int3	# ShouldNotReachHere
4c0
4c5   B38: #	N607 &lt;- B4  Freq: 4.76836e-07
4c5   	movq    RBP, R9	# spill
4c8   	movl    [rsp + #0], RDX	# spill
4cb   	movl    [rsp + #4], RCX	# spill
4cf   	movl    [rsp + #12], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
4d7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::substring @ bci:36  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #12 STK[0]=rsp + #12
        # OopMap{rbp=Oop off=1244}
4dc   	int3	# ShouldNotReachHere
4dc
4e1   B39: #	N607 &lt;- B10  Freq: 4.74225e-07
4e1   	movl    [rsp + #0], R8	# spill
4e5   	movl    [rsp + #4], R10	# spill
4ea   	movl    RSI, #-155	# int
4ef   	movq    [rsp + #16], RBX	# spill
4f4   	movl    [rsp + #24], R9	# spill
4f9   	movl    [rsp + #28], RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
4ff   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:55  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=rsp + #4 L[3]=rsp + #0 STK[0]=rsp + #4 STK[1]=rsp + #28
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #16
        # OopMap{[16]=Oop [24]=NarrowOop off=1284}
504   	int3	# ShouldNotReachHere
504
509   B40: #	N607 &lt;- B25  Freq: 2.02479e-09
509   	movl    RSI, #-155	# int
50e   	movl    [rsp + #4], R8	# spill
513   	movl    [rsp + #8], R10	# spill
518   	movq    [rsp + #24], RBX	# spill
51d   	movl    [rsp + #12], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
523   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::&lt;init&gt; @ bci:37  L[0]=rsp + #24 L[1]=rsp + #12 L[2]=rsp + #8 L[3]=rsp + #4 STK[0]=rsp + #8 STK[1]=RBP
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #24
        # OopMap{[12]=NarrowOop [24]=Oop off=1320}
528   	int3	# ShouldNotReachHere
528
52d   B41: #	N607 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
52f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::substring @ bci:18  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=1332}
534   	int3	# ShouldNotReachHere
534
539   B42: #	N607 &lt;- B9  Freq: 1.00773e-06
539   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
53f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:52  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # OopMap{off=1348}
544   	int3	# ShouldNotReachHere
544
549   B43: #	N607 &lt;- B24  Freq: 4.30269e-09
549   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
54f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # java.lang.String::substring @ bci:75  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # OopMap{off=1364}
554   	int3	# ShouldNotReachHere
554
559   B44: #	B46 &lt;- B32  Freq: 1.98904e-11
559   	# exception oop is in rax; no code emitted
559   	jmp,s   B46
559
55b   B45: #	B46 &lt;- B30  Freq: 1.00476e-09
55b   	# exception oop is in rax; no code emitted
55b
55b   B46: #	B48 &lt;- B45 B44  Freq: 1.02465e-09
55b   	movq    RSI, RAX	# spill
55e   	jmp,s   B48
55e
560   B47: #	B48 &lt;- B28  Freq: 9.98935e-10
560   	# exception oop is in rax; no code emitted
560   	movq    RSI, RAX	# spill
560
563   B48: #	N607 &lt;- B47 B46  Freq: 2.02359e-09
563   	addq    rsp, 96	# Destroy frame
	popq   rbp

568   	jmp     rethrow_stub
568

</opto_assembly>
<writer thread='139941922150144'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='343'>
{method}
 - this oop:          0x00007f46c6ae0d40
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f46c6ae07d0 constant pool [84] {0x00007f46c6ae07d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f46c6ae0fa8
 - access:            0xc1000001  public 
 - name:              &apos;preRun&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - vtable index:      5
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c91469dd
 - code size:         48
 - code start:        0x00007f46c6ae0ce8
 - code end (excl):   0x00007f46c6ae0d18
 - method data:       0x00007f46c6ae38c8
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae0d18
 - localvar length:   2
 - localvar start:    0x00007f46c6ae0d26
#
#  void ( org/openjdk/jcstress/infra/runners/StateHolder:NotNull *, bool )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/runners/StateHolder:NotNull *
#r016 rdx   : parm 1: bool
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N179: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B13 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    [rsp + #0], RDX	# spill
02f   	movq    RBP, RSI	# spill
032   	movl    R10, [RSI + #32 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
036   	decode_heap_oop_not_null RSI,R10
039   	testl   R10, R10	# compressed ptr
03c   	je,s   B13  P=0.000001 C=-1.000000
03c
03e   B2: #	B16 B3 &lt;- B1  Freq: 0.999999
      	nop 	# 1 bytes pad for loops and calls
03f   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:4  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop off=68}
044
044   B3: #	B5 B4 &lt;- B2  Freq: 0.999979
        # Block is sole successor of call
044   	movl    RSI, #-10	# int
049   	testl   RAX, RAX
04b   	jne,s   B5  P=0.494118 C=85.000000
04b
04d   B4: #	B5 &lt;- B3  Freq: 0.505872
04d   	MEMBAR-release ! (empty encoding)
04d   	movb    [RBP + #18 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
051   	lock addl [rsp + #0], 0	! membar_volatile
056
056   B5: #	B8 B6 &lt;- B3 B4  Freq: 0.999979
056   	movzbl  R10, [RBP + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
05b   	MEMBAR-acquire ! (empty encoding)
05b   	testl   R10, R10
05e   	je,s   B8  P=0.000605 C=123877.000000
05e
060   B6: #	B15 B7 &lt;- B5  Freq: 0.999373
060   	movl    R11, [rsp + #0]	# spill
064   	testl   R11, R11
067   	jne,s   B15  P=0.000001 C=-1.000000
      	nop 	# 7 bytes pad for loops and calls

070   B7: #	B7 B8 &lt;- B6 B7 	Loop: B7-B7 inner  Freq: 1650.59
070   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=RBP L[1]=R11 STK[0]=R11
        # OopMap{rbp=Oop off=112}
076   	movzbl  R10, [RBP + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
07b   	MEMBAR-acquire ! (empty encoding)
07b   	testl   R10, R10
07e   	jne,s   B7  P=0.999395 C=123877.000000
07e
080   B8: #	B14 B9 &lt;- B7 B5  Freq: 0.999978
080   	movl    R10, [RBP + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
084   	testl   R10, R10	# compressed ptr
087   	je,s   B14  P=0.000001 C=-1.000000
087
089   B9: #	B17 B10 &lt;- B8  Freq: 0.999977
089   	decode_heap_oop_not_null RSI,R10
      	nop 	# 3 bytes pad for loops and calls
08f   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=RBP L[1]=_
        # OopMap{rbp=Oop off=148}
094
094   B10: #	B12 B11 &lt;- B9  Freq: 0.999957
        # Block is sole successor of call
094   	testl   RAX, RAX
096   	jne,s   B12  P=0.500000 C=86.000000
096
098   B11: #	B12 &lt;- B10  Freq: 0.499978
098   	MEMBAR-release ! (empty encoding)
098   	movb    [RBP + #17 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
09c   	lock addl [rsp + #0], 0	! membar_volatile
0a1
0a1   B12: #	N179 &lt;- B11 B10  Freq: 0.999957
0a1   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0ac   	ret
0ac
0ad   B13: #	N179 &lt;- B1  Freq: 1.01328e-06
0ad   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
0b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap{off=184}
0b8   	int3	# ShouldNotReachHere
0b8
0bd   B14: #	N179 &lt;- B8  Freq: 1.01326e-06
      	nop 	# 2 bytes pad for loops and calls
0bf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap{off=196}
0c4   	int3	# ShouldNotReachHere
0c4
0c9   B15: #	N179 &lt;- B6  Freq: 9.99373e-07
0c9   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
0cf   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:22  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop off=212}
0d4   	int3	# ShouldNotReachHere
0d4
0d9   B16: #	B18 &lt;- B2  Freq: 9.99999e-06
0d9   	# exception oop is in rax; no code emitted
0d9   	movq    RSI, RAX	# spill
0dc   	jmp,s   B18
0dc
0de   B17: #	B18 &lt;- B9  Freq: 9.99977e-06
0de   	# exception oop is in rax; no code emitted
0de   	movq    RSI, RAX	# spill
0de
0e1   B18: #	N179 &lt;- B16 B17  Freq: 1.99998e-05
0e1   	addq    rsp, 32	# Destroy frame
	popq   rbp

0e6   	jmp     rethrow_stub
0e6

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='345'>
{method}
 - this oop:          0x00007f46c6730028
 - method holder:     &apos;java/lang/AbstractStringBuilder&apos;
 - constants:         0x00007f46c672eb80 constant pool [365] {0x00007f46c672eb80} for &apos;java/lang/AbstractStringBuilder&apos; cache=0x00007f46c67efc80
 - access:            0x81000002  private 
 - name:              &apos;ensureCapacityInternal&apos;
 - signature:         &apos;(I)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      59
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c923d0e0
 - code size:         16
 - code start:        0x00007f46c672fff0
 - code end (excl):   0x00007f46c6730000
 - method data:       0x00007f46c694c0a8
 - checked ex length: 0
 - linenumber start:  0x00007f46c6730000
 - localvar length:   2
 - localvar start:    0x00007f46c673000e
 - compiled code: nmethod   2395   36       3       java.lang.AbstractStringBuilder::ensureCapacityInternal (16 bytes)
#
#  void ( java/lang/AbstractStringBuilder:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/AbstractStringBuilder:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N364: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B23 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (368 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movl    RDI, RDX	# spill
02e   	movq    [rsp + #64], RSI	# spill
033   	movl    RBP, [RSI + #16 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
036   	movl    R8, [RBP + #12 (8-bit)]	# range
03a   	NullCheck RBP
03a
03a   B2: #	B14 B3 &lt;- B1  Freq: 0.999999
03a   	movl    R9, RDX	# spill
03d   	subl    R9, R8	# int
040   	# TLS is in R15
040   	movl    R10, R8	# spill
043   	sall    R10, #1
046   	movl    R11, R10	# spill
049   	subl    R11, RDX	# int
04c   	addl    R11, #2	# int
050   	testl   R9, R9
053   	jle     B14  P=0.733003 C=5457.000000
053
059   B3: #	B15 B4 &lt;- B2  Freq: 0.266996
059   	addl    R10, #2	# int
05d   	testl   R11, R11
060   	jl     B15  P=0.178172 C=1521.000000
060
066   B4: #	B22 B5 &lt;- B15 B3  Freq: 0.266996
066   	movslq  RAX, R10	# i2l
069   	cmpl    R8, R10
06c   	movl    R11, R10	# spill
06f   	cmovll R11, R8	# signed, int
073   	decode_heap_oop_not_null RDX,RBP
076   	movslq  RBX, R11	# i2l
079   	salq    RAX, #1
07c   	movq    R13, RBX	# spill
07f   	salq    R13, #1
082   	addq    RAX, #23	# long
086   	addq    R13, #16	# long
08a   	movq    RSI, RAX	# spill
08d   	andq    RSI, #-8	# long
091   	movq    RCX, RSI	# spill
094   	addq    RCX, #-16	# long
098   	movq    R14, R13	# spill
09b   	shrq    R14, #3
09f   	shrq    RAX, #3
0a3   	movq    R9, RAX	# spill
0a6   	subq    R9, R14	# long
0a9   	testl   R10, R10
0ac   	jl     B22  P=0.000000 C=1521.000000
0ac
0b2   B5: #	B17 B6 &lt;- B4  Freq: 0.266996
0b2   	movq    [rsp + #56], R13	# spill
0b7   	movl    [rsp + #52], R8	# spill
0bc   	movl    [rsp + #48], RBP	# spill
0c0   	movq    RBP, [R15 + #112 (8-bit)]	# ptr
0c4   	addq    RAX, #-2	# long
0c8   	movq    R8, RBP	# spill
0cb   	addq    R8, RSI	# ptr
0ce   	shrq    RCX, #3
0d2   	cmpl    R10, #524288	# unsigned
0d9   	jnbe,u  B17  P=0.000001 C=-1.000000
0d9
0df   B6: #	B17 B7 &lt;- B5  Freq: 0.266996
0df   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
0e6   	jnb,u  B17  P=0.000100 C=-1.000000
0e6
0ec   B7: #	B8 &lt;- B6  Freq: 0.266969
0ec   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0f4   	movq    [R15 + #112 (8-bit)], R8	# ptr
0f8   	PREFETCHNTA [R8 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
100   	movq    [RBP], 0x0000000000000001	# ptr
108   	PREFETCHNTA [R8 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
110   	movl    [RBP + #8 (8-bit)], narrowklass: precise klass [C: 0x00007f46a400a5a0:Constant:exact *	# compressed klass ptr
117   	PREFETCHNTA [R8 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
11f   	movl    [RBP + #12 (8-bit)], R10	# int
11f
123   B8: #	B19 B9 &lt;- B18 B7  Freq: 0.266996
123   	
123   	# checkcastPP of RBP
123   	movq    RSI, RBP	# spill
126   	addq    RSI, #16	# ptr
12a   	movl    R8, [rsp + #52]	# spill
12f   	cmpl    R8, R11	# unsigned
132   	jb,u  B19  P=0.000001 C=-1.000000
132
138   B9: #	B19 B10 &lt;- B8  Freq: 0.266996
138   	cmpl    R10, R11	# unsigned
13b   	jb,u  B19  P=0.000001 C=-1.000000
13b
141   B10: #	B21 B11 &lt;- B9  Freq: 0.266996
141   	movl    RDI, [rsp + #48]	# spill
145   	leaq    R8, [RDI + #16 (8-bit)]	# ptr off8narrow
149   	testl   R11, R11
14c   	jle     B21  P=0.000001 C=-1.000000
14c
152   B11: #	B16 B12 &lt;- B10  Freq: 0.266995
152   	cmpl    R11, R10
155   	jl     B16  P=0.001000 C=-1.000000
155
15b   B12: #	B13 &lt;- B11  Freq: 0.266728
15b   	movq    RDI, R8	# spill
15e   	movq    RDX, RCX	# spill
161   	call_leaf_nofp,runtime  jlong_disjoint_arraycopy
        No JVM State Info
        # 
16e
16e   B13: #	B14 &lt;- B16 B12 B20 B21  Freq: 0.266996
16e   	movq    R10, 0x00007f46dbf28000	# ptr
178   	encode_heap_oop_not_null R11,RBP
283   	MEMBAR-storestore (empty encoding)
283   	movq    R8, [rsp + #64]	# spill
288   	movq    R8, R8	# ptr -&gt; long
288   	shrq    R8, #9
28c   	movq    R9, [rsp + #64]	# spill
291   	movl    [R9 + #16 (8-bit)], R11	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
295   	movb    [R10 + R8], R12	# short/char (R12_heapbase==0)
295
299   B14: #	N364 &lt;- B13 B2  Freq: 0.999999
299   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

2a4   	ret
2a4
2a5   B15: #	B4 &lt;- B3  Freq: 0.0475713
2a5   	movl    R10, RDX	# spill
2a8   	jmp     B4
2a8
2ad   B16: #	B13 &lt;- B11  Freq: 0.000266995
2ad   	movq    R10, [rsp + #56]	# spill
2b2   	andq    R10, #-7	# long
2b6   	movq    RDI, RBP	# spill
2b9   	addq    RDI, R10	# ptr
2bc   	movq    RCX, R9	# spill
2bf   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
2c9   	movq    RDI, R8	# spill
2cc   	movq    RDX, RBX	# spill
2cf   	call_leaf_nofp,runtime  arrayof_jshort_disjoint_arraycopy
        No JVM State Info
        # 
2dc   	jmp     B13
2dc
2e1   B17: #	B25 B18 &lt;- B5 B6  Freq: 2.69746e-05
2e1   	movq    [rsp + #40], R9	# spill
2e6   	movq    [rsp + #32], RCX	# spill
2eb   	movq    [rsp + #24], RBX	# spill
2f0   	movq    [rsp + #16], RDX	# spill
2f5   	movl    [rsp + #4], R11	# spill
2fa   	movq    [rsp + #8], RAX	# spill
2ff   	movl    [rsp + #0], R10	# spill
303   	movq    RBP, [rsp + #64]	# spill
308   	movq    RSI, precise klass [C: 0x00007f46a400a5a0:Constant:exact *	# ptr
312   	movl    RDX, R10	# spill
      	nop 	# 2 bytes pad for loops and calls
317   	call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOf @ bci:1  L[0]=rsp + #48 L[1]=rsp + #0 L[2]=_
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=RBP
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [16]=Oop [48]=NarrowOop [64]=Oop off=796}
31c
31c   B18: #	B8 &lt;- B17  Freq: 2.6974e-05
        # Block is sole successor of call
31c   	movq    R8, RAX	# spill
31f   	movl    R10, [rsp + #0]	# spill
323   	movq    RAX, [rsp + #8]	# spill
328   	movl    R11, [rsp + #4]	# spill
32d   	movq    RDX, [rsp + #16]	# spill
332   	movq    RBX, [rsp + #24]	# spill
337   	movq    RCX, [rsp + #32]	# spill
33c   	movq    R9, [rsp + #40]	# spill
341   	movq    RBP, R8	# spill
344   	jmp     B8
344
349   B19: #	B24 B20 &lt;- B8 B9  Freq: 5.33992e-07
349   	movq    RCX, RAX	# spill
34c   	movq    RDI, RSI	# spill
34f   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
359   	movq    RSI, RDX	# spill
35c   	xorl    RDX, RDX	# int
35e   	movq    RCX, RBP	# spill
361   	xorl    R8, R8	# int
364   	movl    R9, R11	# spill
367   	call,static  wrapper for: slow_arraycopy
        # java.util.Arrays::copyOf @ bci:14  L[0]=_ L[1]=_ L[2]=RBP
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:43  L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #64
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [64]=Oop off=876}
36c
36c   B20: #	B13 &lt;- B19  Freq: 5.33981e-07
        # Block is sole successor of call
36c   	jmp     B13
36c
371   B21: #	B13 &lt;- B10  Freq: 2.66996e-07
371   	movq    RCX, RAX	# spill
374   	movq    RDI, RSI	# spill
377   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
381   	
381   	jmp     B13
381
386   B22: #	N364 &lt;- B4  Freq: 1.27314e-07
386   	movl    RSI, #-155	# int
38b   	movq    RBP, [rsp + #64]	# spill
390   	movl    [rsp + #0], RDI	# spill
393   	movl    [rsp + #8], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
39b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.AbstractStringBuilder::expandCapacity @ bci:19  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 STK[0]=rsp + #8
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:12  L[0]=_ L[1]=_
        # OopMap{rbp=Oop off=928}
3a0   	int3	# ShouldNotReachHere
3a0
3a5   B23: #	N364 &lt;- B1  Freq: 1.01328e-06
3a5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
3ab   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:5  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=944}
3b0   	int3	# ShouldNotReachHere
3b0
3b5   B24: #	B26 &lt;- B19  Freq: 5.33992e-12
3b5   	# exception oop is in rax; no code emitted
3b5   	movq    RSI, RAX	# spill
3b8   	jmp,s   B26
3b8
3ba   B25: #	B26 &lt;- B17  Freq: 2.69746e-10
3ba   	# exception oop is in rax; no code emitted
3ba   	movq    RSI, RAX	# spill
3ba
3bd   B26: #	N364 &lt;- B25 B24  Freq: 2.75085e-10
3bd   	addq    rsp, 96	# Destroy frame
	popq   rbp

3c2   	jmp     rethrow_stub
3c2

</opto_assembly>
<writer thread='139941923202816'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='360' compile_kind='osr'>
{method}
 - this oop:          0x00007f46c6ae0e40
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f46c6ae07d0 constant pool [84] {0x00007f46c6ae07d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f46c6ae0fa8
 - access:            0xc1000001  public 
 - name:              &apos;postRun&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - vtable index:      6
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c91469dd
 - code size:         46
 - code start:        0x00007f46c6ae0de8
 - code end (excl):   0x00007f46c6ae0e16
 - method data:       0x00007f46c6ae4b50
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae0e16
 - localvar length:   2
 - localvar start:    0x00007f46c6ae0e26
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N77: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B7 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	movl    RBP, [RSI]	# int
01e   	movq    RBX, [RSI + #8 (8-bit)]	# ptr
022   	movq    RDI, RSI	# spill
025   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
032   	movl    R11, [RBX + #8 (8-bit)]	# compressed klass ptr
036   	NullCheck RBX
036
036   B2: #	B5 B3 &lt;- B1  Freq: 0.999999
036   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f469814a3f0:Constant:exact *	# compressed klass ptr
03d   	jne,us  B5  P=0.000001 C=-1.000000
03d
03f   B3: #	B6 B4 &lt;- B2  Freq: 0.999998
03f   	# checkcastPP of RBX
03f   	movzbl  R10, [RBX + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
044   	movl    RSI, #-83	# int
049   	MEMBAR-acquire ! (empty encoding)
049   	testl   R10, R10
04c   	jne,s   B6  P=0.000001 C=-1.000000
04c
04e   B4: #	N77 &lt;- B3  Freq: 0.999997
04e   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

059   	ret
059
05a   B5: #	N77 &lt;- B2  Freq: 9.99999e-07
05a   	movl    RSI, #-99	# int
05f   	movq    [rsp + #0], RBX	# spill
063   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:28  L[0]=rsp + #0 L[1]=RBP
        # OopMap{[0]=Oop off=104}
068   	int3	# ShouldNotReachHere
068
06d   B6: #	N77 &lt;- B3  Freq: 9.99998e-07
06d   	movq    [rsp + #0], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
073   	call,static  wrapper for: uncommon_trap(reason=&apos;unreached&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=rsp + #0 L[1]=RBP STK[0]=RBP
        # OopMap{[0]=Oop off=120}
078   	int3	# ShouldNotReachHere
078
07d   B7: #	N77 &lt;- B1  Freq: 1.01328e-06
07d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
083   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:29  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap{off=136}
088   	int3	# ShouldNotReachHere
088

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='364'>
{method}
 - this oop:          0x00007f46c6ae0e40
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f46c6ae07d0 constant pool [84] {0x00007f46c6ae07d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f46c6ae0fa8
 - access:            0xc1000001  public 
 - name:              &apos;postRun&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - vtable index:      6
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c91469dd
 - code size:         46
 - code start:        0x00007f46c6ae0de8
 - code end (excl):   0x00007f46c6ae0e16
 - method data:       0x00007f46c6ae4b50
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae0e16
 - localvar length:   2
 - localvar start:    0x00007f46c6ae0e26
#
#  void ( org/openjdk/jcstress/infra/runners/StateHolder:NotNull *, bool )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/runners/StateHolder:NotNull *
#r016 rdx   : parm 1: bool
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N141: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B9 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    [rsp + #0], RDX	# spill
02f   	movq    RBP, RSI	# spill
032   	movl    R10, [RSI + #36 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
036   	decode_heap_oop_not_null RSI,R10
039   	testl   R10, R10	# compressed ptr
03c   	je,s   B9  P=0.000001 C=-1.000000
03c
03e   B2: #	B11 B3 &lt;- B1  Freq: 0.999999
      	nop 	# 1 bytes pad for loops and calls
03f   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop off=68}
044
044   B3: #	B5 B4 &lt;- B2  Freq: 0.999979
        # Block is sole successor of call
044   	movl    RSI, #-122	# int
049   	testl   RAX, RAX
04b   	jne,s   B5  P=0.500000 C=66.000000
04b
04d   B4: #	B5 &lt;- B3  Freq: 0.499989
04d   	MEMBAR-release ! (empty encoding)
04d   	movb    [RBP + #19 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
051   	lock addl [rsp + #0], 0	! membar_volatile
056
056   B5: #	B8 B6 &lt;- B4 B3  Freq: 0.999979
056   	movzbl  R11, [RBP + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
05b   	MEMBAR-acquire ! (empty encoding)
05b   	movzbl  R10, [RBP + #17 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
060   	orl     R11, R10	# int
063   	MEMBAR-acquire ! (empty encoding)
063   	MEMBAR-release ! (empty encoding)
063   	movb    [RBP + #21 (8-bit)], R11	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
067   	lock addl [rsp + #0], 0	! membar_volatile
06c   	movzbl  R11, [RBP + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
071   	MEMBAR-acquire ! (empty encoding)
071   	testl   R11, R11
074   	je,s   B8  P=0.010331 C=6098.000000
074
076   B6: #	B10 B7 &lt;- B5  Freq: 0.989648
076   	movl    R10, [rsp + #0]	# spill
07a   	testl   R10, R10
07d   	jne,s   B10  P=0.000001 C=-1.000000
      	nop 	# 1 bytes pad for loops and calls

080   B7: #	B7 B8 &lt;- B6 B7 	Loop: B7-B7 inner  Freq: 95.7914
080   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=RBP L[1]=R10 STK[0]=R10
        # OopMap{rbp=Oop off=128}
086   	movzbl  R11, [RBP + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
08b   	MEMBAR-acquire ! (empty encoding)
08b   	testl   R11, R11
08e   	jne,s   B7  P=0.989669 C=6098.000000
08e
090   B8: #	N141 &lt;- B7 B5  Freq: 0.999978
090   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

09b   	ret
09b
09c   B9: #	N141 &lt;- B1  Freq: 1.01328e-06
09c   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
0a3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap{off=168}
0a8   	int3	# ShouldNotReachHere
0a8
0ad   B10: #	N141 &lt;- B6  Freq: 9.89648e-07
      	nop 	# 2 bytes pad for loops and calls
0af   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:35  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop off=180}
0b4   	int3	# ShouldNotReachHere
0b4
0b9   B11: #	N141 &lt;- B2  Freq: 9.99999e-06
0b9   	# exception oop is in rax; no code emitted
0b9   	movq    RSI, RAX	# spill
0bc   	addq    rsp, 32	# Destroy frame
	popq   rbp

0c1   	jmp     rethrow_stub
0c1

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='365' compile_kind='osr'>
{method}
 - this oop:          0x00007f46c6ae0f30
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f46c6ae07d0 constant pool [84] {0x00007f46c6ae07d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f46c6ae0fa8
 - access:            0xc1000001  public 
 - name:              &apos;postConsume&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     4
 - vtable index:      7
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c92e5400
 - code size:         33
 - code start:        0x00007f46c6ae0ee8
 - code end (excl):   0x00007f46c6ae0f09
 - method data:       0x00007f46c6ae3cb8
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae0f09
 - localvar length:   2
 - localvar start:    0x00007f46c6ae0f16
 - compiled code: nmethod   2427  359       3       org.openjdk.jcstress.infra.runners.StateHolder::postConsume (33 bytes)
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N104: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B10 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	movl    RBP, [RSI]	# int
01e   	movq    RBX, [RSI + #8 (8-bit)]	# ptr
022   	movq    RDI, RSI	# spill
025   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
032   	movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
036   	NullCheck RBX
036
036   B2: #	B9 B3 &lt;- B1  Freq: 0.999999
036   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f469811a2d0:Constant:exact *	# compressed klass ptr
03d   	jne,us  B9  P=0.000001 C=-1.000000
03d
03f   B3: #	B8 B4 &lt;- B2  Freq: 0.999998
03f   	# checkcastPP of RBX
03f   	movzbl  R10, [RBX + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
044   	MEMBAR-acquire ! (empty encoding)
044   	testl   R10, R10
047   	je,s   B8  P=0.000074 C=2931928.000000
047
049   B4: #	B7 B5 &lt;- B3  Freq: 0.999924
049   	movl    RSI, #-155	# int
04e   	testl   RBP, RBP
050   	je,s   B7  P=1.000000 C=2931710.000000
050
052   B5: #	N104 &lt;- B4  Freq: 4.76801e-07
052   	movq    [rsp + #0], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
057   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=rsp + #0 L[1]=RBP STK[0]=RBP
        # OopMap{[0]=Oop off=92}
05c   	int3	# ShouldNotReachHere
      	nop 	# 15 bytes pad for loops and calls

070   B6: #	B7 &lt;- B7  top-of-loop Freq: 13506.2
070   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=RBX L[1]=RBP STK[0]=RBP
        # OopMap{rbx=Oop off=112}
076
076   B7: #	B6 B8 &lt;- B4 B6 	Loop: B7-B6 inner  Freq: 13507.2
076   	movzbl  R10, [RBX + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
07b   	MEMBAR-acquire ! (empty encoding)
07b   	testl   R10, R10
07e   	jne,s   B6  P=0.999926 C=2931928.000000
07e
080   B8: #	N104 &lt;- B3 B7  Freq: 0.999997
080   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

08b   	ret
08b
08c   B9: #	N104 &lt;- B2  Freq: 9.99999e-07
08c   	movl    RSI, #-99	# int
091   	movq    [rsp + #0], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
097   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:15  L[0]=rsp + #0 L[1]=RBP
        # OopMap{[0]=Oop off=156}
09c   	int3	# ShouldNotReachHere
09c
0a1   B10: #	N104 &lt;- B1  Freq: 1.01328e-06
0a1   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
0a7   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:15  L[0]=#NULL L[1]=RBP
        # OopMap{off=172}
0ac   	int3	# ShouldNotReachHere
0ac

</opto_assembly>
<writer thread='139941922150144'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='366'>
{method}
 - this oop:          0x00007f46c6ae0f30
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f46c6ae07d0 constant pool [84] {0x00007f46c6ae07d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f46c6ae0fa8
 - access:            0xc1000001  public 
 - name:              &apos;postConsume&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     4
 - vtable index:      7
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c92e5400
 - code size:         33
 - code start:        0x00007f46c6ae0ee8
 - code end (excl):   0x00007f46c6ae0f09
 - method data:       0x00007f46c6ae3cb8
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae0f09
 - localvar length:   2
 - localvar start:    0x00007f46c6ae0f16
 - compiled code: nmethod   2441  359       3       org.openjdk.jcstress.infra.runners.StateHolder::postConsume (33 bytes)
#
#  void ( org/openjdk/jcstress/infra/runners/StateHolder:NotNull *, bool )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/runners/StateHolder:NotNull *
#r016 rdx   : parm 1: bool
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N114: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B8 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    R10, [RSI + #40 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
030   	movl    R8, #-1	# int
036   	testl   R10, R10	# compressed ptr
039   	je,s   B8  P=0.000001 C=-1.000000
039
03b   B2: #	B4 B3 &lt;- B1  Freq: 0.999999
03b   	MEMBAR-release ! (empty encoding)
03b   	
03b   	XADDL  [[R10 + #12 (8-bit)]],R8
041   	decl    R8	# int
044   	
044   	MEMBAR-acquire ! (empty encoding)
044   	testl   R8, R8
047   	jne,s   B4  P=0.502075 C=241.000000
047
049   B3: #	B4 &lt;- B2  Freq: 0.497925
049   	MEMBAR-release ! (empty encoding)
049   	movb    [RSI + #20 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
04d   	lock addl [rsp + #0], 0	! membar_volatile
052
052   B4: #	B7 B5 &lt;- B2 B3  Freq: 0.999999
052   	movzbl  R11, [RSI + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
057   	MEMBAR-acquire ! (empty encoding)
057   	testl   R11, R11
05a   	je,s   B7  P=0.000074 C=2941144.000000
05a
05c   B5: #	B9 B6 &lt;- B4  Freq: 0.999925
05c   	testl   RDX, RDX
05e   	jne,s   B9  P=0.000001 C=-1.000000
05e
060   B6: #	B6 B7 &lt;- B5 B6 	Loop: B6-B6 inner  Freq: 13485.5
060   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=RSI L[1]=RDX STK[0]=RDX
        # OopMap{rsi=Oop off=96}
066   	movzbl  R11, [RSI + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
06b   	MEMBAR-acquire ! (empty encoding)
06b   	testl   R11, R11
06e   	jne,s   B6  P=0.999926 C=2941144.000000
06e
070   B7: #	N114 &lt;- B6 B4  Freq: 0.999998
070   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

07b   	ret
07b
07c   B8: #	N114 &lt;- B1  Freq: 1.01328e-06
07c   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
083   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap{off=136}
088   	int3	# ShouldNotReachHere
088
08d   B9: #	N114 &lt;- B5  Freq: 9.99925e-07
08d   	movq    RBP, RSI	# spill
090   	movl    [rsp + #0], RDX	# spill
093   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
09b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:22  L[0]=RBP L[1]=rsp + #0
        # OopMap{rbp=Oop off=160}
0a0   	int3	# ShouldNotReachHere
0a0

</opto_assembly>
<writer thread='139941923202816'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='368'>
{method}
 - this oop:          0x00007f46c6add490
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest&apos;
 - constants:         0x00007f46c6adcf30 constant pool [80] {0x00007f46c6adcf30} for &apos;org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest&apos; cache=0x00007f46c6add628
 - access:            0x81000001  public 
 - name:              &apos;actor2&apos;
 - signature:         &apos;(Lorg/openjdk/jcstress/infra/results/IntResult2;)V&apos;
 - max stack:         3
 - max locals:        4
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef7f0: 0xbb000000 i2c: 0x00007f46c9145fa0 c2i: 0x00007f46c91460de c2iUV: 0x00007f46c91460b1
 - compiled entry     0x00007f46c92ee820
 - code size:         21
 - code start:        0x00007f46c6add438
 - code end (excl):   0x00007f46c6add44d
 - method data:       0x00007f46c6ae44a8
 - checked ex length: 0
 - linenumber start:  0x00007f46c6add44d
 - localvar length:   4
 - localvar start:    0x00007f46c6add456
 - compiled code: nmethod   2458  353       3       org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest::actor2 (21 bytes)
#
#  void ( org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest:NotNull *, org/openjdk/jcstress/infra/results/IntResult2 * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest:NotNull *
#r016 rdx:rdx   : parm 1: org/openjdk/jcstress/infra/results/IntResult2 *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N35: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (136 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	movl    R11, [RSI + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
033   	testq   RDX, RDX	# ptr
036   	je,s   B3  P=0.000001 C=-1.000000
036
038   B2: #	N35 &lt;- B1  Freq: 0.999999
038   	movl    [RDX + #140 (32-bit)], R11	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
03f   	movl    R11, [RSI + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
043   	movl    [RDX + #272 (32-bit)], R11	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
04a   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

055   	ret
055
056   B3: #	N35 &lt;- B1  Freq: 1.01328e-06
056   	movl    RSI, #-10	# int
05b   	movl    RBP, R11	# spill
      	nop 	# 1 bytes pad for loops and calls
05f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest::actor2 @ bci:12  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=100}
064   	int3	# ShouldNotReachHere
064

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='369'>
{method}
 - this oop:          0x00007f46c6add2c0
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest&apos;
 - constants:         0x00007f46c6adcf30 constant pool [80] {0x00007f46c6adcf30} for &apos;org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest&apos; cache=0x00007f46c6add628
 - access:            0x81000001  public 
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;()V&apos;
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef760: 0xb0000000 i2c: 0x00007f46c9145620 c2i: 0x00007f46c914575a c2iUV: 0x00007f46c914572d
 - compiled entry     0x00007f46c92e9820
 - code size:         5
 - code start:        0x00007f46c6add2a8
 - code end (excl):   0x00007f46c6add2ad
 - method data:       0x00007f46c6ae41b0
 - checked ex length: 0
 - linenumber start:  0x00007f46c6add2ad
 - localvar length:   1
 - localvar start:    0x00007f46c6add2b2
 - compiled code: nmethod   2463  349       3       org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest::&lt;init&gt; (5 bytes)
#
#  void ( org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest:NotNull * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N14: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	N14 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

037   	ret
037

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='370'>
{method}
 - this oop:          0x00007f46c6add390
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest&apos;
 - constants:         0x00007f46c6adcf30 constant pool [80] {0x00007f46c6adcf30} for &apos;org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest&apos; cache=0x00007f46c6add628
 - access:            0x81000001  public 
 - name:              &apos;actor1&apos;
 - signature:         &apos;()V&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef760: 0xb0000000 i2c: 0x00007f46c9145620 c2i: 0x00007f46c914575a c2iUV: 0x00007f46c914572d
 - compiled entry     0x00007f46c92ee360
 - code size:         27
 - code start:        0x00007f46c6add350
 - code end (excl):   0x00007f46c6add36b
 - method data:       0x00007f46c6ae4308
 - checked ex length: 0
 - linenumber start:  0x00007f46c6add36b
 - localvar length:   1
 - localvar start:    0x00007f46c6add37a
 - compiled code: nmethod   2466  351       3       org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest::actor1 (27 bytes)
#
#  void ( org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest:NotNull * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N26: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	N26 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	movl    [RSI + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
033   	
033   	MEMBAR-release ! (empty encoding)
033   	movl    [RSI + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
03a   	movl    [RSI + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
044   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

04f   	ret
04f

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='371'>
{method}
 - this oop:          0x00007f46c6addc98
 - method holder:     &apos;org/openjdk/jcstress/infra/results/IntResult2&apos;
 - constants:         0x00007f46c6add780 constant pool [63] {0x00007f46c6add780} for &apos;org/openjdk/jcstress/infra/results/IntResult2&apos; cache=0x00007f46c6adde00
 - access:            0x81000001  public 
 - name:              &apos;hashCode&apos;
 - signature:         &apos;()I&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      3
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef760: 0xb0000000 i2c: 0x00007f46c9145620 c2i: 0x00007f46c914575a c2iUV: 0x00007f46c914572d
 - compiled entry     0x00007f46c92ed8e0
 - code size:         17
 - code start:        0x00007f46c6addc60
 - code end (excl):   0x00007f46c6addc71
 - method data:       0x00007f46c6ae4a08
 - checked ex length: 0
 - linenumber start:  0x00007f46c6addc71
 - localvar length:   2
 - localvar start:    0x00007f46c6addc7e
 - compiled code: nmethod   2468  357       3       org.openjdk.jcstress.infra.results.IntResult2::hashCode (17 bytes)
#
#  int ( org/openjdk/jcstress/infra/results/IntResult2:NotNull * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/results/IntResult2:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N23: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	N23 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	movl    R11, [RSI + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
033   	movl    RAX, R11	# spill
036   	sall    RAX, #5
039   	subl    RAX, R11	# int
03c   	addl    RAX, [RSI + #272 (32-bit)]	# int
042   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

04d   	ret
04d

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139941922150144'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='372'>
{method}
 - this oop:          0x00007f46c6addbb8
 - method holder:     &apos;org/openjdk/jcstress/infra/results/IntResult2&apos;
 - constants:         0x00007f46c6add780 constant pool [63] {0x00007f46c6add780} for &apos;org/openjdk/jcstress/infra/results/IntResult2&apos; cache=0x00007f46c6adde00
 - access:            0x81000001  public 
 - name:              &apos;equals&apos;
 - signature:         &apos;(Ljava/lang/Object;)Z&apos;
 - max stack:         3
 - max locals:        3
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      1
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef7f0: 0xbb000000 i2c: 0x00007f46c9145fa0 c2i: 0x00007f46c91460de c2iUV: 0x00007f46c91460b1
 - compiled entry     0x00007f46c92e8da0
 - code size:         57
 - code start:        0x00007f46c6addb50
 - code end (excl):   0x00007f46c6addb89
 - method data:       0x00007f46c6ae3f08
 - checked ex length: 0
 - linenumber start:  0x00007f46c6addb89
 - localvar length:   3
 - localvar start:    0x00007f46c6addb92
 - compiled code: nmethod   2474  348       3       org.openjdk.jcstress.infra.results.IntResult2::equals (57 bytes)
#
#  bool ( org/openjdk/jcstress/infra/results/IntResult2:NotNull *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/results/IntResult2:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N99: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B9 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	movl    R10, [RSI + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
033   	cmpq    RSI, RDX	# ptr
036   	je,us  B9  P=0.000000 C=8799.000000
036
038   B2: #	B11 B3 &lt;- B1  Freq: 1
038   	movl    RAX, #1	# int
03d   	movl    R11, [RDX + #8 (8-bit)]	# compressed klass ptr
041   	NullCheck RDX
041
041   B3: #	B10 B4 &lt;- B2  Freq: 0.999999
041   	decode_klass_not_null R8,R11
04f   	movl    RCX, [RSI + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
055   	movq    RBP, [R8 + #112 (8-bit)]	# ptr
059   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469816a4b0:Constant:exact *	# compressed klass ptr
060   	jne,us  B10  P=0.000000 C=8799.000000
060
062   B4: #	B7 B5 &lt;- B3  Freq: 0.999999
062   	# checkcastPP of RDX
062   	movl    R8, [RDX + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
069   	cmpl    R10, R8
06c   	jne,s   B7  P=0.006137 C=8799.000000
06c
06e   B5: #	B8 B6 &lt;- B4  Freq: 0.993861
06e   	movl    R10, [RDX + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
075   	cmpl    RCX, R10
078   	jne,s   B8  P=0.005146 C=8745.000000
078
07a   B6: #	N99 &lt;- B7 B8 B5  Freq: 0.999999
07a   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

085   	ret
085
086   B7: #	B6 &lt;- B4  Freq: 0.00613706
086   	xorl    RAX, RAX	# int
088   	jmp,s   B6
088
08a   B8: #	B6 &lt;- B5  Freq: 0.0051142
08a   	xorl    RAX, RAX	# int
08c   	jmp,s   B6
08c
08e   B9: #	N99 &lt;- B1  Freq: 4.76837e-07
08e   	movq    [rsp + #8], RSI	# spill
093   	movq    [rsp + #16], RDX	# spill
098   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
09f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:2  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=_ STK[0]=rsp + #8 STK[1]=rsp + #16
        # OopMap{[8]=Oop [16]=Oop off=164}
0a4   	int3	# ShouldNotReachHere
0a4
0a9   B10: #	N99 &lt;- B3  Freq: 4.76837e-07
0a9   	movq    [rsp + #0], RSI	# spill
0ad   	movq    [rsp + #8], RDX	# spill
0b2   	movl    RSI, #-155	# int
0b7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:19  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ STK[0]=#Ptr0x00007f4698170ba0 STK[1]=RBP
        # OopMap{rbp=Oop [0]=Oop [8]=Oop off=188}
0bc   	int3	# ShouldNotReachHere
0bc
0c1   B11: #	N99 &lt;- B2  Freq: 4.76837e-07
0c1   	movq    RBP, RSI	# spill
0c4   	movq    [rsp + #8], RDX	# spill
0c9   	movl    RSI, #-155	# int
      	nop 	# 1 bytes pad for loops and calls
0cf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:8  L[0]=RBP L[1]=rsp + #8 L[2]=_ STK[0]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=212}
0d4   	int3	# ShouldNotReachHere
0d4

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139941923202816'/>
<opto_assembly compile_id='374'>
{method}
 - this oop:          0x00007f46c6adfe80
 - method holder:     &apos;org/openjdk/jcstress/util/OpenAddressHashCounter&apos;
 - constants:         0x00007f46c6adf440 constant pool [164] {0x00007f46c6adf440} for &apos;org/openjdk/jcstress/util/OpenAddressHashCounter&apos; cache=0x00007f46c6ae0480
 - access:            0xc1000002  private 
 - name:              &apos;recordWithTries&apos;
 - signature:         &apos;(Ljava/lang/Object;JI)V&apos;
 - max stack:         7
 - max locals:        8
 - size of params:    5
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d8129838: 0xbbbea000 i2c: 0x00007f46c928e9e0 c2i: 0x00007f46c928eb26 c2iUV: 0x00007f46c928eaf9
 - compiled entry     0x00007f46c92ead60
 - code size:         116
 - code start:        0x00007f46c6adfda0
 - code end (excl):   0x00007f46c6adfe14
 - method data:       0x00007f46c6ae4758
 - checked ex length: 0
 - linenumber start:  0x00007f46c6adfe14
 - localvar length:   7
 - localvar start:    0x00007f46c6adfe28
 - compiled code: nmethod   2622  356       3       org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries (116 bytes)
#
#  void ( org/openjdk/jcstress/util/OpenAddressHashCounter:NotNull *, java/lang/Object *, long, half, int )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/util/OpenAddressHashCounter:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
#r010 rcx:rcx   : parm 2: long
#r004 r8   : parm 4: int
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N575: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B45 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (272 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movq    [rsp + #16], RCX	# spill
031   	movq    R10, RDX	# spill
034   	movq    RAX, RSI	# spill
037   	movl    RCX, [RSI + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.length
03a   	movl    RSI, #-34	# int
03f   	movl    RDX, [RAX + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.keys
042   	movq    R11, R10	# spill
045   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
049   	NullCheck R10
049
049   B2: #	B33 B3 &lt;- B1  Freq: 0.999999
049   	decl    RCX	# int
04b   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46880753e0:Constant:exact *	# compressed klass ptr
052   	jne,u  B33  P=0.000001 C=-1.000000
052
058   B3: #	B46 B4 &lt;- B2  Freq: 0.999998
058   	# checkcastPP of R11
058   	movl    R9, [R11 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
05f   	movl    RDI, [R11 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
066   	movl    R10, R9	# spill
069   	sall    R10, #5
06d   	subl    R10, R9	# int
070   	addl    R10, RDI	# int
073   	andl    R10, RCX	# int
076   	movl    RBX, [RDX + #12 (8-bit)]	# range
079   	NullCheck RDX
079
079   B4: #	B31 B5 &lt;- B3  Freq: 0.999997
079   	decode_heap_oop_not_null RBP,RDX
07c   	cmpl    R10, RBX	# unsigned
07f   	jnb,u  B31  P=0.000001 C=-1.000000
07f
085   B5: #	B24 B6 &lt;- B4  Freq: 0.999996
085   	movl    [rsp + #24], R10	# spill
08a   	movl    [rsp + #28], RDX	# spill
08e   	movq    [rsp + #0], RAX	# spill
092   	movq    R13, R11	# spill
095   	movl    R10, RDX	# spill
098   	movl    RDX, [rsp + #24]	# spill
09c   	movl    R10, [R10 + #16 + RDX &lt;&lt; #2]	# compressed ptr
0a1   	decode_heap_oop_not_null R11,R10
0a4   	testl   R10, R10	# compressed ptr
0a7   	je     B24  P=0.000228 C=8776.000000
0a7
0ad   B6: #	B34 B7 &lt;- B5  Freq: 0.999768
0ad   	movq    [rsp + #48], RBP	# spill
0b2   	movl    [rsp + #40], RBX	# spill
0b6   	movl    R14, R8	# spill
0b9   	movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
0bd   	movl    RDX, [RAX + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
0c0   	cmpl    R8, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46880753e0:Constant:exact *	# compressed klass ptr
0c7   	jne,u  B34  P=0.000001 C=-1.000000
0c7
0cd   B7: #	B36 B8 &lt;- B6  Freq: 0.999767
0cd   	# checkcastPP of R11
0cd   	movl    R10, [R11 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
0d4   	cmpq    R11, R13	# ptr
0d7   	je,u  B36  P=0.000000 C=11395.000000
0d7
0dd   B8: #	B14 B9 &lt;- B7  Freq: 0.999767
0dd   	movl    R11, [R11 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
0e4   	movl    RBX, #1	# int
0e9   	movl    RSI, #-10	# int
0ee   	cmpl    R10, R9
0f1   	jne,s   B14  P=0.004651 C=11395.000000
0f1
0f3   B9: #	B14 B10 &lt;- B8  Freq: 0.995116
0f3   	cmpl    R11, RDI
0f6   	jne,s   B14  P=0.007230 C=11342.000000
0f6
0f8   B10: #	B47 B11 &lt;- B9 B20  Freq: 0.999764
0f8   	movl    R10, [RDX + #12 (8-bit)]	# range
0fc   	NullCheck RDX
0fc
0fc   B11: #	B32 B12 &lt;- B10  Freq: 0.999763
0fc   	movl    R8, [rsp + #24]	# spill
101   	cmpl    R8, R10	# unsigned
104   	jnb,u  B32  P=0.000001 C=-1.000000
104
10a   B12: #	B13 &lt;- B11  Freq: 0.999762
10a   	movq    R10, [rsp + #16]	# spill
10f   	addq    [RDX + #16 + R8 &lt;&lt; #3], R10	# long
114
114   B13: #	N575 &lt;- B12 B30  Freq: 0.999992
114   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

11f   	ret
11f
120   B14: #	B38 B15 &lt;- B8 B9  Freq: 0.0118445
120   	movl    R10, [rsp + #24]	# spill
125   	incl    R10	# int
128   	movl    R11, R10	# spill
12b   	andl    R11, RCX	# int
12e   	movl    [rsp + #24], R11	# spill
133   	cmpl    R11, [RSP + #40 (32-bit)]	# unsigned
138   	jnb,u  B38  P=0.000001 C=-1.000000
138
13e   B15: #	B40 B16 &lt;- B14  Freq: 0.0118445
13e   	movl    R10, [rsp + #28]	# spill
143   	movl    R10, [R10 + #16 + R11 &lt;&lt; #2]	# compressed ptr
148   	movl    R8, R14	# spill
14b   	testl   R8, R8
14e   	jl     B40  P=0.000000 C=96.000000
14e
154   B16: #	B25 B17 &lt;- B15 B23 	Loop: B16-B23 inner partial_peel  Freq: 0.0119865
154   	decode_heap_oop_not_null R11,R10
157   	movl    RBP, RBX	# spill
159   	incl    RBP	# int
15b   	movl    RAX, [rsp + #24]	# spill
15f   	incl    RAX	# int
161   	testl   R10, R10	# compressed ptr
164   	je,s   B25  P=0.000228 C=8776.000000
164
166   B17: #	B35 B18 &lt;- B16  Freq: 0.0119838
166   	movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
16a   	cmpl    R8, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46880753e0:Constant:exact *	# compressed klass ptr
171   	jne,u  B35  P=0.000001 C=-1.000000
171
177   B18: #	B37 B19 &lt;- B17  Freq: 0.0119838
177   	# checkcastPP of R11
177   	andl    RAX, RCX	# int
179   	movl    R10, [R11 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
180   	movl    R8, [R11 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
187   	cmpq    R11, R13	# ptr
18a   	je,u  B37  P=0.000000 C=11395.000000
18a
190   B19: #	B21 B20 &lt;- B18  Freq: 0.0119837
190   	cmpl    R8, R9
193   	jne,s   B21  P=0.004651 C=11395.000000
193
195   B20: #	B10 B21 &lt;- B19  Freq: 0.011928
195   	cmpl    R10, RDI
198   	je     B10  P=0.992770 C=11342.000000
198
19e   B21: #	B39 B22 &lt;- B19 B20  Freq: 0.000141975
19e   	cmpl    RAX, [RSP + #40 (32-bit)]	# unsigned
1a2   	jnb,u  B39  P=0.000001 C=-1.000000
1a2
1a8   B22: #	B41 B23 &lt;- B21  Freq: 0.000141975
1a8   	movl    R10, [rsp + #28]	# spill
1ad   	movl    R10, [R10 + #16 + RAX &lt;&lt; #2]	# compressed ptr
1b2   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:80  L[0]=rsp + #0 L[1]=R13 L[2]=rsp + #16 L[3]=_ L[4]=R14 L[5]=RAX L[6]=RBP L[7]=R10 STK[0]=RBX STK[1]=R14
        # OopMap{r10=NarrowOop rdx=NarrowOop r13=Oop [0]=Oop [28]=NarrowOop [48]=Oop off=434}
1b8   	cmpl    RBX, R14
1bb   	jg     B41  P=0.000000 C=96.000000
1bb
1c1   B23: #	B16 &lt;- B22  Freq: 0.000141975
1c1   	movl    RBX, RBP	# spill
1c3   	movl    [rsp + #24], RAX	# spill
1c7   	jmp,s   B16
1c7
1c9   B24: #	B25 &lt;- B5  Freq: 0.000227868
1c9   	movl    [rsp + #40], RBX	# spill
1cd   	movq    [rsp + #48], RBP	# spill
1cd
1d2   B25: #	B48 B26 &lt;- B16 B24  Freq: 0.000230599
1d2   	movl    R10, [rsp + #28]	# spill
1d7   	movl    RBP, [R10 + #8 (8-bit)]	# compressed klass ptr
1db   	movq    RSI, R13	# spill
      	nop 	# 1 bytes pad for loops and calls
1df   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::decouple
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:103  L[0]=rsp + #0 L[1]=_ L[2]=rsp + #16 L[3]=_ L[4]=_ L[5]=rsp + #24 L[6]=_ L[7]=_ STK[0]=rsp + #28 STK[1]=rsp + #24
        # OopMap{[0]=Oop [28]=NarrowOop [48]=Oop off=484}
1e4
1e4   B26: #	B42 B27 &lt;- B25  Freq: 0.000230594
        # Block is sole successor of call
1e4   	movl    R11, [rsp + #24]	# spill
1e9   	cmpl    R11, [RSP + #40 (32-bit)]	# unsigned
1ee   	jnb,u  B42  P=0.000001 C=-1.000000
1ee
1f4   B27: #	B44 B28 &lt;- B26  Freq: 0.000230594
1f4   	movq    RCX, 0x00007f46dbf28000	# ptr
1fe   	cmpl    RBP, narrowklass: precise klass [Ljava/lang/Object;: 0x00007f4688077630:Constant:exact *	# compressed klass ptr
204   	jne,u  B44  P=0.000001 C=-1.000000
204
20a   B28: #	B49 B29 &lt;- B27  Freq: 0.000230594
20a   	encode_heap_oop R9,RAX
295   	movslq  R10, [RSP + #24 (32-bit)]	# int -&gt; long
29a   	movl    RBX, [rsp + #28]	# spill
29e   	leaq    R8, [RBX + #16 + R10 &lt;&lt; #2]	# ptr idxscaleoffnarrow
2a3   	movq    RBX, [rsp + #0]	# spill
2a7   	movl    RBP, [RBX + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
2aa   	movl    [R8], R9	# compressed ptr
2ad   	movq    R8, R8	# ptr -&gt; long
2ad   	shrq    R8, #9
2b1   	movb    [RCX + R8], R12	# short/char (R12_heapbase==0)
2b5   	movl    R8, [RBP + #12 (8-bit)]	# range
2b9   	NullCheck RBP
2b9
2b9   B29: #	B43 B30 &lt;- B28  Freq: 0.000230594
2b9   	cmpl    R11, R8	# unsigned
2bc   	jnb,u  B43  P=0.000001 C=-1.000000
2bc
2c2   B30: #	B13 &lt;- B29  Freq: 0.000230593
2c2   	movq    R11, [rsp + #16]	# spill
2c7   	movq    [RBP + #16 + R10 &lt;&lt; #3], R11	# long
2cc   	jmp     B13
2cc
2d1   B31: #	N575 &lt;- B4  Freq: 1.01328e-06
2d1   	movl    RSI, #-28	# int
2d6   	movq    RBP, RAX	# spill
2d9   	movq    [rsp + #0], R11	# spill
2dd   	pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #8]
2e7   	movl    [rsp + #16], R8	# spill
2ec   	movl    [rsp + #24], RDX	# spill
2f0   	movl    [rsp + #28], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
2f7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #28 L[6]=#0 L[7]=_ STK[0]=rsp + #24 STK[1]=rsp + #28
        # OopMap{rbp=Oop [0]=Oop [24]=NarrowOop off=764}
2fc   	int3	# ShouldNotReachHere
2fc
301   B32: #	N575 &lt;- B11  Freq: 1.01304e-06
301   	movq    RBP, [rsp + #16]	# spill
306   	movl    [rsp + #8], RDX	# spill
30a   	movl    RSI, #-28	# int
30f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=RBP L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #8 STK[1]=rsp + #24 STK[2]=rsp + #8 STK[3]=rsp + #24
        # OopMap{[8]=NarrowOop off=788}
314   	int3	# ShouldNotReachHere
314
319   B33: #	N575 &lt;- B2  Freq: 9.99999e-07
319   	movq    RBP, RAX	# spill
31c   	pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #8]
326   	movl    [rsp + #16], R8	# spill
32b   	movq    [rsp + #24], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
333   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #24
        # OopMap{rbp=Oop [24]=Oop off=824}
338   	int3	# ShouldNotReachHere
338
33d   B34: #	B35 &lt;- B6  Freq: 9.99768e-07
33d   	xorl    RBX, RBX	# int
33f
33f   B35: #	N575 &lt;- B34 B17  Freq: 1.01175e-06
33f   	movq    RBP, [rsp + #0]	# spill
343   	pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #8]
34d   	movl    [rsp + #16], R14	# spill
352   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #24]
	movl    [rsp + #20], rax
	movq    rax, [rsp - #8]
364   	movl    [rsp + #24], RBX	# spill
368   	movq    [rsp + #32], R11	# spill
36d   	movq    [rsp + #40], R13	# spill
372   	movl    RSI, #-34	# int
377   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #20 L[6]=rsp + #24 L[7]=_ STK[0]=rsp + #32 STK[1]=rsp + #40
        # OopMap{rbp=Oop [32]=Oop [40]=Oop off=892}
37c   	int3	# ShouldNotReachHere
37c
381   B36: #	B37 &lt;- B7  Freq: 4.76726e-07
381   	xorl    RBX, RBX	# int
383
383   B37: #	N575 &lt;- B36 B18  Freq: 4.8244e-07
383   	movq    RBP, [rsp + #0]	# spill
387   	pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #8]
391   	movl    [rsp + #16], R14	# spill
396   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #24]
	movl    [rsp + #20], rax
	movq    rax, [rsp - #8]
3a8   	movl    [rsp + #24], RBX	# spill
3ac   	movq    [rsp + #40], R13	# spill
3b1   	movq    [rsp + #48], R11	# spill
3b6   	movq    [rsp + #56], R13	# spill
3bb   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
3c3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:2  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=_ STK[0]=rsp + #48 STK[1]=rsp + #40
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #20 L[6]=rsp + #24 L[7]=_
        # OopMap{rbp=Oop [40]=Oop [48]=Oop [56]=Oop off=968}
3c8   	int3	# ShouldNotReachHere
3c8
3cd   B38: #	B39 &lt;- B14  Freq: 1.20018e-08
3cd   	movl    RAX, R11	# spill
3d0   	xorl    RBX, RBX	# int
3d2
3d2   B39: #	N575 &lt;- B38 B21  Freq: 1.21457e-08
3d2   	movq    RBP, [rsp + #0]	# spill
3d6   	movq    [rsp + #0], R13	# spill
3da   	pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #8]
3e4   	movl    [rsp + #16], R14	# spill
3e9   	movl    [rsp + #24], RBX	# spill
3ed   	movl    [rsp + #32], RAX	# spill
3f1   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
3f7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:70  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #32 L[6]=rsp + #24 L[7]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [28]=NarrowOop off=1020}
3fc   	int3	# ShouldNotReachHere
3fc
401   B40: #	B41 &lt;- B15  Freq: 5.64791e-09
401   	movl    RAX, R11	# spill
404   	movl    RBP, #1	# int
409   	xorl    RBX, RBX	# int
40b
40b   B41: #	N575 &lt;- B40 B22  Freq: 5.71561e-09
40b   	movq    [rsp + #8], R13	# spill
410   	movl    [rsp + #28], RAX	# spill
414   	movl    [rsp + #32], R10	# spill
419   	movl    [rsp + #36], RBX	# spill
41d   	movl    [rsp + #40], R14	# spill
422   	movl    RSI, #-155	# int
427   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:80  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=_ L[4]=rsp + #40 L[5]=rsp + #28 L[6]=RBP L[7]=rsp + #32 STK[0]=rsp + #36 STK[1]=rsp + #40
        # OopMap{[0]=Oop [8]=Oop [32]=NarrowOop off=1068}
42c   	int3	# ShouldNotReachHere
42c
431   B42: #	N575 &lt;- B26  Freq: 2.33656e-10
431   	movq    RBP, [rsp + #0]	# spill
435   	movq    R8, [rsp + #16]	# spill
43a   	movq    [rsp + #0], R8	# spill
43e   	movl    R8, [rsp + #28]	# spill
443   	movl    [rsp + #12], R8	# spill
448   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #24]
	movl    [rsp + #16], rax
	movq    rax, [rsp - #8]
45a   	movl    RSI, #-28	# int
45f   	movq    [rsp + #24], RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
467   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=_ L[4]=_ L[5]=rsp + #16 L[6]=_ L[7]=_ STK[0]=rsp + #12 STK[1]=rsp + #16 STK[2]=rsp + #24
        # OopMap{rbp=Oop [12]=NarrowOop [24]=Oop off=1132}
46c   	int3	# ShouldNotReachHere
46c
471   B43: #	N575 &lt;- B29  Freq: 2.33656e-10
471   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
477   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=RBP STK[1]=rsp + #24 STK[2]=rsp + #16 STK[3]=_
        # OopMap{rbp=NarrowOop off=1148}
47c   	int3	# ShouldNotReachHere
47c
481   B44: #	N575 &lt;- B27  Freq: 2.30594e-10
481   	movq    RBP, [rsp + #0]	# spill
485   	movq    R8, [rsp + #16]	# spill
48a   	movq    [rsp + #0], R8	# spill
48e   	movl    R9, [rsp + #28]	# spill
493   	movl    [rsp + #12], R9	# spill
498   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #24]
	movl    [rsp + #16], rax
	movq    rax, [rsp - #8]
4aa   	movl    RSI, #-42	# int
4af   	movq    [rsp + #24], RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
4b7   	call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=_ L[4]=_ L[5]=rsp + #16 L[6]=_ L[7]=_ STK[0]=rsp + #12 STK[1]=rsp + #16 STK[2]=rsp + #24
        # OopMap{rbp=Oop [12]=NarrowOop [24]=Oop off=1212}
4bc   	int3	# ShouldNotReachHere
4bc
4c1   B45: #	N575 &lt;- B1  Freq: 1.01328e-06
4c1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
4c7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL
        # OopMap{off=1228}
4cc   	int3	# ShouldNotReachHere
4cc
4d1   B46: #	N575 &lt;- B3  Freq: 1.01328e-06
4d1   	movl    RBP, R10	# spill
4d4   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
4db   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=1248}
4e0   	int3	# ShouldNotReachHere
4e0
4e5   B47: #	N575 &lt;- B10  Freq: 1.01304e-06
      	nop 	# 2 bytes pad for loops and calls
4e7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=rsp + #24
        # OopMap{off=1260}
4ec   	int3	# ShouldNotReachHere
4ec
4f1   B48: #	N575 &lt;- B25  Freq: 2.30599e-09
4f1   	# exception oop is in rax; no code emitted
4f1   	movq    RSI, RAX	# spill
4f4   	addq    rsp, 80	# Destroy frame
	popq   rbp

4f9   	jmp     rethrow_stub
4f9
4fe   B49: #	N575 &lt;- B28  Freq: 2.33656e-10
4fe   	movl    RSI, #-10	# int
503   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=rsp + #24 STK[2]=rsp + #16 STK[3]=_
        # OopMap{off=1288}
508   	int3	# ShouldNotReachHere
508

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139941922150144'/>
<opto_assembly compile_id='373'>
{method}
 - this oop:          0x00007f46c6adfc48
 - method holder:     &apos;org/openjdk/jcstress/util/OpenAddressHashCounter&apos;
 - constants:         0x00007f46c6adf440 constant pool [164] {0x00007f46c6adf440} for &apos;org/openjdk/jcstress/util/OpenAddressHashCounter&apos; cache=0x00007f46c6ae0480
 - access:            0x81000001  public 
 - name:              &apos;record&apos;
 - signature:         &apos;(Ljava/lang/Object;)V&apos;
 - max stack:         6
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      7
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef7f0: 0xbb000000 i2c: 0x00007f46c9145fa0 c2i: 0x00007f46c91460de c2iUV: 0x00007f46c91460b1
 - compiled entry     0x00007f46c92edca0
 - code size:         8
 - code start:        0x00007f46c6adfc18
 - code end (excl):   0x00007f46c6adfc20
 - method data:       0x00007f46c6ae45f8
 - checked ex length: 0
 - linenumber start:  0x00007f46c6adfc20
 - localvar length:   2
 - localvar start:    0x00007f46c6adfc2c
 - compiled code: nmethod   2646  355       3       org.openjdk.jcstress.util.OpenAddressHashCounter::record (8 bytes)
#
#  void ( org/openjdk/jcstress/util/OpenAddressHashCounter:NotNull *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/util/OpenAddressHashCounter:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N796: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B75 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (368 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c   	movq    R8, RSI	# spill
02f   	movl    RBX, [RSI + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.keys
032   	xorl    R9, R9	# int
035   	movl    R11, [RDX + #8 (8-bit)]	# compressed klass ptr
039   	NullCheck RDX
039
039   B2: #	B46 B3 &lt;- B1  Freq: 0.999999
039   	movl    R10, [RSI + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.length
03d   	decode_heap_oop_not_null RAX,RBX
040   	movl    RSI, #-34	# int
045   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4698088910:Constant:exact *	# compressed klass ptr
04c   	jne,u  B46  P=0.000001 C=-1.000000
04c
052   B3: #	B76 B4 &lt;- B2  Freq: 0.999998
052   	movl    [rsp + #12], RBX	# spill
056   	movq    [rsp + #0], R8	# spill
05a   	# checkcastPP of RDX
05a   	decl    R10	# int
05d   	movl    RBX, [RDX + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
063   	movl    R11, RBX	# spill
066   	sall    R11, #5
06a   	movl    RCX, [RDX + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
070   	movq    R14, RDX	# spill
073   	subl    R11, RBX	# int
076   	addl    R11, RCX	# int
079   	andl    R11, R10	# int
07c   	movl    R13, R11	# spill
07f   	movdl   XMM0, R11	# spill
084   	incl    R13	# int
087   	andl    R13, R10	# int
08a   	movl    R11, R13	# spill
08d   	incl    R11	# int
090   	andl    R11, R10	# int
093   	movl    RDX, R11	# spill
096   	incl    RDX	# int
098   	andl    RDX, R10	# int
09b   	movl    R8, RDX	# spill
09e   	incl    R8	# int
0a1   	andl    R8, R10	# int
0a4   	movl    [rsp + #32], R8	# spill
0a9   	incl    R8	# int
0ac   	movl    RBP, R8	# spill
0af   	movl    RDI, [rsp + #12]	# spill
0b3   	movl    RDI, [RDI + #12 (8-bit)]	# range
0b6   	NullCheck RDI
0b6
0b6   B4: #	B37 B5 &lt;- B3  Freq: 0.999997
0b6   	movq    R8, [rsp + #0]	# spill
0ba   	movl    R8, [R8 + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
0be   	movdl   XMM2, R8	# spill
0c3   	movl    RSI, #-28	# int
0c8   	movdl   R8, XMM0	# spill
0cd   	cmpl    R8, RDI	# unsigned
0d0   	jnb,u  B37  P=0.000001 C=-1.000000
0d0
0d6   B5: #	B21 B6 &lt;- B4  Freq: 0.999996
0d6   	movl    R8, [rsp + #12]	# spill
0db   	movdl   RSI, XMM0	# spill
0df   	movl    R8, [R8 + #16 + RSI &lt;&lt; #2]	# compressed ptr
0e4   	decode_heap_oop_not_null RSI,R8
0e7   	movdq   XMM1, RSI	# spill
0ec   	testl   R8, R8	# compressed ptr
0ef   	je     B21  P=0.000174 C=11510.000000
0ef
0f5   B6: #	B47 B7 &lt;- B5  Freq: 0.999822
0f5   	movl    RSI, [R8 + #8 (8-bit)]	# compressed klass ptr
0f9   	cmpl    RSI, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4698088910:Constant:exact *	# compressed klass ptr
0ff   	jne,u  B47  P=0.000001 C=-1.000000
0ff
105   B7: #	B49 B8 &lt;- B6  Freq: 0.999821
105   	movdq   R8, XMM1	# spill
10a   	# checkcastPP of R8
10a   	movdq   XMM1, R8	# spill
10f   	cmpq    R8, R14	# ptr
112   	je,u  B49  P=0.000000 C=11395.000000
112
118   B8: #	B14 B9 &lt;- B7  Freq: 0.999821
118   	movl    [rsp + #20], RDI	# spill
11c   	movq    [rsp + #24], RAX	# spill
121   	movl    R8, [R8 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
128   	movl    RDI, RBP	# spill
12a   	andl    RDI, R10	# int
12d   	cmpl    R8, RBX
130   	jne,s   B14  P=0.004651 C=11395.000000
130
132   B9: #	B14 B10 &lt;- B8  Freq: 0.99517
132   	movdq   R10, XMM1	# spill
137   	movl    R8, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
13e   	cmpl    R8, RCX
141   	jne,s   B14  P=0.007230 C=11342.000000
141
143   B10: #	B77 B11 &lt;- B9 B20  Freq: 0.999819
143   	movdl   R8, XMM2	# spill
148   	movl    R11, [R8 + #12 (8-bit)]	# range
14c   	NullCheck R8
14c
14c   B11: #	B38 B12 &lt;- B10  Freq: 0.999818
14c   	movdl   R10, XMM0	# spill
151   	cmpl    R10, R11	# unsigned
154   	jnb,u  B38  P=0.000001 C=-1.000000
154
15a   B12: #	B13 &lt;- B11  Freq: 0.999817
15a   	incq    [R8 + #16 + R10 &lt;&lt; #3]	# long
15f
15f   B13: #	N796 &lt;- B12 B27  Freq: 0.999992
15f   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

16a   	ret
16a
16b   B14: #	B52 B15 &lt;- B8 B9  Freq: 0.0118452
16b   	movl    R10, #1	# int
171   	cmpl    R13, [RSP + #20 (32-bit)]	# unsigned
176   	jnb,u  B52  P=0.000001 C=-1.000000
176
17c   B15: #	B35 B16 &lt;- B14  Freq: 0.0118452
17c   	movl    R8, [rsp + #12]	# spill
181   	movl    R9, [R8 + #16 + R13 &lt;&lt; #2]	# compressed ptr
186   	decode_heap_oop_not_null R8,R9
189   	movdq   XMM1, R8	# spill
18e   	testl   R9, R9	# compressed ptr
191   	je     B35  P=0.000174 C=11510.000000
191
197   B16: #	B61 B17 &lt;- B15  Freq: 0.0118431
197   	movl    R8, [R9 + #8 (8-bit)]	# compressed klass ptr
19b   	cmpl    R8, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4698088910:Constant:exact *	# compressed klass ptr
1a2   	jne,u  B61  P=0.000001 C=-1.000000
1a2
1a8   B17: #	B63 B18 &lt;- B16  Freq: 0.0118431
1a8   	movdq   R8, XMM1	# spill
1ad   	# checkcastPP of R8
1ad   	movdq   XMM1, R8	# spill
1b2   	movl    R9, [R8 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1b9   	cmpq    R8, R14	# ptr
1bc   	je,u  B63  P=0.000000 C=11395.000000
1bc
1c2   B18: #	B28 B19 &lt;- B17  Freq: 0.0118431
1c2   	movl    R8, [R8 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1c9   	cmpl    R9, RBX
1cc   	jne     B28  P=0.004651 C=11395.000000
1cc
1d2   B19: #	B28 B20 &lt;- B18  Freq: 0.011788
1d2   	cmpl    R8, RCX
1d5   	jne     B28  P=0.007230 C=11342.000000
1d5
1db   B20: #	B10 &lt;- B19 B45 B34  Freq: 0.0118431
1db   	movdl   XMM0, R13	# spill
1e0   	jmp     B10
1e0
1e5   B21: #	B22 &lt;- B5  Freq: 0.000173747
1e5   	movss   [rsp + #32], XMM0	# spill
1eb   	movq    [rsp + #24], RAX	# spill
1f0   	movl    [rsp + #20], RDI	# spill
1f0
1f4   B22: #	B78 B23 &lt;- B36 B51 B55 B21  Freq: 0.00017583
1f4   	movq    RSI, R14	# spill
1f7   	movq    RBP, [rsp + #0]	# spill
1fb   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::decouple
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:103  L[0]=RBP L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #32 L[6]=_ L[7]=_ STK[0]=rsp + #12 STK[1]=rsp + #32
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [12]=NarrowOop [24]=Oop off=512}
200
200   B23: #	B65 B24 &lt;- B22  Freq: 0.000175826
        # Block is sole successor of call
200   	encode_heap_oop RDI,RAX
28b   	movq    RDX, RBP	# spill
28e   	movl    RBP, [RDX + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
291   	movslq  RCX, [RSP + #32 (32-bit)]	# int -&gt; long
296   	movl    R8, [rsp + #12]	# spill
29b   	leaq    R11, [R8 + #16 + RCX &lt;&lt; #2]	# ptr idxscaleoffnarrow
2a0   	movl    RBX, [R8 + #8 (8-bit)]	# compressed klass ptr
2a4   	movl    R10, [rsp + #32]	# spill
2a9   	cmpl    R10, [RSP + #20 (32-bit)]	# unsigned
2ae   	jnb,u  B65  P=0.000001 C=-1.000000
2ae
2b4   B24: #	B67 B25 &lt;- B23  Freq: 0.000175826
2b4   	cmpl    RBX, narrowklass: precise klass [Ljava/lang/Object;: 0x00007f46980865d0:Constant:exact *	# compressed klass ptr
2ba   	jne,u  B67  P=0.000001 C=-1.000000
2ba
2c0   B25: #	B79 B26 &lt;- B24  Freq: 0.000175826
2c0   	movq    R8, R11	# ptr -&gt; long
2c3   	shrq    R8, #9
2c7   	movl    [R11], RDI	# compressed ptr
2ca   	movq    R11, 0x00007f46dbf28000	# ptr
2d4   	movb    [R11 + R8], R12	# short/char (R12_heapbase==0)
2d8   	movl    R11, [RBP + #12 (8-bit)]	# range
2dc   	NullCheck RBP
2dc
2dc   B26: #	B66 B27 &lt;- B25  Freq: 0.000175826
2dc   	movl    RSI, #-28	# int
2e1   	cmpl    R10, R11	# unsigned
2e4   	jnb,u  B66  P=0.000001 C=-1.000000
2e4
2ea   B27: #	B13 &lt;- B26  Freq: 0.000175825
2ea   	movq    [RBP + #16 + RCX &lt;&lt; #3], #1	# long
2f3   	jmp     B13
2f3
2f8   B28: #	B68 B29 &lt;- B18 B19  Freq: 0.000140309
2f8   	cmpl    R11, [RSP + #20 (32-bit)]	# unsigned
2fd   	jnb,u  B68  P=0.000001 C=-1.000000
2fd
303   B29: #	B51 B30 &lt;- B28  Freq: 0.000140309
303   	movl    R8, [rsp + #12]	# spill
308   	movl    R10, [R8 + #16 + R11 &lt;&lt; #2]	# compressed ptr
30d   	testl   R10, R10	# compressed ptr
310   	je     B51  P=0.000174 C=11510.000000
310
316   B30: #	B72 B31 &lt;- B29  Freq: 0.000140284
316   	movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
31a   	decode_heap_oop_not_null R10,R10
31a   	movdq   XMM1, R10	# spill
31f   	cmpl    R8, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4698088910:Constant:exact *	# compressed klass ptr
326   	jne,u  B72  P=0.000001 C=-1.000000
326
32c   B31: #	B73 B32 &lt;- B30  Freq: 0.000140284
32c   	# checkcastPP of R10
32c   	movdq   XMM1, R10	# spill
331   	movl    R10, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
338   	movdq   R8, XMM1	# spill
33d   	cmpq    R8, R14	# ptr
340   	je,u  B73  P=0.000000 C=11395.000000
340
346   B32: #	B39 B33 &lt;- B31  Freq: 0.000140284
346   	movl    R9, [R8 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
34d   	cmpl    R10, RBX
350   	jne,s   B39  P=0.004651 C=11395.000000
350
352   B33: #	B39 B34 &lt;- B32  Freq: 0.000139632
352   	cmpl    R9, RCX
355   	jne,s   B39  P=0.007230 C=11342.000000
355
357   B34: #	B20 &lt;- B33 B60  Freq: 0.000138642
357   	movl    R13, R11	# spill
35a   	jmp     B20
35a
35f   B35: #	B36 &lt;- B15  Freq: 2.05807e-06
35f   	movl    RDX, R13	# spill
35f
362   B36: #	B22 &lt;- B35 B40  Freq: 2.05836e-06
362   	movl    [rsp + #32], RDX	# spill
366   	jmp     B22
366
36b   B37: #	N796 &lt;- B4  Freq: 1.01328e-06
36b   	movq    RBP, [rsp + #0]	# spill
36f   	movq    [rsp + #0], R14	# spill
373   	movl    R10, [rsp + #12]	# spill
378   	movl    [rsp + #8], R10	# spill
37d   	movl    [rsp + #16], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
383   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=RBP L[1]=rsp + #0 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #16 L[6]=#0 L[7]=_ STK[0]=rsp + #8 STK[1]=rsp + #16
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [0]=Oop [8]=NarrowOop off=904}
388   	int3	# ShouldNotReachHere
388
38d   B38: #	N796 &lt;- B11  Freq: 1.01309e-06
38d   	movl    [rsp + #4], R8	# spill
392   	movss   [rsp + #8], XMM0	# spill
398   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
39f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #4 STK[1]=rsp + #8 STK[2]=rsp + #4 STK[3]=rsp + #8
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{[4]=NarrowOop off=932}
3a4   	int3	# ShouldNotReachHere
3a4
3a9   B39: #	B74 B40 &lt;- B32 B33  Freq: 1.66199e-06
3a9   	movl    R9, #4	# int
3af   	movl    R10, #3	# int
3b5   	cmpl    RDX, [RSP + #20 (32-bit)]	# unsigned
3b9   	jnb,u  B74  P=0.000001 C=-1.000000
3b9
3bf   B40: #	B36 B41 &lt;- B39  Freq: 1.66199e-06
3bf   	movl    R8, [rsp + #12]	# spill
3c4   	movl    R8, [R8 + #16 + RDX &lt;&lt; #2]	# compressed ptr
3c9   	testl   R8, R8	# compressed ptr
3cc   	je,s   B36  P=0.000174 C=11510.000000
3cc
3ce   B41: #	B62 B42 &lt;- B40  Freq: 1.6617e-06
3ce   	movl    R11, [R8 + #8 (8-bit)]	# compressed klass ptr
3d2   	decode_heap_oop_not_null R8,R8
3d2   	movdq   XMM1, R8	# spill
3d7   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4698088910:Constant:exact *	# compressed klass ptr
3de   	jne,u  B62  P=0.000001 C=-1.000000
3de
3e4   B42: #	B64 B43 &lt;- B41  Freq: 1.6617e-06
3e4   	movq    R11, R8	# spill
3e7   	# checkcastPP of R11
3e7   	movdq   XMM1, R11	# spill
3ec   	movl    RSI, #-155	# int
3f1   	movl    R8, [R11 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
3f8   	cmpq    R11, R14	# ptr
3fb   	je,u  B64  P=0.000000 C=11395.000000
3fb
401   B43: #	B54 B44 &lt;- B42  Freq: 1.6617e-06
401   	movl    R11, [R11 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
408   	cmpl    R8, RBX
40b   	jne     B54  P=0.004651 C=11395.000000
40b
411   B44: #	B54 B45 &lt;- B43  Freq: 1.65397e-06
411   	cmpl    R11, RCX
414   	jne     B54  P=0.007230 C=11342.000000
414
41a   B45: #	B20 &lt;- B44  Freq: 1.64201e-06
41a   	movl    R13, RDX	# spill
41d   	jmp     B20
41d
422   B46: #	N796 &lt;- B2  Freq: 9.99999e-07
422   	movq    RBP, R8	# spill
425   	movq    [rsp + #8], RDX	# spill
      	nop 	# 1 bytes pad for loops and calls
42b   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=RBP L[1]=rsp + #8 L[2]=#1 L[3]=_ L[4]=#3 L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #8
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [8]=Oop off=1072}
430   	int3	# ShouldNotReachHere
430
435   B47: #	B48 &lt;- B6  Freq: 9.99822e-07
435   	movss   [rsp + #32], XMM0	# spill
435
43b   B48: #	N796 &lt;- B47 B62 B72 B56  Freq: 1.01181e-06
43b   	movl    RSI, #-34	# int
440   	movq    RBP, [rsp + #0]	# spill
444   	movl    [rsp + #8], R9	# spill
449   	movq    [rsp + #16], R14	# spill
44e   	movsd   [rsp + #24], XMM1	# spill
      	nop 	# 3 bytes pad for loops and calls
457   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=RBP L[1]=rsp + #16 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #32 L[6]=rsp + #8 L[7]=_ STK[0]=rsp + #24 STK[1]=rsp + #16
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [16]=Oop [24]=Oop off=1116}
45c   	int3	# ShouldNotReachHere
45c
461   B49: #	B50 &lt;- B7  Freq: 4.76752e-07
461   	movss   [rsp + #32], XMM0	# spill
461
467   B50: #	N796 &lt;- B49 B64 B73 B57  Freq: 4.82467e-07
467   	movq    RBP, [rsp + #0]	# spill
46b   	movl    [rsp + #8], R9	# spill
470   	movq    [rsp + #16], R14	# spill
475   	movq    [rsp + #24], R14	# spill
47a   	movl    R11, [rsp + #32]	# spill
47f   	movl    [rsp + #12], R11	# spill
484   	movsd   [rsp + #40], XMM1	# spill
48a   	movl    RSI, #-155	# int
48f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:2  L[0]=rsp + #40 L[1]=rsp + #24 L[2]=_ STK[0]=rsp + #40 STK[1]=rsp + #16
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=RBP L[1]=rsp + #16 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #12 L[6]=rsp + #8 L[7]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [16]=Oop [24]=Oop [40]=Oop off=1172}
494   	int3	# ShouldNotReachHere
494
499   B51: #	B22 &lt;- B29  Freq: 2.43783e-08
499   	movl    [rsp + #32], R11	# spill
49e   	jmp     B22
49e
4a3   B52: #	B53 &lt;- B14  Freq: 1.20025e-08
4a3   	movl    R11, R13	# spill
4a3
4a6   B53: #	N796 &lt;- B52 B69 B74 B70  Freq: 1.21464e-08
4a6   	movq    RBP, [rsp + #0]	# spill
4aa   	movq    [rsp + #0], R14	# spill
4ae   	movl    [rsp + #8], R9	# spill
4b3   	movl    [rsp + #20], R11	# spill
4b8   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
4bf   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:70  L[0]=RBP L[1]=rsp + #0 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #20 L[6]=rsp + #8 L[7]=_ STK[0]=rsp + #12 STK[1]=rsp + #20
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [0]=Oop [12]=NarrowOop off=1220}
4c4   	int3	# ShouldNotReachHere
4c4
4c9   B54: #	B69 B55 &lt;- B43 B44  Freq: 1.96866e-08
4c9   	movl    R11, [rsp + #32]	# spill
4ce   	cmpl    R11, [RSP + #20 (32-bit)]	# unsigned
4d3   	jnb,u  B69  P=0.000001 C=-1.000000
4d3
4d9   B55: #	B22 B56 &lt;- B54  Freq: 1.96866e-08
4d9   	movl    R11, [rsp + #12]	# spill
4de   	movl    R10, [rsp + #32]	# spill
4e3   	movl    R11, [R11 + #16 + R10 &lt;&lt; #2]	# compressed ptr
4e8   	testl   R11, R11	# compressed ptr
4eb   	je     B22  P=0.000174 C=11510.000000
4eb
4f1   B56: #	B48 B57 &lt;- B55  Freq: 1.96832e-08
4f1   	movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
4f5   	decode_heap_oop_not_null R11,R11
4f5   	movdq   XMM1, R11	# spill
4fa   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4698088910:Constant:exact *	# compressed klass ptr
501   	jne,u  B48  P=0.000001 C=-1.000000
501
507   B57: #	B50 B58 &lt;- B56  Freq: 1.96832e-08
507   	movq    R10, R11	# spill
50a   	# checkcastPP of R10
50a   	movdq   XMM1, R10	# spill
50f   	movl    R11, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
516   	cmpq    R10, R14	# ptr
519   	je,u  B50  P=0.000000 C=11395.000000
519
51f   B58: #	B70 B59 &lt;- B57  Freq: 1.96831e-08
51f   	movl    R8, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
526   	cmpl    R8, RBX
529   	jne     B70  P=0.004651 C=11395.000000
529
52f   B59: #	B70 B60 &lt;- B58  Freq: 1.95916e-08
52f   	cmpl    R11, RCX
532   	jne,s   B70  P=0.007230 C=11342.000000
532
534   B60: #	B34 &lt;- B59  Freq: 1.945e-08
534   	movl    R11, [rsp + #32]	# spill
539   	jmp     B34
539
53e   B61: #	B62 &lt;- B16  Freq: 1.18431e-08
53e   	movl    RDX, R13	# spill
53e
541   B62: #	B48 &lt;- B61 B41  Freq: 1.18448e-08
541   	movl    R9, R10	# spill
544   	movl    [rsp + #32], RDX	# spill
548   	jmp     B48
548
54d   B63: #	B64 &lt;- B17  Freq: 5.64723e-09
54d   	movl    RDX, R13	# spill
54d
550   B64: #	B50 &lt;- B63 B42  Freq: 5.64802e-09
550   	movl    R9, R10	# spill
553   	movl    [rsp + #32], RDX	# spill
557   	jmp     B50
557
55c   B65: #	N796 &lt;- B23  Freq: 1.78161e-10
55c   	movq    RBP, RDX	# spill
55f   	movl    RSI, #-28	# int
564   	movq    [rsp + #16], RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
56b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=RBP L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #32 L[6]=_ L[7]=_ STK[0]=rsp + #12 STK[1]=rsp + #32 STK[2]=rsp + #16
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [12]=NarrowOop [16]=Oop off=1392}
570   	int3	# ShouldNotReachHere
570
575   B66: #	N796 &lt;- B26  Freq: 1.7816e-10
      	nop 	# 2 bytes pad for loops and calls
577   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=RBP STK[1]=rsp + #32 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=NarrowOop off=1404}
57c   	int3	# ShouldNotReachHere
57c
581   B67: #	N796 &lt;- B24  Freq: 1.75826e-10
581   	movq    RBP, RDX	# spill
584   	movl    RSI, #-42	# int
589   	movq    [rsp + #16], RAX	# spill
      	nop 	# 1 bytes pad for loops and calls
58f   	call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=RBP L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #32 L[6]=_ L[7]=_ STK[0]=rsp + #12 STK[1]=rsp + #32 STK[2]=rsp + #16
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [12]=NarrowOop [16]=Oop off=1428}
594   	int3	# ShouldNotReachHere
594
599   B68: #	B69 &lt;- B28  Freq: 1.42172e-10
599   	movl    [rsp + #32], R11	# spill
599
59e   B69: #	B53 &lt;- B68 B54  Freq: 1.42192e-10
59e   	movl    R9, R10	# spill
5a1   	movl    R11, [rsp + #32]	# spill
5a6   	jmp     B53
5a6
5ab   B70: #	B53 B71 &lt;- B58 B59  Freq: 2.33192e-10
5ab   	movl    R11, RDI	# spill
5ae   	cmpl    RDI, [RSP + #20 (32-bit)]	# unsigned
5b2   	jnb,u  B53  P=0.000001 C=-1.000000
5b2
5b8   B71: #	N796 &lt;- B70  Freq: 2.33192e-10
5b8   	movl    R8, [rsp + #12]	# spill
5bd   	movl    RBP, [R8 + #16 + RDI &lt;&lt; #2]	# compressed ptr
5c2   	movq    [rsp + #8], R14	# spill
5c7   	movl    [rsp + #16], RDI	# spill
5cb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:80  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #16 L[6]=#5 L[7]=RBP STK[0]=#4 STK[1]=#3
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{rbp=NarrowOop [0]=Oop [8]=Oop off=1488}
5d0   	int3	# ShouldNotReachHere
5d0
5d5   B72: #	B48 &lt;- B30  Freq: 1.40284e-10
5d5   	movl    [rsp + #32], R11	# spill
5da   	movl    R9, #2	# int
5e0   	jmp     B48
5e0
5e5   B73: #	B50 &lt;- B31  Freq: 6.68927e-11
5e5   	movl    [rsp + #32], R11	# spill
5ea   	movl    R9, #2	# int
5f0   	jmp     B50
5f0
5f5   B74: #	B53 &lt;- B39  Freq: 1.68406e-12
5f5   	movl    R9, #2	# int
5fb   	movl    R11, RDX	# spill
5fe   	jmp     B53
5fe
603   B75: #	N796 &lt;- B1  Freq: 1.01328e-06
603   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
60b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{off=1552}
610   	int3	# ShouldNotReachHere
610
615   B76: #	N796 &lt;- B3  Freq: 1.01328e-06
615   	movdl   RBP, XMM0	# spill
619   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
61f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{off=1572}
624   	int3	# ShouldNotReachHere
624
629   B77: #	N796 &lt;- B10  Freq: 1.0131e-06
629   	movdl   RBP, XMM0	# spill
62d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
633   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{off=1592}
638   	int3	# ShouldNotReachHere
638
63d   B78: #	N796 &lt;- B22  Freq: 1.7583e-09
63d   	# exception oop is in rax; no code emitted
63d   	movq    RSI, RAX	# spill
640   	addq    rsp, 64	# Destroy frame
	popq   rbp

645   	jmp     rethrow_stub
645
64a   B79: #	N796 &lt;- B25  Freq: 1.78161e-10
64a   	movl    RSI, #-10	# int
64f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=rsp + #32 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # OopMap{off=1620}
654   	int3	# ShouldNotReachHere
654

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139941923202816'/>
<opto_assembly compile_id='378' compile_kind='osr'>
{method}
 - this oop:          0x00007f46c6ae25c8
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase&apos;
 - constants:         0x00007f46c6ae1dc0 constant pool [137] {0x00007f46c6ae1dc0} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase&apos; cache=0x00007f46c6ae26a0
 - access:            0xc1000001  public 
 - name:              &apos;newEpoch&apos;
 - signature:         &apos;(Lorg/openjdk/jcstress/infra/runners/StateHolder;)V&apos;
 - max stack:         7
 - max locals:        10
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef7f0: 0xbb000000 i2c: 0x00007f46c9145fa0 c2i: 0x00007f46c91460de c2iUV: 0x00007f46c91460b1
 - compiled entry     0x00007f46c92f6c40
 - code size:         275
 - code start:        0x00007f46c6ae23f8
 - code end (excl):   0x00007f46c6ae250b
 - method data:       0x00007f46c6ae5290
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae250b
 - localvar length:   12
 - localvar start:    0x00007f46c6ae2534
 - compiled code: nmethod   3087  375       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch (275 bytes)
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 128 --
#r191 rsp+124: in_preserve
#r190 rsp+120: return address
#r189 rsp+116: in_preserve
#r188 rsp+112: saved fp register
#r187 rsp+108: pad2, stack alignment
#r186 rsp+104: pad2, stack alignment
#r185 rsp+100: Fixed slot 1
#r184 rsp+96: Fixed slot 0
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N2053: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B92 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (328 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

01c   	movq    R10, [RSI + #56 (8-bit)]	# ptr
020   	movq    [rsp + #16], R10	# spill
025   	movq    RBP, [RSI + #32 (8-bit)]	# ptr
029   	movl    R11, [RSI + #24 (8-bit)]	# int
02d   	movl    [rsp + #24], R11	# spill
032   	movl    RBX, [RSI + #16 (8-bit)]	# int
035   	xorl    R13, R13	# int
038   	movq    R14, precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase: 0x00007f4698176810:Constant:exact *	# ptr
042   	movl    R10, [RSI + #40 (8-bit)]	# int
046   	movl    [rsp + #4], R10	# spill
04b   	movl    R8, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4698176ae0:Constant:exact *	# compressed klass ptr
051   	movl    R11, [RSI + #48 (8-bit)]	# int
055   	movl    [rsp + #8], R11	# spill
05a   	movq    R10, [RSI + #72 (8-bit)]	# ptr
05e   	movq    [rsp + #32], R10	# spill
063   	decode_klass_not_null R10,R8
071   	movq    [rsp + #40], R10	# spill
076   	movq    RDI, RSI	# spill
079   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
086   	movq    R10, [rsp + #32]	# spill
08b   	testq   R10, R10	# ptr
08e   	je     B92  P=0.001000 C=-1.000000
08e
094   B2: #	B120 B3 &lt;- B1  Freq: 0.999
094   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
098   	decode_klass_not_null R10,R11
0a6   	movq    R10, [R10 + #56 (8-bit)]	# class
0aa   	cmpq    R10, R14	# ptr
0ad   	jne,u  B120  P=0.000001 C=-1.000000
0ad
0b3   B3: #	B4 &lt;- B2  Freq: 0.998999
0b3   	movq    R10, [rsp + #32]	# spill
0b8   	# checkcastPP of R10
0b8   	movq    [rsp + #80], R10	# spill
0b8
0bd   B4: #	B93 B5 &lt;- B3 B92  Freq: 0.999999
0bd   	movl    RDX, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46d8218a30:Constant:exact *	# compressed klass ptr
0c2   	movl    RCX, RBX	# spill
0c4   	incl    RCX	# int
0c6   	movl    R10, NULL+12	# ptr (positive 32-bit)
0cc   	movq    R11, [rsp + #16]	# spill
0d1   	testq   R11, R11	# ptr
0d4   	je     B93  P=0.001000 C=-1.000000
0d4
0da   B5: #	B120 B6 &lt;- B4  Freq: 0.998999
0da   	movl    R11, [R11 + #8 (8-bit)]	# compressed klass ptr
0de   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f4698177050:Constant:exact *	# compressed klass ptr
0e5   	jne,u  B120  P=0.000001 C=-1.000000
0e5
0eb   B6: #	B7 &lt;- B5  Freq: 0.998998
0eb   	movq    R14, [rsp + #16]	# spill
0f0   	# checkcastPP of R14
0f0
0f0   B7: #	B94 B8 &lt;- B6 B93  Freq: 0.999998
0f0   	cmpl    RCX, R13
0f3   	cmovllt RCX, R13	# max
0f7   	testq   RBP, RBP	# ptr
0fa   	je     B94  P=0.001000 C=-1.000000
0fa
100   B8: #	B120 B9 &lt;- B7  Freq: 0.998998
100   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
104   	cmpl    R10, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f4698177050:Constant:exact *	# compressed klass ptr
10b   	jne,u  B120  P=0.000001 C=-1.000000
10b
111   B9: #	B10 &lt;- B8  Freq: 0.998997
111   	# checkcastPP of RBP
111   	movq    R10, RBP	# spill
114   	addq    R10, #12	# ptr
118
118   B10: #	B34 B11 &lt;- B9 B94  Freq: 0.999997
118   	movl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4698131840:Constant:exact *	# compressed klass ptr
11e   	cmpl    RBX, [RSP + #24 (32-bit)]
122   	jge     B34  P=0.002429 C=24700.000000
122
128   B11: #	B12 &lt;- B10  Freq: 0.997568
128   	cmpl    RCX, [RSP + #24 (32-bit)]
12c   	movl    R8, [rsp + #24]	# spill
131   	cmovlgt RCX, R8	# min
135   	movl    R9, #-2147483648	# int
13b   	movl    RSI, #-10	# int
13b
140   B12: #	B115 B13 &lt;- B11 B16 	Loop: B12-B16 inner pre of N1538 Freq: 1.99513
140   	testq   RBP, RBP	# ptr
143   	je     B115  P=0.000001 C=-1.000000
143
149   B13: #	B116 B14 &lt;- B12  Freq: 1.99513
149   	movl    R8, [R10]	# range
14c   	movl    RAX, [rsp + #24]	# spill
150   	cmpl    RAX, R8
153   	movl    RDI, RAX	# spill
155   	cmovlgt RDI, R8	# min
159   	cmpl    RBX, R8	# unsigned
15c   	jnb,u  B116  P=0.000001 C=-1.000000
15c
162   B14: #	B123 B15 &lt;- B13  Freq: 1.99512
162   	movl    RAX, RDI	# spill
164   	addl    RAX, #-3	# int
167   	movl    R13, [RBP + #16 + RBX &lt;&lt; #2]	# compressed ptr
16c   	incl    RBX	# int
16e   	movl    R13, [R13 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
172   	NullCheck R13
172
172   B15: #	B124 B16 &lt;- B14  Freq: 1.99512
172   	movl    [R13 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
179   	NullCheck R13
179
179   B16: #	B12 B17 &lt;- B15  Freq: 1.99512
179   	movl    [R13 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
180   	cmpl    RDI, RAX
182   	cmovll RAX, R9	# signed, int
186   	cmpl    RBX, RCX
188   	jl,s   B12	# loop end  P=0.500000 C=24700.000000
188
18a   B17: #	B28 B18 &lt;- B16  Freq: 0.99756
18a   	cmpl    RBX, RAX
18c   	jge,s   B28  P=0.000001 C=-1.000000
18c
18e   B18: #	B19 &lt;- B17  Freq: 0.997559
18e   	# castII of RBX
      	nop 	# 2 bytes pad for loops and calls

190   B19: #	B123 B20 &lt;- B18 B27 	Loop: B19-B27 inner main of N399 Freq: 409.303
190   	movl    R10, [RBP + #16 + RBX &lt;&lt; #2]	# compressed ptr
195   	movslq  RCX, RBX	# i2l
198   	movl    RDI, [RBP + #20 + RCX &lt;&lt; #2]	# compressed ptr
19c   	movl    R9, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1a0   	NullCheck R10
1a0
1a0   B20: #	B124 B21 &lt;- B19  Freq: 409.302
1a0   	movl    [R9 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1a7   	NullCheck R9
1a7
1a7   B21: #	B123 B22 &lt;- B20  Freq: 409.302
1a7   	movl    [R9 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1ae   	movl    R10, [RDI + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1b2   	NullCheck RDI
1b2
1b2   B22: #	B124 B23 &lt;- B21  Freq: 409.302
1b2   	addl    RBX, #4	# int
1b5   	movl    [R10 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1bc   	NullCheck R10
1bc
1bc   B23: #	B123 B24 &lt;- B22  Freq: 409.301
1bc   	movl    [R10 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1c3   	movl    R9, [RBP + #24 + RCX &lt;&lt; #2]	# compressed ptr
1c8   	movl    R10, [R9 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1cc   	NullCheck R9
1cc
1cc   B24: #	B124 B25 &lt;- B23  Freq: 409.301
1cc   	movl    RCX, [RBP + #28 + RCX &lt;&lt; #2]	# compressed ptr
1d0   	movl    [R10 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1d7   	NullCheck R10
1d7
1d7   B25: #	B123 B26 &lt;- B24  Freq: 409.3
1d7   	movl    [R10 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1de   	movl    R10, [RCX + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1e2   	NullCheck RCX
1e2
1e2   B26: #	B124 B27 &lt;- B25  Freq: 409.3
1e2   	movl    [R10 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1e9   	NullCheck R10
1e9
1e9   B27: #	B19 B28 &lt;- B26  Freq: 409.3
1e9   	movl    [R10 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1f0   	cmpl    RBX, RAX
1f2   	jl,s   B19	# loop end  P=0.997571 C=24700.000000
1f2
1f4   B28: #	B34 B29 &lt;- B17 B27  Freq: 0.994242
1f4   	cmpl    RBX, [RSP + #24 (32-bit)]
1f8   	jge,s   B34  P=0.500000 C=-1.000000
1f8
1fa   B29: #	B30 &lt;- B28  Freq: 0.497121
1fa   	# castII of RBX
      	nop 	# 2 bytes pad for loops and calls

1fc   B30: #	B116 B31 &lt;- B29 B33 	Loop: B30-B33 inner post of N1538 Freq: 0.994239
1fc   	cmpl    RBX, R8	# unsigned
1ff   	jnb,u  B116  P=0.000001 C=-1.000000
1ff
205   B31: #	B123 B32 &lt;- B30  Freq: 0.994238
205   	movl    R10, [RBP + #16 + RBX &lt;&lt; #2]	# compressed ptr
20a   	movl    R9, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
20e   	NullCheck R10
20e
20e   B32: #	B124 B33 &lt;- B31  Freq: 0.994237
20e   	movl    [R9 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
215   	NullCheck R9
215
215   B33: #	B30 B34 &lt;- B32  Freq: 0.994236
215   	movl    [R9 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
21c   	incl    RBX	# int
21e   	cmpl    RBX, [RSP + #24 (32-bit)]
222   	jl,s   B30	# loop end  P=0.500000 C=24700.000000
222
224   B34: #	B78 B35 &lt;- B10 B33 B28  Freq: 0.996668
224   	decode_klass_not_null R10,R11
232   	movq    [rsp + #16], R10	# spill
237   	decode_klass_not_null R10,RDX
245   	movq    [rsp + #24], R10	# spill
24a   	movl    R10, [rsp + #4]	# spill
24f   	cmpl    R10, [RSP + #8 (32-bit)]
254   	jg     B78  P=0.016667 C=60.000000
254
25a   B35: #	B121 B36 &lt;- B34  Freq: 0.980057
25a   	testq   R14, R14	# ptr
25d   	je     B121  P=0.000001 C=-1.000000
25d
263   B36: #	B37 &lt;- B35  Freq: 0.980056
263   	movq    [rsp + #32], R14	# spill
263
268   B37: #	B59 B38 &lt;- B91 B81 B36  Freq: 0.996667
268   	movq    R11, [rsp + #32]	# spill
26d   	movl    R10, [R11 + #12 (8-bit)]	# range
271   	testl   R10, R10
274   	jle     B59  P=0.002398 C=25020.000000
274
27a   B38: #	B118 B39 &lt;- B37  Freq: 0.994277
27a   	testl  R10, R10	# unsigned
27d   	jbe,u  B118  P=0.000001 C=-1.000000
27d
283   B39: #	B118 B40 &lt;- B38  Freq: 0.994276
283   	movl    R9, narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# compressed klass ptr
289   	decode_klass_not_null R9,R9
28d   	movl    R8, R10	# spill
290   	decl    R8	# int
293   	cmpl    R8, R10	# unsigned
296   	jnb,u  B118  P=0.000001 C=-1.000000
296
29c   B40: #	B111 B41 &lt;- B39  Freq: 0.994274
29c   	movl    [rsp + #12], R8	# spill
2a1   	movq    [rsp + #16], R9	# spill
2a6   	movl    [rsp + #8], R10	# spill
2ab   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
2b4   	# TLS is in R15
2b4   	movq    R8, [R15 + #112 (8-bit)]	# ptr
2b8   	movq    R10, R8	# spill
2bb   	addq    R10, #280	# ptr
2c2   	movl    RBP, [R11 + #16 (8-bit)]	# compressed ptr
2c6   	decode_heap_oop_not_null R9,RBP
2c9   	# TLS is in R15
2c9   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
2d0   	jnb,u  B111  P=0.000100 C=-1.000000
2d0
2d6   B41: #	B42 &lt;- B40  Freq: 0.994175
2d6   	# TLS is in R15
2d6   	movq    [R15 + #112 (8-bit)], R10	# ptr
2da   	movq    RDI, R8	# spill
2dd   	addq    RDI, #16	# ptr
2e1   	movq    R11, [rsp + #16]	# spill
2e6   	movq    R11, [R11 + #176 (32-bit)]	# ptr
2ed   	movq    [R8], R11	# ptr
2f0   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# compressed klass ptr
2f8   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
300   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
304   	movl    RCX, #33	# long (unsigned 32-bit)
309   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
313
313   B42: #	B99 B43 &lt;- B112 B41  Freq: 0.994274
313   	
313   	MEMBAR-storestore (empty encoding)
313   	# checkcastPP of R8
313   	encode_heap_oop_not_null R11,R8
41e   	movl    [RBP + #12 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
422   	NullCheck RBP
422
422   B43: #	B119 B44 &lt;- B42  Freq: 0.994273
422   	movq    R10, R9	# ptr -&gt; long
425   	shrq    R10, #9
429   	movq    R11, 0x00007f46dbf28000	# ptr
433   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
437   	movl    R11, [rsp + #12]	# spill
43c   	cmpl    R11, #1
440   	jle     B119  P=0.000001 C=-1.000000
440
446   B44: #	B45 &lt;- B43  Freq: 0.994272
446   	movl    R11, #1	# int
44c   	movl    [rsp + #72], R11	# spill
44c
451   B45: #	B74 B46 &lt;- B44 B51 	Loop: B45-B51 inner main of N620 Freq: 414.263
451   	# TLS is in R15
451   	movq    R8, [R15 + #112 (8-bit)]	# ptr
455   	movq    R10, [rsp + #0]	# spill
459   	movl    R11, [rsp + #72]	# spill
45e   	movl    RBP, [R10 + #16 + R11 &lt;&lt; #2]	# compressed ptr
463   	movq    R10, R8	# spill
466   	addq    R10, #280	# ptr
46d   	# TLS is in R15
46d   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
474   	jnb,u  B74  P=0.000100 C=-1.000000
474
47a   B46: #	B47 &lt;- B45  Freq: 414.222
47a   	# TLS is in R15
47a   	movq    [R15 + #112 (8-bit)], R10	# ptr
47e   	movq    RDI, R8	# spill
481   	addq    RDI, #16	# ptr
485   	movq    R11, [rsp + #16]	# spill
48a   	movq    R11, [R11 + #176 (32-bit)]	# ptr
491   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
499   	movq    [R8], R11	# ptr
49c   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# compressed klass ptr
4a4   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
4a8   	movl    RCX, #33	# long (unsigned 32-bit)
4ad   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
4b7
4b7   B47: #	B99 B48 &lt;- B75 B46  Freq: 414.263
4b7   	decode_heap_oop_not_null R10,RBP
4ba   	
4ba   	MEMBAR-storestore (empty encoding)
4ba   	# checkcastPP of R8
4ba   	encode_heap_oop_not_null R9,R8
5c5   	movl    [RBP + #12 (8-bit)], R9	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
5c9   	NullCheck RBP
5c9
5c9   B48: #	B76 B49 &lt;- B47  Freq: 414.263
5c9   	movq    R10, R10	# ptr -&gt; long
5c9   	movslq  R11, [RSP + #72 (32-bit)]	# int -&gt; long
5ce   	movq    R8, [rsp + #0]	# spill
5d2   	movl    R8, [R8 + #20 + R11 &lt;&lt; #2]	# compressed ptr
5d7   	movl    [rsp + #32], R8	# spill
5dc   	shrq    R10, #9
5e0   	movq    R11, 0x00007f46dbf28000	# ptr
5ea   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
5ee   	# TLS is in R15
5ee   	movq    R8, [R15 + #112 (8-bit)]	# ptr
5f2   	movl    R11, [rsp + #32]	# spill
5f7   	decode_heap_oop_not_null R10,R11
5fa   	movq    [rsp + #48], R10	# spill
5ff   	movq    R10, R8	# spill
602   	addq    R10, #280	# ptr
609   	movq    RDI, R8	# spill
60c   	addq    RDI, #16	# ptr
610   	# TLS is in R15
610   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
617   	jnb,u  B76  P=0.000100 C=-1.000000
617
61d   B49: #	B50 &lt;- B48  Freq: 414.222
61d   	# TLS is in R15
61d   	movq    [R15 + #112 (8-bit)], R10	# ptr
621   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
629   	movq    R10, [rsp + #16]	# spill
62e   	movq    R10, [R10 + #176 (32-bit)]	# ptr
635   	movq    [R8], R10	# ptr
638   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# compressed klass ptr
640   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
644   	movl    RCX, #33	# long (unsigned 32-bit)
649   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
653
653   B50: #	B99 B51 &lt;- B77 B49  Freq: 414.263
653   	
653   	MEMBAR-storestore (empty encoding)
653   	# checkcastPP of R8
653   	movl    R10, [rsp + #32]	# spill
658   	testl   R10, R10	# compressed ptr
65b   	je     B99  P=0.000001 C=-1.000000
65b
661   B51: #	B45 B52 &lt;- B50  Freq: 414.263
661   	encode_heap_oop_not_null R10,R8
76c   	movl    R8, [rsp + #32]	# spill
771   	movl    [R8 + #12 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
775   	movq    R10, [rsp + #48]	# spill
77a   	movq    R10, R10	# ptr -&gt; long
77a   	shrq    R10, #9
77e   	movq    R11, 0x00007f46dbf28000	# ptr
788   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
78c   	movl    R10, [rsp + #72]	# spill
791   	addl    R10, #2	# int
795   	movl    [rsp + #72], R10	# spill
79a   	cmpl    R10, [RSP + #12 (32-bit)]
79f   	jl     B45	# loop end  P=0.997602 C=24960.000000
79f
7a5   B52: #	B58 B53 &lt;- B119 B51  Freq: 0.993433
7a5   	cmpl    R10, [RSP + #8 (32-bit)]
7aa   	jge     B58  P=0.500000 C=-1.000000
7aa
7b0   B53: #	B54 &lt;- B52  Freq: 0.496717
7b0   	# castII of R10
7b0   	movl    [rsp + #12], R10	# spill
      	nop 	# 3 bytes pad for loops and calls

7b8   B54: #	B113 B55 &lt;- B53 B57 	Loop: B54-B57 inner post of N1363 Freq: 0.993432
7b8   	# TLS is in R15
7b8   	movq    R11, [R15 + #112 (8-bit)]	# ptr
7bc   	movq    R10, R11	# spill
7bf   	addq    R10, #280	# ptr
7c6   	movq    R8, [rsp + #0]	# spill
7ca   	movl    R9, [rsp + #12]	# spill
7cf   	movl    RBP, [R8 + #16 + R9 &lt;&lt; #2]	# compressed ptr
7d4   	# TLS is in R15
7d4   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
7db   	jnb,u  B113  P=0.000100 C=-1.000000
7db
7e1   B55: #	B56 &lt;- B54  Freq: 0.993333
7e1   	movq    RDI, R11	# spill
7e4   	addq    RDI, #16	# ptr
7e8   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
7f0   	# TLS is in R15
7f0   	movq    [R15 + #112 (8-bit)], R10	# ptr
7f4   	movq    R10, [rsp + #16]	# spill
7f9   	movq    R10, [R10 + #176 (32-bit)]	# ptr
800   	movq    [R11], R10	# ptr
803   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# compressed klass ptr
80b   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
80f   	movl    RCX, #33	# long (unsigned 32-bit)
814   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
81e
81e   B56: #	B127 B57 &lt;- B114 B55  Freq: 0.993432
81e   	
81e   	movl    R8, [rsp + #12]	# spill
823   	incl    R8	# int
826   	movl    [rsp + #12], R8	# spill
82b   	MEMBAR-storestore (empty encoding)
82b   	# checkcastPP of R11
82b   	decode_heap_oop_not_null R10,RBP
82e   	encode_heap_oop_not_null R8,R11
939   	movl    [RBP + #12 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
93d   	NullCheck RBP
93d
93d   B57: #	B54 B58 &lt;- B56  Freq: 0.993431
93d   	movq    R10, R10	# ptr -&gt; long
93d   	shrq    R10, #9
941   	movq    R11, 0x00007f46dbf28000	# ptr
94b   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
94f   	movl    R10, [rsp + #12]	# spill
954   	cmpl    R10, [RSP + #8 (32-bit)]
959   	jl     B54	# loop end  P=0.500000 C=24960.000000
959
95f   B58: #	B59 &lt;- B57 B52  Freq: 0.993432
95f   	movq    R11, [rsp + #0]	# spill
95f
963   B59: #	B125 B60 &lt;- B58 B37  Freq: 0.995822
963   	movl    RSI, #-10	# int
968   	movq    R8, [rsp + #80]	# spill
96d   	movl    RBP, [R8 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.version
971   	NullCheck R8
971
971   B60: #	B101 B61 &lt;- B59  Freq: 0.995821
971   	# TLS is in R15
971   	movq    RDX, [R15 + #112 (8-bit)]	# ptr
975   	movq    R10, RDX	# spill
978   	addq    R10, #48	# ptr
97c   	decode_heap_oop_not_null R9,RBP
97f   	# TLS is in R15
97f   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
986   	jnb,u  B101  P=0.000100 C=-1.000000
986
98c   B61: #	B62 &lt;- B60  Freq: 0.995722
98c   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
994   	# TLS is in R15
994   	movq    [R15 + #112 (8-bit)], R10	# ptr
998   	movq    R10, [rsp + #40]	# spill
99d   	movq    R10, [R10 + #176 (32-bit)]	# ptr
9a4   	movq    [RDX], R10	# ptr
9a7   	movl    [RDX + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4698176ae0:Constant:exact *	# compressed klass ptr
9ae   	movl    [RDX + #12 (8-bit)], R12	# int (R12_heapbase==0)
9b2   	movq    [RDX + #16 (8-bit)], R12	# long (R12_heapbase==0)
9b6   	movq    [RDX + #24 (8-bit)], R12	# long (R12_heapbase==0)
9ba   	movq    [RDX + #32 (8-bit)], R12	# long (R12_heapbase==0)
9be   	movq    [RDX + #40 (8-bit)], R12	# long (R12_heapbase==0)
9be
9c2   B62: #	B126 B63 &lt;- B102 B61  Freq: 0.995821
9c2   	
9c2   	MEMBAR-storestore (empty encoding)
9c2   	# checkcastPP of RDX
9c2   	movl    R10, [R8 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
9c6   	movzbl  R10, [R10 + #32 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/Control.isStopped
9cb   	NullCheck R10
9cb
9cb   B63: #	B103 B64 &lt;- B62  Freq: 0.99582
9cb   	encode_heap_oop R8,R11
a56   	MEMBAR-acquire ! (empty encoding)
a56   	movq    R11, RDX	# ptr -&gt; long
a59   	movl    [RDX + #24 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
a5d   	shrq    R11, #9
a61   	movq    R8, 0x00007f46dbf28000	# ptr
a6b   	movb    [R8 + R11], R12	# short/char (R12_heapbase==0)
a6f   	movb    [RDX + #16 (8-bit)], R10	# byte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
a73   	# TLS is in R15
a73   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
a77   	movl    [RDX + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/infra/runners/StateHolder.countWorkers
a7e   	movq    R10, RAX	# spill
a81   	addq    R10, #16	# ptr
a85   	# TLS is in R15
a85   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
a8c   	jnb,u  B103  P=0.000100 C=-1.000000
a8c
a92   B64: #	B65 &lt;- B63  Freq: 0.995721
a92   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
a9a   	# TLS is in R15
a9a   	movq    [R15 + #112 (8-bit)], R10	# ptr
a9e   	movq    R11, [rsp + #24]	# spill
aa3   	movq    R10, [R11 + #176 (32-bit)]	# ptr
aaa   	movq    [RAX], R10	# ptr
aad   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46d8218a30:Constant:exact *	# compressed klass ptr
ab4   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
ab4
ab8   B65: #	B105 B66 &lt;- B104 B64  Freq: 0.99582
ab8   	
ab8   	MEMBAR-storestore (empty encoding)
ab8   	# checkcastPP of RAX
ab8   	encode_heap_oop_not_null R10,RAX
bc3   	MEMBAR-release ! (empty encoding)
bc3   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
bca   	lock addl [rsp + #0], 0	! membar_volatile
bcf   	movl    [RDX + #32 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
bd3   	movq    R10, RDX	# ptr -&gt; long
bd6   	shrq    R10, #9
bda   	movq    R8, 0x00007f46dbf28000	# ptr
be4   	movb    [R8 + R10], R12	# short/char (R12_heapbase==0)
be8   	# TLS is in R15
be8   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
bec   	movq    R10, RAX	# spill
bef   	addq    R10, #16	# ptr
bf3   	# TLS is in R15
bf3   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
bfa   	jnb,u  B105  P=0.000100 C=-1.000000
bfa
c00   B66: #	B67 &lt;- B65  Freq: 0.995721
c00   	# TLS is in R15
c00   	movq    [R15 + #112 (8-bit)], R10	# ptr
c04   	movq    R8, [R11 + #176 (32-bit)]	# ptr
c0b   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
c13   	movq    [RAX], R8	# ptr
c16   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46d8218a30:Constant:exact *	# compressed klass ptr
c1d   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
c1d
c21   B67: #	B107 B68 &lt;- B106 B66  Freq: 0.99582
c21   	
c21   	MEMBAR-storestore (empty encoding)
c21   	# checkcastPP of RAX
c21   	encode_heap_oop_not_null R10,RAX
d2c   	MEMBAR-release ! (empty encoding)
d2c   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
d33   	lock addl [rsp + #0], 0	! membar_volatile
d38   	movq    R8, RDX	# ptr -&gt; long
d3b   	movl    [RDX + #28 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
d3f   	shrq    R8, #9
d43   	movq    R10, 0x00007f46dbf28000	# ptr
d4d   	movb    [R10 + R8], R12	# short/char (R12_heapbase==0)
d51   	# TLS is in R15
d51   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
d55   	movq    R10, RAX	# spill
d58   	addq    R10, #16	# ptr
d5c   	# TLS is in R15
d5c   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
d63   	jnb,u  B107  P=0.000100 C=-1.000000
d63
d69   B68: #	B69 &lt;- B67  Freq: 0.995721
d69   	# TLS is in R15
d69   	movq    [R15 + #112 (8-bit)], R10	# ptr
d6d   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
d75   	movq    R10, [R11 + #176 (32-bit)]	# ptr
d7c   	movq    [RAX], R10	# ptr
d7f   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46d8218a30:Constant:exact *	# compressed klass ptr
d86   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
d86
d8a   B69: #	B109 B70 &lt;- B108 B68  Freq: 0.99582
d8a   	
d8a   	MEMBAR-storestore (empty encoding)
d8a   	# checkcastPP of RAX
d8a   	MEMBAR-release ! (empty encoding)
d8a   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
d91   	encode_heap_oop_not_null R10,RAX
e9c   	lock addl [rsp + #0], 0	! membar_volatile
ea1   	movq    R8, RDX	# ptr -&gt; long
ea4   	movl    [RDX + #36 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
ea8   	shrq    R8, #9
eac   	movq    R10, 0x00007f46dbf28000	# ptr
eb6   	movb    [R10 + R8], R12	# short/char (R12_heapbase==0)
eba   	# TLS is in R15
eba   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
ebe   	movq    R10, RAX	# spill
ec1   	addq    R10, #16	# ptr
ec5   	# TLS is in R15
ec5   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
ecc   	jnb,u  B109  P=0.000100 C=-1.000000
ecc
ed2   B70: #	B71 &lt;- B69  Freq: 0.995721
ed2   	# TLS is in R15
ed2   	movq    [R15 + #112 (8-bit)], R10	# ptr
ed6   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
ede   	movq    R10, [R11 + #176 (32-bit)]	# ptr
ee5   	movq    [RAX], R10	# ptr
ee8   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46d8218a30:Constant:exact *	# compressed klass ptr
eef   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
eef
ef3   B71: #	B117 B72 &lt;- B110 B70  Freq: 0.99582
ef3   	movl    RSI, #-10	# int
ef8   	
ef8   	MEMBAR-storestore (empty encoding)
ef8   	# checkcastPP of RAX
ef8   	encode_heap_oop_not_null R10,RAX
1003   	MEMBAR-release ! (empty encoding)
1003   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
100a   	MEMBAR-volatile (unnecessary so empty encoding)
100a   	movq    R11, RDX	# ptr -&gt; long
100d   	movl    [RDX + #40 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
1011   	shrq    R11, #9
1015   	movq    R10, 0x00007f46dbf28000	# ptr
101f   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
1023   	MEMBAR-release ! (empty encoding)
1023   	movb    [RDX + #18 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
1027   	MEMBAR-volatile (unnecessary so empty encoding)
1027   	MEMBAR-release ! (empty encoding)
1027   	movb    [RDX + #19 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
102b   	MEMBAR-volatile (unnecessary so empty encoding)
102b   	MEMBAR-release ! (empty encoding)
102b   	movb    [RDX + #17 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
102f   	MEMBAR-volatile (unnecessary so empty encoding)
102f   	MEMBAR-release ! (empty encoding)
102f   	movb    [RDX + #20 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1033   	lock addl [rsp + #0], 0	! membar_volatile
1038   	MEMBAR-release ! (empty encoding)
1038   	testl   RBP, RBP	# compressed ptr
103a   	je     B117  P=0.000001 C=-1.000000
103a
1040   B72: #	B142 B73 &lt;- B71  Freq: 0.995819
1040   	movq    RSI, R9	# spill
1043   	call,static  java.util.concurrent.atomic.AtomicReference::set
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:271  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=4168}
1048
1048   B73: #	N2053 &lt;- B72  Freq: 0.995799
        # Block is sole successor of call
1048   	addq    rsp, 112	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

1053   	ret
1053
1054   B74: #	B139 B75 &lt;- B45  Freq: 0.0414332
1054   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
105f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #80 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #0 L[6]=rsp + #0 L[7]=rsp + #8 L[8]=rsp + #72 L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [80]=Oop off=4196}
1064
1064   B75: #	B47 &lt;- B74  Freq: 0.0414324
        # Block is sole successor of call
1064   	movq    R8, RAX	# spill
1067   	jmp     B47
1067
106c   B76: #	B140 B77 &lt;- B48  Freq: 0.0414332
106c   	movl    RBP, [rsp + #72]	# spill
1070   	incl    RBP	# int
1072   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# ptr
      	nop 	# 3 bytes pad for loops and calls
107f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #80 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #0 L[6]=rsp + #0 L[7]=rsp + #8 L[8]=RBP L[9]=_ STK[0]=rsp + #32
        # OopMap{[0]=Oop [32]=NarrowOop [48]=Oop [80]=Oop off=4228}
1084
1084   B77: #	B50 &lt;- B76  Freq: 0.0414323
        # Block is sole successor of call
1084   	movq    R8, RAX	# spill
1087   	jmp     B50
1087
108c   B78: #	B138 B79 &lt;- B34  Freq: 0.0166111
108c   	movq    RSI, R14	# spill
108f   	movl    RDX, R10	# spill
1092   	movl    RBP, [rsp + #8]	# spill
      	nop 	# 1 bytes pad for loops and calls
1097   	call,static  java.util.Arrays::copyOf
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:154  L[0]=rsp + #80 L[1]=_ L[2]=_ L[3]=RBP L[4]=rsp + #4 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{[80]=Oop off=4252}
109c
109c   B79: #	B128 B80 &lt;- B78  Freq: 0.0166108
        # Block is sole successor of call
109c   	movq    R10, RAX	# spill
109f   	movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
10a3   	NullCheck RAX
10a3
10a3   B80: #	B122 B81 &lt;- B79  Freq: 0.0166108
10a3   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f4698177050:Constant:exact *	# compressed klass ptr
10aa   	jne,u  B122  P=0.000000 C=-1.000000
10aa
10b0   B81: #	B37 B82 &lt;- B80  Freq: 0.0166108
10b0   	# checkcastPP of R10
10b0   	movq    [rsp + #32], R10	# spill
10b5   	movl    R11, RBP	# spill
10b8   	cmpl    R11, [RSP + #4 (32-bit)]
10bd   	jge     B37  P=0.003115 C=321.000000
10bd
10c3   B82: #	B84 B83 &lt;- B81  Freq: 0.016559
10c3   	movl    R10, [R10 + #12 (8-bit)]	# range
10c7   	movl    RSI, #-122	# int
10cc   	movl    R11, [rsp + #4]	# spill
10d1   	decl    R11	# int
10d4   	cmpl    RBP, R10	# unsigned
10d7   	jnb,us  B84  P=0.000001 C=-1.000000
10d7
10d9   B83: #	B86 B84 &lt;- B82  Freq: 0.016559
10d9   	movl    R9, narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f46981770d0:Constant:exact *	# compressed klass ptr
10df   	decode_klass_not_null R8,R9
10ed   	movq    [rsp + #48], R8	# spill
10f2   	cmpl    R11, R10	# unsigned
10f5   	jb,us  B86  P=0.999999 C=-1.000000
10f5
10f7   B84: #	N2053 &lt;- B83 B82  Freq: 3.35578e-08
10f7   	movl    RBP, [rsp + #4]	# spill
10fb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=rsp + #80 L[1]=_ L[2]=_ L[3]=_ L[4]=RBP L[5]=rsp + #32 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[32]=Oop [80]=Oop off=4352}
1100   	int3	# ShouldNotReachHere
      	nop 	# 11 bytes pad for loops and calls

1110   B85: #	B86 &lt;- B90  top-of-loop Freq: 5.29892
1110   	movl    [rsp + #8], R11	# spill
1110
1115   B86: #	B95 B87 &lt;- B83 B85 	Loop: B86-B85 inner  Freq: 5.31548
1115   	movl    R11, [rsp + #8]	# spill
111a   	incl    R11	# int
111d   	movl    [rsp + #12], R11	# spill
1122   	# TLS is in R15
1122   	movq    R11, [R15 + #112 (8-bit)]	# ptr
1126   	movq    R10, R11	# spill
1129   	addq    R10, #24	# ptr
112d   	# TLS is in R15
112d   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
1134   	jnb,u  B95  P=0.000100 C=-1.000000
1134
113a   B87: #	B88 &lt;- B86  Freq: 5.31495
113a   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1142   	# TLS is in R15
1142   	movq    [R15 + #112 (8-bit)], R10	# ptr
1146   	movq    R10, [rsp + #48]	# spill
114b   	movq    R10, [R10 + #176 (32-bit)]	# ptr
1152   	movq    [R11], R10	# ptr
1155   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f46981770d0:Constant:exact *	# compressed klass ptr
115d   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
1161   	movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
1161
1165   B88: #	B97 B89 &lt;- B96 B87  Freq: 5.31548
1165   	movq    R10, [rsp + #32]	# spill
116a   	movl    R8, [rsp + #8]	# spill
116f   	leaq    RBP, [R10 + #16 + R8 &lt;&lt; #2]	# ptr posidxscaleoff
1174   	
1174   	MEMBAR-storestore (empty encoding)
1174   	# checkcastPP of R11
1174   	movq    [rsp + #56], R11	# spill
1179   	# TLS is in R15
1179   	movq    R11, [R15 + #112 (8-bit)]	# ptr
117d   	movq    R10, R11	# spill
1180   	addq    R10, #408	# ptr
1187   	# TLS is in R15
1187   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
118e   	jnb,u  B97  P=0.000100 C=-1.000000
118e
1194   B89: #	B90 &lt;- B88  Freq: 5.31495
1194   	# TLS is in R15
1194   	movq    [R15 + #112 (8-bit)], R10	# ptr
1198   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
11a0   	movq    RDI, R11	# spill
11a3   	addq    RDI, #16	# ptr
11a7   	movq    R10, [rsp + #16]	# spill
11ac   	movq    R10, [R10 + #176 (32-bit)]	# ptr
11b3   	movq    [R11], R10	# ptr
11b6   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4698131840:Constant:exact *	# compressed klass ptr
11be   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
11c2   	movl    RCX, #49	# long (unsigned 32-bit)
11c7   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
11d1
11d1   B90: #	B85 B91 &lt;- B98 B89  Freq: 5.31548
11d1   	movq    R10, [rsp + #56]	# spill
11d6   	encode_heap_oop_not_null R10,R10
12de   	
12de   	MEMBAR-storestore (empty encoding)
12de   	# checkcastPP of R11
12de   	movq    R8, RBP	# ptr -&gt; long
12e1   	encode_heap_oop_not_null R11,R11
13e9   	movq    R9, [rsp + #56]	# spill
13ee   	movq    R9, R9	# ptr -&gt; long
13ee   	shrq    R9, #9
13f2   	shrq    R8, #9
13f6   	movl    [RBP], R10	# compressed ptr
13fa   	movq    R10, [rsp + #56]	# spill
13ff   	movl    [R10 + #16 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1403   	movq    R10, 0x00007f46dbf28000	# ptr
140d   	movb    [R10 + R9], R12	# short/char (R12_heapbase==0)
1411   	movb    [R10 + R8], R12	# short/char (R12_heapbase==0)
1415   	movl    R11, [rsp + #12]	# spill
141a   	cmpl    R11, [RSP + #4 (32-bit)]
141f   	jl     B85	# loop end  P=0.996885 C=320.000000
141f
1425   B91: #	B37 &lt;- B90  Freq: 0.016559
1425   	jmp     B37
1425
142a   B92: #	B4 &lt;- B1  Freq: 0.000999987
142a   	xorl    R10, R10	# ptr
142d   	movq    [rsp + #80], R10	# spill
1432   	jmp     B4
1432
1437   B93: #	B7 &lt;- B4  Freq: 0.000999986
1437   	xorl    R11, R11	# ptr
143a   	movq    R14, R11	# spill
143d   	jmp     B7
143d
1442   B94: #	B10 &lt;- B7  Freq: 0.000999985
1442   	xorl    RBP, RBP	# ptr
1444   	jmp     B10
1444
1449   B95: #	B136 B96 &lt;- B86  Freq: 0.000531636
1449   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f46981770d0:Constant:exact *	# ptr
1453   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=rsp + #80 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #4 L[5]=rsp + #32 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[32]=Oop [80]=Oop off=5208}
1458
1458   B96: #	B88 &lt;- B95  Freq: 0.000531626
        # Block is sole successor of call
1458   	movq    R11, RAX	# spill
145b   	jmp     B88
145b
1460   B97: #	B137 B98 &lt;- B88  Freq: 0.000531636
1460   	movq    RSI, precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f4698131840:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
146b   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:183  L[0]=rsp + #80 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #4 L[5]=rsp + #32 L[6]=rsp + #8 L[7]=rsp + #56 L[8]=_ L[9]=_ STK[0]=rsp + #56
        # OopMap{rbp=Derived_oop_[32] [32]=Oop [56]=Oop [80]=Oop off=5232}
1470
1470   B98: #	B90 &lt;- B97  Freq: 0.000531626
        # Block is sole successor of call
1470   	movq    R11, RAX	# spill
1473   	jmp     B90
1473
1478   B99: #	B100 &lt;- B42 B47 B50  Freq: 0.000840536
1478   	movq    RBP, R8	# spill
1478
147b   B100: #	N2053 &lt;- B127 B99  Freq: 0.000841542
147b   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
1483   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:241  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=Oop off=5256}
1488   	int3	# ShouldNotReachHere
1488
148d   B101: #	B135 B102 &lt;- B60  Freq: 9.95986e-05
148d   	movq    [rsp + #16], R9	# spill
1492   	movq    [rsp + #8], R11	# spill
1497   	movq    RSI, precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4698176ae0:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
14a3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:254  L[0]=rsp + #80 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [80]=Oop off=5288}
14a8
14a8   B102: #	B62 &lt;- B101  Freq: 9.95966e-05
        # Block is sole successor of call
14a8   	movq    R8, [rsp + #80]	# spill
14ad   	movq    R11, [rsp + #8]	# spill
14b2   	movq    RDX, RAX	# spill
14b5   	movq    R9, [rsp + #16]	# spill
14ba   	jmp     B62
14ba
14bf   B103: #	B131 B104 &lt;- B63  Freq: 9.95985e-05
14bf   	movq    [rsp + #8], R9	# spill
14c4   	movq    [rsp + #0], RDX	# spill
14c8   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46d8218a30:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
14d3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:20  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap{rbp=NarrowOop [0]=Oop [8]=Oop off=5336}
14d8
14d8   B104: #	B65 &lt;- B103  Freq: 9.95965e-05
        # Block is sole successor of call
14d8   	movq    R11, [rsp + #24]	# spill
14dd   	movq    RDX, [rsp + #0]	# spill
14e1   	movq    R9, [rsp + #8]	# spill
14e6   	jmp     B65
14e6
14eb   B105: #	B132 B106 &lt;- B65  Freq: 9.95985e-05
14eb   	movq    [rsp + #16], R9	# spill
14f0   	movq    [rsp + #8], RDX	# spill
14f5   	movq    [rsp + #0], R11	# spill
14f9   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46d8218a30:Constant:exact *	# ptr
1503   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:32  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #8
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP STK[1]=rsp + #8
        # OopMap{rbp=NarrowOop [8]=Oop [16]=Oop off=5384}
1508
1508   B106: #	B67 &lt;- B105  Freq: 9.95965e-05
        # Block is sole successor of call
1508   	movq    R11, [rsp + #0]	# spill
150c   	movq    RDX, [rsp + #8]	# spill
1511   	movq    R9, [rsp + #16]	# spill
1516   	jmp     B67
1516
151b   B107: #	B133 B108 &lt;- B67  Freq: 9.95985e-05
151b   	movq    [rsp + #16], R9	# spill
1520   	movq    [rsp + #8], RDX	# spill
1525   	movq    [rsp + #0], R11	# spill
1529   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46d8218a30:Constant:exact *	# ptr
1533   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:44  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #8
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP STK[1]=rsp + #8
        # OopMap{rbp=NarrowOop [8]=Oop [16]=Oop off=5432}
1538
1538   B108: #	B69 &lt;- B107  Freq: 9.95965e-05
        # Block is sole successor of call
1538   	movq    R11, [rsp + #0]	# spill
153c   	movq    RDX, [rsp + #8]	# spill
1541   	movq    R9, [rsp + #16]	# spill
1546   	jmp     B69
1546
154b   B109: #	B134 B110 &lt;- B69  Freq: 9.95985e-05
154b   	movq    [rsp + #8], R9	# spill
1550   	movq    [rsp + #0], RDX	# spill
1554   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46d8218a30:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
155f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:56  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap{rbp=NarrowOop [0]=Oop [8]=Oop off=5476}
1564
1564   B110: #	B71 &lt;- B109  Freq: 9.95965e-05
        # Block is sole successor of call
1564   	movq    RDX, [rsp + #0]	# spill
1568   	movq    R9, [rsp + #8]	# spill
156d   	jmp     B71
156d
1572   B111: #	B130 B112 &lt;- B40  Freq: 9.94439e-05
1572   	movq    [rsp + #56], R9	# spill
1577   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
1583   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #80 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #0 L[6]=rsp + #0 L[7]=rsp + #8 L[8]=#0 L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [56]=Oop [80]=Oop off=5512}
1588
1588   B112: #	B42 &lt;- B111  Freq: 9.9442e-05
        # Block is sole successor of call
1588   	movq    R8, RAX	# spill
158b   	movq    R9, [rsp + #56]	# spill
1590   	jmp     B42
1590
1595   B113: #	B129 B114 &lt;- B54  Freq: 9.93597e-05
1595   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# ptr
159f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #80 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #0 L[6]=rsp + #0 L[7]=rsp + #8 L[8]=rsp + #12 L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [80]=Oop off=5540}
15a4
15a4   B114: #	B56 &lt;- B113  Freq: 9.93577e-05
        # Block is sole successor of call
15a4   	movq    R11, RAX	# spill
15a7   	jmp     B56
15a7
15ac   B115: #	N2053 &lt;- B12  Freq: 2.02162e-06
15ac   	movl    RSI, #-10	# int
15b1   	movl    RBP, RBX	# spill
15b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=5560}
15b8   	int3	# ShouldNotReachHere
15b8
15bd   B116: #	N2053 &lt;- B30 B13  Freq: 3.02906e-06
15bd   	movl    R10, [rsp + #8]	# spill
15c2   	movl    [rsp + #0], R10	# spill
15c6   	movl    [rsp + #12], RBX	# spill
15ca   	movq    [rsp + #40], R14	# spill
15cf   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
15d7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:114  L[0]=rsp + #80 L[1]=_ L[2]=rsp + #40 L[3]=rsp + #0 L[4]=rsp + #4 L[5]=RBP L[6]=rsp + #24 L[7]=rsp + #12 L[8]=_ L[9]=_ STK[0]=RBP STK[1]=rsp + #12
        # OopMap{rbp=Oop [40]=Oop [80]=Oop off=5596}
15dc   	int3	# ShouldNotReachHere
15dc
15e1   B117: #	N2053 &lt;- B71  Freq: 1.00904e-06
15e1   	movq    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
15e7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:271  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=Oop off=5612}
15ec   	int3	# ShouldNotReachHere
15ec
15f1   B118: #	N2053 &lt;- B39 B38  Freq: 2.00176e-06
15f1   	movl    RSI, #-122	# int
15f6   	movl    [rsp + #16], R10	# spill
15fb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:225  L[0]=rsp + #80 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #32 L[6]=rsp + #32 L[7]=rsp + #16 L[8]=#0 L[9]=_
        # OopMap{[32]=Oop [80]=Oop off=5632}
1600   	int3	# ShouldNotReachHere
1600
1605   B119: #	B52 &lt;- B43  Freq: 1.00748e-06
1605   	movl    R10, #1	# int
160b   	jmp     B52
160b
1610   B120: #	N2053 &lt;- B2 B5 B8  Freq: 2.997e-06
1610   	movl    RSI, #-99	# int
1615   	movl    R11, [rsp + #8]	# spill
161a   	movl    [rsp + #0], R11	# spill
161e   	movl    [rsp + #8], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
1623   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:103  L[0]=rsp + #32 L[1]=_ L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #4 L[5]=RBP L[6]=rsp + #24 L[7]=rsp + #8 L[8]=_ L[9]=_
        # OopMap{rbp=Oop [16]=Oop [32]=Oop off=5672}
1628   	int3	# ShouldNotReachHere
1628
162d   B121: #	N2053 &lt;- B35  Freq: 9.93071e-07
162d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1633   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:212  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{off=5688}
1638   	int3	# ShouldNotReachHere
1638
163d   B122: #	N2053 &lt;- B80  Freq: 1e-35
163d   	movl    RSI, #-34	# int
1642   	movq    [rsp + #16], RAX	# spill
1647   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:157  L[0]=rsp + #80 L[1]=_ L[2]=_ L[3]=RBP L[4]=rsp + #4 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #16
        # OopMap{[16]=Oop [80]=Oop off=5708}
164c   	int3	# ShouldNotReachHere
164c
1651   B123: #	N2053 &lt;- B31 B14 B19 B23 B21 B25  Freq: 0.00166198
      	nop 	# 2 bytes pad for loops and calls
1653   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:119  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{off=5720}
1658   	int3	# ShouldNotReachHere
1658
165d   B124: #	N2053 &lt;- B32 B15 B20 B24 B22 B26  Freq: 0.00166197
165d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1663   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:127  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=#0
        # OopMap{off=5736}
1668   	int3	# ShouldNotReachHere
1668
166d   B125: #	N2053 &lt;- B59  Freq: 1.00905e-06
      	nop 	# 2 bytes pad for loops and calls
166f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:251  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{off=5748}
1674   	int3	# ShouldNotReachHere
1674
1679   B126: #	N2053 &lt;- B62  Freq: 1.00904e-06
1679   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
167f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:262  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=#NULL
        # OopMap{off=5764}
1684   	int3	# ShouldNotReachHere
1684
1689   B127: #	B100 &lt;- B56  Freq: 1.00662e-06
1689   	movq    RBP, R11	# spill
168c   	jmp     B100
168c
1691   B128: #	N2053 &lt;- B79  Freq: 1.68314e-08
1691   	movl    RSI, #-12	# int
      	nop 	# 1 bytes pad for loops and calls
1697   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:157  L[0]=rsp + #80 L[1]=_ L[2]=_ L[3]=RBP L[4]=rsp + #4 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{[80]=Oop off=5788}
169c   	int3	# ShouldNotReachHere
169c
16a1   B129: #	B141 &lt;- B113  Freq: 9.93597e-10
16a1   	# exception oop is in rax; no code emitted
16a1   	jmp,s   B141
16a1
16a3   B130: #	B141 &lt;- B111  Freq: 9.94439e-10
16a3   	# exception oop is in rax; no code emitted
16a3   	jmp,s   B141
16a3
16a5   B131: #	B143 &lt;- B103  Freq: 9.95985e-10
16a5   	# exception oop is in rax; no code emitted
16a5   	movq    RSI, RAX	# spill
16a8   	jmp,s   B143
16a8
16aa   B132: #	B143 &lt;- B105  Freq: 9.95985e-10
16aa   	# exception oop is in rax; no code emitted
16aa   	movq    RSI, RAX	# spill
16ad   	jmp,s   B143
16ad
16af   B133: #	B143 &lt;- B107  Freq: 9.95985e-10
16af   	# exception oop is in rax; no code emitted
16af   	movq    RSI, RAX	# spill
16b2   	jmp,s   B143
16b2
16b4   B134: #	B143 &lt;- B109  Freq: 9.95985e-10
16b4   	# exception oop is in rax; no code emitted
16b4   	movq    RSI, RAX	# spill
16b7   	jmp,s   B143
16b7
16b9   B135: #	B143 &lt;- B101  Freq: 9.95986e-10
16b9   	# exception oop is in rax; no code emitted
16b9   	movq    RSI, RAX	# spill
16bc   	jmp,s   B143
16bc
16be   B136: #	B143 &lt;- B95  Freq: 5.31636e-09
16be   	# exception oop is in rax; no code emitted
16be   	movq    RSI, RAX	# spill
16c1   	jmp,s   B143
16c1
16c3   B137: #	B143 &lt;- B97  Freq: 5.31636e-09
16c3   	# exception oop is in rax; no code emitted
16c3   	movq    RSI, RAX	# spill
16c6   	jmp,s   B143
16c6
16c8   B138: #	B143 &lt;- B78  Freq: 1.66111e-07
16c8   	# exception oop is in rax; no code emitted
16c8   	movq    RSI, RAX	# spill
16cb   	jmp,s   B143
16cb
16cd   B139: #	B141 &lt;- B74  Freq: 4.14332e-07
16cd   	# exception oop is in rax; no code emitted
16cd   	jmp,s   B141
16cd
16cf   B140: #	B141 &lt;- B76  Freq: 4.14332e-07
16cf   	# exception oop is in rax; no code emitted
16cf
16cf   B141: #	B143 &lt;- B129 B130 B139 B140  Freq: 8.30652e-07
16cf   	movq    RSI, RAX	# spill
16d2   	jmp,s   B143
16d2
16d4   B142: #	B143 &lt;- B72  Freq: 9.95819e-06
16d4   	# exception oop is in rax; no code emitted
16d4   	movq    RSI, RAX	# spill
16d4
16d7   B143: #	N2053 &lt;- B138 B136 B137 B141 B135 B131 B132 B133 B134 B142  Freq: 1.09706e-05
16d7   	addq    rsp, 112	# Destroy frame
	popq   rbp

16dc   	jmp     rethrow_stub
16dc

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139941922150144'/>
<opto_assembly compile_id='385' compile_kind='osr'>
{method}
 - this oop:          0x00007f46c6ae1ba8
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1&apos;
 - constants:         0x00007f46c6ae1498 constant pool [132] {0x00007f46c6ae1498} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1&apos; cache=0x00007f46c6ae29b0
 - access:            0xc1000001  public 
 - name:              &apos;call&apos;
 - signature:         &apos;()Ljava/lang/Void;&apos;
 - max stack:         5
 - max locals:        12
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef760: 0xb0000000 i2c: 0x00007f46c9145620 c2i: 0x00007f46c914575a c2iUV: 0x00007f46c914572d
 - compiled entry     0x00007f46c92fc440
 - code size:         158
 - code start:        0x00007f46c6ae1a80
 - code end (excl):   0x00007f46c6ae1b1e
 - method data:       0x00007f46c6ae5b08
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae1b1e
 - localvar length:   9
 - localvar start:    0x00007f46c6ae1b3a
 - compiled code: nmethod   3639  381       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call (158 bytes)
#
#  java/lang/Void:exact * ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 208 --
#r191 rsp+204: in_preserve
#r190 rsp+200: return address
#r189 rsp+196: in_preserve
#r188 rsp+192: saved fp register
#r187 rsp+188: pad2, stack alignment
#r186 rsp+184: pad2, stack alignment
#r185 rsp+180: Fixed slot 1
#r184 rsp+176: Fixed slot 0
#r235 rsp+172: spill
#r234 rsp+168: spill
#r233 rsp+164: spill
#r232 rsp+160: spill
#r231 rsp+156: spill
#r230 rsp+152: spill
#r229 rsp+148: spill
#r228 rsp+144: spill
#r227 rsp+140: spill
#r226 rsp+136: spill
#r225 rsp+132: spill
#r224 rsp+128: spill
#r223 rsp+124: spill
#r222 rsp+120: spill
#r221 rsp+116: spill
#r220 rsp+112: spill
#r219 rsp+108: spill
#r218 rsp+104: spill
#r217 rsp+100: spill
#r216 rsp+96: spill
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N4710: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B226 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (704 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #192	# Create frame

01f   	movq    R10, [RSI + #40 (8-bit)]	# ptr
023   	movq    [rsp + #24], R10	# spill
028   	movq    R10, [RSI + #56 (8-bit)]	# ptr
02c   	movq    [rsp + #32], R10	# spill
031   	movl    RBX, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46980ed330:Constant:exact *	# compressed klass ptr
036   	movl    R13, [RSI + #16 (8-bit)]	# int
03a   	movq    R10, [RSI + #48 (8-bit)]	# ptr
03e   	movq    [rsp + #40], R10	# spill
043   	movq    R10, [RSI + #88 (8-bit)]	# ptr
047   	movq    [rsp + #0], R10	# spill
04b   	movl    RBP, [RSI + #8 (8-bit)]	# int
04e   	movl    R14, [RSI + #80 (8-bit)]	# int
052   	movl    R11, [RSI + #64 (8-bit)]	# int
056   	movl    [rsp + #48], R11	# spill
05b   	movq    R10, [RSI + #24 (8-bit)]	# ptr
05f   	movq    [rsp + #8], R10	# spill
064   	movq    RDI, RSI	# spill
067   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
074   	movq    R10, [rsp + #0]	# spill
078   	testq   R10, R10	# ptr
07b   	je     B226  P=0.001000 C=-1.000000
07b
081   B2: #	B271 B3 &lt;- B1  Freq: 0.999
081   	movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
085   	cmpl    R8, narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1: 0x00007f46980ec700:Constant:exact *	# compressed klass ptr
08c   	jne,u  B271  P=0.000001 C=-1.000000
08c
092   B3: #	B4 &lt;- B2  Freq: 0.998999
092   	movq    R11, R10	# spill
095   	# checkcastPP of R11
095   	movq    [rsp + #152], R11	# spill
095
09d   B4: #	B227 B5 &lt;- B3 B226  Freq: 0.999999
09d   	movq    R10, [rsp + #32]	# spill
0a2   	testq   R10, R10	# ptr
0a5   	je     B227  P=0.001000 C=-1.000000
0a5
0ab   B5: #	B272 B6 &lt;- B4  Freq: 0.998999
0ab   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
0af   	cmpl    R10, narrowklass: precise klass java/util/concurrent/atomic/AtomicReference: 0x00007f46980ecf70:Constant:exact *	# compressed klass ptr
0b6   	jne,u  B272  P=0.000001 C=-1.000000
0b6
0bc   B6: #	B7 &lt;- B5  Freq: 0.998998
0bc   	movq    R10, [rsp + #32]	# spill
0c1   	# checkcastPP of R10
0c1   	movq    [rsp + #16], R10	# spill
0c1
0c6   B7: #	B228 B8 &lt;- B6 B227  Freq: 0.999998
0c6   	movq    R10, [rsp + #40]	# spill
0cb   	testq   R10, R10	# ptr
0ce   	je     B228  P=0.001000 C=-1.000000
0ce
0d4   B8: #	B274 B9 &lt;- B7  Freq: 0.998998
0d4   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
0d8   	cmpl    R11, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46980ed330:Constant:exact *	# compressed klass ptr
0df   	jne,u  B274  P=0.000001 C=-1.000000
0df
0e5   B9: #	B10 &lt;- B8  Freq: 0.998997
0e5   	# checkcastPP of R10
0e5   	movq    [rsp + #56], R10	# spill
0e5
0ea   B10: #	B229 B11 &lt;- B9 B228  Freq: 0.999997
0ea   	movq    R10, [rsp + #24]	# spill
0ef   	testq   R10, R10	# ptr
0f2   	je     B229  P=0.001000 C=-1.000000
0f2
0f8   B11: #	B275 B12 &lt;- B10  Freq: 0.998997
0f8   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
0fc   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f46980ed040:Constant:exact *	# compressed klass ptr
103   	jne,u  B275  P=0.000001 C=-1.000000
103
109   B12: #	B13 &lt;- B11  Freq: 0.998996
109   	movq    R10, [rsp + #24]	# spill
10e   	# checkcastPP of R10
10e   	movq    [rsp + #64], R10	# spill
10e
113   B13: #	B230 B14 &lt;- B12 B229  Freq: 0.999996
113   	movl    R10, narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46980ed260:Constant:exact *	# compressed klass ptr
119   	movq    R8, [rsp + #8]	# spill
11e   	testq   R8, R8	# ptr
121   	je     B230  P=0.001000 C=-1.000000
121
127   B14: #	B276 B15 &lt;- B13  Freq: 0.998996
127   	movl    R11, [R8 + #8 (8-bit)]	# compressed klass ptr
12b   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f46980ed110:Constant:exact *	# compressed klass ptr
132   	jne,u  B276  P=0.000001 C=-1.000000
132
138   B15: #	B16 &lt;- B14  Freq: 0.998995
138   	# checkcastPP of R8
138
138   B16: #	B37 &lt;- B15 B230  Freq: 0.999995
138   	decode_klass_not_null R10,R10
13c   	movq    [rsp + #8], R10	# spill
141   	decode_klass_not_null R10,RBX
14f   	movq    [rsp + #24], R10	# spill
154   	movl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f46980ed040:Constant:exact *	# compressed klass ptr
15a   	decode_klass_not_null R10,R11
168   	movq    [rsp + #32], R10	# spill
16d   	movl    [rsp + #136], R14	# spill
175   	xorl    R10, R10	# int
178   	movl    R11, #3	# int
17e   	movl    [rsp + #140], R10	# spill
186   	movl    [rsp + #148], R11	# spill
18e   	jmp     B37
18e
193   B17: #	B18 &lt;- B27  Freq: 0.000233665
193   	movl    R11, RAX	# spill
193
196   B18: #	B19 &lt;- B17 B234  Freq: 0.000233698
196   	movl    R10, R11	# spill
196
199   B19: #	B20 &lt;- B109 B266 B18  Freq: 0.0199606
199   	movl    [rsp + #96], R10	# spill
199
19e   B20: #	B316 B21 &lt;- B19 B126  Freq: 1.68491
19e   	movl    [rsp + #84], R9	# spill
1a3   	movl    R10, [rsp + #100]	# spill
1a8   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
1ac   	movl    [rsp + #164], R11	# spill
1b4   	movl    R11, R10	# spill
1b7   	decode_heap_oop_not_null RBP,R11
      	nop 	# 1 bytes pad for loops and calls
1bb   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::decouple
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:103  L[0]=rsp + #88 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #96 L[6]=_ L[7]=_ STK[0]=rsp + #100 STK[1]=rsp + #96
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #152 L[1]=rsp + #64 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #72 L[5]=rsp + #80 L[6]=rsp + #84 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [16]=Oop [56]=Oop [64]=Oop [72]=Oop [88]=Oop [100]=NarrowOop [152]=Oop off=448}
1c0
1c0   B21: #	B268 B22 &lt;- B20  Freq: 1.68488
        # Block is sole successor of call
1c0   	encode_heap_oop R8,RAX
24b   	movslq  R9, [RSP + #96 (32-bit)]	# int -&gt; long
250   	movl    R11, [rsp + #100]	# spill
255   	leaq    R11, [R11 + #16 + R9 &lt;&lt; #2]	# ptr idxscaleoffnarrow
25a   	movl    R10, [rsp + #96]	# spill
25f   	cmpl    R10, [RSP + #160 (32-bit)]	# unsigned
267   	jnb,u  B268  P=0.000001 C=-1.000000
267
26d   B22: #	B270 B23 &lt;- B21  Freq: 1.68488
26d   	movq    R10, [rsp + #88]	# spill
272   	movl    RBP, [R10 + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
276   	movl    RCX, [rsp + #164]	# spill
27d   	cmpl    RCX, narrowklass: precise klass [Ljava/lang/Object;: 0x00007f46980f0ad0:Constant:exact *	# compressed klass ptr
283   	jne,u  B270  P=0.000001 C=-1.000000
283
289   B23: #	B303 B24 &lt;- B22  Freq: 1.68487
289   	movl    [R11], R8	# compressed ptr
28c   	movq    R10, R11	# ptr -&gt; long
28f   	shrq    R10, #9
293   	movq    R11, 0x00007f46dbf28000	# ptr
29d   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
2a1   	movl    R10, [RBP + #12 (8-bit)]	# range
2a5   	NullCheck RBP
2a5
2a5   B24: #	B269 B25 &lt;- B23  Freq: 1.68487
2a5   	movl    R8, [rsp + #96]	# spill
2aa   	cmpl    R8, R10	# unsigned
2ad   	jnb,u  B269  P=0.000001 C=-1.000000
2ad
2b3   B25: #	B118 &lt;- B24  Freq: 1.68487
2b3   	movq    [RBP + #16 + R9 &lt;&lt; #3], #1	# long
2bc   	jmp     B118
2bc
2c1   B26: #	B261 B27 &lt;- B112 B113  Freq: 4.51642
2c1   	cmpl    RAX, [RSP + #160 (32-bit)]	# unsigned
2c8   	jnb,u  B261  P=0.000001 C=-1.000000
2c8
2ce   B27: #	B17 B28 &lt;- B26  Freq: 4.51642
2ce   	movl    R10, [rsp + #100]	# spill
2d3   	movl    R10, [R10 + #16 + RAX &lt;&lt; #2]	# compressed ptr
2d8   	decode_heap_oop_not_null RDI,R10
2db   	testl   R10, R10	# compressed ptr
2de   	je     B17  P=0.000052 C=38671.000000
2de
2e4   B28: #	B265 B29 &lt;- B27  Freq: 4.51618
2e4   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
2e8   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c36aee0:Constant:exact *	# compressed klass ptr
2ef   	jne,u  B265  P=0.000001 C=-1.000000
2ef
2f5   B29: #	B267 B30 &lt;- B28  Freq: 4.51618
2f5   	# checkcastPP of RDI
2f5   	movl    R10, R11	# spill
2f8   	incl    R10	# int
2fb   	movl    RBP, [RDI + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
301   	cmpq    RDI, RSI	# ptr
304   	je,u  B267  P=0.000000 C=11395.000000
304
30a   B30: #	B193 B31 &lt;- B29  Freq: 4.51618
30a   	movl    RDI, [RDI + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
310   	cmpl    RDI, RDX
312   	jne     B193  P=0.004651 C=11395.000000
312
318   B31: #	B193 B32 &lt;- B30  Freq: 4.49517
318   	cmpl    RBP, R14
31b   	jne     B193  P=0.007230 C=11342.000000
31b
321   B32: #	B114 &lt;- B31 B239  Freq: 4.4633
321   	movl    R10, RAX	# spill
324   	jmp     B114
324
329   B33: #	B290 B34 &lt;- B39  top-of-loop Freq: 89441.5
329   	movl    R11, [R8 + #16 + RBP &lt;&lt; #2]	# compressed ptr
32e   	movl    R10, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
332   	NullCheck R11
332
332   B34: #	B291 B35 &lt;- B33  Freq: 89441.4
332   	incl    RBP	# int
334   	movl    [R10 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
33c   	NullCheck R10
33c
33c   B35: #	B36 &lt;- B34  Freq: 89441.3
33c   	
33c   	MEMBAR-release ! (empty encoding)
33c   	movl    [R10 + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
344   	movl    [R10 + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
34f   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:100  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=R8 L[9]=R13 L[10]=RBP L[11]=_
        # OopMap{r8=Oop [16]=Oop [56]=Oop [64]=Oop [152]=Oop off=847}
355   	movl    R10, [rsp + #136]	# spill
35d   	movl    [rsp + #40], R10	# spill
35d
362   B36: #	B37 &lt;- B35 B107  Freq: 89552.6
362   	movl    R11, [rsp + #40]	# spill
367   	movl    [rsp + #136], R11	# spill
367
36f   B37: #	B41 B38 &lt;- B16 B36 	Loop: B37-B36  Freq: 89553.6
36f   	cmpl    RBP, R13
372   	jge,s   B41  P=0.001250 C=39988.000000
372
374   B38: #	B289 B39 &lt;- B37  Freq: 89441.7
374   	movl    R10, [R8 + #12 (8-bit)]	# range
378   	NullCheck R8
378
378   B39: #	B33 B40 &lt;- B38  Freq: 89441.6
378   	cmpl    RBP, R10	# unsigned
37b   	jb,us  B33  P=0.999999 C=-1.000000
37b
37d   B40: #	N4710 &lt;- B39  Freq: 0.0906292
37d   	movl    R10, [rsp + #48]	# spill
382   	movl    [rsp + #12], R10	# spill
387   	movq    R10, [rsp + #56]	# spill
38c   	movq    [rsp + #24], R10	# spill
391   	movl    [rsp + #48], R13	# spill
396   	movq    [rsp + #56], R8	# spill
39b   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
3a3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:86  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #24 L[6]=rsp + #64 L[7]=_ L[8]=rsp + #56 L[9]=rsp + #48 L[10]=RBP L[11]=_ STK[0]=rsp + #56 STK[1]=RBP
        # OopMap{[16]=Oop [24]=Oop [56]=Oop [64]=Oop [152]=Oop off=936}
3a8   	int3	# ShouldNotReachHere
3a8
3ad   B41: #	B297 B42 &lt;- B37  Freq: 111.977
3ad   	movq    R10, [rsp + #64]	# spill
3b2   	movl    R11, [R10 + #36 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
3b6   	NullCheck R10
3b6
3b6   B42: #	B240 B43 &lt;- B41  Freq: 111.977
3b6   	testl   R11, R11	# compressed ptr
3b9   	je     B240  P=0.000001 C=-1.000000
3b9
3bf   B43: #	B320 B44 &lt;- B42  Freq: 111.976
3bf   	decode_heap_oop_not_null RSI,R11
      	nop 	# 1 bytes pad for loops and calls
3c3   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=rsp + #64 L[1]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [152]=Oop off=968}
3c8
3c8   B44: #	B46 B45 &lt;- B43  Freq: 111.974
        # Block is sole successor of call
3c8   	testl   RAX, RAX
3ca   	jne,s   B46  P=0.492537 C=67.000000
3ca
3cc   B45: #	B46 &lt;- B44  Freq: 56.8227
3cc   	MEMBAR-release ! (empty encoding)
3cc   	movq    R10, [rsp + #64]	# spill
3d1   	movb    [R10 + #19 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
3d5   	lock addl [rsp + #0], 0	! membar_volatile
3da
3da   B46: #	B49 B47 &lt;- B45 B44  Freq: 111.974
3da   	movq    R10, [rsp + #64]	# spill
3df   	movzbl  R10, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
3e4   	MEMBAR-acquire ! (empty encoding)
3e4   	movq    R11, [rsp + #64]	# spill
3e9   	movzbl  R8, [R11 + #17 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
3ee   	orl     R10, R8	# int
3f1   	MEMBAR-acquire ! (empty encoding)
3f1   	MEMBAR-release ! (empty encoding)
3f1   	movb    [R11 + #21 (8-bit)], R10	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
3f5   	lock addl [rsp + #0], 0	! membar_volatile
3fa   	movzbl  R10, [R11 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
3ff   	MEMBAR-acquire ! (empty encoding)
3ff   	testl   R10, R10
402   	je,s   B49  P=0.000477 C=136189.000000
402
404   B47: #	B245 B48 &lt;- B46  Freq: 111.921
404   	movl    R10, [rsp + #48]	# spill
409   	testl   R10, R10
40c   	jne     B245  P=0.000001 C=-1.000000
      	nop 	# 14 bytes pad for loops and calls

420   B48: #	B48 B49 &lt;- B47 B48 	Loop: B48-B48 inner  Freq: 234509
420   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=rsp + #64 L[1]=rsp + #48 STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [152]=Oop off=1056}
426   	movq    R10, [rsp + #64]	# spill
42b   	movzbl  R10, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
430   	MEMBAR-acquire ! (empty encoding)
430   	testl   R10, R10
433   	jne,s   B48  P=0.999523 C=136189.000000
433
435   B49: #	B241 B50 &lt;- B48 B46  Freq: 111.974
435   	movl    R10, [rsp + #136]	# spill
43d   	incl    R10	# int
440   	movl    [rsp + #40], R10	# spill
445   	movq    R10, [rsp + #56]	# spill
44a   	testq   R10, R10	# ptr
44d   	je     B241  P=0.000001 C=-1.000000
44d
453   B50: #	B85 B51 &lt;- B49  Freq: 111.974
453   	MEMBAR-release ! (empty encoding)
453   	
453   	movl    RAX, [rsp + #136]	# spill
45a   	movl    R11, [rsp + #40]	# spill
45f   	cmpxchgl [R10 + #12 (8-bit)],R11	# If rax == [R10 + #12 (8-bit)] then store R11 into [R10 + #12 (8-bit)]
	sete    R10
	movzbl  R10, R10
46d   	
46d   	MEMBAR-acquire ! (empty encoding)
46d   	movq    R11, [rsp + #64]	# spill
472   	movl    RBP, [R11 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
476   	testl   R10, R10
479   	je     B85  P=0.520000 C=50.000000
479
47f   B51: #	B248 B52 &lt;- B50  Freq: 53.7475
47f   	decode_heap_oop_not_null R10,RBP
482   	movq    R11, [rsp + #152]	# spill
48a   	testq   R11, R11	# ptr
48d   	je     B248  P=0.000001 C=-1.000000
48d
493   B52: #	B301 B53 &lt;- B51  Freq: 53.7474
493   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
497   	NullCheck RBP
497
497   B53: #	B283 B54 &lt;- B52  Freq: 53.7474
497   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f46980ed110:Constant:exact *	# compressed klass ptr
49e   	jne,u  B283  P=0.000000 C=-1.000000
49e
4a4   B54: #	B133 B55 &lt;- B53  Freq: 53.7474
4a4   	# checkcastPP of R10
4a4   	movq    [rsp + #72], R10	# spill
4a9   	movl    R10, [R10 + #12 (8-bit)]	# range
4ad   	movl    [rsp + #80], R10	# spill
4b2   	movl    RSI, R10	# spill
4b5   	decl    RSI	# int
4b7   	testl   R10, R10
4ba   	jle     B133  P=0.001658 C=86864.000000
4ba
4c0   B55: #	B249 B56 &lt;- B54  Freq: 53.6583
4c0   	testl  R10, R10	# unsigned
4c3   	jbe,u  B249  P=0.000001 C=-1.000000
4c3
4c9   B56: #	B249 B57 &lt;- B55  Freq: 53.6582
4c9   	cmpl    RSI, R10	# unsigned
4cc   	jnb,u  B249  P=0.000001 C=-1.000000
4cc
4d2   B57: #	B120 &lt;- B56  Freq: 53.6582
4d2   	xorl    R9, R9	# int
4d5   	jmp     B120
      	nop 	# 6 bytes pad for loops and calls

4e0   B58: #	B59 &lt;- B65  top-of-loop Freq: 32222.8
4e0   	movl    R10, RBP	# spill
4e0
4e3   B59: #	B165 B60 &lt;- B164 B58 	Loop: B59-B58 inner main of N774 Freq: 32275.9
4e3   	movslq  R8, R10	# i2l
4e6   	# TLS is in R15
4e6   	movq    R11, [R15 + #112 (8-bit)]	# ptr
4ea   	movq    R9, [rsp + #72]	# spill
4ef   	movl    RBP, [R9 + #16 + R10 &lt;&lt; #2]	# compressed ptr
4f4   	movq    RDI, R11	# spill
4f7   	addq    RDI, #16	# ptr
4fb   	movq    R9, R11	# spill
4fe   	addq    R9, #280	# ptr
505   	movq    RCX, [rsp + #72]	# spill
50a   	movl    R8, [RCX + #20 + R8 &lt;&lt; #2]	# compressed ptr
50f   	movl    [rsp + #4], R8	# spill
514   	decode_heap_oop_not_null R8,R8
514   	movq    [rsp + #88], R8	# spill
519   	# TLS is in R15
519   	cmpq    R9, [R15 + #128 (32-bit)]	# raw ptr
520   	jnb,u  B165  P=0.000100 C=-1.000000
520
526   B60: #	B61 &lt;- B59  Freq: 32272.6
526   	# TLS is in R15
526   	movq    [R15 + #112 (8-bit)], R9	# ptr
52a   	PREFETCHNTA [R9 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
532   	movq    R8, [rsp + #8]	# spill
537   	movq    R8, [R8 + #176 (32-bit)]	# ptr
53e   	movq    [R11], R8	# ptr
541   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46980ed260:Constant:exact *	# compressed klass ptr
549   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
54d   	movl    RCX, #33	# long (unsigned 32-bit)
552   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
55c   	movl    [rsp + #44], R10	# spill
55c
561   B61: #	B255 B62 &lt;- B166 B60  Freq: 32275.9
561   	
561   	MEMBAR-storestore (empty encoding)
561   	movq    R8, R11	# spill
564   	# checkcastPP of R8
564   	encode_heap_oop_not_null R11,R8
66f   	movl    [RBP + #12 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
673   	NullCheck RBP
673
673   B62: #	B167 B63 &lt;- B61  Freq: 32275.8
673   	movl    R11, [rsp + #44]	# spill
678   	incl    R11	# int
67b   	decode_heap_oop_not_null R10,RBP
67e   	movq    R10, R10	# ptr -&gt; long
67e   	shrq    R10, #9
682   	movq    R8, 0x00007f46dbf28000	# ptr
68c   	movb    [R8 + R10], R12	# short/char (R12_heapbase==0)
690   	# TLS is in R15
690   	movq    R8, [R15 + #112 (8-bit)]	# ptr
694   	movq    R10, R8	# spill
697   	addq    R10, #280	# ptr
69e   	# TLS is in R15
69e   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
6a5   	jnb,u  B167  P=0.000100 C=-1.000000
6a5
6ab   B63: #	B64 &lt;- B62  Freq: 32272.6
6ab   	movq    RDI, R8	# spill
6ae   	addq    RDI, #16	# ptr
6b2   	# TLS is in R15
6b2   	movq    [R15 + #112 (8-bit)], R10	# ptr
6b6   	movq    R11, [rsp + #8]	# spill
6bb   	movq    R11, [R11 + #176 (32-bit)]	# ptr
6c2   	movq    [R8], R11	# ptr
6c5   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
6cd   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46980ed260:Constant:exact *	# compressed klass ptr
6d5   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
6d9   	movl    RCX, #33	# long (unsigned 32-bit)
6de   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
6e8
6e8   B64: #	B255 B65 &lt;- B168 B63  Freq: 32275.8
6e8   	movl    RBP, [rsp + #44]	# spill
6ec   	addl    RBP, #2	# int
6ef   	
6ef   	MEMBAR-storestore (empty encoding)
6ef   	# checkcastPP of R8
6ef   	encode_heap_oop_not_null R10,R8
7fa   	movl    R9, [rsp + #4]	# spill
7ff   	movl    [R9 + #12 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
803   	NullCheck R9
803
803   B65: #	B58 B66 &lt;- B64  Freq: 32275.8
803   	movq    R10, [rsp + #88]	# spill
808   	movq    R10, R10	# ptr -&gt; long
808   	shrq    R10, #9
80c   	movq    R11, 0x00007f46dbf28000	# ptr
816   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
81a   	cmpl    RBP, [RSP + #0 (32-bit)]
81d   	jl     B58	# loop end  P=0.998357 C=86899.000000
81d
823   B66: #	B72 B67 &lt;- B257 B65  Freq: 53.0254
823   	cmpl    RBP, [RSP + #80 (32-bit)]
827   	jge     B72  P=0.500000 C=-1.000000
827
82d   B67: #	B68 &lt;- B66  Freq: 26.5127
82d   	# castII of RBP
      	nop 	# 3 bytes pad for loops and calls

830   B68: #	B221 B69 &lt;- B67 B71 	Loop: B68-B71 inner post of N3287 Freq: 53.0253
830   	movq    R10, [rsp + #72]	# spill
835   	movl    R11, [R10 + #16 + RBP &lt;&lt; #2]	# compressed ptr
83a   	movl    [rsp + #0], R11	# spill
83e   	# TLS is in R15
83e   	movq    R11, [R15 + #112 (8-bit)]	# ptr
842   	movq    R10, R11	# spill
845   	addq    R10, #280	# ptr
84c   	# TLS is in R15
84c   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
853   	jnb,u  B221  P=0.000100 C=-1.000000
853
859   B69: #	B70 &lt;- B68  Freq: 53.02
859   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
861   	movq    RDI, R11	# spill
864   	addq    RDI, #16	# ptr
868   	# TLS is in R15
868   	movq    [R15 + #112 (8-bit)], R10	# ptr
86c   	movq    R10, [rsp + #8]	# spill
871   	movq    R10, [R10 + #176 (32-bit)]	# ptr
878   	movq    [R11], R10	# ptr
87b   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46980ed260:Constant:exact *	# compressed klass ptr
883   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
887   	movl    RCX, #33	# long (unsigned 32-bit)
88c   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
896
896   B70: #	B258 B71 &lt;- B222 B69  Freq: 53.0253
896   	incl    RBP	# int
898   	movl    R10, [rsp + #0]	# spill
89c   	decode_heap_oop_not_null R10,R10
89c   	
89c   	MEMBAR-storestore (empty encoding)
89c   	# checkcastPP of R11
89c   	movl    R9, [rsp + #0]	# spill
8a0   	testl   R9, R9	# compressed ptr
8a3   	je     B258  P=0.000001 C=-1.000000
8a3
8a9   B71: #	B68 B72 &lt;- B70  Freq: 53.0253
8a9   	encode_heap_oop_not_null R8,R11
9b4   	movq    R10, R10	# ptr -&gt; long
9b4   	movl    R11, R9	# spill
9b7   	movl    [R11 + #12 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
9bb   	shrq    R10, #9
9bf   	movq    R11, 0x00007f46dbf28000	# ptr
9c9   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
9cd   	cmpl    RBP, [RSP + #80 (32-bit)]
9d1   	jl     B68	# loop end  P=0.500000 C=86899.000000
9d1
9d7   B72: #	B209 B73 &lt;- B71 B66 B184 B223 B157  Freq: 53.1127
9d7   	movq    R10, [rsp + #72]	# spill
9dc   	encode_heap_oop_not_null R9,R10
ae7   	movq    R10, [rsp + #152]	# spill
aef   	movl    R10, [R10 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.version
af3   	movl    [rsp + #44], R10	# spill
af8   	# TLS is in R15
af8   	movq    R11, [R15 + #112 (8-bit)]	# ptr
afc   	movq    R10, R11	# spill
aff   	addq    R10, #48	# ptr
b03   	# TLS is in R15
b03   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
b0a   	jnb,u  B209  P=0.000100 C=-1.000000
b0a
b10   B73: #	B74 &lt;- B72  Freq: 53.1074
b10   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
b18   	# TLS is in R15
b18   	movq    [R15 + #112 (8-bit)], R10	# ptr
b1c   	movq    R10, [rsp + #32]	# spill
b21   	movq    R10, [R10 + #176 (32-bit)]	# ptr
b28   	movq    [R11], R10	# ptr
b2b   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f46980ed040:Constant:exact *	# compressed klass ptr
b33   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
b37   	movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
b3b   	movq    [R11 + #24 (8-bit)], R12	# long (R12_heapbase==0)
b3f   	movq    [R11 + #32 (8-bit)], R12	# long (R12_heapbase==0)
b43   	movq    [R11 + #40 (8-bit)], R12	# long (R12_heapbase==0)
b43
b47   B74: #	B302 B75 &lt;- B210 B73  Freq: 53.1127
b47   	
b47   	MEMBAR-storestore (empty encoding)
b47   	# checkcastPP of R11
b47   	movq    [rsp + #72], R11	# spill
b4c   	movq    R10, [rsp + #152]	# spill
b54   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
b58   	movzbl  R11, [R10 + #32 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/Control.isStopped
b5d   	NullCheck R10
b5d
b5d   B75: #	B211 B76 &lt;- B74  Freq: 53.1127
b5d   	MEMBAR-acquire ! (empty encoding)
b5d   	movq    R10, [rsp + #72]	# spill
b62   	movb    [R10 + #16 (8-bit)], R11	# byte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
b66   	movl    [R10 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/infra/runners/StateHolder.countWorkers
b6e   	movl    [R10 + #24 (8-bit)], R9	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
b72   	movq    R10, R10	# ptr -&gt; long
b72   	shrq    R10, #9
b76   	movq    R11, 0x00007f46dbf28000	# ptr
b80   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
b84   	# TLS is in R15
b84   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
b88   	movq    R10, RAX	# spill
b8b   	addq    R10, #16	# ptr
b8f   	# TLS is in R15
b8f   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
b96   	jnb,u  B211  P=0.000100 C=-1.000000
b96
b9c   B76: #	B77 &lt;- B75  Freq: 53.1073
b9c   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
ba4   	# TLS is in R15
ba4   	movq    [R15 + #112 (8-bit)], R10	# ptr
ba8   	movq    R10, [rsp + #24]	# spill
bad   	movq    R10, [R10 + #176 (32-bit)]	# ptr
bb4   	movq    [RAX], R10	# ptr
bb7   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46980ed330:Constant:exact *	# compressed klass ptr
bbe   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
bbe
bc2   B77: #	B213 B78 &lt;- B212 B76  Freq: 53.1127
bc2   	
bc2   	MEMBAR-storestore (empty encoding)
bc2   	# checkcastPP of RAX
bc2   	MEMBAR-release ! (empty encoding)
bc2   	encode_heap_oop_not_null R11,RAX
ccd   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
cd4   	lock addl [rsp + #0], 0	! membar_volatile
cd9   	movq    R10, [rsp + #72]	# spill
cde   	movl    [R10 + #32 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
ce2   	movq    R10, R10	# ptr -&gt; long
ce2   	shrq    R10, #9
ce6   	movq    R11, 0x00007f46dbf28000	# ptr
cf0   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
cf4   	# TLS is in R15
cf4   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
cf8   	movq    R10, RAX	# spill
cfb   	addq    R10, #16	# ptr
cff   	# TLS is in R15
cff   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
d06   	jnb,u  B213  P=0.000100 C=-1.000000
d06
d0c   B78: #	B79 &lt;- B77  Freq: 53.1073
d0c   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
d14   	# TLS is in R15
d14   	movq    [R15 + #112 (8-bit)], R10	# ptr
d18   	movq    R10, [rsp + #24]	# spill
d1d   	movq    R10, [R10 + #176 (32-bit)]	# ptr
d24   	movq    [RAX], R10	# ptr
d27   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46980ed330:Constant:exact *	# compressed klass ptr
d2e   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
d2e
d32   B79: #	B215 B80 &lt;- B214 B78  Freq: 53.1127
d32   	
d32   	MEMBAR-storestore (empty encoding)
d32   	# checkcastPP of RAX
d32   	MEMBAR-release ! (empty encoding)
d32   	encode_heap_oop_not_null R11,RAX
e3d   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
e44   	lock addl [rsp + #0], 0	! membar_volatile
e49   	movq    R10, [rsp + #72]	# spill
e4e   	movl    [R10 + #28 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
e52   	movq    R10, R10	# ptr -&gt; long
e52   	shrq    R10, #9
e56   	movq    R11, 0x00007f46dbf28000	# ptr
e60   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
e64   	# TLS is in R15
e64   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
e68   	movq    R10, RAX	# spill
e6b   	addq    R10, #16	# ptr
e6f   	# TLS is in R15
e6f   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
e76   	jnb,u  B215  P=0.000100 C=-1.000000
e76
e7c   B80: #	B81 &lt;- B79  Freq: 53.1073
e7c   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
e84   	# TLS is in R15
e84   	movq    [R15 + #112 (8-bit)], R10	# ptr
e88   	movq    R10, [rsp + #24]	# spill
e8d   	movq    R10, [R10 + #176 (32-bit)]	# ptr
e94   	movq    [RAX], R10	# ptr
e97   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46980ed330:Constant:exact *	# compressed klass ptr
e9e   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
e9e
ea2   B81: #	B217 B82 &lt;- B216 B80  Freq: 53.1127
ea2   	movq    R10, [rsp + #72]	# spill
ea7   	encode_heap_oop_not_null RBP,R10
fb2   	
fb2   	MEMBAR-storestore (empty encoding)
fb2   	# checkcastPP of RAX
fb2   	MEMBAR-release ! (empty encoding)
fb2   	encode_heap_oop_not_null R10,RAX
10bd   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
10c4   	lock addl [rsp + #0], 0	! membar_volatile
10c9   	movq    R11, [rsp + #72]	# spill
10ce   	movq    R11, R11	# ptr -&gt; long
10ce   	movq    R8, [rsp + #72]	# spill
10d3   	movl    [R8 + #36 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
10d7   	shrq    R11, #9
10db   	movq    R10, 0x00007f46dbf28000	# ptr
10e5   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
10e9   	# TLS is in R15
10e9   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
10ed   	movq    R10, RAX	# spill
10f0   	addq    R10, #16	# ptr
10f4   	# TLS is in R15
10f4   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
10fb   	jnb,u  B217  P=0.000100 C=-1.000000
10fb
1101   B82: #	B83 &lt;- B81  Freq: 53.1073
1101   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1109   	# TLS is in R15
1109   	movq    [R15 + #112 (8-bit)], R10	# ptr
110d   	movq    R10, [rsp + #24]	# spill
1112   	movq    R10, [R10 + #176 (32-bit)]	# ptr
1119   	movq    [RAX], R10	# ptr
111c   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46980ed330:Constant:exact *	# compressed klass ptr
1123   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
1123
1127   B83: #	B252 B84 &lt;- B218 B82  Freq: 53.1127
1127   	movl    R11, [rsp + #44]	# spill
112c   	decode_heap_oop_not_null R9,R11
112f   	
112f   	MEMBAR-storestore (empty encoding)
112f   	# checkcastPP of RAX
112f   	encode_heap_oop_not_null R8,RAX
123a   	MEMBAR-release ! (empty encoding)
123a   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
1241   	MEMBAR-volatile (unnecessary so empty encoding)
1241   	movq    R10, [rsp + #72]	# spill
1246   	movq    R10, R10	# ptr -&gt; long
1246   	movq    R11, [rsp + #72]	# spill
124b   	movl    [R11 + #40 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
124f   	shrq    R10, #9
1253   	movq    R11, 0x00007f46dbf28000	# ptr
125d   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
1261   	MEMBAR-release ! (empty encoding)
1261   	movq    R10, [rsp + #72]	# spill
1266   	movb    [R10 + #18 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
126b   	MEMBAR-volatile (unnecessary so empty encoding)
126b   	MEMBAR-release ! (empty encoding)
126b   	movb    [R10 + #19 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
1270   	MEMBAR-volatile (unnecessary so empty encoding)
1270   	MEMBAR-release ! (empty encoding)
1270   	movb    [R10 + #17 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
1275   	MEMBAR-volatile (unnecessary so empty encoding)
1275   	MEMBAR-release ! (empty encoding)
1275   	movb    [R10 + #20 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
127a   	lock addl [rsp + #0], 0	! membar_volatile
127f   	MEMBAR-release ! (empty encoding)
127f   	movl    R10, [rsp + #44]	# spill
1284   	testl   R10, R10	# compressed ptr
1287   	je     B252  P=0.000001 C=-1.000000
1287
128d   B84: #	B85 &lt;- B83  Freq: 53.1126
128d   	MEMBAR-release ! (empty encoding)
128d   	movq    R10, R9	# ptr -&gt; long
1290   	shrq    R10, #9
1294   	movl    R8, [rsp + #44]	# spill
1299   	movl    [R8 + #12 (8-bit)], RBP	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
129d   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
12a1   	lock addl [rsp + #0], 0	! membar_volatile
12a6
12a6   B85: #	B259 B86 &lt;- B84 B50  Freq: 111.339
12a6   	movq    R10, [rsp + #56]	# spill
12ab   	movl    RBP, [R10 + #12 (8-bit)]	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
12af   	MEMBAR-acquire ! (empty encoding)
12af   	movq    R10, [rsp + #64]	# spill
12b4   	movl    R11, [R10 + #40 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
12b8   	movl    R8, [rsp + #40]	# spill
12bd   	cmpl    R8, RBP
12c0   	jne     B259  P=0.000000 C=49.000000
12c0
12c6   B86: #	B242 B87 &lt;- B85  Freq: 111.339
12c6   	testl   R11, R11	# compressed ptr
12c9   	je     B242  P=0.000001 C=-1.000000
12c9
12cf   B87: #	B89 B88 &lt;- B86  Freq: 111.339
12cf   	MEMBAR-release ! (empty encoding)
12cf   	
12cf   	movl    R10, #-1	# int
12d5   	XADDL  [[R11 + #12 (8-bit)]],R10
12db   	decl    R10	# int
12de   	
12de   	MEMBAR-acquire ! (empty encoding)
12de   	testl   R10, R10
12e1   	jne,s   B89  P=0.502075 C=241.000000
12e1
12e3   B88: #	B89 &lt;- B87  Freq: 55.4384
12e3   	MEMBAR-release ! (empty encoding)
12e3   	movq    R10, [rsp + #64]	# spill
12e8   	movb    [R10 + #20 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
12ec   	lock addl [rsp + #0], 0	! membar_volatile
12f1
12f1   B89: #	B92 B90 &lt;- B87 B88  Freq: 111.339
12f1   	movq    R10, [rsp + #64]	# spill
12f6   	movzbl  R11, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
12fb   	MEMBAR-acquire ! (empty encoding)
12fb   	testl   R11, R11
12fe   	je,s   B92  P=0.000074 C=2941144.000000
12fe
1300   B90: #	B246 B91 &lt;- B89  Freq: 111.331
1300   	movl    R10, [rsp + #48]	# spill
1305   	testl   R10, R10
1308   	jne     B246  P=0.000001 C=-1.000000
      	nop 	# 2 bytes pad for loops and calls

1310   B91: #	B91 B92 &lt;- B90 B91 	Loop: B91-B91 inner  Freq: 1.50146e+06
1310   	movq    R10, [rsp + #64]	# spill
1315   	movzbl  R10, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
131a   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=rsp + #64 L[1]=rsp + #48 STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [152]=Oop off=4890}
1320   	MEMBAR-acquire ! (empty encoding)
1320   	testl   R10, R10
1323   	jne,s   B91  P=0.999926 C=2941144.000000
1323
1325   B92: #	B298 B93 &lt;- B91 B89  Freq: 111.339
1325   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:155  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [152]=Oop off=4901}
132b   	movq    R10, [rsp + #16]	# spill
1330   	movl    R9, [R10 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
1334   	NullCheck R10
1334
1334   B93: #	B299 B94 &lt;- B92  Freq: 111.339
1334   	MEMBAR-acquire ! (empty encoding)
1334   	movl    R10, [R9 + #8 (8-bit)]	# compressed klass ptr
1338   	NullCheck R9
1338
1338   B94: #	B285 B95 &lt;- B93  Freq: 111.339
1338   	decode_heap_oop_not_null R11,R9
133b   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f46980ed040:Constant:exact *	# compressed klass ptr
1342   	jne,u  B285  P=0.000000 C=-1.000000
1342
1348   B95: #	B260 B96 &lt;- B94  Freq: 111.339
1348   	# checkcastPP of R11
1348   	movq    [rsp + #64], R11	# spill
134d   	movzbl  R11, [R11 + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
1352   	movq    R10, [rsp + #64]	# spill
1357   	movl    RBP, [R10 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
135b   	testl   R11, R11
135e   	jne     B260  P=0.000000 C=49.000000
135e
1364   B96: #	B300 B97 &lt;- B95  Freq: 111.338
1364   	movl    R10, [R10 + #32 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
1368   	decode_heap_oop_not_null R8,RBP
136b   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
136f   	NullCheck RBP
136f
136f   B97: #	B286 B98 &lt;- B96  Freq: 111.338
136f   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f46980ed110:Constant:exact *	# compressed klass ptr
1376   	jne,u  B286  P=0.000000 C=-1.000000
1376
137c   B98: #	B243 B99 &lt;- B97  Freq: 111.338
137c   	# checkcastPP of R8
137c   	testl   R10, R10	# compressed ptr
137f   	je     B243  P=0.000001 C=-1.000000
137f
1385   B99: #	B101 B100 &lt;- B98  Freq: 111.338
1385   	MEMBAR-release ! (empty encoding)
1385   	
1385   	movl    R9, #-1	# int
138b   	XADDL  [[R10 + #12 (8-bit)]],R9
1391   	decl    R9	# int
1394   	
1394   	MEMBAR-acquire ! (empty encoding)
1394   	testl   R9, R9
1397   	jne,s   B101  P=0.497143 C=175.000000
1397
1399   B100: #	B101 &lt;- B99  Freq: 55.9872
1399   	MEMBAR-release ! (empty encoding)
1399   	movq    R10, [rsp + #64]	# spill
139e   	movb    [R10 + #18 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
13a2   	lock addl [rsp + #0], 0	! membar_volatile
13a7
13a7   B101: #	B104 B102 &lt;- B99 B100  Freq: 111.338
13a7   	movq    R10, [rsp + #64]	# spill
13ac   	movzbl  R10, [R10 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
13b1   	MEMBAR-acquire ! (empty encoding)
13b1   	testl   R10, R10
13b4   	je,s   B104  P=0.000796 C=192265.000000
13b4
13b6   B102: #	B247 B103 &lt;- B101  Freq: 111.25
13b6   	movl    R10, [rsp + #48]	# spill
13bb   	testl   R10, R10
13be   	jne     B247  P=0.000001 C=-1.000000
      	nop 	# 12 bytes pad for loops and calls

13d0   B103: #	B103 B104 &lt;- B102 B103 	Loop: B103-B103 inner  Freq: 139799
13d0   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=rsp + #64 L[1]=rsp + #48 STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=R8 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{r8=Oop [16]=Oop [56]=Oop [64]=Oop [152]=Oop off=5072}
13d6   	movq    R10, [rsp + #64]	# spill
13db   	movzbl  R10, [R10 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
13e0   	MEMBAR-acquire ! (empty encoding)
13e0   	testl   R10, R10
13e3   	jne,s   B103  P=0.999204 C=192265.000000
13e3
13e5   B104: #	B244 B105 &lt;- B103 B101  Freq: 111.338
13e5   	movq    R10, [rsp + #64]	# spill
13ea   	movl    R10, [R10 + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
13ee   	movl    R13, [R8 + #12 (8-bit)]	# range
13f2   	testl   R10, R10	# compressed ptr
13f5   	je     B244  P=0.000001 C=-1.000000
13f5
13fb   B105: #	B107 B106 &lt;- B104  Freq: 111.338
13fb   	MEMBAR-release ! (empty encoding)
13fb   	
13fb   	movl    R11, #-1	# int
1401   	XADDL  [[R10 + #12 (8-bit)]],R11
1407   	decl    R11	# int
140a   	
140a   	MEMBAR-acquire ! (empty encoding)
140a   	testl   R11, R11
140d   	jne,s   B107  P=0.500000 C=176.000000
140d
140f   B106: #	B107 &lt;- B105  Freq: 55.669
140f   	MEMBAR-release ! (empty encoding)
140f   	movq    R10, [rsp + #64]	# spill
1414   	movb    [R10 + #17 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
1418   	lock addl [rsp + #0], 0	! membar_volatile
141d
141d   B107: #	B36 &lt;- B106 B105  Freq: 111.338
141d   	xorl    RBP, RBP	# int
141f   	jmp     B36
141f
1424   B108: #	B231 B109 &lt;- B129 B131  top-of-loop Freq: 381.24
1424   	cmpl    R10, [RSP + #160 (32-bit)]	# unsigned
142c   	jnb,u  B231  P=0.000001 C=-1.000000
142c
1432   B109: #	B19 B110 &lt;- B108  Freq: 381.239
1432   	movl    RDI, [rsp + #100]	# spill
1436   	movl    RBP, [RDI + #16 + R10 &lt;&lt; #2]	# compressed ptr
143b   	decode_heap_oop_not_null RDI,RBP
143e   	testl   RBP, RBP	# compressed ptr
1440   	je     B19  P=0.000052 C=38671.000000
1440
1446   B110: #	B201 B111 &lt;- B109  Freq: 381.22
1446   	movl    RBP, [RBP + #8 (8-bit)]	# compressed klass ptr
1449   	cmpl    RBP, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c36aee0:Constant:exact *	# compressed klass ptr
144f   	jne,u  B201  P=0.000001 C=-1.000000
144f
1455   B111: #	B205 B112 &lt;- B110  Freq: 381.219
1455   	# checkcastPP of RDI
1455   	movl    RBP, [RDI + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
145b   	cmpq    RDI, RSI	# ptr
145e   	je,u  B205  P=0.000000 C=11395.000000
145e
1464   B112: #	B26 B113 &lt;- B111  Freq: 381.219
1464   	movl    RDI, [RDI + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
146a   	cmpl    RDI, RDX
146c   	jne     B26  P=0.004651 C=11395.000000
146c
1472   B113: #	B26 B114 &lt;- B112  Freq: 379.446
1472   	cmpl    RBP, R14
1475   	jne     B26  P=0.007230 C=11342.000000
1475
147b   B114: #	B115 &lt;- B113 B199 B32  Freq: 381.219
147b   	movl    [rsp + #96], R10	# spill
147b
1480   B115: #	B296 B116 &lt;- B130 B114  top-of-loop Freq: 32179.4
1480   	movl    R10, [RCX + #12 (8-bit)]	# range
1484   	NullCheck RCX
1484
1484   B116: #	B192 B117 &lt;- B115  Freq: 32179.4
1484   	movl    R8, [rsp + #96]	# spill
1489   	cmpl    R8, R10	# unsigned
148c   	jnb,u  B192  P=0.000001 C=-1.000000
148c
1492   B117: #	B118 &lt;- B116  Freq: 32179.4
1492   	incq    [RCX + #16 + R8 &lt;&lt; #3]	# long
1497
1497   B118: #	B132 B119 &lt;- B117 B25  Freq: 32181
1497   	movl    R9, [rsp + #144]	# spill
149f   	cmpl    R9, [RSP + #80 (32-bit)]
14a4   	jge     B132	# loop end  P=0.001658 C=86720.000000
14a4
14aa   B119: #	B120 &lt;- B118  Freq: 32127.7
14aa   	movl    RSI, [rsp + #132]	# spill
14aa
14b1   B120: #	B292 B121 &lt;- B57 B119 	Loop: B120-B119 inner  Freq: 32181.4
14b1   	movq    R10, [rsp + #72]	# spill
14b6   	movl    R10, [R10 + #16 + R9 &lt;&lt; #2]	# compressed ptr
14bb   	movl    R13, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
14bf   	NullCheck R10
14bf
14bf   B121: #	B293 B122 &lt;- B120  Freq: 32181.3
14bf   	movq    R10, [rsp + #152]	# spill
14c7   	movl    R8, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.counter
14cb   	movl    R11, [R8 + #8 (8-bit)]	# compressed klass ptr
14cf   	NullCheck R8
14cf
14cf   B122: #	B200 B123 &lt;- B121  Freq: 32181.3
14cf   	decode_heap_oop_not_null R10,R8
14d2   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/util/OpenAddressHashCounter: 0x00007f469c36daa0:Constant:exact *	# compressed klass ptr
14d9   	jne,u  B200  P=0.000001 C=-1.000000
14d9
14df   B123: #	B294 B124 &lt;- B122  Freq: 32181.3
14df   	# checkcastPP of R10
14df   	movq    [rsp + #88], R10	# spill
14e4   	movl    RDI, R9	# spill
14e7   	incl    RDI	# int
14e9   	movl    RBX, [R10 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.length
14ed   	movl    R14, [R13 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
14f4   	NullCheck R13
14f4
14f4   B124: #	B295 B125 &lt;- B123  Freq: 32181.2
14f4   	movl    RDX, [R13 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
14fb   	movl    R11, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.keys
14ff   	movl    [rsp + #100], R11	# spill
1504   	decl    RBX	# int
1506   	movl    R10, RDX	# spill
1509   	sall    R10, #5
150d   	subl    R10, RDX	# int
1510   	addl    R10, R14	# int
1513   	andl    R10, RBX	# int
1516   	movl    [rsp + #96], R10	# spill
151b   	incl    R10	# int
151e   	andl    R10, RBX	# int
1521   	movl    RAX, R10	# spill
1524   	incl    RAX	# int
1526   	andl    RAX, RBX	# int
1528   	movl    R8, RAX	# spill
152b   	incl    R8	# int
152e   	andl    R8, RBX	# int
1531   	movl    R11, R8	# spill
1534   	incl    R11	# int
1537   	movl    RCX, [rsp + #100]	# spill
153b   	movl    RBP, [RCX + #12 (8-bit)]	# range
153e   	NullCheck RCX
153e
153e   B125: #	B191 B126 &lt;- B124  Freq: 32181.2
153e   	movl    [rsp + #160], RBP	# spill
1545   	movl    [rsp + #144], RDI	# spill
154c   	movl    [rsp + #132], RSI	# spill
1553   	decode_heap_oop_not_null RSI,R13
1556   	movl    RDI, [rsp + #96]	# spill
155a   	cmpl    RDI, RBP	# unsigned
155c   	jnb,u  B191  P=0.000001 C=-1.000000
155c
1562   B126: #	B20 B127 &lt;- B125  Freq: 32181.2
1562   	movl    RBP, [RCX + #16 + RDI &lt;&lt; #2]	# compressed ptr
1566   	decode_heap_oop_not_null RDI,RBP
1569   	testl   RBP, RBP	# compressed ptr
156b   	je     B20  P=0.000052 C=38671.000000
156b
1571   B127: #	B204 B128 &lt;- B126  Freq: 32179.5
1571   	movl    RBP, [RBP + #8 (8-bit)]	# compressed klass ptr
1574   	cmpl    RBP, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c36aee0:Constant:exact *	# compressed klass ptr
157a   	jne,u  B204  P=0.000001 C=-1.000000
157a
1580   B128: #	B208 B129 &lt;- B127  Freq: 32179.5
1580   	# checkcastPP of RDI
1580   	movl    RBP, [RDI + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1586   	andl    R11, RBX	# int
1589   	cmpq    RDI, RSI	# ptr
158c   	je,u  B208  P=0.000000 C=11395.000000
158c
1592   B129: #	B108 B130 &lt;- B128  Freq: 32179.4
1592   	movq    RCX, [rsp + #88]	# spill
1597   	movl    RCX, [RCX + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
159a   	cmpl    RBP, RDX
159c   	jne     B108  P=0.004651 C=11395.000000
159c
15a2   B130: #	B115 B131 &lt;- B129  Freq: 32029.8
15a2   	movl    RBP, [RDI + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
15a8   	cmpl    RBP, R14
15ab   	je     B115  P=0.992770 C=11342.000000
15ab
15b1   B131: #	B108 &lt;- B130  Freq: 231.567
15b1   	jmp     B108
15b1
15b6   B132: #	B133 &lt;- B118  Freq: 53.3492
15b6   	movl    RSI, [rsp + #132]	# spill
15b6
15bd   B133: #	B169 B134 &lt;- B132 B54  Freq: 53.4383
15bd   	movq    R10, [rsp + #64]	# spill
15c2   	movzbl  R10, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
15c7   	MEMBAR-acquire ! (empty encoding)
15c7   	testl   R10, R10
15ca   	jne     B169  P=0.013889 C=144.000000
15ca
15d0   B134: #	B135 &lt;- B133  Freq: 52.6961
15d0   	movl    R10, [rsp + #80]	# spill
15d5   	movl    [rsp + #144], R10	# spill
15d5
15dd   B135: #	B156 B136 &lt;- B134 B170  Freq: 53.4383
15dd   	movl    R11, [rsp + #80]	# spill
15e2   	testl   R11, R11
15e5   	jle     B156  P=0.001658 C=86864.000000
15e5
15eb   B136: #	B250 B137 &lt;- B135  Freq: 53.3497
15eb   	movl    R10, R11	# spill
15ee   	testl  R10, R10	# unsigned
15f1   	jbe,u  B250  P=0.000001 C=-1.000000
15f1
15f7   B137: #	B250 B138 &lt;- B136  Freq: 53.3497
15f7   	cmpl    RSI, R10	# unsigned
15fa   	jnb,u  B250  P=0.000001 C=-1.000000
15fa
1600   B138: #	B287 B139 &lt;- B137  Freq: 53.3496
1600   	movq    R10, [rsp + #72]	# spill
1605   	movl    R10, [R10 + #16 (8-bit)]	# compressed ptr
1609   	movl    RCX, R11	# spill
160c   	addl    RCX, #-3	# int
160f   	movl    R10, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1613   	NullCheck R10
1613
1613   B139: #	B288 B140 &lt;- B138  Freq: 53.3496
1613   	cmpl    RSI, RCX
1615   	movl    R11, #-2147483648	# int
161b   	cmovll RCX, R11	# signed, int
161f   	movl    [R10 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1626   	NullCheck R10
1626
1626   B140: #	B251 B141 &lt;- B139  Freq: 53.3495
1626   	movl    [R10 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
162d   	cmpl    RCX, #1
1630   	jle     B251  P=0.000001 C=-1.000000
1630
1636   B141: #	B142 &lt;- B140  Freq: 53.3495
1636   	movl    RBX, #1	# int
      	nop 	# 5 bytes pad for loops and calls

1640   B142: #	B287 B143 &lt;- B141 B150 	Loop: B142-B150 inner main of N693 Freq: 32024.9
1640   	movslq  R9, RBX	# i2l
1643   	movq    R10, [rsp + #72]	# spill
1648   	movl    R11, [R10 + #16 + RBX &lt;&lt; #2]	# compressed ptr
164d   	movl    R10, [R10 + #24 + R9 &lt;&lt; #2]	# compressed ptr
1652   	movl    R8, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1656   	NullCheck R11
1656
1656   B143: #	B288 B144 &lt;- B142  Freq: 32024.8
1656   	movq    R11, [rsp + #72]	# spill
165b   	movl    R11, [R11 + #20 + R9 &lt;&lt; #2]	# compressed ptr
1660   	movl    [R8 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1667   	NullCheck R8
1667
1667   B144: #	B287 B145 &lt;- B143  Freq: 32024.8
1667   	movl    [R8 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
166e   	movl    R8, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1672   	NullCheck R11
1672
1672   B145: #	B288 B146 &lt;- B144  Freq: 32024.8
1672   	movl    [R8 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1679   	NullCheck R8
1679
1679   B146: #	B287 B147 &lt;- B145  Freq: 32024.7
1679   	movl    [R8 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1680   	movl    R10, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1684   	NullCheck R10
1684
1684   B147: #	B288 B148 &lt;- B146  Freq: 32024.7
1684   	movq    R11, [rsp + #72]	# spill
1689   	movl    R8, [R11 + #28 + R9 &lt;&lt; #2]	# compressed ptr
168e   	movl    [R10 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1695   	NullCheck R10
1695
1695   B148: #	B287 B149 &lt;- B147  Freq: 32024.7
1695   	movl    [R10 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
169c   	movl    R10, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
16a0   	NullCheck R8
16a0
16a0   B149: #	B288 B150 &lt;- B148  Freq: 32024.6
16a0   	movl    [R10 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
16a7   	NullCheck R10
16a7
16a7   B150: #	B142 B151 &lt;- B149  Freq: 32024.6
16a7   	movl    [R10 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
16ae   	addl    RBX, #4	# int
16b1   	cmpl    RBX, RCX
16b3   	jl,s   B142	# loop end  P=0.998342 C=86720.000000
16b3
16b5   B151: #	B156 B152 &lt;- B251 B150  Freq: 53.0899
16b5   	cmpl    RBX, [RSP + #80 (32-bit)]
16b9   	jge,s   B156  P=0.500000 C=-1.000000
16b9
16bb   B152: #	B153 &lt;- B151  Freq: 26.545
16bb   	# castII of RBX
      	nop 	# 1 bytes pad for loops and calls

16bc   B153: #	B287 B154 &lt;- B152 B155 	Loop: B153-B155 inner post of N3275 Freq: 53.0898
16bc   	movq    R10, [rsp + #72]	# spill
16c1   	movl    R10, [R10 + #16 + RBX &lt;&lt; #2]	# compressed ptr
16c6   	movl    R11, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
16ca   	NullCheck R10
16ca
16ca   B154: #	B288 B155 &lt;- B153  Freq: 53.0898
16ca   	movl    [R11 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
16d1   	NullCheck R11
16d1
16d1   B155: #	B153 B156 &lt;- B154  Freq: 53.0897
16d1   	movl    [R11 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
16d8   	incl    RBX	# int
16da   	cmpl    RBX, [RSP + #80 (32-bit)]
16de   	jl,s   B153	# loop end  P=0.500000 C=86720.000000
16de
16e0   B156: #	B171 B157 &lt;- B155 B151 B135  Freq: 53.1784
16e0   	movl    R10, [rsp + #144]	# spill
16e8   	cmpl    R10, [RSP + #80 (32-bit)]
16ed   	jg     B171  P=0.013889 C=144.000000
16ed
16f3   B157: #	B72 B158 &lt;- B156  Freq: 52.4398
16f3   	movl    R11, [rsp + #80]	# spill
16f8   	testl   R11, R11
16fb   	jle     B72  P=0.001643 C=87043.000000
16fb
1701   B158: #	B254 B159 &lt;- B157  Freq: 52.3537
1701   	movl    R10, R11	# spill
1704   	testl  R10, R10	# unsigned
1707   	jbe,u  B254  P=0.000001 C=-1.000000
1707
170d   B159: #	B254 B160 &lt;- B186 B225 B158  Freq: 53.091
170d   	movl    R10, [rsp + #80]	# spill
1712   	decl    R10	# int
1715   	movl    [rsp + #0], R10	# spill
1719   	cmpl    R10, [RSP + #80 (32-bit)]	# unsigned
171e   	jnb,u  B254  P=0.000001 C=-1.000000
171e
1724   B160: #	B219 B161 &lt;- B159  Freq: 53.0909
1724   	movq    R10, [rsp + #72]	# spill
1729   	movl    RBP, [R10 + #16 (8-bit)]	# compressed ptr
172d   	# TLS is in R15
172d   	movq    R11, [R15 + #112 (8-bit)]	# ptr
1731   	movq    R10, R11	# spill
1734   	addq    R10, #280	# ptr
173b   	movq    RDI, R11	# spill
173e   	addq    RDI, #16	# ptr
1742   	# TLS is in R15
1742   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
1749   	jnb,u  B219  P=0.000100 C=-1.000000
1749
174f   B161: #	B162 &lt;- B160  Freq: 53.0856
174f   	# TLS is in R15
174f   	movq    [R15 + #112 (8-bit)], R10	# ptr
1753   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
175b   	movq    R10, [rsp + #8]	# spill
1760   	movq    R10, [R10 + #176 (32-bit)]	# ptr
1767   	movq    [R11], R10	# ptr
176a   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46980ed260:Constant:exact *	# compressed klass ptr
1772   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
1776   	movl    RCX, #33	# long (unsigned 32-bit)
177b   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
1785
1785   B162: #	B255 B163 &lt;- B220 B161  Freq: 53.0909
1785   	decode_heap_oop_not_null R10,RBP
1788   	
1788   	MEMBAR-storestore (empty encoding)
1788   	# checkcastPP of R11
1788   	movq    R8, R11	# spill
178b   	testl   RBP, RBP	# compressed ptr
178d   	je     B255  P=0.000001 C=-1.000000
178d
1793   B163: #	B257 B164 &lt;- B162  Freq: 53.0909
1793   	movq    R10, R10	# ptr -&gt; long
1793   	encode_heap_oop_not_null R8,R11
189e   	shrq    R10, #9
18a2   	movl    [RBP + #12 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
18a6   	movq    R11, 0x00007f46dbf28000	# ptr
18b0   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
18b4   	movl    R10, [rsp + #0]	# spill
18b8   	cmpl    R10, #1
18bc   	jle     B257  P=0.000001 C=-1.000000
18bc
18c2   B164: #	B59 &lt;- B163  Freq: 53.0908
18c2   	movl    R10, #1	# int
18c8   	jmp     B59
18c8
18cd   B165: #	B317 B166 &lt;- B59  Freq: 3.22812
18cd   	movl    [rsp + #44], R10	# spill
18d2   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46980ed260:Constant:exact *	# ptr
      	nop 	# 3 bytes pad for loops and calls
18df   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #152 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #72 L[6]=rsp + #72 L[7]=rsp + #80 L[8]=rsp + #44 L[9]=_ STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [4]=NarrowOop [16]=Oop [56]=Oop [64]=Oop [72]=Oop [88]=Oop [152]=Oop off=6372}
18e4
18e4   B166: #	B61 &lt;- B165  Freq: 3.22806
        # Block is sole successor of call
18e4   	movq    R11, RAX	# spill
18e7   	jmp     B61
18e7
18ec   B167: #	B318 B168 &lt;- B62  Freq: 3.22812
18ec   	movl    RBP, R11	# spill
18ef   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46980ed260:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
18fb   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #152 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #72 L[6]=rsp + #72 L[7]=rsp + #80 L[8]=RBP L[9]=_ STK[0]=rsp + #4
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[4]=NarrowOop [16]=Oop [56]=Oop [64]=Oop [72]=Oop [88]=Oop [152]=Oop off=6400}
1900
1900   B168: #	B64 &lt;- B167  Freq: 3.22805
        # Block is sole successor of call
1900   	movq    R8, RAX	# spill
1903   	jmp     B64
1903
1908   B169: #	B304 B170 &lt;- B133  Freq: 0.742199
1908   	movq    R10, [rsp + #152]	# spill
1910   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
1914   	movl    R8, [R10 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/infra/runners/Control.minStride
1918   	NullCheck R10
1918
1918   B170: #	B135 &lt;- B169  Freq: 0.742199
1918   	movl    R10, [R10 + #16 (8-bit)]	# int ! Field: org/openjdk/jcstress/infra/runners/Control.maxStride
191c   	movl    R9, [rsp + #80]	# spill
1921   	sall    R9, #1
1924   	cmpl    R9, R10
1927   	cmovll R10, R9	# signed, int
192b   	cmpl    R8, R10
192e   	cmovll R8, R10	# signed, int
1932   	movl    [rsp + #144], R8	# spill
193a   	jmp     B135
193a
193f   B171: #	B315 B172 &lt;- B156  Freq: 0.738589
193f   	movq    RSI, [rsp + #72]	# spill
1944   	movl    RDX, [rsp + #144]	# spill
194b   	call,static  java.util.Arrays::copyOf
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:154  L[0]=rsp + #152 L[1]=_ L[2]=_ L[3]=rsp + #80 L[4]=rsp + #144 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [152]=Oop off=6480}
1950
1950   B172: #	B305 B173 &lt;- B171  Freq: 0.738575
        # Block is sole successor of call
1950   	movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
1954   	NullCheck RAX
1954
1954   B173: #	B284 B174 &lt;- B172  Freq: 0.738574
1954   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f46980ed110:Constant:exact *	# compressed klass ptr
195b   	jne,u  B284  P=0.000000 C=-1.000000
195b
1961   B174: #	B223 B175 &lt;- B173  Freq: 0.738574
1961   	# checkcastPP of RAX
1961   	movq    [rsp + #72], RAX	# spill
1966   	movl    R11, [rsp + #144]	# spill
196e   	decl    R11	# int
1971   	movl    RCX, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c36aee0:Constant:exact *	# compressed klass ptr
1976   	movl    R10, [RAX + #12 (8-bit)]	# range
197a   	movl    [rsp + #0], R10	# spill
197e   	movl    RSI, #-122	# int
1983   	movl    R10, [rsp + #80]	# spill
1988   	cmpl    R10, [RSP + #144 (32-bit)]
1990   	jge     B223  P=0.002079 C=962.000000
1990
1996   B175: #	B277 B176 &lt;- B174  Freq: 0.737038
1996   	movl    R10, narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f46980ed190:Constant:exact *	# compressed klass ptr
199c   	movl    R9, [rsp + #80]	# spill
19a1   	cmpl    R9, [RSP + #0 (32-bit)]	# unsigned
19a5   	jnb,u  B277  P=0.000001 C=-1.000000
19a5
19ab   B176: #	B277 B177 &lt;- B175  Freq: 0.737038
19ab   	cmpl    R11, [RSP + #0 (32-bit)]	# unsigned
19af   	jnb,u  B277  P=0.000001 C=-1.000000
19af
19b5   B177: #	B179 &lt;- B176  Freq: 0.737037
19b5   	decode_klass_not_null R10,R10
19b9   	movq    [rsp + #88], R10	# spill
19be   	decode_klass_not_null R10,RCX
19cc   	movq    [rsp + #96], R10	# spill
19d1   	jmp,s   B179
19d1
19d3   B178: #	B179 &lt;- B183  top-of-loop Freq: 353.776
19d3   	movl    [rsp + #80], R10	# spill
19d3
19d8   B179: #	B187 B180 &lt;- B177 B178 	Loop: B179-B178 inner  Freq: 354.513
19d8   	movl    R11, [rsp + #80]	# spill
19dd   	incl    R11	# int
19e0   	movl    [rsp + #84], R11	# spill
19e5   	# TLS is in R15
19e5   	movq    R8, [R15 + #112 (8-bit)]	# ptr
19e9   	movq    R10, R8	# spill
19ec   	addq    R10, #24	# ptr
19f0   	# TLS is in R15
19f0   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
19f7   	jnb,u  B187  P=0.000100 C=-1.000000
19f7
19fd   B180: #	B181 &lt;- B179  Freq: 354.478
19fd   	# TLS is in R15
19fd   	movq    [R15 + #112 (8-bit)], R10	# ptr
1a01   	movq    R11, [rsp + #88]	# spill
1a06   	movq    R11, [R11 + #176 (32-bit)]	# ptr
1a0d   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1a15   	movq    [R8], R11	# ptr
1a18   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f46980ed190:Constant:exact *	# compressed klass ptr
1a20   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
1a24   	movq    [R8 + #16 (8-bit)], R12	# long (R12_heapbase==0)
1a24
1a28   B181: #	B189 B182 &lt;- B188 B180  Freq: 354.513
1a28   	
1a28   	MEMBAR-storestore (empty encoding)
1a28   	# checkcastPP of R8
1a28   	movq    [rsp + #104], R8	# spill
1a2d   	# TLS is in R15
1a2d   	movq    R11, [R15 + #112 (8-bit)]	# ptr
1a31   	encode_heap_oop_not_null RBP,R8
1b3c   	movq    RDI, R11	# spill
1b3f   	addq    RDI, #16	# ptr
1b43   	movq    R10, R11	# spill
1b46   	addq    R10, #408	# ptr
1b4d   	# TLS is in R15
1b4d   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
1b54   	jnb,u  B189  P=0.000100 C=-1.000000
1b54
1b5a   B182: #	B183 &lt;- B181  Freq: 354.478
1b5a   	# TLS is in R15
1b5a   	movq    [R15 + #112 (8-bit)], R10	# ptr
1b5e   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1b66   	movq    R10, [rsp + #96]	# spill
1b6b   	movq    R10, [R10 + #176 (32-bit)]	# ptr
1b72   	movq    [R11], R10	# ptr
1b75   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c36aee0:Constant:exact *	# compressed klass ptr
1b7d   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
1b81   	movl    RCX, #49	# long (unsigned 32-bit)
1b86   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
1b90
1b90   B183: #	B178 B184 &lt;- B190 B182  Freq: 354.513
1b90   	movq    R8, [rsp + #72]	# spill
1b95   	movl    R10, [rsp + #80]	# spill
1b9a   	leaq    R9, [R8 + #16 + R10 &lt;&lt; #2]	# ptr posidxscaleoff
1b9f   	
1b9f   	MEMBAR-storestore (empty encoding)
1b9f   	# checkcastPP of R11
1b9f   	movq    R10, [rsp + #104]	# spill
1ba4   	movq    R10, R10	# ptr -&gt; long
1ba4   	encode_heap_oop_not_null R8,R11
1caf   	shrq    R10, #9
1cb3   	movq    R11, [rsp + #104]	# spill
1cb8   	movl    [R11 + #16 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1cbc   	movq    R11, 0x00007f46dbf28000	# ptr
1cc6   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
1cca   	movl    [R9], RBP	# compressed ptr
1ccd   	movq    R10, R9	# ptr -&gt; long
1cd0   	shrq    R10, #9
1cd4   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
1cd8   	movl    R10, [rsp + #84]	# spill
1cdd   	cmpl    R10, [RSP + #144 (32-bit)]
1ce5   	jl     B178	# loop end  P=0.997921 C=960.000000
1ce5
1ceb   B184: #	B72 B185 &lt;- B183  Freq: 0.737036
1ceb   	movl    R10, [rsp + #0]	# spill
1cef   	testl   R10, R10
1cf2   	jle     B72  P=0.001643 C=87043.000000
1cf2
1cf8   B185: #	B253 B186 &lt;- B184  Freq: 0.735825
1cf8   	testl  R10, R10	# unsigned
1cfb   	jbe,u  B253  P=0.000001 C=-1.000000
1cfb
1d01   B186: #	B159 &lt;- B185  Freq: 0.735825
1d01   	movl    [rsp + #80], R10	# spill
1d06   	jmp     B159
1d06
1d0b   B187: #	B313 B188 &lt;- B179  Freq: 0.0354572
1d0b   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f46980ed190:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
1d17   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=rsp + #152 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #144 L[5]=rsp + #72 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop [152]=Oop off=7452}
1d1c
1d1c   B188: #	B181 &lt;- B187  Freq: 0.0354565
        # Block is sole successor of call
1d1c   	movq    R8, RAX	# spill
1d1f   	jmp     B181
1d1f
1d24   B189: #	B314 B190 &lt;- B181  Freq: 0.0354572
1d24   	movq    RSI, precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c36aee0:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
1d2f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:183  L[0]=rsp + #152 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #144 L[5]=rsp + #72 L[6]=rsp + #80 L[7]=rsp + #104 L[8]=_ L[9]=_ STK[0]=rsp + #104
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=Oop [56]=Oop [64]=Oop [72]=Oop [104]=Oop [152]=Oop off=7476}
1d34
1d34   B190: #	B183 &lt;- B189  Freq: 0.0354565
        # Block is sole successor of call
1d34   	movq    R11, RAX	# spill
1d37   	jmp     B183
1d37
1d3c   B191: #	N4710 &lt;- B125  Freq: 0.0326085
1d3c   	movl    R11, [rsp + #48]	# spill
1d41   	movl    [rsp + #4], R11	# spill
1d46   	movq    R10, [rsp + #16]	# spill
1d4b   	movq    [rsp + #8], R10	# spill
1d50   	movq    R10, [rsp + #56]	# spill
1d55   	movq    [rsp + #16], R10	# spill
1d5a   	movq    R10, [rsp + #64]	# spill
1d5f   	movq    [rsp + #40], R10	# spill
1d64   	movq    R10, [rsp + #72]	# spill
1d69   	movq    [rsp + #48], R10	# spill
1d6e   	movl    R10, [rsp + #80]	# spill
1d73   	movl    [rsp + #56], R10	# spill
1d78   	movl    [rsp + #72], R9	# spill
1d7d   	movq    R10, [rsp + #88]	# spill
1d82   	movq    [rsp + #80], R10	# spill
1d87   	movl    [rsp + #76], R13	# spill
1d8c   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
1d93   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=rsp + #80 L[1]=rsp + #76 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #96 L[6]=#0 L[7]=_ STK[0]=rsp + #100 STK[1]=rsp + #96
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #56 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [40]=Oop [48]=Oop [76]=NarrowOop [80]=Oop [100]=NarrowOop [152]=Oop off=7576}
1d98   	int3	# ShouldNotReachHere
1d98
1d9d   B192: #	N4710 &lt;- B116  Freq: 0.0326067
1d9d   	movl    R11, [rsp + #48]	# spill
1da2   	movl    [rsp + #4], R11	# spill
1da7   	movq    R10, [rsp + #16]	# spill
1dac   	movq    [rsp + #8], R10	# spill
1db1   	movq    R10, [rsp + #56]	# spill
1db6   	movq    [rsp + #16], R10	# spill
1dbb   	movq    R10, [rsp + #64]	# spill
1dc0   	movq    [rsp + #40], R10	# spill
1dc5   	movq    R10, [rsp + #72]	# spill
1dca   	movq    [rsp + #48], R10	# spill
1dcf   	movl    R10, [rsp + #80]	# spill
1dd4   	movl    [rsp + #56], R10	# spill
1dd9   	movl    [rsp + #72], R9	# spill
1dde   	movl    [rsp + #84], RCX	# spill
1de2   	movl    RSI, #-28	# int
1de7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #84 STK[1]=rsp + #96 STK[2]=rsp + #84 STK[3]=rsp + #96
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #56 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [40]=Oop [48]=Oop [84]=NarrowOop [152]=Oop off=7660}
1dec   	int3	# ShouldNotReachHere
1dec
1df1   B193: #	B278 B194 &lt;- B30 B31  Freq: 0.0535045
1df1   	cmpl    R8, [RSP + #160 (32-bit)]	# unsigned
1df9   	jnb,u  B278  P=0.000001 C=-1.000000
1df9
1dff   B194: #	B266 B195 &lt;- B193  Freq: 0.0535045
1dff   	movl    RAX, [rsp + #100]	# spill
1e03   	movl    RAX, [RAX + #16 + R8 &lt;&lt; #2]	# compressed ptr
1e08   	decode_heap_oop_not_null RDI,RAX
1e0b   	testl   RAX, RAX	# compressed ptr
1e0d   	je     B266  P=0.000052 C=38671.000000
1e0d
1e13   B195: #	B279 B196 &lt;- B194  Freq: 0.0535017
1e13   	movl    RAX, [RAX + #8 (8-bit)]	# compressed klass ptr
1e16   	movl    RBP, #4	# int
1e1b   	cmpl    RAX, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c36aee0:Constant:exact *	# compressed klass ptr
1e21   	jne,u  B279  P=0.000001 C=-1.000000
1e21
1e27   B196: #	B280 B197 &lt;- B195  Freq: 0.0535016
1e27   	# checkcastPP of RDI
1e27   	cmpq    RDI, RSI	# ptr
1e2a   	je,u  B280  P=0.000000 C=11395.000000
1e2a
1e30   B197: #	B233 B198 &lt;- B196  Freq: 0.0535016
1e30   	movl    RAX, [RDI + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1e36   	movl    RDI, [RDI + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1e3c   	cmpl    RAX, RDX
1e3e   	jne     B233  P=0.004651 C=11395.000000
1e3e
1e44   B198: #	B233 B199 &lt;- B197  Freq: 0.0532528
1e44   	cmpl    RDI, R14
1e47   	jne     B233  P=0.007230 C=11342.000000
1e47
1e4d   B199: #	B114 &lt;- B198  Freq: 0.0528678
1e4d   	movl    R10, R8	# spill
1e50   	jmp     B114
1e50
1e55   B200: #	N4710 &lt;- B122  Freq: 0.0321813
1e55   	movl    R11, [rsp + #48]	# spill
1e5a   	movl    [rsp + #4], R11	# spill
1e5f   	movq    R10, [rsp + #16]	# spill
1e64   	movq    [rsp + #8], R10	# spill
1e69   	movq    R10, [rsp + #56]	# spill
1e6e   	movq    [rsp + #16], R10	# spill
1e73   	movq    R10, [rsp + #64]	# spill
1e78   	movq    [rsp + #40], R10	# spill
1e7d   	movq    R10, [rsp + #72]	# spill
1e82   	movq    [rsp + #48], R10	# spill
1e87   	movl    R10, [rsp + #80]	# spill
1e8c   	movl    [rsp + #56], R10	# spill
1e91   	movl    [rsp + #72], R9	# spill
1e96   	movl    [rsp + #76], R8	# spill
1e9b   	movl    [rsp + #80], R13	# spill
1ea0   	movl    RSI, #-34	# int
      	nop 	# 2 bytes pad for loops and calls
1ea7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #56 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #76 STK[1]=rsp + #80
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [40]=Oop [48]=Oop [76]=NarrowOop [80]=NarrowOop [152]=Oop off=7852}
1eac   	int3	# ShouldNotReachHere
1eac
1eb1   B201: #	B202 &lt;- B110  Freq: 0.00038122
1eb1   	movl    R8, R10	# spill
1eb4   	movl    R10, #1	# int
1eb4
1eba   B202: #	B203 &lt;- B201 B279  Freq: 0.000381273
1eba   	movl    RBP, R10	# spill
1ebd   	movl    R11, R8	# spill
1ebd
1ec0   B203: #	B204 &lt;- B202 B265 B235  Freq: 0.00038579
1ec0   	movl    [rsp + #140], RBP	# spill
1ec7   	movl    [rsp + #96], R11	# spill
1ec7
1ecc   B204: #	N4710 &lt;- B127 B203  Freq: 0.0325653
1ecc   	movl    R11, [rsp + #48]	# spill
1ed1   	movl    [rsp + #4], R11	# spill
1ed6   	movq    R10, [rsp + #16]	# spill
1edb   	movq    [rsp + #8], R10	# spill
1ee0   	movq    R10, [rsp + #56]	# spill
1ee5   	movq    [rsp + #16], R10	# spill
1eea   	movq    R10, [rsp + #64]	# spill
1eef   	movq    [rsp + #40], R10	# spill
1ef4   	movq    R10, [rsp + #72]	# spill
1ef9   	movq    [rsp + #48], R10	# spill
1efe   	movl    R10, [rsp + #80]	# spill
1f03   	movl    [rsp + #56], R10	# spill
1f08   	movl    [rsp + #72], R9	# spill
1f0d   	movq    R10, [rsp + #88]	# spill
1f12   	movq    [rsp + #80], R10	# spill
1f17   	movl    R10, [rsp + #96]	# spill
1f1c   	movl    [rsp + #88], R10	# spill
1f21   	movq    [rsp + #96], RDI	# spill
1f26   	movl    [rsp + #104], R13	# spill
1f2b   	movl    RSI, #-34	# int
      	nop 	# 3 bytes pad for loops and calls
1f33   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=rsp + #80 L[1]=rsp + #104 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #88 L[6]=rsp + #140 L[7]=_ STK[0]=rsp + #96 STK[1]=rsp + #104
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #56 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [40]=Oop [48]=Oop [80]=Oop [96]=Oop [104]=NarrowOop [152]=Oop off=7992}
1f38   	int3	# ShouldNotReachHere
1f38
1f3d   B205: #	B206 &lt;- B111  Freq: 0.00018178
1f3d   	movl    R8, R10	# spill
1f40   	movl    R11, #1	# int
1f40
1f46   B206: #	B207 &lt;- B205 B280  Freq: 0.000181805
1f46   	movl    RBP, R11	# spill
1f49   	movl    R11, R8	# spill
1f49
1f4c   B207: #	B208 &lt;- B206 B267 B236  Freq: 0.000183959
1f4c   	movl    [rsp + #140], RBP	# spill
1f53   	movl    [rsp + #96], R11	# spill
1f53
1f58   B208: #	N4710 &lt;- B128 B207  Freq: 0.0155283
1f58   	movl    R11, [rsp + #48]	# spill
1f5d   	movl    [rsp + #4], R11	# spill
1f62   	movq    R10, [rsp + #16]	# spill
1f67   	movq    [rsp + #8], R10	# spill
1f6c   	movq    R10, [rsp + #56]	# spill
1f71   	movq    [rsp + #16], R10	# spill
1f76   	movq    R10, [rsp + #64]	# spill
1f7b   	movq    [rsp + #40], R10	# spill
1f80   	movq    R10, [rsp + #72]	# spill
1f85   	movq    [rsp + #48], R10	# spill
1f8a   	movl    R10, [rsp + #80]	# spill
1f8f   	movl    [rsp + #56], R10	# spill
1f94   	movl    [rsp + #72], R9	# spill
1f99   	movq    R10, [rsp + #88]	# spill
1f9e   	movq    [rsp + #80], R10	# spill
1fa3   	movl    R10, [rsp + #96]	# spill
1fa8   	movl    [rsp + #88], R10	# spill
1fad   	movl    [rsp + #104], R13	# spill
1fb2   	movq    [rsp + #112], RDI	# spill
1fb7   	movl    [rsp + #108], R13	# spill
1fbc   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
1fc3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:2  L[0]=rsp + #112 L[1]=rsp + #108 L[2]=_ STK[0]=rsp + #112 STK[1]=rsp + #104
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=rsp + #80 L[1]=rsp + #104 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #88 L[6]=rsp + #140 L[7]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #56 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [40]=Oop [48]=Oop [80]=Oop [104]=NarrowOop [108]=NarrowOop [112]=Oop [152]=Oop off=8136}
1fc8   	int3	# ShouldNotReachHere
1fc8
1fcd   B209: #	B312 B210 &lt;- B72  Freq: 0.00531215
1fcd   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #44]
	movl    [rsp + #80], rax
	movq    rax, [rsp - #8]
1fdf   	movl    [rsp + #52], R9	# spill
1fe4   	movq    RSI, precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f46980ed040:Constant:exact *	# ptr
1fee   	movq    RBP, [rsp + #72]	# spill
1ff3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:254  L[0]=rsp + #152 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=RBP L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #80
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [16]=Oop [52]=NarrowOop [56]=Oop [64]=Oop [80]=NarrowOop [152]=Oop off=8184}
1ff8
1ff8   B210: #	B74 &lt;- B209  Freq: 0.00531205
        # Block is sole successor of call
1ff8   	movq    R11, RAX	# spill
1ffb   	movl    R9, [rsp + #52]	# spill
2000   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #80]
	movl    [rsp + #44], rax
	movq    rax, [rsp - #8]
2012   	jmp     B74
2012
2017   B211: #	B308 B212 &lt;- B75  Freq: 0.00531215
2017   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46980ed330:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
2023   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:20  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #72
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #44 STK[1]=rsp + #72
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [44]=NarrowOop [56]=Oop [64]=Oop [72]=Oop [152]=Oop off=8232}
2028
2028   B212: #	B77 &lt;- B211  Freq: 0.00531204
        # Block is sole successor of call
2028   	jmp     B77
2028
202d   B213: #	B309 B214 &lt;- B77  Freq: 0.00531215
202d   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46980ed330:Constant:exact *	# ptr
2037   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:32  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #72
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #44 STK[1]=rsp + #72
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [44]=NarrowOop [56]=Oop [64]=Oop [72]=Oop [152]=Oop off=8252}
203c
203c   B214: #	B79 &lt;- B213  Freq: 0.00531204
        # Block is sole successor of call
203c   	jmp     B79
203c
2041   B215: #	B310 B216 &lt;- B79  Freq: 0.00531215
2041   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46980ed330:Constant:exact *	# ptr
204b   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:44  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #72
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #44 STK[1]=rsp + #72
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [44]=NarrowOop [56]=Oop [64]=Oop [72]=Oop [152]=Oop off=8272}
2050
2050   B216: #	B81 &lt;- B215  Freq: 0.00531204
        # Block is sole successor of call
2050   	jmp     B81
2050
2055   B217: #	B311 B218 &lt;- B81  Freq: 0.00531215
2055   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46980ed330:Constant:exact *	# ptr
205f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:56  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #72
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #44 STK[1]=rsp + #72
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=Oop [44]=NarrowOop [56]=Oop [64]=Oop [72]=Oop [152]=Oop off=8292}
2064
2064   B218: #	B83 &lt;- B217  Freq: 0.00531204
        # Block is sole successor of call
2064   	jmp     B83
2064
2069   B219: #	B307 B220 &lt;- B160  Freq: 0.00530997
2069   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46980ed260:Constant:exact *	# ptr
2073   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #152 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #72 L[6]=rsp + #72 L[7]=rsp + #80 L[8]=#0 L[9]=_ STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=Oop [56]=Oop [64]=Oop [72]=Oop [152]=Oop off=8312}
2078
2078   B220: #	B162 &lt;- B219  Freq: 0.00530987
        # Block is sole successor of call
2078   	movq    R11, RAX	# spill
207b   	jmp     B162
207b
2080   B221: #	B306 B222 &lt;- B68  Freq: 0.00530341
2080   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46980ed260:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
208b   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #152 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #72 L[6]=rsp + #72 L[7]=rsp + #80 L[8]=RBP L[9]=_ STK[0]=rsp + #0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=NarrowOop [16]=Oop [56]=Oop [64]=Oop [72]=Oop [152]=Oop off=8336}
2090
2090   B222: #	B70 &lt;- B221  Freq: 0.00530331
        # Block is sole successor of call
2090   	movq    R11, RAX	# spill
2093   	jmp     B70
2093
2098   B223: #	B72 B224 &lt;- B174  Freq: 0.0015355
2098   	movl    R10, [rsp + #0]	# spill
209c   	testl   R10, R10
209f   	jle     B72  P=0.001643 C=87043.000000
209f
20a5   B224: #	B281 B225 &lt;- B223  Freq: 0.00153298
20a5   	testl  R10, R10	# unsigned
20a8   	jbe,u  B281  P=0.000001 C=-1.000000
20a8
20ae   B225: #	B159 &lt;- B224  Freq: 0.00153298
20ae   	movl    [rsp + #80], R10	# spill
20b3   	jmp     B159
20b3
20b8   B226: #	B4 &lt;- B1  Freq: 0.000999987
20b8   	xorl    R10, R10	# ptr
20bb   	movq    [rsp + #152], R10	# spill
20c3   	jmp     B4
20c3
20c8   B227: #	B7 &lt;- B4  Freq: 0.000999986
20c8   	xorl    R10, R10	# ptr
20cb   	movq    [rsp + #16], R10	# spill
20d0   	jmp     B7
20d0
20d5   B228: #	B10 &lt;- B7  Freq: 0.000999985
20d5   	xorl    R10, R10	# ptr
20d8   	movq    [rsp + #56], R10	# spill
20dd   	jmp     B10
20dd
20e2   B229: #	B13 &lt;- B10  Freq: 0.000999984
20e2   	xorl    R10, R10	# ptr
20e5   	movq    [rsp + #64], R10	# spill
20ea   	jmp     B13
20ea
20ef   B230: #	B16 &lt;- B13  Freq: 0.000999983
20ef   	xorl    R8, R8	# ptr
20f2   	jmp     B16
20f2
20f7   B231: #	B232 &lt;- B108  Freq: 0.000386302
20f7   	xorl    RBP, RBP	# int
20f9
20f9   B232: #	N4710 &lt;- B231 B262 B278 B263  Freq: 0.000390934
20f9   	movl    R8, [rsp + #48]	# spill
20fe   	movl    [rsp + #12], R8	# spill
2103   	movq    R11, [rsp + #56]	# spill
2108   	movq    [rsp + #24], R11	# spill
210d   	movq    R11, [rsp + #64]	# spill
2112   	movq    [rsp + #48], R11	# spill
2117   	movl    R8, [rsp + #80]	# spill
211c   	movl    [rsp + #68], R8	# spill
2121   	movl    [rsp + #80], R9	# spill
2126   	movl    [rsp + #84], R13	# spill
212b   	movl    [rsp + #104], R10	# spill
2130   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
2137   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:70  L[0]=rsp + #88 L[1]=rsp + #84 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #104 L[6]=RBP L[7]=_ STK[0]=rsp + #100 STK[1]=rsp + #104
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #152 L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #68 L[4]=rsp + #72 L[5]=rsp + #68 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #24 L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [24]=Oop [48]=Oop [72]=Oop [84]=NarrowOop [88]=Oop [100]=NarrowOop [152]=Oop off=8508}
213c   	int3	# ShouldNotReachHere
213c
2141   B233: #	B282 B234 &lt;- B197 B198  Freq: 0.00063385
2141   	cmpl    R11, [RSP + #160 (32-bit)]	# unsigned
2149   	jnb,u  B282  P=0.000001 C=-1.000000
2149
214f   B234: #	B18 B235 &lt;- B233  Freq: 0.000633849
214f   	movl    R8, [rsp + #100]	# spill
2154   	movl    RAX, [R8 + #16 + R11 &lt;&lt; #2]	# compressed ptr
2159   	decode_heap_oop_not_null RDI,RAX
215c   	testl   RAX, RAX	# compressed ptr
215e   	je     B18  P=0.000052 C=38671.000000
215e
2164   B235: #	B203 B236 &lt;- B234  Freq: 0.000633817
2164   	movl    RAX, [RAX + #8 (8-bit)]	# compressed klass ptr
2167   	cmpl    RAX, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c36aee0:Constant:exact *	# compressed klass ptr
216d   	jne,u  B203  P=0.000001 C=-1.000000
216d
2173   B236: #	B207 B237 &lt;- B235  Freq: 0.000633816
2173   	# checkcastPP of RDI
2173   	andl    R10, RBX	# int
2176   	cmpq    RDI, RSI	# ptr
2179   	je,u  B207  P=0.000000 C=11395.000000
2179
217f   B237: #	B263 B238 &lt;- B236  Freq: 0.000633816
217f   	movl    R8, [RDI + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
2186   	movl    RDI, [RDI + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
218c   	cmpl    RDI, RDX
218e   	jne     B263  P=0.004651 C=11395.000000
218e
2194   B238: #	B263 B239 &lt;- B237  Freq: 0.000630868
2194   	cmpl    R8, R14
2197   	jne     B263  P=0.007230 C=11342.000000
2197
219d   B239: #	B32 &lt;- B238  Freq: 0.000626307
219d   	movl    RAX, R11	# spill
21a0   	jmp     B32
21a0
21a5   B240: #	N4710 &lt;- B42  Freq: 0.000113463
21a5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
21ab   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=8624}
21b0   	int3	# ShouldNotReachHere
21b0
21b5   B241: #	N4710 &lt;- B49  Freq: 0.000113461
21b5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
21bb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:115  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=rsp + #136 STK[2]=rsp + #40
        # OopMap{off=8640}
21c0   	int3	# ShouldNotReachHere
21c0
21c5   B242: #	N4710 &lt;- B86  Freq: 0.000112817
21c5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
21cb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=8656}
21d0   	int3	# ShouldNotReachHere
21d0
21d5   B243: #	N4710 &lt;- B98  Freq: 0.000112817
21d5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
21db   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=8672}
21e0   	int3	# ShouldNotReachHere
21e0
21e5   B244: #	N4710 &lt;- B104  Freq: 0.000112817
21e5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
21eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=8688}
21f0   	int3	# ShouldNotReachHere
21f0
21f5   B245: #	N4710 &lt;- B47  Freq: 0.000111921
21f5   	movl    [rsp + #4], R10	# spill
21fa   	movq    R10, [rsp + #16]	# spill
21ff   	movq    [rsp + #8], R10	# spill
2204   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
220b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:35  L[0]=rsp + #64 L[1]=rsp + #4
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [152]=Oop off=8720}
2210   	int3	# ShouldNotReachHere
2210
2215   B246: #	N4710 &lt;- B90  Freq: 0.000111331
2215   	movl    R11, [rsp + #48]	# spill
221a   	movq    R10, [rsp + #16]	# spill
221f   	movq    [rsp + #8], R10	# spill
2224   	movl    [rsp + #32], R11	# spill
2229   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
222f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:22  L[0]=rsp + #64 L[1]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [152]=Oop off=8756}
2234   	int3	# ShouldNotReachHere
2234
2239   B247: #	N4710 &lt;- B102  Freq: 0.00011125
2239   	movl    R11, [rsp + #40]	# spill
223e   	movl    [rsp + #0], R11	# spill
2242   	movq    R10, [rsp + #16]	# spill
2247   	movq    [rsp + #8], R10	# spill
224c   	movq    R10, [rsp + #64]	# spill
2251   	movq    [rsp + #32], R8	# spill
2256   	movq    [rsp + #40], R10	# spill
225b   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
2263   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:22  L[0]=rsp + #64 L[1]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=rsp + #152 L[1]=rsp + #0 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #40 L[7]=rsp + #32 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop [152]=Oop off=8808}
2268   	int3	# ShouldNotReachHere
2268
226d   B248: #	N4710 &lt;- B51  Freq: 5.44612e-05
226d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2273   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=rsp + #64
        # OopMap{[64]=Oop off=8824}
2278   	int3	# ShouldNotReachHere
2278
227d   B249: #	N4710 &lt;- B56 B55  Freq: 0.000108029
227d   	movl    RSI, #-122	# int
2282   	movl    R11, [rsp + #48]	# spill
2287   	movl    [rsp + #4], R11	# spill
228c   	movq    R10, [rsp + #16]	# spill
2291   	movq    [rsp + #8], R10	# spill
2296   	movq    R10, [rsp + #56]	# spill
229b   	movq    [rsp + #16], R10	# spill
22a0   	movq    R10, [rsp + #64]	# spill
22a5   	movq    [rsp + #40], R10	# spill
22aa   	movq    R10, [rsp + #72]	# spill
22af   	movl    R11, [rsp + #80]	# spill
22b4   	movq    [rsp + #64], R10	# spill
22b9   	movl    R10, R11	# spill
22bc   	movl    [rsp + #60], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
22c3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:29  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=rsp + #64 L[3]=rsp + #60 L[4]=rsp + #72 L[5]=rsp + #80 L[6]=#0 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [40]=Oop [64]=Oop [72]=Oop [152]=Oop off=8904}
22c8   	int3	# ShouldNotReachHere
22c8
22cd   B250: #	N4710 &lt;- B137 B136  Freq: 0.000107408
22cd   	movl    R10, [rsp + #48]	# spill
22d2   	movl    [rsp + #4], R10	# spill
22d7   	movq    R10, [rsp + #16]	# spill
22dc   	movq    [rsp + #8], R10	# spill
22e1   	movq    R10, [rsp + #56]	# spill
22e6   	movq    [rsp + #16], R10	# spill
22eb   	movq    R10, [rsp + #64]	# spill
22f0   	movq    [rsp + #24], R10	# spill
22f5   	movq    R10, [rsp + #72]	# spill
22fa   	movl    R11, [rsp + #80]	# spill
22ff   	movq    [rsp + #56], R10	# spill
2304   	movl    R10, R11	# spill
2307   	movl    [rsp + #52], R10	# spill
230c   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
2313   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:110  L[0]=rsp + #152 L[1]=_ L[2]=rsp + #56 L[3]=rsp + #52 L[4]=rsp + #144 L[5]=rsp + #72 L[6]=rsp + #80 L[7]=#0 L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [24]=Oop [56]=Oop [72]=Oop [152]=Oop off=8984}
2318   	int3	# ShouldNotReachHere
2318
231d   B251: #	B151 &lt;- B140  Freq: 5.4058e-05
231d   	movl    RBX, #1	# int
2322   	jmp     B151
2322
2327   B252: #	N4710 &lt;- B83  Freq: 5.38179e-05
2327   	movl    RSI, #-10	# int
232c   	movq    RBP, [rsp + #72]	# spill
      	nop 	# 2 bytes pad for loops and calls
2333   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:271  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop off=9016}
2338   	int3	# ShouldNotReachHere
2338
233d   B253: #	B254 &lt;- B185  Freq: 7.35825e-07
233d   	movl    [rsp + #80], R10	# spill
233d
2342   B254: #	N4710 &lt;- B159 B253 B281 B158  Freq: 0.000106887
2342   	movl    R10, [rsp + #48]	# spill
2347   	movl    [rsp + #4], R10	# spill
234c   	movq    R10, [rsp + #16]	# spill
2351   	movq    [rsp + #8], R10	# spill
2356   	movq    R10, [rsp + #56]	# spill
235b   	movq    [rsp + #16], R10	# spill
2360   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
2367   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:225  L[0]=rsp + #152 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #72 L[6]=rsp + #72 L[7]=rsp + #80 L[8]=#0 L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [64]=Oop [72]=Oop [152]=Oop off=9068}
236c   	int3	# ShouldNotReachHere
236c
2371   B255: #	B256 &lt;- B162 B61 B64  Freq: 0.0654627
2371   	movq    RBP, R8	# spill
2371
2374   B256: #	N4710 &lt;- B258 B255  Freq: 0.0655164
2374   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
237b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:241  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop off=9088}
2380   	int3	# ShouldNotReachHere
2380
2385   B257: #	B66 &lt;- B163  Freq: 5.37959e-05
2385   	movl    RBP, #1	# int
238a   	jmp     B66
238a
238f   B258: #	B256 &lt;- B70  Freq: 5.37295e-05
238f   	movq    RBP, R11	# spill
2392   	jmp,s   B256
2392
2394   B259: #	N4710 &lt;- B85  Freq: 5.30906e-05
2394   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
239b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:136  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #40 STK[1]=RBP
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [152]=Oop off=9120}
23a0   	int3	# ShouldNotReachHere
23a0
23a5   B260: #	N4710 &lt;- B95  Freq: 5.30904e-05
23a5   	movl    RSI, #-155	# int
23aa   	movq    R10, [rsp + #16]	# spill
23af   	movq    [rsp + #8], R10	# spill
23b4   	movl    [rsp + #32], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
23bb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:42  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #32
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [152]=Oop off=9152}
23c0   	int3	# ShouldNotReachHere
23c0
23c5   B261: #	B262 &lt;- B26  Freq: 4.57639e-06
23c5   	movl    R11, RAX	# spill
23c8   	movl    R10, #1	# int
23c8
23ce   B262: #	B232 &lt;- B261 B282  Freq: 4.57704e-06
23ce   	movl    RBP, R10	# spill
23d1   	movl    R10, R11	# spill
23d4   	jmp     B232
23d4
23d9   B263: #	B232 B264 &lt;- B237 B238  Freq: 7.50901e-06
23d9   	cmpl    R10, [RSP + #160 (32-bit)]	# unsigned
23e1   	jnb,u  B232  P=0.000001 C=-1.000000
23e1
23e7   B264: #	N4710 &lt;- B263  Freq: 7.509e-06
23e7   	movl    R8, [rsp + #100]	# spill
23ec   	movl    RBP, [R8 + #16 + R10 &lt;&lt; #2]	# compressed ptr
23f1   	movl    R8, [rsp + #48]	# spill
23f6   	movl    [rsp + #12], R8	# spill
23fb   	movq    R11, [rsp + #56]	# spill
2400   	movq    [rsp + #24], R11	# spill
2405   	movq    R11, [rsp + #64]	# spill
240a   	movq    [rsp + #48], R11	# spill
240f   	movl    R11, [rsp + #80]	# spill
2414   	movl    [rsp + #68], R11	# spill
2419   	movl    [rsp + #80], R9	# spill
241e   	movl    [rsp + #84], R13	# spill
2423   	movl    [rsp + #96], R10	# spill
2428   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
242f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:80  L[0]=rsp + #88 L[1]=rsp + #84 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #96 L[6]=#5 L[7]=RBP STK[0]=#4 STK[1]=#3
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #152 L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #68 L[4]=rsp + #72 L[5]=rsp + #68 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #24 L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=Oop [24]=Oop [48]=Oop [72]=Oop [84]=NarrowOop [88]=Oop [152]=Oop off=9268}
2434   	int3	# ShouldNotReachHere
2434
2439   B265: #	B203 &lt;- B28  Freq: 4.51618e-06
2439   	movl    R11, RAX	# spill
243c   	movl    RBP, #2	# int
2441   	jmp     B203
2441
2446   B266: #	B19 &lt;- B194  Freq: 2.76815e-06
2446   	movl    R10, R8	# spill
2449   	jmp     B19
2449
244e   B267: #	B207 &lt;- B29  Freq: 2.15348e-06
244e   	movl    R11, RAX	# spill
2451   	movl    RBP, #2	# int
2456   	jmp     B207
2456
245b   B268: #	N4710 &lt;- B21  Freq: 1.70725e-06
245b   	movl    R11, [rsp + #48]	# spill
2460   	movl    [rsp + #4], R11	# spill
2465   	movq    R10, [rsp + #16]	# spill
246a   	movq    [rsp + #8], R10	# spill
246f   	movq    R10, [rsp + #56]	# spill
2474   	movq    [rsp + #16], R10	# spill
2479   	movq    R10, [rsp + #64]	# spill
247e   	movq    [rsp + #40], R10	# spill
2483   	movq    R10, [rsp + #72]	# spill
2488   	movq    [rsp + #48], R10	# spill
248d   	movl    R10, [rsp + #80]	# spill
2492   	movl    [rsp + #56], R10	# spill
2497   	movl    R10, [rsp + #84]	# spill
249c   	movl    [rsp + #72], R10	# spill
24a1   	movq    R10, [rsp + #88]	# spill
24a6   	movq    [rsp + #80], R10	# spill
24ab   	movl    R11, [rsp + #96]	# spill
24b0   	movl    R10, [rsp + #100]	# spill
24b5   	movl    [rsp + #88], R10	# spill
24ba   	movl    [rsp + #92], R11	# spill
24bf   	movl    RSI, #-28	# int
24c4   	movq    [rsp + #96], RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
24cb   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=rsp + #80 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #92 L[6]=_ L[7]=_ STK[0]=rsp + #88 STK[1]=rsp + #92 STK[2]=rsp + #96
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #56 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [40]=Oop [48]=Oop [80]=Oop [88]=NarrowOop [96]=Oop [152]=Oop off=9424}
24d0   	int3	# ShouldNotReachHere
24d0
24d5   B269: #	N4710 &lt;- B24  Freq: 1.70725e-06
24d5   	movl    R11, [rsp + #48]	# spill
24da   	movl    [rsp + #12], R11	# spill
24df   	movq    R10, [rsp + #56]	# spill
24e4   	movq    [rsp + #24], R10	# spill
24e9   	movq    R10, [rsp + #64]	# spill
24ee   	movq    [rsp + #48], R10	# spill
24f3   	movl    R10, [rsp + #80]	# spill
24f8   	movl    [rsp + #68], R10	# spill
24fd   	movl    R10, [rsp + #84]	# spill
2502   	movl    [rsp + #80], R10	# spill
2507   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
250f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=RBP STK[1]=rsp + #96 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #152 L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #68 L[4]=rsp + #72 L[5]=rsp + #68 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #24 L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=Oop [24]=Oop [48]=Oop [72]=Oop [152]=Oop off=9492}
2514   	int3	# ShouldNotReachHere
2514
2519   B270: #	N4710 &lt;- B22  Freq: 1.68488e-06
2519   	movl    R11, [rsp + #48]	# spill
251e   	movl    [rsp + #4], R11	# spill
2523   	movq    R10, [rsp + #16]	# spill
2528   	movq    [rsp + #8], R10	# spill
252d   	movq    R10, [rsp + #56]	# spill
2532   	movq    [rsp + #16], R10	# spill
2537   	movq    R10, [rsp + #64]	# spill
253c   	movq    [rsp + #40], R10	# spill
2541   	movq    R10, [rsp + #72]	# spill
2546   	movq    [rsp + #48], R10	# spill
254b   	movl    R10, [rsp + #80]	# spill
2550   	movl    [rsp + #56], R10	# spill
2555   	movl    R10, [rsp + #84]	# spill
255a   	movl    [rsp + #72], R10	# spill
255f   	movq    R10, [rsp + #88]	# spill
2564   	movq    [rsp + #80], R10	# spill
2569   	movl    R11, [rsp + #96]	# spill
256e   	movl    R10, [rsp + #100]	# spill
2573   	movl    [rsp + #88], R10	# spill
2578   	movl    [rsp + #92], R11	# spill
257d   	movl    RSI, #-42	# int
2582   	movq    [rsp + #96], RAX	# spill
2587   	call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=rsp + #80 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #92 L[6]=_ L[7]=_ STK[0]=rsp + #88 STK[1]=rsp + #92 STK[2]=rsp + #96
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #56 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [40]=Oop [48]=Oop [80]=Oop [88]=NarrowOop [96]=Oop [152]=Oop off=9612}
258c   	int3	# ShouldNotReachHere
258c
2591   B271: #	B273 &lt;- B2  Freq: 9.99e-07
2591   	movq    R8, [rsp + #8]	# spill
2596   	jmp,s   B273
2596
2598   B272: #	B273 &lt;- B5  Freq: 9.98999e-07
2598   	movq    R10, [rsp + #0]	# spill
259c   	movq    R8, [rsp + #8]	# spill
259c
25a1   B273: #	N4710 &lt;- B271 B272 B274 B275 B276  Freq: 4.99499e-06
25a1   	movl    RSI, #-99	# int
25a6   	movl    [rsp + #0], R14	# spill
25aa   	movl    R9, [rsp + #48]	# spill
25af   	movl    [rsp + #4], R9	# spill
25b4   	movq    [rsp + #8], R8	# spill
25b9   	movl    [rsp + #16], R13	# spill
25be   	movq    [rsp + #48], R10	# spill
25c3   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:75  L[0]=rsp + #48 L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #32 L[5]=rsp + #40 L[6]=rsp + #24 L[7]=_ L[8]=rsp + #8 L[9]=rsp + #16 L[10]=RBP L[11]=_
        # OopMap{[8]=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop off=9672}
25c8   	int3	# ShouldNotReachHere
25c8
25cd   B274: #	B273 &lt;- B8  Freq: 9.98998e-07
25cd   	movq    R10, [rsp + #0]	# spill
25d1   	movq    R8, [rsp + #8]	# spill
25d6   	jmp,s   B273
25d6
25d8   B275: #	B273 &lt;- B11  Freq: 9.98997e-07
25d8   	movq    R10, [rsp + #0]	# spill
25dc   	movq    R8, [rsp + #8]	# spill
25e1   	jmp,s   B273
25e1
25e3   B276: #	B273 &lt;- B14  Freq: 9.98996e-07
25e3   	movq    R10, [rsp + #0]	# spill
25e7   	jmp,s   B273
25e7
25e9   B277: #	N4710 &lt;- B176 B175  Freq: 1.49365e-06
25e9   	movl    R10, [rsp + #48]	# spill
25ee   	movl    [rsp + #4], R10	# spill
25f3   	movq    R10, [rsp + #16]	# spill
25f8   	movq    [rsp + #8], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
25ff   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=rsp + #152 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #144 L[5]=rsp + #72 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [72]=Oop [152]=Oop off=9732}
2604   	int3	# ShouldNotReachHere
2604
2609   B278: #	B232 &lt;- B193  Freq: 5.4215e-08
2609   	movl    R10, R8	# spill
260c   	movl    RBP, #2	# int
2611   	jmp     B232
2611
2616   B279: #	B202 &lt;- B195  Freq: 5.35017e-08
2616   	movl    R10, [rsp + #148]	# spill
261e   	jmp     B202
261e
2623   B280: #	B206 &lt;- B196  Freq: 2.55116e-08
2623   	movl    R11, [rsp + #148]	# spill
262b   	jmp     B206
262b
2630   B281: #	B254 &lt;- B224  Freq: 1.53298e-09
2630   	movl    [rsp + #80], R10	# spill
2635   	jmp     B254
2635
263a   B282: #	B262 &lt;- B233  Freq: 6.42267e-10
263a   	movl    R10, [rsp + #148]	# spill
2642   	jmp     B262
2642
2647   B283: #	N4710 &lt;- B53  Freq: 1e-35
2647   	movl    R11, [rsp + #48]	# spill
264c   	movl    [rsp + #12], R11	# spill
2651   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
2657   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:4  L[0]=rsp + #152 L[1]=rsp + #64 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=Oop [56]=Oop [64]=Oop [152]=Oop off=9820}
265c   	int3	# ShouldNotReachHere
265c
2661   B284: #	N4710 &lt;- B173  Freq: 1e-35
2661   	movl    R11, [rsp + #48]	# spill
2666   	movl    [rsp + #4], R11	# spill
266b   	movq    R10, [rsp + #16]	# spill
2670   	movq    [rsp + #8], R10	# spill
2675   	movl    RSI, #-34	# int
267a   	movq    [rsp + #48], RAX	# spill
267f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:157  L[0]=rsp + #152 L[1]=_ L[2]=_ L[3]=rsp + #80 L[4]=rsp + #144 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [48]=Oop [56]=Oop [64]=Oop [152]=Oop off=9860}
2684   	int3	# ShouldNotReachHere
2684
2689   B285: #	N4710 &lt;- B94  Freq: 1e-35
2689   	movq    R10, [rsp + #16]	# spill
268e   	movq    [rsp + #8], R10	# spill
2693   	movl    RSI, #-34	# int
2698   	movl    [rsp + #24], R9	# spill
      	nop 	# 2 bytes pad for loops and calls
269f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #24
        # OopMap{[8]=Oop [24]=NarrowOop [56]=Oop [152]=Oop off=9892}
26a4   	int3	# ShouldNotReachHere
26a4
26a9   B286: #	N4710 &lt;- B97  Freq: 1e-35
26a9   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
26af   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:52  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [16]=Oop [56]=Oop [64]=Oop [152]=Oop off=9908}
26b4   	int3	# ShouldNotReachHere
26b4
26b9   B287: #	N4710 &lt;- B153 B138 B142 B146 B144 B148  Freq: 0.129908
26b9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
26bf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:119  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=9924}
26c4   	int3	# ShouldNotReachHere
26c4
26c9   B288: #	N4710 &lt;- B154 B139 B143 B147 B145 B149  Freq: 0.129908
26c9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
26cf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:127  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=#0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=9940}
26d4   	int3	# ShouldNotReachHere
26d4
26d9   B289: #	N4710 &lt;- B38  Freq: 0.0906293
26d9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
26df   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:86  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=9956}
26e4   	int3	# ShouldNotReachHere
26e4
26e9   B290: #	N4710 &lt;- B33  Freq: 0.0906292
26e9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
26ef   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:91  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=9972}
26f4   	int3	# ShouldNotReachHere
26f4
26f9   B291: #	N4710 &lt;- B34  Freq: 0.0906291
26f9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
26ff   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:94  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=9988}
2704   	int3	# ShouldNotReachHere
2704
2709   B292: #	N4710 &lt;- B120  Freq: 0.0326087
2709   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
270f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:42  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10004}
2714   	int3	# ShouldNotReachHere
2714
2719   B293: #	N4710 &lt;- B121  Freq: 0.0326087
2719   	movl    RSI, #-10	# int
271e   	movl    RBP, R13	# spill
      	nop 	# 2 bytes pad for loops and calls
2723   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop off=10024}
2728   	int3	# ShouldNotReachHere
2728
272d   B294: #	N4710 &lt;- B123  Freq: 0.0326086
272d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2733   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10040}
2738   	int3	# ShouldNotReachHere
2738
273d   B295: #	N4710 &lt;- B124  Freq: 0.0326086
273d   	movl    RBP, [rsp + #96]	# spill
2741   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2747   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10060}
274c   	int3	# ShouldNotReachHere
274c
2751   B296: #	N4710 &lt;- B115  Freq: 0.0326067
2751   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2757   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=rsp + #96
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10076}
275c   	int3	# ShouldNotReachHere
275c
2761   B297: #	N4710 &lt;- B41  Freq: 0.000113464
2761   	movl    RBP, [rsp + #48]	# spill
2765   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
276b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=10096}
2770   	int3	# ShouldNotReachHere
2770
2775   B298: #	N4710 &lt;- B92  Freq: 0.000112817
2775   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
277b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:29  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=10112}
2780   	int3	# ShouldNotReachHere
2780
2785   B299: #	N4710 &lt;- B93  Freq: 0.000112817
2785   	movq    R10, [rsp + #16]	# spill
278a   	movq    [rsp + #8], R10	# spill
278f   	movl    RSI, #-12	# int
      	nop 	# 3 bytes pad for loops and calls
2797   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{[8]=Oop [56]=Oop [152]=Oop off=10140}
279c   	int3	# ShouldNotReachHere
279c
27a1   B300: #	N4710 &lt;- B96  Freq: 0.000112817
27a1   	movq    R10, [rsp + #16]	# spill
27a6   	movq    [rsp + #8], R10	# spill
27ab   	movl    RSI, #-12	# int
      	nop 	# 3 bytes pad for loops and calls
27b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:52  L[0]=rsp + #152 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [152]=Oop off=10168}
27b8   	int3	# ShouldNotReachHere
27b8
27bd   B301: #	N4710 &lt;- B52  Freq: 5.44611e-05
27bd   	movq    R10, [rsp + #16]	# spill
27c2   	movq    [rsp + #8], R10	# spill
27c7   	movl    RSI, #-12	# int
      	nop 	# 3 bytes pad for loops and calls
27cf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:4  L[0]=rsp + #152 L[1]=rsp + #64 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [152]=Oop off=10196}
27d4   	int3	# ShouldNotReachHere
27d4
27d9   B302: #	N4710 &lt;- B74  Freq: 5.3818e-05
27d9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
27df   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:262  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10212}
27e4   	int3	# ShouldNotReachHere
27e4
27e9   B303: #	N4710 &lt;- B23  Freq: 1.70725e-06
27e9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
27ef   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=rsp + #96 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10228}
27f4   	int3	# ShouldNotReachHere
27f4
27f9   B304: #	N4710 &lt;- B169  Freq: 7.52055e-07
27f9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
27ff   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:67  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10244}
2804   	int3	# ShouldNotReachHere
2804
2809   B305: #	N4710 &lt;- B172  Freq: 7.48382e-07
2809   	movq    R10, [rsp + #16]	# spill
280e   	movq    [rsp + #8], R10	# spill
2813   	movl    RSI, #-12	# int
      	nop 	# 3 bytes pad for loops and calls
281b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:157  L[0]=rsp + #152 L[1]=_ L[2]=_ L[3]=rsp + #80 L[4]=rsp + #144 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #152 L[1]=rsp + #136 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [152]=Oop off=10272}
2820   	int3	# ShouldNotReachHere
2820
2825   B306: #	B319 &lt;- B221  Freq: 5.30341e-08
2825   	# exception oop is in rax; no code emitted
2825   	jmp,s   B319
2825
2827   B307: #	B319 &lt;- B219  Freq: 5.30997e-08
2827   	# exception oop is in rax; no code emitted
2827   	jmp,s   B319
2827
2829   B308: #	B319 &lt;- B211  Freq: 5.31215e-08
2829   	# exception oop is in rax; no code emitted
2829   	jmp,s   B319
2829
282b   B309: #	B319 &lt;- B213  Freq: 5.31215e-08
282b   	# exception oop is in rax; no code emitted
282b   	jmp,s   B319
282b
282d   B310: #	B319 &lt;- B215  Freq: 5.31215e-08
282d   	# exception oop is in rax; no code emitted
282d   	jmp,s   B319
282d
282f   B311: #	B319 &lt;- B217  Freq: 5.31215e-08
282f   	# exception oop is in rax; no code emitted
282f   	jmp,s   B319
282f
2831   B312: #	B319 &lt;- B209  Freq: 5.31215e-08
2831   	# exception oop is in rax; no code emitted
2831   	jmp,s   B319
2831
2833   B313: #	B319 &lt;- B187  Freq: 3.54572e-07
2833   	# exception oop is in rax; no code emitted
2833   	jmp,s   B319
2833
2835   B314: #	B319 &lt;- B189  Freq: 3.54572e-07
2835   	# exception oop is in rax; no code emitted
2835   	jmp,s   B319
2835
2837   B315: #	B319 &lt;- B171  Freq: 7.38589e-06
2837   	# exception oop is in rax; no code emitted
2837   	jmp,s   B319
2837
2839   B316: #	B319 &lt;- B20  Freq: 1.68491e-05
2839   	# exception oop is in rax; no code emitted
2839   	jmp,s   B319
2839
283b   B317: #	B319 &lt;- B165  Freq: 3.22812e-05
283b   	# exception oop is in rax; no code emitted
283b   	jmp,s   B319
283b
283d   B318: #	B319 &lt;- B167  Freq: 3.22812e-05
283d   	# exception oop is in rax; no code emitted
283d
283d   B319: #	B321 &lt;- B316 B315 B313 B314 B306 B307 B317 B318 B312 B308 B309 B310 B311  Freq: 8.98783e-05
283d   	movq    RSI, RAX	# spill
2840   	jmp,s   B321
2840
2842   B320: #	B321 &lt;- B43  Freq: 0.00111976
2842   	# exception oop is in rax; no code emitted
2842   	movq    RSI, RAX	# spill
2842
2845   B321: #	N4710 &lt;- B320 B319  Freq: 0.00120964
2845   	addq    rsp, 192	# Destroy frame
	popq   rbp

284d   	jmp     rethrow_stub
284d

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='409'>
{method}
 - this oop:          0x00007f46c67d16d0
 - method holder:     &apos;java/util/concurrent/atomic/AtomicInteger&apos;
 - constants:         0x00007f46c67d10a0 constant pool [140] {0x00007f46c67d10a0} for &apos;java/util/concurrent/atomic/AtomicInteger&apos; cache=0x00007f46c67d28b0
 - access:            0x81000001  public 
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;(I)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c92f2ce0
 - code size:         10
 - code start:        0x00007f46c67d16a0
 - code end (excl):   0x00007f46c67d16aa
 - method data:       0x00007f46c6bdac40
 - checked ex length: 0
 - linenumber start:  0x00007f46c67d16aa
 - localvar length:   2
 - localvar start:    0x00007f46c67d16b6
 - compiled code: nmethod   3877  367       3       java.util.concurrent.atomic.AtomicInteger::&lt;init&gt; (10 bytes)
#
#  void ( java/util/concurrent/atomic/AtomicInteger:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/util/concurrent/atomic/AtomicInteger:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N25: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	N25 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (32 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	MEMBAR-release ! (empty encoding)
02c   	movl    [RSI + #12 (8-bit)], RDX	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
02f   	lock addl [rsp + #0], 0	! membar_volatile
034   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

03f   	ret
03f

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='400'>
{method}
 - this oop:          0x00007f46c6b72c80
 - method holder:     &apos;sun/reflect/ByteVectorImpl&apos;
 - constants:         0x00007f46c6b720d0 constant pool [56] {0x00007f46c6b720d0} for &apos;sun/reflect/ByteVectorImpl&apos; cache=0x00007f46c6b72f70
 - access:            0x81000001  public 
 - name:              &apos;add&apos;
 - signature:         &apos;(B)V&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef8c8: 0xba000000 i2c: 0x00007f46c91468a0 c2i: 0x00007f46c91469dd c2iUV: 0x00007f46c91469b0
 - compiled entry     0x00007f46c92d82e0
 - code size:         38
 - code start:        0x00007f46c6b72c38
 - code end (excl):   0x00007f46c6b72c5e
 - method data:       0x00007f46c6b792a0
 - checked ex length: 0
 - linenumber start:  0x00007f46c6b72c5e
 - localvar length:   2
 - localvar start:    0x00007f46c6b72c66
 - compiled code: nmethod   4071  323       3       sun.reflect.ByteVectorImpl::add (38 bytes)
#
#  void ( sun/reflect/ByteVectorImpl:NotNull *, byte )
#
#r018 rsi:rsi   : parm 0: sun/reflect/ByteVectorImpl:NotNull *
#r016 rdx   : parm 1: byte
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N117: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B9 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    [rsp + #4], RDX	# spill
030   	movq    R8, RSI	# spill
033   	movl    RDX, [RSI + #12 (8-bit)]	# int ! Field: sun/reflect/ByteVectorImpl.pos
036   	movl    R11, [RSI + #16 (8-bit)]	# compressed ptr ! Field: sun/reflect/ByteVectorImpl.data
03a   	movl    RSI, #-10	# int
03f   	incl    RDX	# int
041   	movl    [R8 + #12 (8-bit)], RDX	# int ! Field: sun/reflect/ByteVectorImpl.pos
045   	movl    R10, [R11 + #12 (8-bit)]	# range
049   	NullCheck R11
049
049   B2: #	B5 B3 &lt;- B1  Freq: 0.999999
049   	cmpl    RDX, R10
04c   	jge,s   B5  P=0.002712 C=8480.000000
04c
04e   B3: #	B8 B4 &lt;- B6 B2  Freq: 0.999999
04e   	movl    R8, [R11 + #12 (8-bit)]	# range
052   	cmpl    RDX, R8	# unsigned
055   	jnb,us  B8  P=0.000001 C=-1.000000
055
057   B4: #	N117 &lt;- B3  Freq: 0.999998
057   	movslq  R10, RDX	# i2l
05a   	movl    R9, [rsp + #4]	# spill
05f   	movb    [R11 + #16 + R10], R9	# byte
064   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

06f   	ret
06f
070   B5: #	B10 B6 &lt;- B2  Freq: 0.00271225
070   	movq    RBP, R8	# spill
073   	movq    RSI, R8	# spill
      	nop 	# 1 bytes pad for loops and calls
077   	call,static  sun.reflect.ByteVectorImpl::resize
        # sun.reflect.ByteVectorImpl::add @ bci:24  L[0]=RBP L[1]=rsp + #4
        # OopMap{rbp=Oop off=124}
07c
07c   B6: #	B3 B7 &lt;- B5  Freq: 0.00271219
        # Block is sole successor of call
07c   	movq    R10, RBP	# spill
07f   	movl    R11, [R10 + #16 (8-bit)]	# compressed ptr ! Field: sun/reflect/ByteVectorImpl.data
083   	movl    RDX, [R10 + #12 (8-bit)]	# int ! Field: sun/reflect/ByteVectorImpl.pos
087   	testl   R11, R11	# compressed ptr
08a   	jne,s   B3  P=0.999999 C=-1.000000
08a
08c   B7: #	N117 &lt;- B6  Freq: 2.74821e-09
08c   	movl    RBP, RDX	# spill
08e   	movl    RSI, #-10	# int
093   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #4
        # OopMap{off=152}
098   	int3	# ShouldNotReachHere
098
09d   B8: #	N117 &lt;- B3  Freq: 1.01328e-06
09d   	movl    RBP, R11	# spill
0a0   	movl    [rsp + #0], RDX	# spill
0a3   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
0ab   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:36  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #4
        # OopMap{rbp=NarrowOop off=176}
0b0   	int3	# ShouldNotReachHere
0b0
0b5   B9: #	N117 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
0b7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.reflect.ByteVectorImpl::add @ bci:15  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=188}
0bc   	int3	# ShouldNotReachHere
0bc
0c1   B10: #	N117 &lt;- B5  Freq: 2.71225e-08
0c1   	# exception oop is in rax; no code emitted
0c1   	movq    RSI, RAX	# spill
0c4   	addq    rsp, 32	# Destroy frame
	popq   rbp

0c9   	jmp     rethrow_stub
0c9

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139941923202816'/>
<opto_assembly compile_id='386' compile_kind='osr'>
{method}
 - this oop:          0x00007f46c6ae3490
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2&apos;
 - constants:         0x00007f46c6ae2d50 constant pool [137] {0x00007f46c6ae2d50} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2&apos; cache=0x00007f46c6ae3618
 - access:            0xc1000001  public 
 - name:              &apos;call&apos;
 - signature:         &apos;()Ljava/lang/Void;&apos;
 - max stack:         5
 - max locals:        12
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef760: 0xb0000000 i2c: 0x00007f46c9145620 c2i: 0x00007f46c914575a c2iUV: 0x00007f46c914572d
 - compiled entry     0x00007f46c9302820
 - code size:         163
 - code start:        0x00007f46c6ae3360
 - code end (excl):   0x00007f46c6ae3403
 - method data:       0x00007f46c6ae5f50
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae3403
 - localvar length:   9
 - localvar start:    0x00007f46c6ae3422
 - compiled code: nmethod   4123  382       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call (163 bytes)
#
#  java/lang/Void:exact * ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 208 --
#r191 rsp+204: in_preserve
#r190 rsp+200: return address
#r189 rsp+196: in_preserve
#r188 rsp+192: saved fp register
#r187 rsp+188: pad2, stack alignment
#r186 rsp+184: pad2, stack alignment
#r185 rsp+180: Fixed slot 1
#r184 rsp+176: Fixed slot 0
#r235 rsp+172: spill
#r234 rsp+168: spill
#r233 rsp+164: spill
#r232 rsp+160: spill
#r231 rsp+156: spill
#r230 rsp+152: spill
#r229 rsp+148: spill
#r228 rsp+144: spill
#r227 rsp+140: spill
#r226 rsp+136: spill
#r225 rsp+132: spill
#r224 rsp+128: spill
#r223 rsp+124: spill
#r222 rsp+120: spill
#r221 rsp+116: spill
#r220 rsp+112: spill
#r219 rsp+108: spill
#r218 rsp+104: spill
#r217 rsp+100: spill
#r216 rsp+96: spill
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N5102: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B241 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (704 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #192	# Create frame

01f   	movl    RBX, [RSI + #16 (8-bit)]	# int
022   	movl    R13, [RSI + #8 (8-bit)]	# int
026   	movq    R10, [RSI + #40 (8-bit)]	# ptr
02a   	movq    [rsp + #24], R10	# spill
02f   	movq    R14, [RSI + #24 (8-bit)]	# ptr
033   	movq    R10, [RSI + #88 (8-bit)]	# ptr
037   	movq    [rsp + #0], R10	# spill
03b   	movq    R10, [RSI + #48 (8-bit)]	# ptr
03f   	movq    [rsp + #32], R10	# spill
044   	movq    R10, [RSI + #56 (8-bit)]	# ptr
048   	movq    [rsp + #40], R10	# spill
04d   	movl    R11, [RSI + #64 (8-bit)]	# int
051   	movl    [rsp + #48], R11	# spill
056   	movl    RBP, [RSI + #80 (8-bit)]	# int
059   	movq    RDI, RSI	# spill
05c   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
069   	movq    R10, [rsp + #0]	# spill
06d   	testq   R10, R10	# ptr
070   	je     B241  P=0.001000 C=-1.000000
070
076   B2: #	B288 B3 &lt;- B1  Freq: 0.999
076   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
07a   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2: 0x00007f469c189610:Constant:exact *	# compressed klass ptr
081   	jne,u  B288  P=0.000001 C=-1.000000
081
087   B3: #	B4 &lt;- B2  Freq: 0.998999
087   	movq    R11, R10	# spill
08a   	# checkcastPP of R11
08a   	movq    [rsp + #72], R11	# spill
08a
08f   B4: #	B242 B5 &lt;- B3 B241  Freq: 0.999999
08f   	movq    R10, [rsp + #40]	# spill
094   	testq   R10, R10	# ptr
097   	je     B242  P=0.001000 C=-1.000000
097
09d   B5: #	B287 B6 &lt;- B4  Freq: 0.998999
09d   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
0a1   	cmpl    R10, narrowklass: precise klass java/util/concurrent/atomic/AtomicReference: 0x00007f469c189e80:Constant:exact *	# compressed klass ptr
0a8   	jne,u  B287  P=0.000001 C=-1.000000
0a8
0ae   B6: #	B7 &lt;- B5  Freq: 0.998998
0ae   	movq    R10, [rsp + #40]	# spill
0b3   	# checkcastPP of R10
0b3   	movq    [rsp + #16], R10	# spill
0b3
0b8   B7: #	B243 B8 &lt;- B6 B242  Freq: 0.999998
0b8   	movl    R9, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f469c189f50:Constant:exact *	# compressed klass ptr
0be   	movq    R10, [rsp + #32]	# spill
0c3   	testq   R10, R10	# ptr
0c6   	je     B243  P=0.001000 C=-1.000000
0c6
0cc   B8: #	B289 B9 &lt;- B7  Freq: 0.998998
0cc   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
0d0   	cmpl    R10, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c18a240:Constant:exact *	# compressed klass ptr
0d7   	jne,u  B289  P=0.000001 C=-1.000000
0d7
0dd   B9: #	B10 &lt;- B8  Freq: 0.998997
0dd   	movq    R10, [rsp + #32]	# spill
0e2   	# checkcastPP of R10
0e2   	movq    [rsp + #56], R10	# spill
0e2
0e7   B10: #	B244 B11 &lt;- B9 B243  Freq: 0.999997
0e7   	movl    RSI, #-122	# int
0ec   	movq    R10, [rsp + #24]	# spill
0f1   	testq   R10, R10	# ptr
0f4   	je     B244  P=0.001000 C=-1.000000
0f4
0fa   B11: #	B290 B12 &lt;- B10  Freq: 0.998997
0fa   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
0fe   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f469c189f50:Constant:exact *	# compressed klass ptr
105   	jne,u  B290  P=0.000001 C=-1.000000
105
10b   B12: #	B13 &lt;- B11  Freq: 0.998996
10b   	movq    R10, [rsp + #24]	# spill
110   	# checkcastPP of R10
110   	movq    [rsp + #64], R10	# spill
110
115   B13: #	B245 B14 &lt;- B12 B244  Freq: 0.999996
115   	movl    R8, R13	# spill
118   	incl    R8	# int
11b   	movl    RCX, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c190630:Constant:exact *	# compressed klass ptr
120   	xorl    R11, R11	# int
123   	xorl    R10, R10	# int
126   	cmpl    R8, R11
129   	cmovllt R8, R10	# max
12d   	testq   R14, R14	# ptr
130   	je     B245  P=0.001000 C=-1.000000
130
136   B14: #	B291 B15 &lt;- B13  Freq: 0.998996
136   	movl    R11, [R14 + #8 (8-bit)]	# compressed klass ptr
13a   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f469c18a020:Constant:exact *	# compressed klass ptr
141   	jne,u  B291  P=0.000001 C=-1.000000
141
147   B15: #	B16 &lt;- B14  Freq: 0.998995
147   	# checkcastPP of R14
147
147   B16: #	B286 B17 &lt;- B15 B245  Freq: 0.999995
147   	movl    R10, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c18a240:Constant:exact *	# compressed klass ptr
14d   	movq    R11, [rsp + #56]	# spill
152   	testq   R11, R11	# ptr
155   	je     B286  P=0.000001 C=-1.000000
155
15b   B17: #	B286 B18 &lt;- B16  Freq: 0.999994
15b   	movq    R11, [rsp + #16]	# spill
160   	testq   R11, R11	# ptr
163   	je     B286  P=0.000001 C=-1.000000
163
169   B18: #	B82 &lt;- B17  Freq: 0.999993
169   	movl    RDI, narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469c18a170:Constant:exact *	# compressed klass ptr
16e   	decode_klass_not_null R11,RDI
17c   	movq    [rsp + #8], R11	# spill
181   	decode_klass_not_null R10,R10
185   	movq    [rsp + #24], R10	# spill
18a   	decode_klass_not_null R10,RCX
198   	movq    [rsp + #32], R10	# spill
19d   	decode_klass_not_null R10,R9
1ab   	movq    [rsp + #40], R10	# spill
1b0   	movl    [rsp + #80], RBP	# spill
1b4   	xorl    R10, R10	# int
1b7   	movl    R11, #4	# int
1bd   	movl    [rsp + #144], R10	# spill
1c5   	movl    [rsp + #148], R11	# spill
1cd   	jmp     B82
1cd
1d2   B19: #	B20 &lt;- B140  Freq: 1.54845
1d2   	movl    [rsp + #156], RBX	# spill
1d9   	movl    [rsp + #168], RBP	# spill
1d9
1e0   B20: #	B332 B21 &lt;- B222 B19  Freq: 1.56702
1e0   	movl    R11, [rsp + #104]	# spill
1e5   	decode_heap_oop_not_null R10,R11
1e8   	movq    [rsp + #160], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
1f3   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::decouple
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:103  L[0]=rsp + #96 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #108 L[6]=_ L[7]=_ STK[0]=rsp + #104 STK[1]=rsp + #108
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #72 L[1]=rsp + #64 L[2]=rsp + #88 L[3]=rsp + #84 L[4]=rsp + #88 L[5]=rsp + #84 L[6]=rsp + #140 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop [88]=Oop [96]=Oop [104]=NarrowOop [160]=Oop off=504}
1f8
1f8   B21: #	B283 B22 &lt;- B20  Freq: 1.56699
        # Block is sole successor of call
1f8   	movq    R10, [rsp + #96]	# spill
1fd   	movl    RBP, [R10 + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
201   	movl    R11, [rsp + #104]	# spill
206   	movl    R11, [R11 + #8 (8-bit)]	# compressed klass ptr
20a   	movl    R10, [rsp + #108]	# spill
20f   	cmpl    R10, [RSP + #168 (32-bit)]	# unsigned
217   	jnb,u  B283  P=0.000001 C=-1.000000
217
21d   B22: #	B285 B23 &lt;- B21  Freq: 1.56699
21d   	encode_heap_oop R8,RAX
2a8   	movslq  R10, [RSP + #108 (32-bit)]	# int -&gt; long
2ad   	cmpl    R11, narrowklass: precise klass [Ljava/lang/Object;: 0x00007f469c18da20:Constant:exact *	# compressed klass ptr
2b4   	jne,u  B285  P=0.000001 C=-1.000000
2b4
2ba   B23: #	B319 B24 &lt;- B22  Freq: 1.56698
2ba   	movl    R9, [rsp + #104]	# spill
2bf   	leaq    R11, [R9 + #16 + R10 &lt;&lt; #2]	# ptr idxscaleoffnarrow
2c4   	movq    R9, R11	# ptr -&gt; long
2c7   	movl    [R11], R8	# compressed ptr
2ca   	shrq    R9, #9
2ce   	movq    R11, 0x00007f46dbf28000	# ptr
2d8   	movb    [R11 + R9], R12	# short/char (R12_heapbase==0)
2dc   	movl    R8, [RBP + #12 (8-bit)]	# range
2e0   	NullCheck RBP
2e0
2e0   B24: #	B284 B25 &lt;- B23  Freq: 1.56698
2e0   	movl    R11, [rsp + #108]	# spill
2e5   	cmpl    R11, R8	# unsigned
2e8   	jnb,u  B284  P=0.000001 C=-1.000000
2e8
2ee   B25: #	B132 &lt;- B24  Freq: 1.56698
2ee   	movq    [RBP + #16 + R10 &lt;&lt; #3], #1	# long
2f7   	movl    RBX, [rsp + #156]	# spill
2fe   	jmp     B132
2fe
303   B26: #	B276 B27 &lt;- B126 B127  Freq: 4.20041
303   	cmpl    RDX, [RSP + #0 (32-bit)]	# unsigned
306   	jnb,u  B276  P=0.000001 C=-1.000000
306
30c   B27: #	B220 B28 &lt;- B26  Freq: 4.2004
30c   	movl    R9, [rsp + #104]	# spill
311   	movl    R9, [R9 + #16 + RDX &lt;&lt; #2]	# compressed ptr
316   	decode_heap_oop_not_null R10,R9
319   	testl   R9, R9	# compressed ptr
31c   	je     B220  P=0.000052 C=38671.000000
31c
322   B28: #	B280 B29 &lt;- B27  Freq: 4.20018
322   	movl    RBX, [R9 + #8 (8-bit)]	# compressed klass ptr
326   	cmpl    RBX, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c190630:Constant:exact *	# compressed klass ptr
32c   	jne,u  B280  P=0.000001 C=-1.000000
32c
332   B29: #	B282 B30 &lt;- B28  Freq: 4.20018
332   	# checkcastPP of R10
332   	movl    R9, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
339   	cmpq    R10, RSI	# ptr
33c   	je,u  B282  P=0.000000 C=11395.000000
33c
342   B30: #	B208 B31 &lt;- B29  Freq: 4.20018
342   	movl    R10, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
349   	cmpl    R10, RCX
34c   	jne     B208  P=0.004651 C=11395.000000
34c
352   B31: #	B208 B32 &lt;- B30  Freq: 4.18064
352   	cmpl    R9, R11
355   	jne     B208  P=0.007230 C=11342.000000
355
35b   B32: #	B128 &lt;- B31 B257  Freq: 4.151
35b   	movl    R9, RDX	# spill
35e   	jmp     B128
35e
363   B33: #	B34 &lt;- B40  top-of-loop Freq: 30290.4
363   	movl    R10, R11	# spill
363
366   B34: #	B178 B35 &lt;- B177 B33 	Loop: B34-B33 inner main of N1214 Freq: 30319.9
366   	movslq  RBP, R10	# i2l
369   	# TLS is in R15
369   	movq    R11, [R15 + #112 (8-bit)]	# ptr
36d   	movl    R9, R10	# spill
370   	addl    R9, #2	# int
374   	movl    [rsp + #4], R9	# spill
379   	movq    R8, [rsp + #88]	# spill
37e   	movl    R9, [R8 + #16 + R10 &lt;&lt; #2]	# compressed ptr
383   	movl    [rsp + #96], R9	# spill
388   	movq    R8, R11	# spill
38b   	addq    R8, #280	# ptr
392   	# TLS is in R15
392   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
399   	jnb,u  B178  P=0.000100 C=-1.000000
399
39f   B35: #	B36 &lt;- B34  Freq: 30316.8
39f   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
3a7   	# TLS is in R15
3a7   	movq    [R15 + #112 (8-bit)], R8	# ptr
3ab   	movq    RDI, R11	# spill
3ae   	addq    RDI, #16	# ptr
3b2   	movq    R8, [rsp + #8]	# spill
3b7   	movq    R8, [R8 + #176 (32-bit)]	# ptr
3be   	movq    [R11], R8	# ptr
3c1   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469c18a170:Constant:exact *	# compressed klass ptr
3c9   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
3cd   	movl    RCX, #33	# long (unsigned 32-bit)
3d2   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
3dc   	movl    [rsp + #100], R10	# spill
3dc
3e1   B36: #	B204 B37 &lt;- B179 B35  Freq: 30319.9
3e1   	movq    R10, [rsp + #88]	# spill
3e6   	movl    R10, [R10 + #20 + RBP &lt;&lt; #2]	# compressed ptr
3eb   	movl    [rsp + #104], R10	# spill
3f0   	
3f0   	MEMBAR-storestore (empty encoding)
3f0   	movq    R8, R11	# spill
3f3   	# checkcastPP of R8
3f3   	movl    R10, [rsp + #96]	# spill
3f8   	testl   R10, R10	# compressed ptr
3fb   	je     B204  P=0.000001 C=-1.000000
3fb
401   B37: #	B180 B38 &lt;- B36  Freq: 30319.8
401   	encode_heap_oop_not_null R9,R8
50c   	movl    R11, [rsp + #104]	# spill
511   	decode_heap_oop_not_null R10,R11
514   	movq    [rsp + #112], R10	# spill
519   	movl    R10, [rsp + #96]	# spill
51e   	decode_heap_oop_not_null R10,R10
51e   	movl    R11, [rsp + #100]	# spill
523   	incl    R11	# int
526   	movq    R10, R10	# ptr -&gt; long
526   	movl    RCX, [rsp + #96]	# spill
52a   	movl    [RCX + #12 (8-bit)], R9	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
52e   	shrq    R10, #9
532   	movq    R8, 0x00007f46dbf28000	# ptr
53c   	movb    [R8 + R10], R12	# short/char (R12_heapbase==0)
540   	# TLS is in R15
540   	movq    R8, [R15 + #112 (8-bit)]	# ptr
544   	movq    R10, R8	# spill
547   	addq    R10, #280	# ptr
54e   	# TLS is in R15
54e   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
555   	jnb,u  B180  P=0.000100 C=-1.000000
555
55b   B38: #	B39 &lt;- B37  Freq: 30316.8
55b   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
563   	movq    RDI, R8	# spill
566   	addq    RDI, #16	# ptr
56a   	# TLS is in R15
56a   	movq    [R15 + #112 (8-bit)], R10	# ptr
56e   	movq    R10, [rsp + #8]	# spill
573   	movq    R10, [R10 + #176 (32-bit)]	# ptr
57a   	movq    [R8], R10	# ptr
57d   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469c18a170:Constant:exact *	# compressed klass ptr
585   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
589   	movl    RCX, #33	# long (unsigned 32-bit)
58e   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
598
598   B39: #	B204 B40 &lt;- B181 B38  Freq: 30319.8
598   	
598   	MEMBAR-storestore (empty encoding)
598   	# checkcastPP of R8
598   	encode_heap_oop_not_null R11,R8
6a3   	movl    R10, [rsp + #104]	# spill
6a8   	movl    [R10 + #12 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
6ac   	NullCheck R10
6ac
6ac   B40: #	B33 B41 &lt;- B39  Freq: 30319.8
6ac   	movq    R10, [rsp + #112]	# spill
6b1   	movq    R10, R10	# ptr -&gt; long
6b1   	shrq    R10, #9
6b5   	movq    R11, 0x00007f46dbf28000	# ptr
6bf   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
6c3   	movl    R11, [rsp + #4]	# spill
6c8   	cmpl    R11, [RSP + #0 (32-bit)]
6cc   	jl     B33	# loop end  P=0.999031 C=209280.000000
6cc
6d2   B41: #	B47 B42 &lt;- B272 B40  Freq: 29.3815
6d2   	cmpl    R11, [RSP + #84 (32-bit)]
6d7   	jge     B47  P=0.500000 C=-1.000000
6d7
6dd   B42: #	B43 &lt;- B41  Freq: 14.6908
6dd   	# castII of R11
6dd   	movl    RBP, R11	# spill
6dd
6e0   B43: #	B239 B44 &lt;- B42 B46 	Loop: B43-B46 inner post of N3313 Freq: 29.3815
6e0   	movq    R10, [rsp + #88]	# spill
6e5   	movl    R10, [R10 + #16 + RBP &lt;&lt; #2]	# compressed ptr
6ea   	movl    [rsp + #0], R10	# spill
6ee   	decode_heap_oop_not_null R10,R10
6ee   	movq    [rsp + #96], R10	# spill
6f3   	# TLS is in R15
6f3   	movq    R8, [R15 + #112 (8-bit)]	# ptr
6f7   	movq    R10, R8	# spill
6fa   	addq    R10, #280	# ptr
701   	movq    RDI, R8	# spill
704   	addq    RDI, #16	# ptr
708   	# TLS is in R15
708   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
70f   	jnb,u  B239  P=0.000100 C=-1.000000
70f
715   B44: #	B45 &lt;- B43  Freq: 29.3785
715   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
71d   	# TLS is in R15
71d   	movq    [R15 + #112 (8-bit)], R10	# ptr
721   	movq    R10, [rsp + #8]	# spill
726   	movq    R10, [R10 + #176 (32-bit)]	# ptr
72d   	movq    [R8], R10	# ptr
730   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469c18a170:Constant:exact *	# compressed klass ptr
738   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
73c   	movl    RCX, #33	# long (unsigned 32-bit)
741   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
74b
74b   B45: #	B318 B46 &lt;- B240 B44  Freq: 29.3815
74b   	incl    RBP	# int
74d   	
74d   	MEMBAR-storestore (empty encoding)
74d   	# checkcastPP of R8
74d   	encode_heap_oop_not_null R11,R8
858   	movl    R9, [rsp + #0]	# spill
85c   	movl    [R9 + #12 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
860   	NullCheck R9
860
860   B46: #	B43 B47 &lt;- B45  Freq: 29.3815
860   	movq    R10, [rsp + #96]	# spill
865   	movq    R10, R10	# ptr -&gt; long
865   	shrq    R10, #9
869   	movq    R11, 0x00007f46dbf28000	# ptr
873   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
877   	cmpl    RBP, [RSP + #84 (32-bit)]
87b   	jl     B43	# loop end  P=0.500000 C=209280.000000
87b
881   B47: #	B229 B48 &lt;- B46 B41 B197 B246 B170  Freq: 29.41
881   	# TLS is in R15
881   	movq    R11, [R15 + #112 (8-bit)]	# ptr
885   	movq    R10, [rsp + #72]	# spill
88a   	movl    RCX, [R10 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
88e   	movq    R10, R11	# spill
891   	addq    R10, #48	# ptr
895   	movq    R8, [rsp + #72]	# spill
89a   	movl    R8, [R8 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.version
89e   	movl    [rsp + #84], R8	# spill
8a3   	# TLS is in R15
8a3   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
8aa   	jnb,u  B229  P=0.000100 C=-1.000000
8aa
8b0   B48: #	B49 &lt;- B47  Freq: 29.4071
8b0   	# TLS is in R15
8b0   	movq    [R15 + #112 (8-bit)], R10	# ptr
8b4   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
8bc   	movq    R10, [rsp + #40]	# spill
8c1   	movq    R10, [R10 + #176 (32-bit)]	# ptr
8c8   	movq    [R11], R10	# ptr
8cb   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f469c189f50:Constant:exact *	# compressed klass ptr
8d3   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
8d7   	movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
8db   	movq    [R11 + #24 (8-bit)], R12	# long (R12_heapbase==0)
8df   	movq    [R11 + #32 (8-bit)], R12	# long (R12_heapbase==0)
8e3   	movq    [R11 + #40 (8-bit)], R12	# long (R12_heapbase==0)
8e3
8e7   B49: #	B317 B50 &lt;- B230 B48  Freq: 29.41
8e7   	
8e7   	MEMBAR-storestore (empty encoding)
8e7   	# checkcastPP of R11
8e7   	movq    [rsp + #96], R11	# spill
8ec   	movzbl  R11, [RCX + #32 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/Control.isStopped
8f1   	NullCheck RCX
8f1
8f1   B50: #	B231 B51 &lt;- B49  Freq: 29.41
8f1   	MEMBAR-acquire ! (empty encoding)
8f1   	movq    R10, [rsp + #88]	# spill
8f6   	encode_heap_oop_not_null R10,R10
9fe   	movq    R8, [rsp + #96]	# spill
a03   	movb    [R8 + #16 (8-bit)], R11	# byte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
a07   	movq    R11, R8	# spill
a0a   	movl    [R11 + #24 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
a0e   	movl    [R11 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/infra/runners/StateHolder.countWorkers
a16   	movq    R10, R11	# ptr -&gt; long
a19   	shrq    R10, #9
a1d   	movq    R11, 0x00007f46dbf28000	# ptr
a27   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
a2b   	# TLS is in R15
a2b   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
a2f   	movq    R10, RAX	# spill
a32   	addq    R10, #16	# ptr
a36   	# TLS is in R15
a36   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
a3d   	jnb,u  B231  P=0.000100 C=-1.000000
a3d
a43   B51: #	B52 &lt;- B50  Freq: 29.4071
a43   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
a4b   	# TLS is in R15
a4b   	movq    [R15 + #112 (8-bit)], R10	# ptr
a4f   	movq    R10, [rsp + #24]	# spill
a54   	movq    R10, [R10 + #176 (32-bit)]	# ptr
a5b   	movq    [RAX], R10	# ptr
a5e   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c18a240:Constant:exact *	# compressed klass ptr
a65   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
a65
a69   B52: #	B233 B53 &lt;- B232 B51  Freq: 29.41
a69   	movl    R11, [rsp + #84]	# spill
a6e   	decode_heap_oop_not_null R8,R11
a71   	
a71   	MEMBAR-storestore (empty encoding)
a71   	# checkcastPP of RAX
a71   	encode_heap_oop_not_null R11,RAX
b7c   	MEMBAR-release ! (empty encoding)
b7c   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
b83   	lock addl [rsp + #0], 0	! membar_volatile
b88   	movq    R10, [rsp + #96]	# spill
b8d   	movq    R10, R10	# ptr -&gt; long
b8d   	movq    R9, [rsp + #96]	# spill
b92   	movl    [R9 + #32 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
b96   	shrq    R10, #9
b9a   	movq    R11, 0x00007f46dbf28000	# ptr
ba4   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
ba8   	# TLS is in R15
ba8   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
bac   	movq    R10, RAX	# spill
baf   	addq    R10, #16	# ptr
bb3   	# TLS is in R15
bb3   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
bba   	jnb,u  B233  P=0.000100 C=-1.000000
bba
bc0   B53: #	B54 &lt;- B52  Freq: 29.4071
bc0   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
bc8   	# TLS is in R15
bc8   	movq    [R15 + #112 (8-bit)], R10	# ptr
bcc   	movq    R10, [rsp + #24]	# spill
bd1   	movq    R10, [R10 + #176 (32-bit)]	# ptr
bd8   	movq    [RAX], R10	# ptr
bdb   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c18a240:Constant:exact *	# compressed klass ptr
be2   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
be2
be6   B54: #	B235 B55 &lt;- B234 B53  Freq: 29.41
be6   	
be6   	MEMBAR-storestore (empty encoding)
be6   	# checkcastPP of RAX
be6   	encode_heap_oop_not_null R10,RAX
cf1   	MEMBAR-release ! (empty encoding)
cf1   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
cf8   	lock addl [rsp + #0], 0	! membar_volatile
cfd   	movq    R11, [rsp + #96]	# spill
d02   	movq    R11, R11	# ptr -&gt; long
d02   	movq    R9, [rsp + #96]	# spill
d07   	movl    [R9 + #28 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
d0b   	shrq    R11, #9
d0f   	movq    R10, 0x00007f46dbf28000	# ptr
d19   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
d1d   	# TLS is in R15
d1d   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
d21   	movq    R10, RAX	# spill
d24   	addq    R10, #16	# ptr
d28   	# TLS is in R15
d28   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
d2f   	jnb,u  B235  P=0.000100 C=-1.000000
d2f
d35   B55: #	B56 &lt;- B54  Freq: 29.4071
d35   	# TLS is in R15
d35   	movq    [R15 + #112 (8-bit)], R10	# ptr
d39   	movq    R11, [rsp + #24]	# spill
d3e   	movq    R11, [R11 + #176 (32-bit)]	# ptr
d45   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
d4d   	movq    [RAX], R11	# ptr
d50   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c18a240:Constant:exact *	# compressed klass ptr
d57   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
d57
d5b   B56: #	B237 B57 &lt;- B236 B55  Freq: 29.41
d5b   	
d5b   	movq    R10, [rsp + #96]	# spill
d60   	encode_heap_oop_not_null RBP,R10
e6b   	MEMBAR-storestore (empty encoding)
e6b   	# checkcastPP of RAX
e6b   	encode_heap_oop_not_null R11,RAX
f76   	MEMBAR-release ! (empty encoding)
f76   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
f7d   	lock addl [rsp + #0], 0	! membar_volatile
f82   	movl    [R10 + #36 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
f86   	movq    R10, R10	# ptr -&gt; long
f86   	shrq    R10, #9
f8a   	movq    R11, 0x00007f46dbf28000	# ptr
f94   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
f98   	# TLS is in R15
f98   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
f9c   	movq    R10, RAX	# spill
f9f   	addq    R10, #16	# ptr
fa3   	# TLS is in R15
fa3   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
faa   	jnb,u  B237  P=0.000100 C=-1.000000
faa
fb0   B57: #	B58 &lt;- B56  Freq: 29.4071
fb0   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
fb8   	# TLS is in R15
fb8   	movq    [R15 + #112 (8-bit)], R10	# ptr
fbc   	movq    R10, [rsp + #24]	# spill
fc1   	movq    R10, [R10 + #176 (32-bit)]	# ptr
fc8   	movq    [RAX], R10	# ptr
fcb   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c18a240:Constant:exact *	# compressed klass ptr
fd2   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
fd2
fd6   B58: #	B273 B59 &lt;- B238 B57  Freq: 29.41
fd6   	
fd6   	MEMBAR-storestore (empty encoding)
fd6   	# checkcastPP of RAX
fd6   	encode_heap_oop_not_null R11,RAX
10e1   	MEMBAR-release ! (empty encoding)
10e1   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
10e8   	MEMBAR-volatile (unnecessary so empty encoding)
10e8   	movq    R10, [rsp + #96]	# spill
10ed   	movq    R10, R10	# ptr -&gt; long
10ed   	movq    R9, [rsp + #96]	# spill
10f2   	movl    [R9 + #40 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
10f6   	shrq    R10, #9
10fa   	movq    R11, 0x00007f46dbf28000	# ptr
1104   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
1108   	MEMBAR-release ! (empty encoding)
1108   	movb    [R9 + #18 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
110d   	MEMBAR-volatile (unnecessary so empty encoding)
110d   	MEMBAR-release ! (empty encoding)
110d   	movb    [R9 + #19 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
1112   	MEMBAR-volatile (unnecessary so empty encoding)
1112   	MEMBAR-release ! (empty encoding)
1112   	movb    [R9 + #17 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
1117   	MEMBAR-volatile (unnecessary so empty encoding)
1117   	MEMBAR-release ! (empty encoding)
1117   	movb    [R9 + #20 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
111c   	lock addl [rsp + #0], 0	! membar_volatile
1121   	MEMBAR-release ! (empty encoding)
1121   	movl    R10, [rsp + #84]	# spill
1126   	testl   R10, R10	# compressed ptr
1129   	je     B273  P=0.000001 C=-1.000000
1129
112f   B59: #	B60 &lt;- B58  Freq: 29.41
112f   	MEMBAR-release ! (empty encoding)
112f   	movq    R10, R8	# ptr -&gt; long
1132   	movl    R8, [rsp + #84]	# spill
1137   	movl    [R8 + #12 (8-bit)], RBP	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
113b   	shrq    R10, #9
113f   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
1143   	lock addl [rsp + #0], 0	! membar_volatile
1148
1148   B60: #	B274 B61 &lt;- B59 B114  Freq: 35.91
1148   	movq    R10, [rsp + #56]	# spill
114d   	movl    RBP, [R10 + #12 (8-bit)]	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
1151   	MEMBAR-acquire ! (empty encoding)
1151   	movl    R11, [rsp + #52]	# spill
1156   	cmpl    R11, RBP
1159   	jne     B274  P=0.000000 C=73.000000
1159
115f   B61: #	B261 B62 &lt;- B60  Freq: 35.91
115f   	movq    R10, [rsp + #64]	# spill
1164   	movl    R11, [R10 + #40 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
1168   	testl   R11, R11	# compressed ptr
116b   	je     B261  P=0.000001 C=-1.000000
116b
1171   B62: #	B64 B63 &lt;- B61  Freq: 35.9099
1171   	MEMBAR-release ! (empty encoding)
1171   	
1171   	movl    R8, #-1	# int
1177   	XADDL  [[R11 + #12 (8-bit)]],R8
117d   	decl    R8	# int
1180   	
1180   	MEMBAR-acquire ! (empty encoding)
1180   	testl   R8, R8
1183   	jne,s   B64  P=0.502075 C=241.000000
1183
1185   B63: #	B64 &lt;- B62  Freq: 17.8805
1185   	MEMBAR-release ! (empty encoding)
1185   	movb    [R10 + #20 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1189   	lock addl [rsp + #0], 0	! membar_volatile
118e
118e   B64: #	B67 B65 &lt;- B62 B63  Freq: 35.9099
118e   	movzbl  R10, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1193   	MEMBAR-acquire ! (empty encoding)
1193   	testl   R10, R10
1196   	je,s   B67  P=0.000074 C=2941144.000000
1196
1198   B65: #	B264 B66 &lt;- B64  Freq: 35.9073
1198   	movl    R10, [rsp + #48]	# spill
119d   	testl   R10, R10
11a0   	jne     B264  P=0.000001 C=-1.000000
      	nop 	# 10 bytes pad for loops and calls

11b0   B66: #	B66 B67 &lt;- B65 B66 	Loop: B66-B66 inner  Freq: 484263
11b0   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=rsp + #64 L[1]=rsp + #48 STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=rsp + #72 L[1]=rsp + #52 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop off=4528}
11b6   	movq    R10, [rsp + #64]	# spill
11bb   	movzbl  R10, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
11c0   	MEMBAR-acquire ! (empty encoding)
11c0   	testl   R10, R10
11c3   	jne,s   B66  P=0.999926 C=2941144.000000
11c3
11c5   B67: #	B314 B68 &lt;- B66 B64  Freq: 35.9099
11c5   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:160  L[0]=rsp + #72 L[1]=rsp + #52 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [72]=Oop off=4549}
11cb   	movq    R10, [rsp + #16]	# spill
11d0   	movl    RBP, [R10 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
11d4   	MEMBAR-acquire ! (empty encoding)
11d4   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
11d8   	NullCheck RBP
11d8
11d8   B68: #	B300 B69 &lt;- B67  Freq: 35.9099
11d8   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f469c189f50:Constant:exact *	# compressed klass ptr
11df   	jne,u  B300  P=0.000000 C=-1.000000
11df
11e5   B69: #	B275 B70 &lt;- B68  Freq: 35.9099
11e5   	decode_heap_oop_not_null R10,RBP
11e8   	# checkcastPP of R10
11e8   	movq    [rsp + #64], R10	# spill
11ed   	movzbl  R11, [R10 + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
11f2   	movl    R10, [R10 + #32 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
11f6   	movq    R8, [rsp + #64]	# spill
11fb   	movl    RBP, [R8 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
11ff   	testl   R11, R11
1202   	jne     B275  P=0.000000 C=72.000000
1202
1208   B70: #	B315 B71 &lt;- B69  Freq: 35.9098
1208   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
120c   	NullCheck RBP
120c
120c   B71: #	B301 B72 &lt;- B70  Freq: 35.9098
120c   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f469c18a020:Constant:exact *	# compressed klass ptr
1213   	jne,u  B301  P=0.000000 C=-1.000000
1213
1219   B72: #	B262 B73 &lt;- B71  Freq: 35.9098
1219   	testl   R10, R10	# compressed ptr
121c   	je     B262  P=0.000001 C=-1.000000
121c
1222   B73: #	B75 B74 &lt;- B72  Freq: 35.9098
1222   	decode_heap_oop_not_null R14,RBP
1225   	MEMBAR-release ! (empty encoding)
1225   	
1225   	movl    R11, #-1	# int
122b   	XADDL  [[R10 + #12 (8-bit)]],R11
1231   	decl    R11	# int
1234   	
1234   	MEMBAR-acquire ! (empty encoding)
1234   	testl   R11, R11
1237   	jne,s   B75  P=0.497143 C=175.000000
1237
1239   B74: #	B75 &lt;- B73  Freq: 18.0575
1239   	MEMBAR-release ! (empty encoding)
1239   	movq    R10, R8	# spill
123c   	movb    [R10 + #18 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
1240   	lock addl [rsp + #0], 0	! membar_volatile
1245
1245   B75: #	B78 B76 &lt;- B73 B74  Freq: 35.9098
1245   	# checkcastPP of R14
1245   	movq    R10, R8	# spill
1248   	movzbl  R11, [R10 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
124d   	MEMBAR-acquire ! (empty encoding)
124d   	testl   R11, R11
1250   	je,s   B78  P=0.000796 C=192265.000000
1250
1252   B76: #	B265 B77 &lt;- B75  Freq: 35.8812
1252   	movl    R10, [rsp + #48]	# spill
1257   	testl   R10, R10
125a   	jne     B265  P=0.000001 C=-1.000000
125a
1260   B77: #	B77 B78 &lt;- B76 B77 	Loop: B77-B77 inner  Freq: 45089.2
1260   	movq    R10, [rsp + #64]	# spill
1265   	movzbl  R10, [R10 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
126a   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=rsp + #64 L[1]=rsp + #48 STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=rsp + #72 L[1]=rsp + #52 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=R14 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{r14=Oop [16]=Oop [56]=Oop [64]=Oop [72]=Oop off=4714}
1270   	MEMBAR-acquire ! (empty encoding)
1270   	testl   R10, R10
1273   	jne,s   B77  P=0.999204 C=192265.000000
1273
1275   B78: #	B263 B79 &lt;- B77 B75  Freq: 35.9097
1275   	movq    R10, [rsp + #64]	# spill
127a   	movl    R11, [R10 + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
127e   	movl    RBX, [R14 + #12 (8-bit)]	# range
1282   	testl   R11, R11	# compressed ptr
1285   	je     B263  P=0.000001 C=-1.000000
1285
128b   B79: #	B81 B80 &lt;- B78  Freq: 35.9097
128b   	MEMBAR-release ! (empty encoding)
128b   	
128b   	movl    R8, #-1	# int
1291   	XADDL  [[R11 + #12 (8-bit)]],R8
1297   	decl    R8	# int
129a   	
129a   	MEMBAR-acquire ! (empty encoding)
129a   	testl   R8, R8
129d   	jne,s   B81  P=0.500000 C=176.000000
129d
129f   B80: #	B81 &lt;- B79  Freq: 17.9548
129f   	MEMBAR-release ! (empty encoding)
129f   	movb    [R10 + #17 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
12a3   	lock addl [rsp + #0], 0	! membar_volatile
12a8
12a8   B81: #	B82 &lt;- B80 B79  Freq: 35.9097
12a8   	movl    R10, [rsp + #52]	# spill
12ad   	movl    [rsp + #80], R10	# spill
12b2   	xorl    R13, R13	# int
12b5   	movl    R8, #1	# int
12b5
12bb   B82: #	B106 B83 &lt;- B18 B81 	Loop: B82-B81  Freq: 36.9101
12bb   	movl    R11, [rsp + #80]	# spill
12c0   	incl    R11	# int
12c3   	movl    [rsp + #52], R11	# spill
12c8   	cmpl    R13, RBX
12cb   	jge     B106  P=0.000543 C=134528.000000
12cb
12d1   B83: #	B84 &lt;- B82  Freq: 36.89
12d1   	cmpl    R8, RBX
12d4   	cmovlgt R8, RBX	# min
12d4
12d8   B84: #	B312 B85 &lt;- B83 B89 	Loop: B84-B89 inner pre of N3640 Freq: 73.7797
12d8   	movl    RCX, [R14 + #12 (8-bit)]	# range
12dc   	NullCheck R14
12dc
12dc   B85: #	B258 B86 &lt;- B84  Freq: 73.7796
12dc   	cmpl    R13, RCX	# unsigned
12df   	jnb,u  B258  P=0.000001 C=-1.000000
12df
12e5   B86: #	B302 B87 &lt;- B85  Freq: 73.7795
12e5   	movl    R11, [R14 + #16 + R13 &lt;&lt; #2]	# compressed ptr
12ea   	movl    R10, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
12ee   	NullCheck R11
12ee
12ee   B87: #	B303 B88 &lt;- B86  Freq: 73.7795
12ee   	movl    RDI, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
12f2   	cmpl    RBX, RCX
12f4   	movl    R11, RBX	# spill
12f7   	cmovlgt R11, RCX	# min
12fb   	movl    RDX, [R10 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
1302   	NullCheck R10
1302
1302   B88: #	B304 B89 &lt;- B87  Freq: 73.7794
1302   	movl    R9, [R10 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
1306   	incl    R13	# int
1309   	movl    [RDI + #140 (32-bit)], RDX	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
130f   	NullCheck RDI
130f
130f   B89: #	B84 B90 &lt;- B88  Freq: 73.7793
130f   	movl    [RDI + #272 (32-bit)], R9	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1316   	movl    RSI, R11	# spill
1319   	decl    RSI	# int
131b   	cmpl    R13, R8
131e   	jl,s   B84	# loop end  P=0.500000 C=134528.000000
131e
1320   B90: #	B99 B91 &lt;- B89  Freq: 36.8897
1320   	cmpl    R11, RSI
1323   	movl    R11, #-2147483648	# int
1329   	cmovll RSI, R11	# signed, int
132d   	cmpl    R13, RSI
1330   	jge,s   B99  P=0.000001 C=-1.000000
1330
1332   B91: #	B92 &lt;- B90  Freq: 36.8896
1332   	# castII of R13
1332
1332   B92: #	B302 B93 &lt;- B91 B98 	Loop: B92-B98 inner main of N799 Freq: 67228.9
1332   	movl    R10, [R14 + #16 + R13 &lt;&lt; #2]	# compressed ptr
1337   	movslq  R11, R13	# i2l
133a   	movl    R11, [R14 + #20 + R11 &lt;&lt; #2]	# compressed ptr
133f   	movl    R9, [R10 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
1343   	NullCheck R10
1343
1343   B93: #	B303 B94 &lt;- B92  Freq: 67228.8
1343   	addl    R13, #2	# int
1347   	movl    RDI, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
134b   	movl    RDX, [R9 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
1352   	NullCheck R9
1352
1352   B94: #	B304 B95 &lt;- B93  Freq: 67228.7
1352   	movl    R10, [R9 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
1356   	movl    [RDI + #140 (32-bit)], RDX	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
135c   	NullCheck RDI
135c
135c   B95: #	B302 B96 &lt;- B94  Freq: 67228.7
135c   	movl    [RDI + #272 (32-bit)], R10	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1363   	movl    R8, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
1367   	NullCheck R11
1367
1367   B96: #	B303 B97 &lt;- B95  Freq: 67228.6
1367   	movl    RDI, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
136b   	movl    RDX, [R8 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
1372   	NullCheck R8
1372
1372   B97: #	B304 B98 &lt;- B96  Freq: 67228.5
1372   	movl    R10, [R8 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
1376   	movl    [RDI + #140 (32-bit)], RDX	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
137c   	NullCheck RDI
137c
137c   B98: #	B92 B99 &lt;- B97  Freq: 67228.5
137c   	movl    [RDI + #272 (32-bit)], R10	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1383   	cmpl    R13, RSI
1386   	jl,s   B92	# loop end  P=0.999457 C=134528.000000
1386
1388   B99: #	B106 B100 &lt;- B90 B98  Freq: 36.4809
1388   	cmpl    R13, RBX
138b   	jge,s   B106  P=0.500000 C=-1.000000
138b
138d   B100: #	B101 &lt;- B99  Freq: 18.2405
138d   	# castII of R13
      	nop 	# 3 bytes pad for loops and calls

1390   B101: #	B258 B102 &lt;- B100 B105 	Loop: B101-B105 inner post of N3640 Freq: 36.4808
1390   	cmpl    R13, RCX	# unsigned
1393   	jnb,u  B258  P=0.000001 C=-1.000000
1393
1399   B102: #	B302 B103 &lt;- B101  Freq: 36.4807
1399   	movl    R10, [R14 + #16 + R13 &lt;&lt; #2]	# compressed ptr
139e   	movl    R8, [R10 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
13a2   	NullCheck R10
13a2
13a2   B103: #	B303 B104 &lt;- B102  Freq: 36.4807
13a2   	movl    RDI, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
13a6   	movl    RDX, [R8 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
13ad   	NullCheck R8
13ad
13ad   B104: #	B304 B105 &lt;- B103  Freq: 36.4807
13ad   	movl    [RDI + #140 (32-bit)], RDX	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
13b3   	NullCheck RDI
13b3
13b3   B105: #	B101 B106 &lt;- B104  Freq: 36.4806
13b3   	movl    R10, [R8 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
13b7   	movl    [RDI + #272 (32-bit)], R10	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
13be   	incl    R13	# int
13c1   	cmpl    R13, RBX
13c4   	jl,s   B101	# loop end  P=0.500000 C=134528.000000
13c4
13c6   B106: #	B313 B107 &lt;- B82 B105 B99  Freq: 36.5008
13c6   	movq    R10, [rsp + #64]	# spill
13cb   	movl    R11, [R10 + #36 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
13cf   	NullCheck R10
13cf
13cf   B107: #	B259 B108 &lt;- B106  Freq: 36.5008
13cf   	testl   R11, R11	# compressed ptr
13d2   	je     B259  P=0.000001 C=-1.000000
13d2
13d8   B108: #	B336 B109 &lt;- B107  Freq: 36.5007
13d8   	decode_heap_oop_not_null RSI,R11
13db   	movl    RBP, [rsp + #48]	# spill
13df   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=rsp + #64 L[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=RBP L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop off=5092}
13e4
13e4   B109: #	B111 B110 &lt;- B108  Freq: 36.5
        # Block is sole successor of call
13e4   	testl   RAX, RAX
13e6   	jne,s   B111  P=0.492537 C=67.000000
13e6
13e8   B110: #	B111 &lt;- B109  Freq: 18.5224
13e8   	MEMBAR-release ! (empty encoding)
13e8   	movq    R10, [rsp + #64]	# spill
13ed   	movb    [R10 + #19 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
13f1   	lock addl [rsp + #0], 0	! membar_volatile
13f6
13f6   B111: #	B114 B112 &lt;- B110 B109  Freq: 36.5
13f6   	movq    R10, [rsp + #64]	# spill
13fb   	movzbl  R11, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
1400   	MEMBAR-acquire ! (empty encoding)
1400   	movzbl  R10, [R10 + #17 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
1405   	orl     R11, R10	# int
1408   	MEMBAR-acquire ! (empty encoding)
1408   	MEMBAR-release ! (empty encoding)
1408   	movq    R10, [rsp + #64]	# spill
140d   	movb    [R10 + #21 (8-bit)], R11	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
1411   	lock addl [rsp + #0], 0	! membar_volatile
1416   	movzbl  R11, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
141b   	MEMBAR-acquire ! (empty encoding)
141b   	testl   R11, R11
141e   	je,s   B114  P=0.000477 C=136189.000000
141e
1420   B112: #	B260 B113 &lt;- B111  Freq: 36.4826
1420   	movl    R11, RBP	# spill
1423   	testl   R11, R11
1426   	jne     B260  P=0.000001 C=-1.000000
      	nop 	# 4 bytes pad for loops and calls

1430   B113: #	B113 B114 &lt;- B112 B113 	Loop: B113-B113 inner  Freq: 76442.6
1430   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=rsp + #64 L[1]=rsp + #48 STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop off=5168}
1436   	movq    R10, [rsp + #64]	# spill
143b   	movzbl  R11, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
1440   	MEMBAR-acquire ! (empty encoding)
1440   	testl   R11, R11
1443   	jne,s   B113  P=0.999523 C=136189.000000
1443
1445   B114: #	B60 B115 &lt;- B113 B111  Freq: 36.5
1445   	MEMBAR-release ! (empty encoding)
1445   	
1445   	movq    R10, [rsp + #56]	# spill
144a   	movl    RAX, [rsp + #80]	# spill
144e   	movl    R11, [rsp + #52]	# spill
1453   	cmpxchgl [R10 + #12 (8-bit)],R11	# If rax == [R10 + #12 (8-bit)] then store R11 into [R10 + #12 (8-bit)]
	sete    R11
	movzbl  R11, R11
1461   	
1461   	MEMBAR-acquire ! (empty encoding)
1461   	testl   R11, R11
1464   	je     B60  P=0.178082 C=73.000000
1464
146a   B115: #	B266 B116 &lt;- B114  Freq: 30
146a   	movq    R10, [rsp + #64]	# spill
146f   	movl    RBP, [R10 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
1473   	movq    R10, [rsp + #72]	# spill
1478   	testq   R10, R10	# ptr
147b   	je     B266  P=0.000001 C=-1.000000
147b
1481   B116: #	B316 B117 &lt;- B115  Freq: 29.9999
1481   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
1485   	NullCheck RBP
1485
1485   B117: #	B298 B118 &lt;- B116  Freq: 29.9999
1485   	decode_heap_oop_not_null R11,RBP
1488   	cmpl    R10, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f469c18a020:Constant:exact *	# compressed klass ptr
148f   	jne,u  B298  P=0.000000 C=-1.000000
148f
1495   B118: #	B146 B119 &lt;- B117  Freq: 29.9999
1495   	# checkcastPP of R11
1495   	movq    [rsp + #88], R11	# spill
149a   	movl    R10, [R11 + #12 (8-bit)]	# range
149e   	movl    [rsp + #84], R10	# spill
14a3   	movl    R11, R10	# spill
14a6   	decl    R11	# int
14a9   	movl    [rsp + #152], R11	# spill
14b1   	testl   R10, R10
14b4   	jle     B146  P=0.000992 C=204683.000000
14b4
14ba   B119: #	B267 B120 &lt;- B118  Freq: 29.9702
14ba   	testl  R10, R10	# unsigned
14bd   	jbe,u  B267  P=0.000001 C=-1.000000
14bd
14c3   B120: #	B267 B121 &lt;- B119  Freq: 29.9701
14c3   	movl    R10, [rsp + #152]	# spill
14cb   	cmpl    R10, [RSP + #84 (32-bit)]	# unsigned
14d0   	jnb,u  B267  P=0.000001 C=-1.000000
14d0
14d6   B121: #	B134 &lt;- B120  Freq: 29.9701
14d6   	xorl    R10, R10	# int
14d9   	movl    [rsp + #140], R10	# spill
14e1   	jmp     B134
14e1
14e6   B122: #	B249 B123 &lt;- B143 B145  top-of-loop Freq: 354.564
14e6   	movl    R13, RDX	# spill
14e9   	incl    R13	# int
14ec   	andl    R13, R8	# int
14ef   	cmpl    R9, RBP	# unsigned
14f2   	jnb,u  B249  P=0.000001 C=-1.000000
14f2
14f8   B123: #	B222 B124 &lt;- B122  Freq: 354.564
14f8   	movl    R10, [rsp + #104]	# spill
14fd   	movl    RAX, [R10 + #16 + R9 &lt;&lt; #2]	# compressed ptr
1502   	testl   RAX, RAX	# compressed ptr
1504   	je     B222  P=0.000052 C=38671.000000
1504
150a   B124: #	B216 B125 &lt;- B123  Freq: 354.546
150a   	movl    [rsp + #0], RBP	# spill
150d   	movl    RBP, RBX	# spill
150f   	decode_heap_oop_not_null R10,RAX
1512   	movl    RAX, [RAX + #8 (8-bit)]	# compressed klass ptr
1515   	cmpl    RAX, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c190630:Constant:exact *	# compressed klass ptr
151b   	jne,u  B216  P=0.000001 C=-1.000000
151b
1521   B125: #	B223 B126 &lt;- B124  Freq: 354.545
1521   	# checkcastPP of R10
1521   	movl    RBX, R13	# spill
1524   	incl    RBX	# int
1526   	movdl   XMM0, RBX	# spill
152a   	movl    RBX, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1531   	cmpq    R10, RSI	# ptr
1534   	je,u  B223  P=0.000000 C=11395.000000
1534
153a   B126: #	B26 B127 &lt;- B125  Freq: 354.545
153a   	movl    RAX, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1541   	cmpl    RBX, RCX
1543   	jne     B26  P=0.004651 C=11395.000000
1543
1549   B127: #	B26 B128 &lt;- B126  Freq: 352.896
1549   	cmpl    RAX, R11
154c   	jne     B26  P=0.007230 C=11342.000000
154c
1552   B128: #	B129 &lt;- B127 B214 B32  Freq: 354.545
1552   	movl    [rsp + #108], R9	# spill
1557   	movl    RBX, RBP	# spill
      	nop 	# 7 bytes pad for loops and calls

1560   B129: #	B311 B130 &lt;- B144 B128  top-of-loop Freq: 29927.8
1560   	movl    R11, [RDI + #12 (8-bit)]	# range
1564   	NullCheck RDI
1564
1564   B130: #	B207 B131 &lt;- B129  Freq: 29927.8
1564   	movl    R10, [rsp + #108]	# spill
1569   	cmpl    R10, R11	# unsigned
156c   	jnb,u  B207  P=0.000001 C=-1.000000
156c
1572   B131: #	B132 &lt;- B130  Freq: 29927.8
1572   	incq    [RDI + #16 + R10 &lt;&lt; #3]	# long
1577
1577   B132: #	B146 B133 &lt;- B131 B25  Freq: 29929.3
1577   	cmpl    RBX, [RSP + #84 (32-bit)]
157b   	jge     B146	# loop end  P=0.000992 C=204480.000000
157b
1581   B133: #	B134 &lt;- B132  Freq: 29899.6
1581   	movl    [rsp + #140], RBX	# spill
1581
1588   B134: #	B307 B135 &lt;- B121 B133 	Loop: B134-B133 inner  Freq: 29929.6
1588   	movq    R10, [rsp + #72]	# spill
158d   	movl    R8, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.counter
1591   	movq    R10, [rsp + #88]	# spill
1596   	movl    R9, [rsp + #140]	# spill
159e   	movl    R11, [R10 + #16 + R9 &lt;&lt; #2]	# compressed ptr
15a3   	movl    R14, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
15a7   	NullCheck R11
15a7
15a7   B135: #	B308 B136 &lt;- B134  Freq: 29929.6
15a7   	movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
15ab   	NullCheck R8
15ab
15ab   B136: #	B215 B137 &lt;- B135  Freq: 29929.6
15ab   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/util/OpenAddressHashCounter: 0x00007f469c1b8f60:Constant:exact *	# compressed klass ptr
15b2   	jne,u  B215  P=0.000001 C=-1.000000
15b2
15b8   B137: #	B309 B138 &lt;- B136  Freq: 29929.5
15b8   	decode_heap_oop_not_null R10,R8
15bb   	# checkcastPP of R10
15bb   	movq    [rsp + #96], R10	# spill
15c0   	movl    RBX, [rsp + #140]	# spill
15c7   	incl    RBX	# int
15c9   	movl    R8, [R10 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.length
15cd   	movl    R11, [R14 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
15d4   	NullCheck R14
15d4
15d4   B138: #	B310 B139 &lt;- B137  Freq: 29929.5
15d4   	movl    RCX, [R14 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
15db   	decl    R8	# int
15de   	movl    R9, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.keys
15e2   	movl    [rsp + #104], R9	# spill
15e7   	movl    R10, RCX	# spill
15ea   	sall    R10, #5
15ee   	subl    R10, RCX	# int
15f1   	addl    R10, R11	# int
15f4   	andl    R10, R8	# int
15f7   	movl    [rsp + #108], R10	# spill
15fc   	movl    RBP, [R9 + #12 (8-bit)]	# range
1600   	NullCheck R9
1600
1600   B139: #	B206 B140 &lt;- B138  Freq: 29929.5
1600   	movl    R9, R10	# spill
1603   	incl    R9	# int
1606   	andl    R9, R8	# int
1609   	decode_heap_oop_not_null RSI,R14
160c   	movl    RDX, R9	# spill
160f   	incl    RDX	# int
1611   	cmpl    R10, RBP	# unsigned
1614   	jnb,u  B206  P=0.000001 C=-1.000000
1614
161a   B140: #	B19 B141 &lt;- B139  Freq: 29929.4
161a   	movl    R10, [rsp + #104]	# spill
161f   	movl    RDI, [rsp + #108]	# spill
1623   	movl    R10, [R10 + #16 + RDI &lt;&lt; #2]	# compressed ptr
1628   	andl    RDX, R8	# int
162b   	testl   R10, R10	# compressed ptr
162e   	je     B19  P=0.000052 C=38671.000000
162e
1634   B141: #	B219 B142 &lt;- B140  Freq: 29927.9
1634   	movl    RAX, [R10 + #8 (8-bit)]	# compressed klass ptr
1638   	decode_heap_oop_not_null R10,R10
1638   	cmpl    RAX, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c190630:Constant:exact *	# compressed klass ptr
163e   	jne,u  B219  P=0.000001 C=-1.000000
163e
1644   B142: #	B226 B143 &lt;- B141  Freq: 29927.9
1644   	# checkcastPP of R10
1644   	movl    R13, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
164b   	cmpq    R10, RSI	# ptr
164e   	je,u  B226  P=0.000000 C=11395.000000
164e
1654   B143: #	B122 B144 &lt;- B142  Freq: 29927.8
1654   	movq    RDI, [rsp + #96]	# spill
1659   	movl    RDI, [RDI + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
165c   	cmpl    R13, RCX
165f   	jne     B122  P=0.004651 C=11395.000000
165f
1665   B144: #	B129 B145 &lt;- B143  Freq: 29788.6
1665   	movl    RAX, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
166c   	cmpl    RAX, R11
166f   	je     B129  P=0.992770 C=11342.000000
166f
1675   B145: #	B122 &lt;- B144  Freq: 215.364
1675   	jmp     B122
1675
167a   B146: #	B182 B147 &lt;- B132 B118  Freq: 29.7125
167a   	movq    R10, [rsp + #64]	# spill
167f   	movzbl  R10, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
1684   	MEMBAR-acquire ! (empty encoding)
1684   	testl   R10, R10
1687   	jne     B182  P=0.019704 C=203.000000
1687
168d   B147: #	B148 &lt;- B146  Freq: 29.127
168d   	movl    R10, [rsp + #84]	# spill
1692   	movl    [rsp + #128], R10	# spill
1692
169a   B148: #	B169 B149 &lt;- B147 B183  Freq: 29.7125
169a   	movl    R10, [rsp + #84]	# spill
169f   	testl   R10, R10
16a2   	jle     B169  P=0.000992 C=204683.000000
16a2
16a8   B149: #	B268 B150 &lt;- B148  Freq: 29.683
16a8   	testl  R10, R10	# unsigned
16ab   	jbe,u  B268  P=0.000001 C=-1.000000
16ab
16b1   B150: #	B268 B151 &lt;- B149  Freq: 29.683
16b1   	movl    R11, [rsp + #152]	# spill
16b9   	cmpl    R11, R10	# unsigned
16bc   	jnb,u  B268  P=0.000001 C=-1.000000
16bc
16c2   B151: #	B305 B152 &lt;- B150  Freq: 29.683
16c2   	movl    RBX, R10	# spill
16c5   	addl    RBX, #-3	# int
16c8   	movq    R10, [rsp + #88]	# spill
16cd   	movl    R11, [R10 + #16 (8-bit)]	# compressed ptr
16d1   	movl    R10, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
16d5   	NullCheck R11
16d5
16d5   B152: #	B306 B153 &lt;- B151  Freq: 29.683
16d5   	movl    R11, [rsp + #152]	# spill
16dd   	cmpl    R11, RBX
16e0   	movl    R11, #-2147483648	# int
16e6   	cmovll RBX, R11	# signed, int
16ea   	movl    [R10 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
16f1   	NullCheck R10
16f1
16f1   B153: #	B269 B154 &lt;- B152  Freq: 29.6829
16f1   	movl    [R10 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
16f8   	cmpl    RBX, #1
16fb   	jle     B269  P=0.000001 C=-1.000000
16fb
1701   B154: #	B155 &lt;- B153  Freq: 29.6829
1701   	movl    RDI, #1	# int
      	nop 	# 10 bytes pad for loops and calls

1710   B155: #	B305 B156 &lt;- B154 B163 	Loop: B155-B163 inner main of N1142 Freq: 29687.1
1710   	movq    R10, [rsp + #88]	# spill
1715   	movl    R11, [R10 + #16 + RDI &lt;&lt; #2]	# compressed ptr
171a   	movslq  R10, RDI	# i2l
171d   	movq    R8, [rsp + #88]	# spill
1722   	movl    R8, [R8 + #20 + R10 &lt;&lt; #2]	# compressed ptr
1727   	movl    R9, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
172b   	NullCheck R11
172b
172b   B156: #	B306 B157 &lt;- B155  Freq: 29687
172b   	movl    [R9 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1732   	NullCheck R9
1732
1732   B157: #	B305 B158 &lt;- B156  Freq: 29687
1732   	movl    [R9 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1739   	movl    R11, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
173d   	NullCheck R8
173d
173d   B158: #	B306 B159 &lt;- B157  Freq: 29687
173d   	movq    R8, [rsp + #88]	# spill
1742   	movl    R9, [R8 + #24 + R10 &lt;&lt; #2]	# compressed ptr
1747   	movl    [R11 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
174e   	NullCheck R11
174e
174e   B159: #	B305 B160 &lt;- B158  Freq: 29686.9
174e   	movl    [R11 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1755   	movl    R11, [R9 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1759   	NullCheck R9
1759
1759   B160: #	B306 B161 &lt;- B159  Freq: 29686.9
1759   	movl    R8, [R8 + #28 + R10 &lt;&lt; #2]	# compressed ptr
175e   	addl    RDI, #4	# int
1761   	movl    [R11 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1768   	NullCheck R11
1768
1768   B161: #	B305 B162 &lt;- B160  Freq: 29686.9
1768   	movl    [R11 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
176f   	movl    R10, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1773   	NullCheck R8
1773
1773   B162: #	B306 B163 &lt;- B161  Freq: 29686.8
1773   	movl    [R10 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
177a   	NullCheck R10
177a
177a   B163: #	B155 B164 &lt;- B162  Freq: 29686.8
177a   	movl    [R10 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1781   	cmpl    RDI, RBX
1783   	jl,s   B155	# loop end  P=0.999008 C=204480.000000
1783
1785   B164: #	B169 B165 &lt;- B269 B163  Freq: 29.4423
1785   	cmpl    RDI, [RSP + #84 (32-bit)]
1789   	jge,s   B169  P=0.500000 C=-1.000000
1789
178b   B165: #	B166 &lt;- B164  Freq: 14.7211
178b   	# castII of RDI
      	nop 	# 1 bytes pad for loops and calls

178c   B166: #	B305 B167 &lt;- B165 B168 	Loop: B166-B168 inner post of N3301 Freq: 29.4422
178c   	movq    R10, [rsp + #88]	# spill
1791   	movl    R10, [R10 + #16 + RDI &lt;&lt; #2]	# compressed ptr
1796   	movl    R11, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
179a   	NullCheck R10
179a
179a   B167: #	B306 B168 &lt;- B166  Freq: 29.4422
179a   	incl    RDI	# int
179c   	movl    [R11 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
17a3   	NullCheck R11
17a3
17a3   B168: #	B166 B169 &lt;- B167  Freq: 29.4422
17a3   	movl    [R11 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
17aa   	cmpl    RDI, [RSP + #84 (32-bit)]
17ae   	jl,s   B166	# loop end  P=0.500000 C=204480.000000
17ae
17b0   B169: #	B184 B170 &lt;- B168 B164 B148  Freq: 29.4717
17b0   	movl    R10, [rsp + #128]	# spill
17b8   	cmpl    R10, [RSP + #84 (32-bit)]
17bd   	jg     B184  P=0.019704 C=203.000000
17bd
17c3   B170: #	B47 B171 &lt;- B169  Freq: 28.891
17c3   	movl    R11, [rsp + #84]	# spill
17c8   	testl   R11, R11
17cb   	jle     B47  P=0.000969 C=209483.000000
17cb
17d1   B171: #	B271 B172 &lt;- B170  Freq: 28.863
17d1   	movl    R10, R11	# spill
17d4   	testl  R10, R10	# unsigned
17d7   	jbe,u  B271  P=0.000001 C=-1.000000
17d7
17dd   B172: #	B271 B173 &lt;- B199 B248 B171  Freq: 29.4431
17dd   	movl    R10, [rsp + #84]	# spill
17e2   	decl    R10	# int
17e5   	movl    [rsp + #0], R10	# spill
17e9   	cmpl    R10, [RSP + #84 (32-bit)]	# unsigned
17ee   	jnb,u  B271  P=0.000001 C=-1.000000
17ee
17f4   B173: #	B227 B174 &lt;- B172  Freq: 29.4431
17f4   	# TLS is in R15
17f4   	movq    R8, [R15 + #112 (8-bit)]	# ptr
17f8   	movq    R10, [rsp + #88]	# spill
17fd   	movl    RBP, [R10 + #16 (8-bit)]	# compressed ptr
1801   	movq    RDI, R8	# spill
1804   	addq    RDI, #16	# ptr
1808   	movq    R10, R8	# spill
180b   	addq    R10, #280	# ptr
1812   	# TLS is in R15
1812   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
1819   	jnb,u  B227  P=0.000100 C=-1.000000
1819
181f   B174: #	B175 &lt;- B173  Freq: 29.4401
181f   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1827   	# TLS is in R15
1827   	movq    [R15 + #112 (8-bit)], R10	# ptr
182b   	movq    R10, [rsp + #8]	# spill
1830   	movq    R10, [R10 + #176 (32-bit)]	# ptr
1837   	movq    [R8], R10	# ptr
183a   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469c18a170:Constant:exact *	# compressed klass ptr
1842   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
1846   	movl    RCX, #33	# long (unsigned 32-bit)
184b   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
1855
1855   B175: #	B204 B176 &lt;- B228 B174  Freq: 29.4431
1855   	decode_heap_oop_not_null R10,RBP
1858   	
1858   	MEMBAR-storestore (empty encoding)
1858   	# checkcastPP of R8
1858   	testl   RBP, RBP	# compressed ptr
185a   	je     B204  P=0.000001 C=-1.000000
185a
1860   B176: #	B272 B177 &lt;- B175  Freq: 29.443
1860   	encode_heap_oop_not_null R11,R8
196b   	movq    R10, R10	# ptr -&gt; long
196b   	movl    [RBP + #12 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
196f   	shrq    R10, #9
1973   	movq    R11, 0x00007f46dbf28000	# ptr
197d   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
1981   	movl    R10, [rsp + #0]	# spill
1985   	cmpl    R10, #1
1989   	jle     B272  P=0.000001 C=-1.000000
1989
198f   B177: #	B34 &lt;- B176  Freq: 29.443
198f   	movl    R10, #1	# int
1995   	jmp     B34
1995
199a   B178: #	B333 B179 &lt;- B34  Freq: 3.03249
199a   	movl    [rsp + #100], R10	# spill
199f   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469c18a170:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
19ab   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #88 L[6]=rsp + #88 L[7]=rsp + #84 L[8]=rsp + #100 L[9]=_ STK[0]=rsp + #96
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop [88]=Oop [96]=NarrowOop off=6576}
19b0
19b0   B179: #	B36 &lt;- B178  Freq: 3.03243
        # Block is sole successor of call
19b0   	movq    R11, RAX	# spill
19b3   	jmp     B36
19b3
19b8   B180: #	B334 B181 &lt;- B37  Freq: 3.03249
19b8   	movl    RBP, R11	# spill
19bb   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469c18a170:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
19c7   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #88 L[6]=rsp + #88 L[7]=rsp + #84 L[8]=RBP L[9]=_ STK[0]=rsp + #104
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop [88]=Oop [104]=NarrowOop [112]=Oop off=6604}
19cc
19cc   B181: #	B39 &lt;- B180  Freq: 3.03243
        # Block is sole successor of call
19cc   	movq    R8, RAX	# spill
19cf   	jmp     B39
19cf
19d4   B182: #	B320 B183 &lt;- B146  Freq: 0.585469
19d4   	movq    R10, [rsp + #72]	# spill
19d9   	movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
19dd   	movl    R8, [R10 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/infra/runners/Control.minStride
19e1   	NullCheck R10
19e1
19e1   B183: #	B148 &lt;- B182  Freq: 0.585468
19e1   	movl    R10, [R10 + #16 (8-bit)]	# int ! Field: org/openjdk/jcstress/infra/runners/Control.maxStride
19e5   	movl    R9, [rsp + #84]	# spill
19ea   	sall    R9, #1
19ed   	cmpl    R9, R10
19f0   	cmovll R10, R9	# signed, int
19f4   	cmpl    R8, R10
19f7   	cmovll R8, R10	# signed, int
19fb   	movl    [rsp + #128], R8	# spill
1a03   	jmp     B148
1a03
1a08   B184: #	B331 B185 &lt;- B169  Freq: 0.580724
1a08   	movq    RSI, [rsp + #88]	# spill
1a0d   	movl    RDX, [rsp + #128]	# spill
      	nop 	# 3 bytes pad for loops and calls
1a17   	call,static  java.util.Arrays::copyOf
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:154  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=rsp + #84 L[4]=rsp + #128 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop off=6684}
1a1c
1a1c   B185: #	B321 B186 &lt;- B184  Freq: 0.580712
        # Block is sole successor of call
1a1c   	movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
1a20   	NullCheck RAX
1a20
1a20   B186: #	B299 B187 &lt;- B185  Freq: 0.580711
1a20   	movl    R10, [rsp + #128]	# spill
1a28   	decl    R10	# int
1a2b   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f469c18a020:Constant:exact *	# compressed klass ptr
1a32   	jne,u  B299  P=0.000000 C=-1.000000
1a32
1a38   B187: #	B246 B188 &lt;- B186  Freq: 0.580711
1a38   	# checkcastPP of RAX
1a38   	movq    [rsp + #88], RAX	# spill
1a3d   	movl    R11, [RAX + #12 (8-bit)]	# range
1a41   	movl    [rsp + #4], R11	# spill
1a46   	movl    R11, [rsp + #84]	# spill
1a4b   	cmpl    R11, [RSP + #128 (32-bit)]
1a53   	jge     B246  P=0.000833 C=4804.000000
1a53
1a59   B188: #	B292 B189 &lt;- B187  Freq: 0.580228
1a59   	cmpl    R11, [RSP + #4 (32-bit)]	# unsigned
1a5e   	jnb,u  B292  P=0.000001 C=-1.000000
1a5e
1a64   B189: #	B292 B190 &lt;- B188  Freq: 0.580227
1a64   	cmpl    R10, [RSP + #4 (32-bit)]	# unsigned
1a69   	jnb,u  B292  P=0.000001 C=-1.000000
1a69
1a6f   B190: #	B192 &lt;- B189  Freq: 0.580227
1a6f   	movl    R10, narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f469c18a0a0:Constant:exact *	# compressed klass ptr
1a75   	decode_klass_not_null R10,R10
1a79   	movq    [rsp + #96], R10	# spill
1a7e   	jmp,s   B192
1a7e
1a80   B191: #	B192 &lt;- B196  top-of-loop Freq: 696.289
1a80   	movl    [rsp + #84], R11	# spill
1a80
1a85   B192: #	B200 B193 &lt;- B190 B191 	Loop: B192-B191 inner  Freq: 696.869
1a85   	movq    R10, [rsp + #88]	# spill
1a8a   	movl    R8, [rsp + #84]	# spill
1a8f   	leaq    R8, [R10 + #16 + R8 &lt;&lt; #2]	# ptr posidxscaleoff
1a94   	# TLS is in R15
1a94   	movq    R9, [R15 + #112 (8-bit)]	# ptr
1a98   	movl    R11, [rsp + #84]	# spill
1a9d   	incl    R11	# int
1aa0   	movq    R10, R9	# spill
1aa3   	addq    R10, #24	# ptr
1aa7   	# TLS is in R15
1aa7   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
1aae   	jnb,u  B200  P=0.000100 C=-1.000000
1aae
1ab4   B193: #	B194 &lt;- B192  Freq: 696.799
1ab4   	# TLS is in R15
1ab4   	movq    [R15 + #112 (8-bit)], R10	# ptr
1ab8   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1ac0   	movq    R10, [rsp + #96]	# spill
1ac5   	movq    R10, [R10 + #176 (32-bit)]	# ptr
1acc   	movq    [R9], R10	# ptr
1acf   	movl    [R9 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f469c18a0a0:Constant:exact *	# compressed klass ptr
1ad7   	movl    [R9 + #12 (8-bit)], R12	# int (R12_heapbase==0)
1adb   	movq    [R9 + #16 (8-bit)], R12	# long (R12_heapbase==0)
1adb
1adf   B194: #	B202 B195 &lt;- B201 B193  Freq: 696.869
1adf   	
1adf   	MEMBAR-storestore (empty encoding)
1adf   	# checkcastPP of R9
1adf   	movq    [rsp + #104], R9	# spill
1ae4   	# TLS is in R15
1ae4   	movq    R10, [R15 + #112 (8-bit)]	# ptr
1ae8   	movq    R9, R10	# spill
1aeb   	addq    R9, #408	# ptr
1af2   	movq    RCX, [rsp + #104]	# spill
1af7   	encode_heap_oop_not_null RBP,RCX
1c02   	# TLS is in R15
1c02   	cmpq    R9, [R15 + #128 (32-bit)]	# raw ptr
1c09   	jnb,u  B202  P=0.000100 C=-1.000000
1c09
1c0f   B195: #	B196 &lt;- B194  Freq: 696.799
1c0f   	movq    RDI, R10	# spill
1c12   	addq    RDI, #16	# ptr
1c16   	PREFETCHNTA [R9 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1c1e   	# TLS is in R15
1c1e   	movq    [R15 + #112 (8-bit)], R9	# ptr
1c22   	movq    R9, [rsp + #32]	# spill
1c27   	movq    R9, [R9 + #176 (32-bit)]	# ptr
1c2e   	movq    [R10], R9	# ptr
1c31   	movl    [R10 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c190630:Constant:exact *	# compressed klass ptr
1c39   	movl    [R10 + #12 (8-bit)], R12	# int (R12_heapbase==0)
1c3d   	movl    RCX, #49	# long (unsigned 32-bit)
1c42   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
1c4c
1c4c   B196: #	B191 B197 &lt;- B203 B195  Freq: 696.869
1c4c   	
1c4c   	MEMBAR-storestore (empty encoding)
1c4c   	# checkcastPP of R10
1c4c   	movq    R9, R10	# spill
1c4f   	movq    R10, [rsp + #104]	# spill
1c54   	movq    R10, R10	# ptr -&gt; long
1c54   	movq    RBX, R8	# ptr -&gt; long
1c57   	encode_heap_oop_not_null R9,R9
1d5f   	shrq    RBX, #9
1d63   	shrq    R10, #9
1d67   	movq    RCX, [rsp + #104]	# spill
1d6c   	movl    [RCX + #16 (8-bit)], R9	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1d70   	movq    R9, 0x00007f46dbf28000	# ptr
1d7a   	movb    [R9 + R10], R12	# short/char (R12_heapbase==0)
1d7e   	movq    R10, 0x00007f46dbf28000	# ptr
1d88   	movb    [R10 + RBX], R12	# short/char (R12_heapbase==0)
1d8c   	movl    [R8], RBP	# compressed ptr
1d8f   	cmpl    R11, [RSP + #128 (32-bit)]
1d97   	jl     B191	# loop end  P=0.999167 C=4800.000000
1d97
1d9d   B197: #	B47 B198 &lt;- B196  Freq: 0.580225
1d9d   	movl    R11, [rsp + #4]	# spill
1da2   	testl   R11, R11
1da5   	jle     B47  P=0.000969 C=209483.000000
1da5
1dab   B198: #	B270 B199 &lt;- B197  Freq: 0.579663
1dab   	testl  R11, R11	# unsigned
1dae   	jbe,u  B270  P=0.000001 C=-1.000000
1dae
1db4   B199: #	B172 &lt;- B198  Freq: 0.579662
1db4   	movl    [rsp + #84], R11	# spill
1db9   	jmp     B172
1db9
1dbe   B200: #	B329 B201 &lt;- B192  Freq: 0.0696985
1dbe   	movl    [rsp + #108], R11	# spill
1dc3   	movq    [rsp + #112], R8	# spill
1dc8   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f469c18a0a0:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
1dd3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #128 L[5]=rsp + #88 L[6]=rsp + #84 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop [88]=Oop [112]=Derived_oop_[88] off=7640}
1dd8
1dd8   B201: #	B194 &lt;- B200  Freq: 0.0696971
        # Block is sole successor of call
1dd8   	movq    R9, RAX	# spill
1ddb   	movq    R8, [rsp + #112]	# spill
1de0   	movl    R11, [rsp + #108]	# spill
1de5   	jmp     B194
1de5
1dea   B202: #	B330 B203 &lt;- B194  Freq: 0.0696985
1dea   	movl    [rsp + #132], R11	# spill
1df2   	movq    [rsp + #136], R8	# spill
1dfa   	movl    R11, [rsp + #84]	# spill
1dff   	movl    [rsp + #0], R11	# spill
1e03   	movq    RSI, precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c190630:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
1e0f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:183  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #128 L[5]=rsp + #88 L[6]=rsp + #0 L[7]=rsp + #104 L[8]=_ L[9]=_ STK[0]=rsp + #104
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=Oop [56]=Oop [64]=Oop [72]=Oop [88]=Oop [104]=Oop [136]=Derived_oop_[88] off=7700}
1e14
1e14   B203: #	B196 &lt;- B202  Freq: 0.0696971
        # Block is sole successor of call
1e14   	movq    R10, RAX	# spill
1e17   	movq    R8, [rsp + #136]	# spill
1e1f   	movl    R11, [rsp + #132]	# spill
1e27   	jmp     B196
1e27
1e2c   B204: #	B205 &lt;- B175 B36 B39  Freq: 0.0614748
1e2c   	movq    RBP, R8	# spill
1e2c
1e2f   B205: #	N5102 &lt;- B318 B204  Freq: 0.0615046
1e2f   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
1e37   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:241  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop off=7740}
1e3c   	int3	# ShouldNotReachHere
1e3c
1e41   B206: #	N5102 &lt;- B139  Freq: 0.0303269
1e41   	movq    RBP, [rsp + #72]	# spill
1e46   	movl    R10, [rsp + #80]	# spill
1e4b   	movl    [rsp + #0], R10	# spill
1e4f   	movl    R11, [rsp + #48]	# spill
1e54   	movl    [rsp + #4], R11	# spill
1e59   	movq    R10, [rsp + #16]	# spill
1e5e   	movq    [rsp + #8], R10	# spill
1e63   	movq    R10, [rsp + #56]	# spill
1e68   	movq    [rsp + #16], R10	# spill
1e6d   	movq    R10, [rsp + #64]	# spill
1e72   	movq    [rsp + #40], R10	# spill
1e77   	movq    R10, [rsp + #88]	# spill
1e7c   	movl    R11, [rsp + #84]	# spill
1e81   	movq    [rsp + #64], R10	# spill
1e86   	movl    R10, R11	# spill
1e89   	movl    [rsp + #60], R10	# spill
1e8e   	movq    R10, [rsp + #96]	# spill
1e93   	movq    [rsp + #80], R10	# spill
1e98   	movl    [rsp + #76], R14	# spill
1e9d   	movl    R11, [rsp + #108]	# spill
1ea2   	movl    [rsp + #96], R11	# spill
1ea7   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
1eaf   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=rsp + #80 L[1]=rsp + #76 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #96 L[6]=#0 L[7]=_ STK[0]=rsp + #104 STK[1]=rsp + #108
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #64 L[3]=rsp + #60 L[4]=rsp + #64 L[5]=rsp + #60 L[6]=rsp + #140 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop [64]=Oop [76]=NarrowOop [80]=Oop [104]=NarrowOop off=7860}
1eb4   	int3	# ShouldNotReachHere
1eb4
1eb9   B207: #	N5102 &lt;- B130  Freq: 0.0303252
1eb9   	movq    RBP, [rsp + #72]	# spill
1ebe   	movl    R11, [rsp + #80]	# spill
1ec3   	movl    [rsp + #0], R11	# spill
1ec7   	movl    R10, [rsp + #48]	# spill
1ecc   	movl    [rsp + #4], R10	# spill
1ed1   	movq    R10, [rsp + #16]	# spill
1ed6   	movq    [rsp + #8], R10	# spill
1edb   	movq    R10, [rsp + #56]	# spill
1ee0   	movq    [rsp + #16], R10	# spill
1ee5   	movq    R10, [rsp + #64]	# spill
1eea   	movq    [rsp + #40], R10	# spill
1eef   	movq    R10, [rsp + #88]	# spill
1ef4   	movl    R11, [rsp + #84]	# spill
1ef9   	movq    [rsp + #64], R10	# spill
1efe   	movl    R10, R11	# spill
1f01   	movl    [rsp + #60], R10	# spill
1f06   	movl    [rsp + #84], RDI	# spill
1f0a   	movl    RSI, #-28	# int
1f0f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #84 STK[1]=rsp + #108 STK[2]=rsp + #84 STK[3]=rsp + #108
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #64 L[3]=rsp + #60 L[4]=rsp + #64 L[5]=rsp + #60 L[6]=rsp + #140 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop [64]=Oop [84]=NarrowOop off=7956}
1f14   	int3	# ShouldNotReachHere
1f14
1f19   B208: #	B293 B209 &lt;- B30 B31  Freq: 0.0497608
1f19   	movdl   R9, XMM0	# spill
1f1e   	andl    R9, R8	# int
1f21   	movl    [rsp + #108], R9	# spill
1f26   	cmpl    R13, [RSP + #0 (32-bit)]	# unsigned
1f2a   	jnb,u  B293  P=0.000001 C=-1.000000
1f2a
1f30   B209: #	B281 B210 &lt;- B208  Freq: 0.0497607
1f30   	movl    R9, [rsp + #104]	# spill
1f35   	movl    RBX, [R9 + #16 + R13 &lt;&lt; #2]	# compressed ptr
1f3a   	movl    RAX, #3	# int
1f3f   	decode_heap_oop_not_null R10,RBX
1f42   	testl   RBX, RBX	# compressed ptr
1f44   	je     B281  P=0.000052 C=38671.000000
1f44
1f4a   B210: #	B217 B211 &lt;- B209  Freq: 0.0497582
1f4a   	movl    R9, [RBX + #8 (8-bit)]	# compressed klass ptr
1f4e   	cmpl    R9, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c190630:Constant:exact *	# compressed klass ptr
1f55   	jne,u  B217  P=0.000001 C=-1.000000
1f55
1f5b   B211: #	B224 B212 &lt;- B210  Freq: 0.0497581
1f5b   	# checkcastPP of R10
1f5b   	movl    R9, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1f62   	cmpq    R10, RSI	# ptr
1f65   	je,u  B224  P=0.000000 C=11395.000000
1f65
1f6b   B212: #	B251 B213 &lt;- B211  Freq: 0.0497581
1f6b   	movl    RBX, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1f72   	cmpl    RBX, RCX
1f74   	jne     B251  P=0.004651 C=11395.000000
1f74
1f7a   B213: #	B251 B214 &lt;- B212  Freq: 0.0495267
1f7a   	cmpl    R9, R11
1f7d   	jne     B251  P=0.007230 C=11342.000000
1f7d
1f83   B214: #	B128 &lt;- B213  Freq: 0.0491686
1f83   	movl    R9, R13	# spill
1f86   	jmp     B128
1f86
1f8b   B215: #	N5102 &lt;- B136  Freq: 0.0299296
1f8b   	movq    RBP, [rsp + #72]	# spill
1f90   	movl    R10, [rsp + #80]	# spill
1f95   	movl    [rsp + #0], R10	# spill
1f99   	movl    R11, [rsp + #48]	# spill
1f9e   	movl    [rsp + #4], R11	# spill
1fa3   	movq    R10, [rsp + #16]	# spill
1fa8   	movq    [rsp + #8], R10	# spill
1fad   	movq    R10, [rsp + #56]	# spill
1fb2   	movq    [rsp + #16], R10	# spill
1fb7   	movq    R10, [rsp + #64]	# spill
1fbc   	movq    [rsp + #40], R10	# spill
1fc1   	movq    R10, [rsp + #88]	# spill
1fc6   	movq    [rsp + #48], R10	# spill
1fcb   	movl    R10, [rsp + #84]	# spill
1fd0   	movl    [rsp + #56], R10	# spill
1fd5   	movl    [rsp + #76], R8	# spill
1fda   	movl    [rsp + #80], R14	# spill
1fdf   	movl    RSI, #-34	# int
      	nop 	# 3 bytes pad for loops and calls
1fe7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #56 L[6]=rsp + #140 L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #76 STK[1]=rsp + #80
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop [48]=Oop [76]=NarrowOop [80]=NarrowOop off=8172}
1fec   	int3	# ShouldNotReachHere
1fec
1ff1   B216: #	B217 &lt;- B124  Freq: 0.000354546
1ff1   	movl    R13, R9	# spill
1ff4   	movl    RAX, #1	# int
1ff4
1ff9   B217: #	B218 &lt;- B216 B210  Freq: 0.000354595
1ff9   	movl    [rsp + #108], R13	# spill
1ffe   	movl    R8, RAX	# spill
1ffe
2001   B218: #	B219 &lt;- B217 B280 B294  Freq: 0.000358796
2001   	movl    [rsp + #144], R8	# spill
2001
2009   B219: #	N5102 &lt;- B141 B218  Freq: 0.0302867
2009   	movq    RBP, [rsp + #72]	# spill
200e   	movl    R8, [rsp + #80]	# spill
2013   	movl    [rsp + #0], R8	# spill
2017   	movl    R11, [rsp + #48]	# spill
201c   	movl    [rsp + #4], R11	# spill
2021   	movq    R11, [rsp + #16]	# spill
2026   	movq    [rsp + #8], R11	# spill
202b   	movq    R11, [rsp + #56]	# spill
2030   	movq    [rsp + #16], R11	# spill
2035   	movq    R11, [rsp + #64]	# spill
203a   	movq    [rsp + #40], R11	# spill
203f   	movq    R11, [rsp + #88]	# spill
2044   	movl    R8, [rsp + #84]	# spill
2049   	movq    [rsp + #64], R11	# spill
204e   	movl    [rsp + #60], R8	# spill
2053   	movq    R11, [rsp + #96]	# spill
2058   	movq    [rsp + #80], R11	# spill
205d   	movq    [rsp + #96], R10	# spill
2062   	movl    [rsp + #104], R14	# spill
2067   	movl    RSI, #-34	# int
      	nop 	# 3 bytes pad for loops and calls
206f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=rsp + #80 L[1]=rsp + #104 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #108 L[6]=rsp + #144 L[7]=_ STK[0]=rsp + #96 STK[1]=rsp + #104
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #64 L[3]=rsp + #60 L[4]=rsp + #64 L[5]=rsp + #60 L[6]=rsp + #140 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop [64]=Oop [80]=Oop [96]=Oop [104]=NarrowOop off=8308}
2074   	int3	# ShouldNotReachHere
2074
2079   B220: #	B221 &lt;- B27  Freq: 0.000217315
2079   	movl    [rsp + #108], RDX	# spill
2079
207d   B221: #	B222 &lt;- B220 B252  Freq: 0.000217346
207d   	movl    R9, [rsp + #108]	# spill
2082   	movl    RBX, RBP	# spill
2084   	movl    RBP, [rsp + #0]	# spill
2084
2087   B222: #	B20 &lt;- B123 B281 B221  Freq: 0.0185639
2087   	movl    [rsp + #108], R9	# spill
208c   	movl    [rsp + #156], RBX	# spill
2093   	movl    [rsp + #168], RBP	# spill
209a   	jmp     B20
209a
209f   B223: #	B224 &lt;- B125  Freq: 0.00016906
209f   	movl    R13, R9	# spill
20a2   	movl    RAX, #1	# int
20a2
20a7   B224: #	B225 &lt;- B223 B211  Freq: 0.000169084
20a7   	movl    [rsp + #108], R13	# spill
20ac   	movl    R11, RAX	# spill
20ac
20af   B225: #	B226 &lt;- B224 B282 B296  Freq: 0.000171087
20af   	movl    [rsp + #144], R11	# spill
20af
20b7   B226: #	N5102 &lt;- B142 B225  Freq: 0.0144418
20b7   	movq    RBP, [rsp + #72]	# spill
20bc   	movl    R8, [rsp + #80]	# spill
20c1   	movl    [rsp + #0], R8	# spill
20c5   	movl    R11, [rsp + #48]	# spill
20ca   	movl    [rsp + #4], R11	# spill
20cf   	movq    R11, [rsp + #16]	# spill
20d4   	movq    [rsp + #8], R11	# spill
20d9   	movq    R11, [rsp + #56]	# spill
20de   	movq    [rsp + #16], R11	# spill
20e3   	movq    R11, [rsp + #64]	# spill
20e8   	movq    [rsp + #40], R11	# spill
20ed   	movq    R11, [rsp + #88]	# spill
20f2   	movq    [rsp + #48], R11	# spill
20f7   	movl    R11, [rsp + #84]	# spill
20fc   	movl    [rsp + #56], R11	# spill
2101   	movq    R11, [rsp + #96]	# spill
2106   	movq    [rsp + #80], R11	# spill
210b   	movl    R8, [rsp + #108]	# spill
2110   	movl    [rsp + #88], R8	# spill
2115   	movl    [rsp + #104], R14	# spill
211a   	movq    [rsp + #112], R10	# spill
211f   	movl    [rsp + #108], R14	# spill
2124   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
212b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.infra.results.IntResult2::equals @ bci:2  L[0]=rsp + #112 L[1]=rsp + #108 L[2]=_ STK[0]=rsp + #112 STK[1]=rsp + #104
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=rsp + #80 L[1]=rsp + #104 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #88 L[6]=rsp + #144 L[7]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #56 L[6]=rsp + #140 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop [48]=Oop [80]=Oop [104]=NarrowOop [108]=NarrowOop [112]=Oop off=8496}
2130   	int3	# ShouldNotReachHere
2130
2135   B227: #	B328 B228 &lt;- B173  Freq: 0.00294479
2135   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469c18a170:Constant:exact *	# ptr
213f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #88 L[6]=rsp + #88 L[7]=rsp + #84 L[8]=#0 L[9]=_ STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=Oop [56]=Oop [64]=Oop [72]=Oop [88]=Oop off=8516}
2144
2144   B228: #	B175 &lt;- B227  Freq: 0.00294473
        # Block is sole successor of call
2144   	movq    R8, RAX	# spill
2147   	jmp     B175
2147
214c   B229: #	B327 B230 &lt;- B47  Freq: 0.00294149
214c   	movl    [rsp + #96], R8	# spill
2151   	movl    [rsp + #84], RCX	# spill
2155   	movq    RSI, precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f469c189f50:Constant:exact *	# ptr
215f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:254  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #88 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #96
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop [84]=NarrowOop [88]=Oop [96]=NarrowOop off=8548}
2164
2164   B230: #	B49 &lt;- B229  Freq: 0.00294143
        # Block is sole successor of call
2164   	movq    R11, RAX	# spill
2167   	movl    RCX, [rsp + #84]	# spill
216b   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #96]
	movl    [rsp + #84], rax
	movq    rax, [rsp - #8]
217d   	jmp     B49
217d
2182   B231: #	B323 B232 &lt;- B50  Freq: 0.00294149
2182   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c18a240:Constant:exact *	# ptr
      	nop 	# 3 bytes pad for loops and calls
218f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:20  L[0]=rsp + #96 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #96
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #84 STK[1]=rsp + #96
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop [84]=NarrowOop [96]=Oop off=8596}
2194
2194   B232: #	B52 &lt;- B231  Freq: 0.00294143
        # Block is sole successor of call
2194   	jmp     B52
2194
2199   B233: #	B324 B234 &lt;- B52  Freq: 0.00294149
2199   	movq    [rsp + #112], R8	# spill
219e   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c18a240:Constant:exact *	# ptr
      	nop 	# 3 bytes pad for loops and calls
21ab   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:32  L[0]=rsp + #96 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #96
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #84 STK[1]=rsp + #96
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop [84]=NarrowOop [96]=Oop [112]=Oop off=8624}
21b0
21b0   B234: #	B54 &lt;- B233  Freq: 0.00294143
        # Block is sole successor of call
21b0   	movq    R8, [rsp + #112]	# spill
21b5   	jmp     B54
21b5
21ba   B235: #	B325 B236 &lt;- B54  Freq: 0.00294149
21ba   	movq    [rsp + #112], R8	# spill
21bf   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c18a240:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
21cb   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:44  L[0]=rsp + #96 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #96
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #84 STK[1]=rsp + #96
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop [84]=NarrowOop [96]=Oop [112]=Oop off=8656}
21d0
21d0   B236: #	B56 &lt;- B235  Freq: 0.00294143
        # Block is sole successor of call
21d0   	movq    R8, [rsp + #112]	# spill
21d5   	jmp     B56
21d5
21da   B237: #	B326 B238 &lt;- B56  Freq: 0.00294149
21da   	movq    [rsp + #112], R8	# spill
21df   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #84]
	movl    [rsp + #104], rax
	movq    rax, [rsp - #8]
21f1   	movl    R11, [rsp + #80]	# spill
21f6   	movl    [rsp + #0], R11	# spill
21fa   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c18a240:Constant:exact *	# ptr
2204   	movq    R10, [rsp + #96]	# spill
2209   	movq    [rsp + #88], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
220f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:56  L[0]=rsp + #96 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #88
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #104 STK[1]=rsp + #88
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #0 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=Oop [56]=Oop [64]=Oop [72]=Oop [88]=Oop [96]=Oop [104]=NarrowOop [112]=Oop off=8724}
2214
2214   B238: #	B58 &lt;- B237  Freq: 0.00294143
        # Block is sole successor of call
2214   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #104]
	movl    [rsp + #84], rax
	movq    rax, [rsp - #8]
2226   	movq    R8, [rsp + #112]	# spill
222b   	jmp     B58
222b
2230   B239: #	B322 B240 &lt;- B43  Freq: 0.00293864
2230   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469c18a170:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
223b   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #88 L[6]=rsp + #88 L[7]=rsp + #84 L[8]=RBP L[9]=_ STK[0]=rsp + #0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=NarrowOop [16]=Oop [56]=Oop [64]=Oop [72]=Oop [88]=Oop [96]=Oop off=8768}
2240
2240   B240: #	B45 &lt;- B239  Freq: 0.00293858
        # Block is sole successor of call
2240   	movq    R8, RAX	# spill
2243   	jmp     B45
2243
2248   B241: #	B4 &lt;- B1  Freq: 0.000999987
2248   	xorl    R10, R10	# ptr
224b   	movq    [rsp + #72], R10	# spill
2250   	jmp     B4
2250
2255   B242: #	B7 &lt;- B4  Freq: 0.000999986
2255   	xorl    R10, R10	# ptr
2258   	movq    [rsp + #16], R10	# spill
225d   	jmp     B7
225d
2262   B243: #	B10 &lt;- B7  Freq: 0.000999985
2262   	xorl    R10, R10	# ptr
2265   	movq    [rsp + #56], R10	# spill
226a   	jmp     B10
226a
226f   B244: #	B13 &lt;- B10  Freq: 0.000999984
226f   	xorl    R10, R10	# ptr
2272   	movq    [rsp + #64], R10	# spill
2277   	jmp     B13
2277
227c   B245: #	B16 &lt;- B13  Freq: 0.000999983
227c   	xorl    R14, R14	# ptr
227f   	jmp     B16
227f
2284   B246: #	B47 B247 &lt;- B187  Freq: 0.00048351
2284   	movl    R10, [rsp + #4]	# spill
2289   	testl   R10, R10
228c   	jle     B47  P=0.000969 C=209483.000000
228c
2292   B247: #	B295 B248 &lt;- B246  Freq: 0.000483042
2292   	movl    R11, R10	# spill
2295   	testl  R11, R11	# unsigned
2298   	jbe,u  B295  P=0.000001 C=-1.000000
2298
229e   B248: #	B172 &lt;- B247  Freq: 0.000483041
229e   	movl    [rsp + #84], R11	# spill
22a3   	jmp     B172
22a3
22a8   B249: #	B250 &lt;- B122  Freq: 0.000359273
22a8   	movl    R13, R9	# spill
22ab   	xorl    R8, R8	# int
22ae
22ae   B250: #	N5102 &lt;- B249 B277 B293 B297  Freq: 0.00036358
22ae   	movq    RBP, [rsp + #72]	# spill
22b3   	movl    R11, [rsp + #80]	# spill
22b8   	movl    [rsp + #0], R11	# spill
22bc   	movl    R10, [rsp + #48]	# spill
22c1   	movl    [rsp + #4], R10	# spill
22c6   	movq    R10, [rsp + #16]	# spill
22cb   	movq    [rsp + #8], R10	# spill
22d0   	movq    R10, [rsp + #56]	# spill
22d5   	movq    [rsp + #16], R10	# spill
22da   	movq    R10, [rsp + #64]	# spill
22df   	movq    [rsp + #40], R10	# spill
22e4   	movq    R10, [rsp + #88]	# spill
22e9   	movl    R11, [rsp + #84]	# spill
22ee   	movq    [rsp + #64], R10	# spill
22f3   	movl    R10, R11	# spill
22f6   	movl    [rsp + #60], R10	# spill
22fb   	movq    R10, [rsp + #96]	# spill
2300   	movq    [rsp + #80], R10	# spill
2305   	movl    [rsp + #76], R14	# spill
230a   	movl    [rsp + #96], R13	# spill
230f   	movl    RSI, #-28	# int
2314   	movl    [rsp + #100], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
231b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:70  L[0]=rsp + #80 L[1]=rsp + #76 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #96 L[6]=rsp + #100 L[7]=_ STK[0]=rsp + #104 STK[1]=rsp + #96
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #64 L[3]=rsp + #60 L[4]=rsp + #64 L[5]=rsp + #60 L[6]=rsp + #140 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop [64]=Oop [76]=NarrowOop [80]=Oop [104]=NarrowOop off=8992}
2320   	int3	# ShouldNotReachHere
2320
2325   B251: #	B277 B252 &lt;- B212 B213  Freq: 0.000589499
2325   	movl    R10, [rsp + #108]	# spill
232a   	cmpl    R10, [RSP + #0 (32-bit)]	# unsigned
232e   	jnb,u  B277  P=0.000001 C=-1.000000
232e
2334   B252: #	B221 B253 &lt;- B251  Freq: 0.000589499
2334   	movl    RBX, [rsp + #104]	# spill
2338   	movl    R10, [RBX + #16 + R10 &lt;&lt; #2]	# compressed ptr
233d   	testl   R10, R10	# compressed ptr
2340   	je     B221  P=0.000052 C=38671.000000
2340
2346   B253: #	B294 B254 &lt;- B252  Freq: 0.000589468
2346   	movl    R9, [R10 + #8 (8-bit)]	# compressed klass ptr
234a   	decode_heap_oop_not_null R10,R10
234a   	movl    R13, [rsp + #108]	# spill
234f   	incl    R13	# int
2352   	cmpl    R9, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f469c190630:Constant:exact *	# compressed klass ptr
2359   	jne,u  B294  P=0.000001 C=-1.000000
2359
235f   B254: #	B296 B255 &lt;- B253  Freq: 0.000589468
235f   	# checkcastPP of R10
235f   	andl    R13, R8	# int
2362   	cmpq    R10, RSI	# ptr
2365   	je,u  B296  P=0.000000 C=11395.000000
2365
236b   B255: #	B278 B256 &lt;- B254  Freq: 0.000589467
236b   	movl    R8, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
2372   	cmpl    R8, RCX
2375   	jne     B278  P=0.004651 C=11395.000000
2375
237b   B256: #	B278 B257 &lt;- B255  Freq: 0.000586726
237b   	movl    R8, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
2382   	cmpl    R8, R11
2385   	jne     B278  P=0.007230 C=11342.000000
2385
238b   B257: #	B32 &lt;- B256  Freq: 0.000582484
238b   	movl    RDX, [rsp + #108]	# spill
238f   	jmp     B32
238f
2394   B258: #	N5102 &lt;- B101 B85  Freq: 0.000111725
2394   	movl    R11, [rsp + #48]	# spill
2399   	movl    [rsp + #4], R11	# spill
239e   	movq    R10, [rsp + #16]	# spill
23a3   	movq    [rsp + #8], R10	# spill
23a8   	movq    R10, [rsp + #56]	# spill
23ad   	movq    [rsp + #16], R10	# spill
23b2   	movl    [rsp + #40], RBX	# spill
23b6   	movq    [rsp + #48], R14	# spill
23bb   	movl    [rsp + #56], R13	# spill
23c0   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
23c7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:86  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #64 L[7]=_ L[8]=rsp + #48 L[9]=rsp + #40 L[10]=rsp + #56 L[11]=_ STK[0]=rsp + #48 STK[1]=rsp + #56
        # OopMap{[8]=Oop [16]=Oop [48]=Oop [64]=Oop [72]=Oop off=9164}
23cc   	int3	# ShouldNotReachHere
23cc
23d1   B259: #	N5102 &lt;- B107  Freq: 3.69855e-05
23d1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
23d7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=9180}
23dc   	int3	# ShouldNotReachHere
23dc
23e1   B260: #	N5102 &lt;- B112  Freq: 3.64826e-05
23e1   	movq    R10, [rsp + #16]	# spill
23e6   	movq    [rsp + #8], R10	# spill
23eb   	movl    [rsp + #40], R11	# spill
23f0   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
23f7   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:35  L[0]=rsp + #64 L[1]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [72]=Oop off=9212}
23fc   	int3	# ShouldNotReachHere
23fc
2401   B261: #	N5102 &lt;- B61  Freq: 3.63868e-05
2401   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2407   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=9228}
240c   	int3	# ShouldNotReachHere
240c
2411   B262: #	N5102 &lt;- B72  Freq: 3.63866e-05
2411   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2417   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=9244}
241c   	int3	# ShouldNotReachHere
241c
2421   B263: #	N5102 &lt;- B78  Freq: 3.63866e-05
2421   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2427   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=9260}
242c   	int3	# ShouldNotReachHere
242c
2431   B264: #	N5102 &lt;- B65  Freq: 3.59073e-05
2431   	movl    [rsp + #4], R10	# spill
2436   	movq    R10, [rsp + #16]	# spill
243b   	movq    [rsp + #8], R10	# spill
2440   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
2447   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:22  L[0]=rsp + #64 L[1]=rsp + #4
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=rsp + #72 L[1]=rsp + #52 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [72]=Oop off=9292}
244c   	int3	# ShouldNotReachHere
244c
2451   B265: #	N5102 &lt;- B76  Freq: 3.58812e-05
2451   	movq    R10, [rsp + #16]	# spill
2456   	movq    [rsp + #8], R10	# spill
245b   	movq    R10, R8	# spill
245e   	movq    [rsp + #32], R14	# spill
2463   	movq    [rsp + #40], R10	# spill
2468   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
246f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:22  L[0]=rsp + #64 L[1]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=rsp + #72 L[1]=rsp + #52 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #40 L[7]=rsp + #32 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop [72]=Oop off=9332}
2474   	int3	# ShouldNotReachHere
2474
2479   B266: #	N5102 &lt;- B115  Freq: 3.03983e-05
2479   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
247f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=rsp + #64
        # OopMap{[64]=Oop off=9348}
2484   	int3	# ShouldNotReachHere
2484
2489   B267: #	N5102 &lt;- B120 B119  Freq: 6.03383e-05
2489   	movl    R11, [rsp + #48]	# spill
248e   	movl    [rsp + #4], R11	# spill
2493   	movq    R10, [rsp + #16]	# spill
2498   	movq    [rsp + #8], R10	# spill
249d   	movq    R10, [rsp + #56]	# spill
24a2   	movq    [rsp + #16], R10	# spill
24a7   	movq    R10, [rsp + #64]	# spill
24ac   	movq    [rsp + #40], R10	# spill
24b1   	movq    R10, [rsp + #88]	# spill
24b6   	movq    [rsp + #48], R10	# spill
24bb   	movl    R10, [rsp + #84]	# spill
24c0   	movl    [rsp + #56], R10	# spill
24c5   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
24cb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:29  L[0]=rsp + #72 L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #56 L[6]=#0 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [40]=Oop [48]=Oop [72]=Oop off=9424}
24d0   	int3	# ShouldNotReachHere
24d0
24d5   B268: #	N5102 &lt;- B150 B149  Freq: 5.97602e-05
24d5   	movl    R10, [rsp + #48]	# spill
24da   	movl    [rsp + #4], R10	# spill
24df   	movq    R10, [rsp + #16]	# spill
24e4   	movq    [rsp + #8], R10	# spill
24e9   	movq    R10, [rsp + #56]	# spill
24ee   	movq    [rsp + #16], R10	# spill
24f3   	movq    R10, [rsp + #64]	# spill
24f8   	movq    [rsp + #24], R10	# spill
24fd   	movq    R10, [rsp + #88]	# spill
2502   	movq    [rsp + #40], R10	# spill
2507   	movl    R10, [rsp + #84]	# spill
250c   	movl    [rsp + #48], R10	# spill
2511   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
2517   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:110  L[0]=rsp + #72 L[1]=_ L[2]=rsp + #40 L[3]=rsp + #48 L[4]=rsp + #128 L[5]=rsp + #40 L[6]=rsp + #48 L[7]=#0 L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [24]=Oop [40]=Oop [72]=Oop off=9500}
251c   	int3	# ShouldNotReachHere
251c
2521   B269: #	B164 &lt;- B153  Freq: 3.00771e-05
2521   	movl    RDI, #1	# int
2526   	jmp     B164
2526
252b   B270: #	B271 &lt;- B198  Freq: 5.79663e-07
252b   	movl    [rsp + #84], R11	# spill
252b
2530   B271: #	N5102 &lt;- B172 B270 B295 B171  Freq: 5.92772e-05
2530   	movl    RSI, #-122	# int
2535   	movl    R10, [rsp + #48]	# spill
253a   	movl    [rsp + #4], R10	# spill
253f   	movq    R10, [rsp + #16]	# spill
2544   	movq    [rsp + #8], R10	# spill
2549   	movq    R10, [rsp + #56]	# spill
254e   	movq    [rsp + #16], R10	# spill
2553   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:225  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #88 L[6]=rsp + #88 L[7]=rsp + #84 L[8]=#0 L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [64]=Oop [72]=Oop [88]=Oop off=9560}
2558   	int3	# ShouldNotReachHere
2558
255d   B272: #	B41 &lt;- B176  Freq: 2.9834e-05
255d   	movl    R11, #1	# int
2563   	jmp     B41
2563
2568   B273: #	N5102 &lt;- B58  Freq: 2.98006e-05
2568   	movl    RSI, #-10	# int
256d   	movq    RBP, R9	# spill
      	nop 	# 3 bytes pad for loops and calls
2573   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:271  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop off=9592}
2578   	int3	# ShouldNotReachHere
2578
257d   B274: #	N5102 &lt;- B60  Freq: 1.71232e-05
257d   	movl    [rsp + #40], R11	# spill
2582   	movl    RSI, #-155	# int
2587   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:141  L[0]=rsp + #72 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #52 STK[1]=RBP
        # OopMap{[16]=Oop [56]=Oop [64]=Oop [72]=Oop off=9612}
258c   	int3	# ShouldNotReachHere
258c
2591   B275: #	N5102 &lt;- B69  Freq: 1.71232e-05
2591   	movq    R10, [rsp + #16]	# spill
2596   	movq    [rsp + #8], R10	# spill
259b   	movl    RSI, #-155	# int
25a0   	movl    [rsp + #32], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
25a7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:42  L[0]=rsp + #72 L[1]=rsp + #52 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #32
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [72]=Oop off=9644}
25ac   	int3	# ShouldNotReachHere
25ac
25b1   B276: #	B277 &lt;- B26  Freq: 4.25618e-06
25b1   	movl    [rsp + #108], RDX	# spill
25b5   	movl    RAX, #1	# int
25b5
25ba   B277: #	B250 &lt;- B276 B251  Freq: 4.25678e-06
25ba   	movl    R13, [rsp + #108]	# spill
25bf   	movl    R8, RAX	# spill
25c2   	jmp     B250
25c2
25c7   B278: #	B297 B279 &lt;- B255 B256  Freq: 6.9836e-06
25c7   	cmpl    R13, [RSP + #0 (32-bit)]	# unsigned
25cb   	jnb,u  B297  P=0.000001 C=-1.000000
25cb
25d1   B279: #	N5102 &lt;- B278  Freq: 6.98359e-06
25d1   	movl    RBP, [RBX + #16 + R13 &lt;&lt; #2]	# compressed ptr
25d6   	movl    R11, [rsp + #80]	# spill
25db   	movl    [rsp + #8], R11	# spill
25e0   	movl    R10, [rsp + #48]	# spill
25e5   	movl    [rsp + #12], R10	# spill
25ea   	movq    R10, [rsp + #56]	# spill
25ef   	movq    [rsp + #24], R10	# spill
25f4   	movq    R10, [rsp + #72]	# spill
25f9   	movq    [rsp + #40], R10	# spill
25fe   	movq    R10, [rsp + #64]	# spill
2603   	movq    [rsp + #48], R10	# spill
2608   	movq    R10, [rsp + #88]	# spill
260d   	movq    [rsp + #56], R10	# spill
2612   	movl    R10, [rsp + #84]	# spill
2617   	movl    [rsp + #64], R10	# spill
261c   	movq    R10, [rsp + #96]	# spill
2621   	movq    [rsp + #88], R10	# spill
2626   	movl    [rsp + #84], R14	# spill
262b   	movl    [rsp + #96], R13	# spill
2630   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
2637   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:80  L[0]=rsp + #88 L[1]=rsp + #84 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #96 L[6]=#5 L[7]=RBP STK[0]=#4 STK[1]=#3
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #64 L[4]=rsp + #56 L[5]=rsp + #64 L[6]=rsp + #140 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #40 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #24 L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=Oop [24]=Oop [40]=Oop [48]=Oop [56]=Oop [84]=NarrowOop [88]=Oop off=9788}
263c   	int3	# ShouldNotReachHere
263c
2641   B280: #	B218 &lt;- B28  Freq: 4.20018e-06
2641   	movl    [rsp + #108], RDX	# spill
2645   	movl    R8, #2	# int
264b   	jmp     B218
264b
2650   B281: #	B222 &lt;- B209  Freq: 2.57446e-06
2650   	movl    R9, R13	# spill
2653   	movl    RBX, RBP	# spill
2655   	movl    RBP, [rsp + #0]	# spill
2658   	jmp     B222
2658
265d   B282: #	B225 &lt;- B29  Freq: 2.0028e-06
265d   	movl    [rsp + #108], RDX	# spill
2661   	movl    R11, #2	# int
2667   	jmp     B225
2667
266c   B283: #	N5102 &lt;- B21  Freq: 1.58779e-06
266c   	movq    RBP, [rsp + #72]	# spill
2671   	movl    R10, [rsp + #80]	# spill
2676   	movl    [rsp + #0], R10	# spill
267a   	movl    R11, [rsp + #48]	# spill
267f   	movl    [rsp + #4], R11	# spill
2684   	movq    R10, [rsp + #16]	# spill
2689   	movq    [rsp + #8], R10	# spill
268e   	movq    R10, [rsp + #56]	# spill
2693   	movq    [rsp + #16], R10	# spill
2698   	movq    R10, [rsp + #64]	# spill
269d   	movq    [rsp + #40], R10	# spill
26a2   	movq    R10, [rsp + #88]	# spill
26a7   	movl    R11, [rsp + #84]	# spill
26ac   	movq    [rsp + #64], R10	# spill
26b1   	movl    R10, R11	# spill
26b4   	movl    [rsp + #60], R10	# spill
26b9   	movq    R10, [rsp + #96]	# spill
26be   	movq    [rsp + #80], R10	# spill
26c3   	movl    RSI, #-28	# int
26c8   	movq    [rsp + #96], RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
26cf   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=rsp + #80 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #108 L[6]=_ L[7]=_ STK[0]=rsp + #104 STK[1]=rsp + #108 STK[2]=rsp + #96
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #64 L[3]=rsp + #60 L[4]=rsp + #64 L[5]=rsp + #60 L[6]=rsp + #140 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop [64]=Oop [80]=Oop [96]=Oop [104]=NarrowOop off=9940}
26d4   	int3	# ShouldNotReachHere
26d4
26d9   B284: #	N5102 &lt;- B24  Freq: 1.58779e-06
26d9   	movl    R10, [rsp + #80]	# spill
26de   	movl    [rsp + #8], R10	# spill
26e3   	movl    R11, [rsp + #48]	# spill
26e8   	movl    [rsp + #12], R11	# spill
26ed   	movq    R10, [rsp + #56]	# spill
26f2   	movq    [rsp + #24], R10	# spill
26f7   	movq    R10, [rsp + #72]	# spill
26fc   	movq    [rsp + #40], R10	# spill
2701   	movq    R10, [rsp + #64]	# spill
2706   	movq    [rsp + #48], R10	# spill
270b   	movq    R10, [rsp + #88]	# spill
2710   	movl    R11, [rsp + #84]	# spill
2715   	movq    [rsp + #72], R10	# spill
271a   	movl    R10, R11	# spill
271d   	movl    [rsp + #68], R10	# spill
2722   	movl    RSI, #-28	# int
2727   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=RBP STK[1]=rsp + #108 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #68 L[4]=rsp + #88 L[5]=rsp + #68 L[6]=rsp + #140 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #40 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #24 L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=Oop [24]=Oop [40]=Oop [48]=Oop [72]=Oop [88]=Oop off=10028}
272c   	int3	# ShouldNotReachHere
272c
2731   B285: #	N5102 &lt;- B22  Freq: 1.56699e-06
2731   	movq    RBP, [rsp + #72]	# spill
2736   	movl    R10, [rsp + #80]	# spill
273b   	movl    [rsp + #0], R10	# spill
273f   	movl    R11, [rsp + #48]	# spill
2744   	movl    [rsp + #4], R11	# spill
2749   	movq    R10, [rsp + #16]	# spill
274e   	movq    [rsp + #8], R10	# spill
2753   	movq    R10, [rsp + #56]	# spill
2758   	movq    [rsp + #16], R10	# spill
275d   	movq    R10, [rsp + #64]	# spill
2762   	movq    [rsp + #40], R10	# spill
2767   	movq    R10, [rsp + #88]	# spill
276c   	movl    R11, [rsp + #84]	# spill
2771   	movq    [rsp + #64], R10	# spill
2776   	movl    R10, R11	# spill
2779   	movl    [rsp + #60], R10	# spill
277e   	movq    R10, [rsp + #96]	# spill
2783   	movq    [rsp + #80], R10	# spill
2788   	movl    RSI, #-42	# int
278d   	movq    [rsp + #96], RAX	# spill
      	nop 	# 1 bytes pad for loops and calls
2793   	call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=rsp + #80 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #108 L[6]=_ L[7]=_ STK[0]=rsp + #104 STK[1]=rsp + #108 STK[2]=rsp + #96
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #64 L[3]=rsp + #60 L[4]=rsp + #64 L[5]=rsp + #60 L[6]=rsp + #140 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop [40]=Oop [64]=Oop [80]=Oop [96]=Oop [104]=NarrowOop off=10136}
2798   	int3	# ShouldNotReachHere
2798
279d   B286: #	N5102 &lt;- B17 B16  Freq: 2.02655e-06
279d   	movl    R10, [rsp + #48]	# spill
27a2   	movl    [rsp + #8], R10	# spill
27a7   	movq    [rsp + #40], R14	# spill
27ac   	movl    [rsp + #12], RBX	# spill
27b0   	movl    [rsp + #48], R13	# spill
      	nop 	# 2 bytes pad for loops and calls
27b7   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:75  L[0]=rsp + #72 L[1]=RBP L[2]=_ L[3]=rsp + #8 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=rsp + #40 L[9]=rsp + #12 L[10]=rsp + #48 L[11]=_
        # OopMap{[16]=Oop [40]=Oop [56]=Oop [64]=Oop [72]=Oop off=10172}
27bc   	int3	# ShouldNotReachHere
27bc
27c1   B287: #	B288 &lt;- B5  Freq: 9.98999e-07
27c1   	movq    R10, [rsp + #0]	# spill
27c1
27c5   B288: #	N5102 &lt;- B2 B287 B289 B290 B291  Freq: 4.99499e-06
27c5   	movl    RSI, #-99	# int
27ca   	movl    R8, [rsp + #48]	# spill
27cf   	movl    [rsp + #0], R8	# spill
27d3   	movq    [rsp + #8], R14	# spill
27d8   	movl    [rsp + #4], RBX	# spill
27dc   	movl    [rsp + #16], R13	# spill
27e1   	movq    [rsp + #48], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
27e7   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:75  L[0]=rsp + #48 L[1]=RBP L[2]=_ L[3]=rsp + #0 L[4]=rsp + #40 L[5]=rsp + #32 L[6]=rsp + #24 L[7]=_ L[8]=rsp + #8 L[9]=rsp + #4 L[10]=rsp + #16 L[11]=_
        # OopMap{[8]=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop off=10220}
27ec   	int3	# ShouldNotReachHere
27ec
27f1   B289: #	B288 &lt;- B8  Freq: 9.98998e-07
27f1   	movq    R10, [rsp + #0]	# spill
27f5   	jmp,s   B288
27f5
27f7   B290: #	B288 &lt;- B11  Freq: 9.98997e-07
27f7   	movq    R10, [rsp + #0]	# spill
27fb   	jmp,s   B288
27fb
27fd   B291: #	B288 &lt;- B14  Freq: 9.98996e-07
27fd   	movq    R10, [rsp + #0]	# spill
2801   	jmp,s   B288
2801
2803   B292: #	N5102 &lt;- B189 B188  Freq: 1.17586e-06
2803   	movl    R11, [rsp + #48]	# spill
2808   	movl    [rsp + #4], R11	# spill
280d   	movq    R10, [rsp + #16]	# spill
2812   	movq    [rsp + #8], R10	# spill
2817   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
281f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #128 L[5]=rsp + #88 L[6]=rsp + #84 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [72]=Oop [88]=Oop off=10276}
2824   	int3	# ShouldNotReachHere
2824
2829   B293: #	B250 &lt;- B208  Freq: 5.04216e-08
2829   	movl    R8, #2	# int
282f   	jmp     B250
282f
2834   B294: #	B218 &lt;- B253  Freq: 5.89468e-10
2834   	movl    R8, [rsp + #148]	# spill
283c   	jmp     B218
283c
2841   B295: #	B271 &lt;- B247  Freq: 4.83042e-10
2841   	movl    [rsp + #84], R11	# spill
2846   	jmp     B271
2846
284b   B296: #	B225 &lt;- B254  Freq: 2.8108e-10
284b   	movl    R11, [rsp + #148]	# spill
2853   	jmp     B225
2853
2858   B297: #	B250 &lt;- B278  Freq: 7.07634e-12
2858   	movl    R8, [rsp + #148]	# spill
2860   	jmp     B250
2860
2865   B298: #	N5102 &lt;- B117  Freq: 1e-35
2865   	movl    R10, [rsp + #48]	# spill
286a   	movl    [rsp + #12], R10	# spill
286f   	movl    RSI, #-34	# int
      	nop 	# 3 bytes pad for loops and calls
2877   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:4  L[0]=rsp + #72 L[1]=rsp + #64 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=Oop [56]=Oop [64]=Oop [72]=Oop off=10364}
287c   	int3	# ShouldNotReachHere
287c
2881   B299: #	N5102 &lt;- B186  Freq: 1e-35
2881   	movl    RSI, #-34	# int
2886   	movl    R10, [rsp + #48]	# spill
288b   	movl    [rsp + #4], R10	# spill
2890   	movq    R10, [rsp + #16]	# spill
2895   	movq    [rsp + #8], R10	# spill
289a   	movq    [rsp + #48], RAX	# spill
289f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:157  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=rsp + #84 L[4]=rsp + #128 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [48]=Oop [56]=Oop [64]=Oop [72]=Oop off=10404}
28a4   	int3	# ShouldNotReachHere
28a4
28a9   B300: #	N5102 &lt;- B68  Freq: 1e-35
28a9   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
28af   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:32  L[0]=rsp + #72 L[1]=rsp + #52 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [16]=Oop [56]=Oop [72]=Oop off=10420}
28b4   	int3	# ShouldNotReachHere
28b4
28b9   B301: #	N5102 &lt;- B71  Freq: 1e-35
28b9   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
28bf   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:52  L[0]=rsp + #72 L[1]=rsp + #52 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [16]=Oop [56]=Oop [64]=Oop [72]=Oop off=10436}
28c4   	int3	# ShouldNotReachHere
28c4
28c9   B302: #	N5102 &lt;- B102 B86 B92 B95  Freq: 0.136355
28c9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
28cf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:91  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=10452}
28d4   	int3	# ShouldNotReachHere
28d4
28d9   B303: #	N5102 &lt;- B103 B87 B93 B96  Freq: 0.136355
28d9   	movl    RBP, RDI	# spill
28db   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
28e3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:99  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=NarrowOop off=10472}
28e8   	int3	# ShouldNotReachHere
28e8
28ed   B304: #	N5102 &lt;- B104 B88 B94 B97  Freq: 0.136354
28ed   	movl    RBP, RDX	# spill
28ef   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
28f7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest::actor2 @ bci:12  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:99  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10492}
28fc   	int3	# ShouldNotReachHere
28fc
2901   B305: #	N5102 &lt;- B166 B151 B155 B159 B157 B161  Freq: 0.120385
2901   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2907   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:119  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10508}
290c   	int3	# ShouldNotReachHere
290c
2911   B306: #	N5102 &lt;- B167 B152 B156 B160 B158 B162  Freq: 0.120384
2911   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2917   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:127  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=#0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10524}
291c   	int3	# ShouldNotReachHere
291c
2921   B307: #	N5102 &lt;- B134  Freq: 0.0303271
2921   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2927   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:42  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10540}
292c   	int3	# ShouldNotReachHere
292c
2931   B308: #	N5102 &lt;- B135  Freq: 0.030327
2931   	movl    RBP, R14	# spill
2934   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
293b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop off=10560}
2940   	int3	# ShouldNotReachHere
2940
2945   B309: #	N5102 &lt;- B137  Freq: 0.030327
2945   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
294b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10576}
2950   	int3	# ShouldNotReachHere
2950
2955   B310: #	N5102 &lt;- B138  Freq: 0.0303269
2955   	movl    RBP, R10	# spill
2958   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
295f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10596}
2964   	int3	# ShouldNotReachHere
2964
2969   B311: #	N5102 &lt;- B129  Freq: 0.0303252
2969   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
296f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=rsp + #108
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10612}
2974   	int3	# ShouldNotReachHere
2974
2979   B312: #	N5102 &lt;- B84  Freq: 7.47594e-05
2979   	movl    RBP, R13	# spill
297c   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
2983   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:86  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=10632}
2988   	int3	# ShouldNotReachHere
2988
298d   B313: #	N5102 &lt;- B106  Freq: 3.69855e-05
298d   	movl    RBP, [rsp + #48]	# spill
2991   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2997   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=10652}
299c   	int3	# ShouldNotReachHere
299c
29a1   B314: #	N5102 &lt;- B67  Freq: 3.63867e-05
29a1   	movq    R10, [rsp + #16]	# spill
29a6   	movq    [rsp + #8], R10	# spill
29ab   	movl    RSI, #-12	# int
      	nop 	# 3 bytes pad for loops and calls
29b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:32  L[0]=rsp + #72 L[1]=rsp + #52 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{[8]=Oop [56]=Oop [72]=Oop off=10680}
29b8   	int3	# ShouldNotReachHere
29b8
29bd   B315: #	N5102 &lt;- B70  Freq: 3.63867e-05
29bd   	movq    R10, [rsp + #16]	# spill
29c2   	movq    [rsp + #8], R10	# spill
29c7   	movl    RSI, #-12	# int
      	nop 	# 3 bytes pad for loops and calls
29cf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:52  L[0]=rsp + #72 L[1]=rsp + #52 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [72]=Oop off=10708}
29d4   	int3	# ShouldNotReachHere
29d4
29d9   B316: #	N5102 &lt;- B116  Freq: 3.03983e-05
29d9   	movq    R10, [rsp + #16]	# spill
29de   	movq    [rsp + #8], R10	# spill
29e3   	movl    RSI, #-12	# int
      	nop 	# 3 bytes pad for loops and calls
29eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:4  L[0]=rsp + #72 L[1]=rsp + #64 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [72]=Oop off=10736}
29f0   	int3	# ShouldNotReachHere
29f0
29f5   B317: #	N5102 &lt;- B49  Freq: 2.98006e-05
29f5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
29fb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:262  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10752}
2a00   	int3	# ShouldNotReachHere
2a00
2a05   B318: #	B205 &lt;- B45  Freq: 2.97716e-05
2a05   	movq    RBP, R8	# spill
2a08   	jmp     B205
2a08
2a0d   B319: #	N5102 &lt;- B23  Freq: 1.58779e-06
2a0d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2a13   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=rsp + #108 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10776}
2a18   	int3	# ShouldNotReachHere
2a18
2a1d   B320: #	N5102 &lt;- B182  Freq: 5.93243e-07
2a1d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2a23   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:67  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10792}
2a28   	int3	# ShouldNotReachHere
2a28
2a2d   B321: #	N5102 &lt;- B185  Freq: 5.88423e-07
2a2d   	movq    R10, [rsp + #16]	# spill
2a32   	movq    [rsp + #8], R10	# spill
2a37   	movl    RSI, #-12	# int
      	nop 	# 3 bytes pad for loops and calls
2a3f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:157  L[0]=rsp + #72 L[1]=_ L[2]=_ L[3]=rsp + #84 L[4]=rsp + #128 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #72 L[1]=rsp + #80 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [56]=Oop [64]=Oop [72]=Oop off=10820}
2a44   	int3	# ShouldNotReachHere
2a44
2a49   B322: #	B335 &lt;- B239  Freq: 2.93864e-08
2a49   	# exception oop is in rax; no code emitted
2a49   	jmp,s   B335
2a49
2a4b   B323: #	B335 &lt;- B231  Freq: 2.94149e-08
2a4b   	# exception oop is in rax; no code emitted
2a4b   	jmp,s   B335
2a4b
2a4d   B324: #	B335 &lt;- B233  Freq: 2.94149e-08
2a4d   	# exception oop is in rax; no code emitted
2a4d   	jmp,s   B335
2a4d
2a4f   B325: #	B335 &lt;- B235  Freq: 2.94149e-08
2a4f   	# exception oop is in rax; no code emitted
2a4f   	jmp,s   B335
2a4f
2a51   B326: #	B335 &lt;- B237  Freq: 2.94149e-08
2a51   	# exception oop is in rax; no code emitted
2a51   	jmp,s   B335
2a51
2a53   B327: #	B335 &lt;- B229  Freq: 2.94149e-08
2a53   	# exception oop is in rax; no code emitted
2a53   	jmp,s   B335
2a53
2a55   B328: #	B335 &lt;- B227  Freq: 2.94479e-08
2a55   	# exception oop is in rax; no code emitted
2a55   	jmp,s   B335
2a55
2a57   B329: #	B335 &lt;- B200  Freq: 6.96985e-07
2a57   	# exception oop is in rax; no code emitted
2a57   	jmp,s   B335
2a57
2a59   B330: #	B335 &lt;- B202  Freq: 6.96985e-07
2a59   	# exception oop is in rax; no code emitted
2a59   	jmp,s   B335
2a59
2a5b   B331: #	B335 &lt;- B184  Freq: 5.80724e-06
2a5b   	# exception oop is in rax; no code emitted
2a5b   	jmp,s   B335
2a5b
2a5d   B332: #	B335 &lt;- B20  Freq: 1.56702e-05
2a5d   	# exception oop is in rax; no code emitted
2a5d   	jmp,s   B335
2a5d
2a5f   B333: #	B335 &lt;- B178  Freq: 3.03249e-05
2a5f   	# exception oop is in rax; no code emitted
2a5f   	jmp,s   B335
2a5f
2a61   B334: #	B335 &lt;- B180  Freq: 3.03249e-05
2a61   	# exception oop is in rax; no code emitted
2a61
2a61   B335: #	B337 &lt;- B332 B331 B329 B330 B322 B328 B333 B334 B327 B323 B324 B325 B326  Freq: 8.37271e-05
2a61   	movq    RSI, RAX	# spill
2a64   	jmp,s   B337
2a64
2a66   B336: #	B337 &lt;- B108  Freq: 0.000365007
2a66   	# exception oop is in rax; no code emitted
2a66   	movq    RSI, RAX	# spill
2a66
2a69   B337: #	N5102 &lt;- B336 B335  Freq: 0.000448734
2a69   	addq    rsp, 192	# Destroy frame
	popq   rbp

2a71   	jmp     rethrow_stub
2a71

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139941922150144'/>
<opto_assembly compile_id='387'>
{method}
 - this oop:          0x00007f46c6ae25c8
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase&apos;
 - constants:         0x00007f46c6ae1dc0 constant pool [137] {0x00007f46c6ae1dc0} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase&apos; cache=0x00007f46c6ae26a0
 - access:            0xc1000001  public 
 - name:              &apos;newEpoch&apos;
 - signature:         &apos;(Lorg/openjdk/jcstress/infra/runners/StateHolder;)V&apos;
 - max stack:         7
 - max locals:        10
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef7f0: 0xbb000000 i2c: 0x00007f46c9145fa0 c2i: 0x00007f46c91460de c2iUV: 0x00007f46c91460b1
 - compiled entry     0x00007f46c92f6c40
 - code size:         275
 - code start:        0x00007f46c6ae23f8
 - code end (excl):   0x00007f46c6ae250b
 - method data:       0x00007f46c6ae5290
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae250b
 - localvar length:   12
 - localvar start:    0x00007f46c6ae2534
 - compiled code: nmethod   4700  375       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch (275 bytes)
#
#  void ( org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase:NotNull *, org/openjdk/jcstress/infra/runners/StateHolder * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase:NotNull *
#r016 rdx:rdx   : parm 1: org/openjdk/jcstress/infra/runners/StateHolder *
# -- Old rsp -- Framesize: 144 --
#r191 rsp+140: in_preserve
#r190 rsp+136: return address
#r189 rsp+132: in_preserve
#r188 rsp+128: saved fp register
#r187 rsp+124: pad2, stack alignment
#r186 rsp+120: pad2, stack alignment
#r185 rsp+116: Fixed slot 1
#r184 rsp+112: Fixed slot 0
#r219 rsp+108: spill
#r218 rsp+104: spill
#r217 rsp+100: spill
#r216 rsp+96: spill
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N3065: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B212 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (456 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #128	# Create frame

02f   	movq    [rsp + #24], RSI	# spill
034   	movl    RSI, #-10	# int
039   	movl    R10, narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# compressed klass ptr
03f   	decode_klass_not_null R10,R10
043   	movl    RBP, [RDX + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
046   	NullCheck RDX
046
046   B2: #	B213 B3 &lt;- B1  Freq: 0.999999
046   	movl    RSI, #-12	# int
04b   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
04f   	NullCheck RBP
04f
04f   B3: #	B203 B4 &lt;- B2  Freq: 0.999998
04f   	movq    [rsp + #0], R10	# spill
053   	movq    [rsp + #32], RDX	# spill
058   	decode_heap_oop_not_null R10,RBP
05b   	movl    RSI, #-122	# int
060   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f4698177050:Constant:exact *	# compressed klass ptr
067   	jne,u  B203  P=0.000000 C=-1.000000
067
06d   B4: #	B93 B5 &lt;- B3  Freq: 0.999998
06d   	# checkcastPP of R10
06d   	movq    [rsp + #8], R10	# spill
072   	movl    R10, [R10 + #12 (8-bit)]	# range
076   	movl    [rsp + #40], R10	# spill
07b   	movl    R11, R10	# spill
07e   	decl    R11	# int
081   	testl   R10, R10
084   	jle     B93  P=0.010919 C=506713.000000
084
08a   B5: #	B182 B6 &lt;- B4  Freq: 0.989079
08a   	testl  R10, R10	# unsigned
08d   	jbe,u  B182  P=0.000001 C=-1.000000
08d
093   B6: #	B182 B7 &lt;- B5  Freq: 0.989078
093   	cmpl    R11, R10	# unsigned
096   	jnb,u  B182  P=0.000001 C=-1.000000
096
09c   B7: #	B20 &lt;- B6  Freq: 0.989077
09c   	movl    R8, #1	# int
0a2   	xorl    RDI, RDI	# int
0a4   	movl    [rsp + #88], R8	# spill
0a9   	movl    RAX, #3	# int
0ae   	jmp     B20
0ae
0b3   B8: #	B177 B9 &lt;- B29 B30  top-of-loop Freq: 1.08743
0b3   	movdl   R10, XMM2	# spill
0b8   	andl    R10, R8	# int
0bb   	movdl   XMM1, R10	# spill
0c0   	cmpl    RCX, RBP	# unsigned
0c2   	jnb,u  B177  P=0.000001 C=-1.000000
0c2
0c8   B9: #	B105 B10 &lt;- B8  Freq: 1.08743
0c8   	movl    R10, [rsp + #16]	# spill
0cd   	movl    R11, [R10 + #16 + RCX &lt;&lt; #2]	# compressed ptr<!-- safepoint while printing -->

0d2   	movdl   R10, XMM1	# spill
0d7   	incl    R10	# int
0da   	movdl   XMM3, R10	# spill
0df   	decode_heap_oop_not_null R10,R11
0e2   	movq    R13, R10	# spill
0e5   	testl   R11, R11	# compressed ptr
0e8   	je     B105  P=0.000052 C=38671.000000
0e8
0ee   B10: #	B179 B11 &lt;- B9  Freq: 1.08738
0ee   	movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
0f2   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a4182f80:Constant:exact *	# compressed klass ptr
0f9   	jne,u  B179  P=0.000001 C=-1.000000
0f9
0ff   B11: #	B131 B12 &lt;- B10  Freq: 1.08737
0ff   	movq    R11, R13	# spill
102   	# checkcastPP of R11
102   	movl    R10, [R11 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
109   	cmpq    R11, RSI	# ptr
10c   	je,u  B131  P=0.000439 C=11402.000000
10c
112   B12: #	B98 B13 &lt;- B11  Freq: 1.0869
112   	movl    R13, [R11 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
119   	cmpl    R13, R9
11c   	jne     B98  P=0.004739 C=11396.000000
11c
122   B13: #	B98 B14 &lt;- B12  Freq: 1.08175
122   	cmpl    R10, RBX
125   	jne     B98  P=0.007317 C=11343.000000
125
12b   B14: #	B15 &lt;- B13 B158 B104  Freq: 1.08689
12b   	movl    [rsp + #20], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls

130   B15: #	B211 B16 &lt;- B28 B133 B31 B14  top-of-loop Freq: 90.4997
130   	movdl   R11, XMM0	# spill
135   	movl    R10, [R11 + #12 (8-bit)]	# range
139   	NullCheck R11
139
139   B16: #	B160 B17 &lt;- B15  Freq: 90.4996
139   	movl    R8, [rsp + #20]	# spill
13e   	cmpl    R8, R10	# unsigned
141   	jnb,u  B160  P=0.000001 C=-1.000000
141
147   B17: #	B18 &lt;- B16  Freq: 90.4995
147   	incq    [R11 + #16 + R8 &lt;&lt; #3]	# long
14c
14c   B18: #	B32 B19 &lt;- B17 B113  Freq: 90.5042
14c   	movl    RDI, [rsp + #100]	# spill
150   	cmpl    RDI, [RSP + #40 (32-bit)]
154   	jge     B32	# loop end  P=0.010919 C=501180.000000
154
15a   B19: #	B20 &lt;- B18  Freq: 89.516
15a   	movl    R11, [rsp + #92]	# spill
15f   	movl    RAX, [rsp + #96]	# spill
15f
163   B20: #	B207 B21 &lt;- B7 B19 	Loop: B20-B19 inner  Freq: 90.5051
163   	movq    R10, [rsp + #8]	# spill
168   	movl    R8, [R10 + #16 + RDI &lt;&lt; #2]	# compressed ptr
16d   	movl    RDX, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
171   	NullCheck R8
171
171   B21: #	B208 B22 &lt;- B20  Freq: 90.505
171   	movq    R10, [rsp + #24]	# spill
176   	movl    R9, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.counter
17a   	movl    R10, [R9 + #8 (8-bit)]	# compressed klass ptr
17e   	NullCheck R9
17e
17e   B22: #	B161 B23 &lt;- B21  Freq: 90.5049
17e   	decode_heap_oop_not_null R8,R9
181   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/util/OpenAddressHashCounter: 0x00007f46981771a0:Constant:exact *	# compressed klass ptr
188   	jne,u  B161  P=0.000001 C=-1.000000
188
18e   B23: #	B209 B24 &lt;- B22  Freq: 90.5048
18e   	# checkcastPP of R8
18e   	movq    [rsp + #48], R8	# spill
193   	movl    R10, [R8 + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
197   	movdl   XMM0, R10	# spill
19c   	movl    R9, [RDX + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1a3   	NullCheck RDX
1a3
1a3   B24: #	B210 B25 &lt;- B23  Freq: 90.5047
1a3   	movl    RSI, RDI	# spill
1a5   	incl    RSI	# int
1a7   	movl    R8, [R8 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.length
1ab   	decl    R8	# int
1ae   	movl    RBX, [RDX + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1b4   	movq    R10, [rsp + #48]	# spill
1b9   	movl    RBP, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.keys
1bd   	movl    [rsp + #16], RBP	# spill
1c1   	movl    R10, R9	# spill
1c4   	sall    R10, #5
1c8   	subl    R10, R9	# int
1cb   	decode_heap_oop_not_null RBP,RBP
1cb   	movq    [rsp + #56], RBP	# spill
1d0   	addl    R10, RBX	# int
1d3   	andl    R10, R8	# int
1d6   	movl    [rsp + #20], R10	# spill
1db   	movl    RCX, R10	# spill
1de   	incl    RCX	# int
1e0   	movl    RBP, [rsp + #16]	# spill
1e4   	movl    RBP, [RBP + #12 (8-bit)]	# range
1e7   	NullCheck RBP
1e7
1e7   B25: #	B159 B26 &lt;- B24  Freq: 90.5046
1e7   	andl    RCX, R8	# int
1ea   	movl    R14, RCX	# spill
1ed   	incl    R14	# int
1f0   	cmpl    R10, RBP	# unsigned
1f3   	jnb,u  B159  P=0.000001 C=-1.000000
1f3
1f9   B26: #	B108 B27 &lt;- B25  Freq: 90.5045
1f9   	movl    [rsp + #100], RSI	# spill
1fd   	movl    [rsp + #96], RAX	# spill
201   	movl    [rsp + #92], R11	# spill
206   	movl    R10, [rsp + #16]	# spill
20b   	movl    RSI, [rsp + #20]	# spill
20f   	movl    R10, [R10 + #16 + RSI &lt;&lt; #2]	# compressed ptr
214   	andl    R14, R8	# int
217   	decode_heap_oop_not_null RSI,RDX
21a   	testl   R10, R10	# compressed ptr
21d   	je     B108  P=0.000052 C=38671.000000
21d
223   B27: #	B162 B28 &lt;- B26  Freq: 90.4998
223   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
227   	movl    RAX, R14	# spill
22a   	incl    RAX	# int
22c   	decode_heap_oop_not_null R10,R10
22c   	movq    R13, R10	# spill
22f   	andl    RAX, R8	# int
232   	movl    R10, RAX	# spill
235   	incl    R10	# int
238   	movdl   XMM2, R10	# spill
23d   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a4182f80:Constant:exact *	# compressed klass ptr
244   	jne,u  B162  P=0.000001 C=-1.000000
244
24a   B28: #	B15 B29 &lt;- B27  Freq: 90.4997
24a   	movq    R10, R13	# spill
24d   	# checkcastPP of R10
24d   	cmpq    R10, RSI	# ptr
250   	je,u  B15  P=0.000439 C=11402.000000
250
256   B29: #	B8 B30 &lt;- B28  Freq: 90.4601
256   	movl    R11, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
25d   	cmpl    R11, R9
260   	jne     B8  P=0.004739 C=11396.000000
260
266   B30: #	B8 B31 &lt;- B29  Freq: 90.0314
266   	movl    R10, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
26d   	cmpl    R10, RBX
270   	jne     B8  P=0.007317 C=11343.000000
270
276   B31: #	B15 &lt;- B30  Freq: 89.3726
276   	jmp     B15
276
27b   B32: #	B33 &lt;- B18  Freq: 0.988251
27b   	movl    R11, [rsp + #92]	# spill
27b
280   B33: #	B129 B34 &lt;- B32 B93  Freq: 0.999171
280   	movl    RSI, #-122	# int
285   	movq    R10, [rsp + #32]	# spill
28a   	movzbl  R10, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
28f   	movl    R9, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a4182f80:Constant:exact *	# compressed klass ptr
295   	MEMBAR-acquire ! (empty encoding)
295   	movq    R8, [rsp + #24]	# spill
29a   	movl    R8, [R8 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
29e   	decode_klass_not_null R9,R9
2a2   	movq    [rsp + #16], R9	# spill
2a7   	movl    R9, [rsp + #40]	# spill
2ac   	sall    R9, #1
2af   	testl   R10, R10
2b2   	jne     B129  P=0.002350 C=5533.000000
2b2
2b8   B34: #	B35 &lt;- B33  Freq: 0.996823
2b8   	movl    R10, [rsp + #40]	# spill
2bd   	movl    [rsp + #64], R10	# spill
2bd
2c2   B35: #	B56 B36 &lt;- B34 B130  Freq: 0.999171
2c2   	movl    R10, [rsp + #40]	# spill
2c7   	testl   R10, R10
2ca   	jle     B56  P=0.011288 C=489390.000000
2ca
2d0   B36: #	B183 B37 &lt;- B35  Freq: 0.987893
2d0   	testl  R10, R10	# unsigned
2d3   	jbe,u  B183  P=0.000001 C=-1.000000
2d3
2d9   B37: #	B183 B38 &lt;- B36  Freq: 0.987891
2d9   	cmpl    R11, R10	# unsigned
2dc   	jnb,u  B183  P=0.000001 C=-1.000000
2dc
2e2   B38: #	B205 B39 &lt;- B37  Freq: 0.98789
2e2   	movq    R10, [rsp + #8]	# spill
2e7   	movl    R10, [R10 + #16 (8-bit)]	# compressed ptr
2eb   	movl    RBX, [rsp + #40]	# spill
2ef   	addl    RBX, #-3	# int
2f2   	movl    R10, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
2f6   	NullCheck R10
2f6
2f6   B39: #	B206 B40 &lt;- B38  Freq: 0.987889
2f6   	cmpl    R11, RBX
2f9   	movl    R8, #-2147483648	# int
2ff   	cmovll RBX, R8	# signed, int
303   	movl    [R10 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
30a   	NullCheck R10
30a
30a   B40: #	B184 B41 &lt;- B39  Freq: 0.987888
30a   	movl    [R10 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
311   	cmpl    RBX, #1
314   	jle     B184  P=0.000001 C=-1.000000
314
31a   B41: #	B42 &lt;- B40  Freq: 0.987887
31a   	movl    RCX, #1	# int
      	nop 	# 1 bytes pad for loops and calls

320   B42: #	B205 B43 &lt;- B41 B50 	Loop: B42-B50 inner main of N463 Freq: 87.4583
320   	movq    R10, [rsp + #8]	# spill
325   	movl    R10, [R10 + #16 + RCX &lt;&lt; #2]	# compressed ptr
32a   	movslq  RDI, RCX	# i2l
32d   	movq    R11, [rsp + #8]	# spill
332   	movl    R8, [R11 + #20 + RDI &lt;&lt; #2]	# compressed ptr
337   	movl    R11, [R11 + #24 + RDI &lt;&lt; #2]	# compressed ptr
33c   	movl    R9, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
340   	NullCheck R10
340
340   B43: #	B206 B44 &lt;- B42  Freq: 87.4582
340   	movl    [R9 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
347   	NullCheck R9
347
347   B44: #	B205 B45 &lt;- B43  Freq: 87.4581
347   	movl    [R9 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
34e   	movl    R10, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
352   	NullCheck R8
352
352   B45: #	B206 B46 &lt;- B44  Freq: 87.458
352   	movl    [R10 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
359   	NullCheck R10
359
359   B46: #	B205 B47 &lt;- B45  Freq: 87.4579
359   	movl    [R10 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
360   	movl    R11, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
364   	NullCheck R11
364
364   B47: #	B206 B48 &lt;- B46  Freq: 87.4579
364   	movl    [R11 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
36b   	NullCheck R11
36b
36b   B48: #	B205 B49 &lt;- B47  Freq: 87.4578
36b   	movl    [R11 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
372   	addl    RCX, #4	# int
375   	movq    R10, [rsp + #8]	# spill
37a   	movl    R10, [R10 + #28 + RDI &lt;&lt; #2]	# compressed ptr
37f   	movl    R11, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
383   	NullCheck R10
383
383   B49: #	B206 B50 &lt;- B48  Freq: 87.4577
383   	movl    [R11 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
38a   	NullCheck R11
38a
38a   B50: #	B42 B51 &lt;- B49  Freq: 87.4576
38a   	movl    [R11 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
391   	cmpl    RCX, RBX
393   	jl,s   B42	# loop end  P=0.988712 C=483866.000000
393
395   B51: #	B56 B52 &lt;- B184 B50  Freq: 0.98718
395   	cmpl    RCX, [RSP + #40 (32-bit)]
399   	jge,s   B56  P=0.500000 C=-1.000000
399
39b   B52: #	B53 &lt;- B51  Freq: 0.49359
39b   	# castII of RCX
      	nop 	# 1 bytes pad for loops and calls

39c   B53: #	B205 B54 &lt;- B52 B55 	Loop: B53-B55 inner post of N2030 Freq: 0.987177
39c   	movq    R10, [rsp + #8]	# spill
3a1   	movl    R11, [R10 + #16 + RCX &lt;&lt; #2]	# compressed ptr
3a6   	incl    RCX	# int
3a8   	movl    R11, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
3ac   	NullCheck R11
3ac
3ac   B54: #	B206 B55 &lt;- B53  Freq: 0.987176
3ac   	movl    [R11 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
3b3   	NullCheck R11
3b3
3b3   B55: #	B53 B56 &lt;- B54  Freq: 0.987175
3b3   	movl    [R11 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
3ba   	cmpl    RCX, [RSP + #40 (32-bit)]
3be   	jl,s   B53	# loop end  P=0.500000 C=483866.000000
3be
3c0   B56: #	B114 B57 &lt;- B55 B51 B35  Freq: 0.998456
3c0   	movl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4698176ae0:Constant:exact *	# compressed klass ptr
3c6   	decode_klass_not_null R10,R11
3d4   	movq    [rsp + #32], R10	# spill
3d9   	movl    R11, [rsp + #64]	# spill
3de   	cmpl    R11, [RSP + #40 (32-bit)]
3e3   	jg     B114  P=0.002353 C=5524.000000
3e3
3e9   B57: #	B80 B58 &lt;- B56  Freq: 0.996106
3e9   	movl    R11, [rsp + #40]	# spill
3ee   	testl   R11, R11
3f1   	jle     B80  P=0.011740 C=470544.000000
3f1
3f7   B58: #	B186 B59 &lt;- B57  Freq: 0.984412
3f7   	testl  R11, R11	# unsigned
3fa   	jbe,u  B186  P=0.000001 C=-1.000000
3fa
400   B59: #	B60 &lt;- B58  Freq: 0.984411
400   	movl    [rsp + #16], R11	# spill
400
405   B60: #	B185 B61 &lt;- B128 B169 B59  Freq: 0.986733
405   	movl    R11, [rsp + #16]	# spill
40a   	decl    R11	# int
40d   	movl    [rsp + #20], R11	# spill
412   	cmpl    R11, [RSP + #16 (32-bit)]	# unsigned
417   	jnb,u  B185  P=0.000001 C=-1.000000
417
41d   B61: #	B148 B62 &lt;- B60  Freq: 0.986732
41d   	movq    R10, [rsp + #8]	# spill
422   	movl    RBP, [R10 + #16 (8-bit)]	# compressed ptr
426   	# TLS is in R15
426   	movq    R11, [R15 + #112 (8-bit)]	# ptr
42a   	movq    R10, R11	# spill
42d   	addq    R10, #280	# ptr
434   	# TLS is in R15
434   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
43b   	jnb,u  B148  P=0.000100 C=-1.000000
43b
441   B62: #	B63 &lt;- B61  Freq: 0.986633
441   	# TLS is in R15
441   	movq    [R15 + #112 (8-bit)], R10	# ptr
445   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
44d   	movq    RDI, R11	# spill
450   	addq    RDI, #16	# ptr
454   	movq    R10, [rsp + #0]	# spill
458   	movq    R10, [R10 + #176 (32-bit)]	# ptr
45f   	movq    [R11], R10	# ptr
462   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# compressed klass ptr
46a   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
46e   	movl    RCX, #33	# long (unsigned 32-bit)
473   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
47d
47d   B63: #	B164 B64 &lt;- B149 B62  Freq: 0.986732
47d   	
47d   	MEMBAR-storestore (empty encoding)
47d   	# checkcastPP of R11
47d   	movq    R9, R11	# spill
480   	encode_heap_oop_not_null R11,R11
588   	decode_heap_oop_not_null R10,RBP
58b   	movl    [RBP + #12 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
58f   	NullCheck RBP
58f
58f   B64: #	B67 B65 &lt;- B63  Freq: 0.986731
58f   	movq    R10, R10	# ptr -&gt; long
58f   	shrq    R10, #9
593   	movq    R11, 0x00007f46dbf28000	# ptr
59d   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
5a1   	movl    R11, [rsp + #20]	# spill
5a6   	cmpl    R11, #1
5aa   	jg,s   B67  P=0.999999 C=-1.000000
5aa
5ac   B65: #	B74 &lt;- B64  Freq: 9.99834e-07
5ac   	movl    R10, #1	# int
5b2   	jmp     B74
      	nop 	# 9 bytes pad for loops and calls

5c0   B66: #	B67 &lt;- B73  top-of-loop Freq: 83.0503
5c0   	movl    [rsp + #88], R10	# spill
5c0
5c5   B67: #	B94 B68 &lt;- B64 B66 	Loop: B67-B66 inner main of N805 Freq: 84.037
5c5   	movq    R10, [rsp + #8]	# spill
5ca   	movl    R11, [rsp + #88]	# spill
5cf   	movl    R11, [R10 + #16 + R11 &lt;&lt; #2]	# compressed ptr
5d4   	movl    [rsp + #40], R11	# spill
5d9   	# TLS is in R15
5d9   	movq    R9, [R15 + #112 (8-bit)]	# ptr
5dd   	decode_heap_oop_not_null R10,R11
5e0   	movq    [rsp + #48], R10	# spill
5e5   	movq    R10, R9	# spill
5e8   	addq    R10, #280	# ptr
5ef   	movl    R11, [rsp + #88]	# spill
5f4   	addl    R11, #2	# int
5f8   	movl    [rsp + #44], R11	# spill
5fd   	# TLS is in R15
5fd   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
604   	jnb,u  B94  P=0.000100 C=-1.000000
604
60a   B68: #	B69 &lt;- B67  Freq: 84.0286
60a   	movq    RDI, R9	# spill
60d   	addq    RDI, #16	# ptr
611   	# TLS is in R15
611   	movq    [R15 + #112 (8-bit)], R10	# ptr
615   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
61d   	movq    R10, [rsp + #0]	# spill
621   	movq    R10, [R10 + #176 (32-bit)]	# ptr
628   	movq    [R9], R10	# ptr
62b   	movl    [R9 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# compressed klass ptr
633   	movl    [R9 + #12 (8-bit)], R12	# int (R12_heapbase==0)
637   	movl    RCX, #33	# long (unsigned 32-bit)
63c   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
646
646   B69: #	B164 B70 &lt;- B95 B68  Freq: 84.037
646   	
646   	movl    R10, [rsp + #88]	# spill
64b   	incl    R10	# int
64e   	MEMBAR-storestore (empty encoding)
64e   	# checkcastPP of R9
64e   	movslq  R11, [RSP + #88 (32-bit)]	# int -&gt; long
653   	encode_heap_oop_not_null R8,R9
75e   	movq    RCX, [rsp + #8]	# spill
763   	movl    RBP, [RCX + #20 + R11 &lt;&lt; #2]	# compressed ptr
768   	movl    RCX, [rsp + #40]	# spill
76c   	movl    [RCX + #12 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
770   	NullCheck RCX
770
770   B70: #	B96 B71 &lt;- B69  Freq: 84.0369
770   	movq    R11, [rsp + #48]	# spill
775   	movq    R11, R11	# ptr -&gt; long
775   	decode_heap_oop_not_null RBX,RBP
778   	shrq    R11, #9
77c   	movq    R8, 0x00007f46dbf28000	# ptr
786   	movb    [R8 + R11], R12	# short/char (R12_heapbase==0)
78a   	# TLS is in R15
78a   	movq    R9, [R15 + #112 (8-bit)]	# ptr
78e   	movq    R11, R9	# spill
791   	addq    R11, #280	# ptr
798   	# TLS is in R15
798   	cmpq    R11, [R15 + #128 (32-bit)]	# raw ptr
79f   	jnb,u  B96  P=0.000100 C=-1.000000
79f
7a5   B71: #	B72 &lt;- B70  Freq: 84.0285
7a5   	PREFETCHNTA [R11 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
7ad   	# TLS is in R15
7ad   	movq    [R15 + #112 (8-bit)], R11	# ptr
7b1   	movq    RDI, R9	# spill
7b4   	addq    RDI, #16	# ptr
7b8   	movq    R10, [rsp + #0]	# spill
7bc   	movq    R10, [R10 + #176 (32-bit)]	# ptr
7c3   	movq    [R9], R10	# ptr
7c6   	movl    [R9 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# compressed klass ptr
7ce   	movl    [R9 + #12 (8-bit)], R12	# int (R12_heapbase==0)
7d2   	movl    RCX, #33	# long (unsigned 32-bit)
7d7   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
7e1
7e1   B72: #	B164 B73 &lt;- B97 B71  Freq: 84.0369
7e1   	
7e1   	MEMBAR-storestore (empty encoding)
7e1   	# checkcastPP of R9
7e1   	testl   RBP, RBP	# compressed ptr
7e3   	je     B164  P=0.000001 C=-1.000000
7e3
7e9   B73: #	B66 B74 &lt;- B72  Freq: 84.0368
7e9   	movq    R10, RBX	# ptr -&gt; long
7ec   	encode_heap_oop_not_null R11,R9
8f7   	shrq    R10, #9
8fb   	movq    R8, 0x00007f46dbf28000	# ptr
905   	movb    [R8 + R10], R12	# short/char (R12_heapbase==0)
909   	movl    [RBP + #12 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
90d   	movl    R10, [rsp + #44]	# spill
912   	cmpl    R10, [RSP + #20 (32-bit)]
917   	jl     B66	# loop end  P=0.988260 C=465020.000000
917
91d   B74: #	B80 B75 &lt;- B65 B73  Freq: 0.986561
91d   	cmpl    R10, [RSP + #16 (32-bit)]
922   	jge     B80  P=0.500000 C=-1.000000
922
928   B75: #	B76 &lt;- B74  Freq: 0.49328
928   	# castII of R10
928   	movl    [rsp + #20], R10	# spill
      	nop 	# 3 bytes pad for loops and calls

930   B76: #	B150 B77 &lt;- B75 B79 	Loop: B76-B79 inner post of N2042 Freq: 0.98656
930   	# TLS is in R15
930   	movq    R11, [R15 + #112 (8-bit)]	# ptr
934   	movq    R10, [rsp + #8]	# spill
939   	movl    R9, [rsp + #20]	# spill
93e   	movl    RBP, [R10 + #16 + R9 &lt;&lt; #2]	# compressed ptr
943   	movq    R10, R11	# spill
946   	addq    R10, #280	# ptr
94d   	# TLS is in R15
94d   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
954   	jnb,u  B150  P=0.000100 C=-1.000000
954
95a   B77: #	B78 &lt;- B76  Freq: 0.986461
95a   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
962   	# TLS is in R15
962   	movq    [R15 + #112 (8-bit)], R10	# ptr
966   	movq    RDI, R11	# spill
969   	addq    RDI, #16	# ptr
96d   	movq    R10, [rsp + #0]	# spill
971   	movq    R10, [R10 + #176 (32-bit)]	# ptr
978   	movq    [R11], R10	# ptr
97b   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# compressed klass ptr
983   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
987   	movl    RCX, #33	# long (unsigned 32-bit)
98c   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
996
996   B78: #	B187 B79 &lt;- B151 B77  Freq: 0.98656
996   	
996   	movl    R10, [rsp + #20]	# spill
99b   	incl    R10	# int
99e   	movl    [rsp + #20], R10	# spill
9a3   	MEMBAR-storestore (empty encoding)
9a3   	# checkcastPP of R11
9a3   	decode_heap_oop_not_null R10,RBP
9a6   	testl   RBP, RBP	# compressed ptr
9a8   	je     B187  P=0.000001 C=-1.000000
9a8
9ae   B79: #	B76 B80 &lt;- B78  Freq: 0.986559
9ae   	encode_heap_oop_not_null R8,R11
ab9   	movl    [RBP + #12 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
abd   	movq    R10, R10	# ptr -&gt; long
abd   	shrq    R10, #9
ac1   	movq    R11, 0x00007f46dbf28000	# ptr
acb   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
acf   	movl    R11, [rsp + #20]	# spill
ad4   	cmpl    R11, [RSP + #16 (32-bit)]
ad9   	jl     B76	# loop end  P=0.500000 C=465020.000000
ad9
adf   B80: #	B138 B81 &lt;- B79 B74 B126 B167 B57  Freq: 0.998281
adf   	movq    RCX, [rsp + #24]	# spill
ae4   	movl    R10, [RCX + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.version
ae8   	movq    RSI, precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4698176ae0:Constant:exact *	# ptr
af2   	movq    R9, [rsp + #8]	# spill
af7   	encode_heap_oop_not_null RBP,R9
c02   	# TLS is in R15
c02   	movq    R11, [R15 + #112 (8-bit)]	# ptr
c06   	movq    R8, R11	# spill
c09   	addq    R8, #48	# ptr
c0d   	# TLS is in R15
c0d   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
c14   	jnb,u  B138  P=0.000100 C=-1.000000
c14
c1a   B81: #	B82 &lt;- B80  Freq: 0.998181
c1a   	# TLS is in R15
c1a   	movq    [R15 + #112 (8-bit)], R8	# ptr
c1e   	movq    R9, [rsp + #32]	# spill
c23   	movq    R9, [R9 + #176 (32-bit)]	# ptr
c2a   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
c32   	movq    [R11], R9	# ptr
c35   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4698176ae0:Constant:exact *	# compressed klass ptr
c3d   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
c41   	movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
c45   	movq    [R11 + #24 (8-bit)], R12	# long (R12_heapbase==0)
c49   	movq    [R11 + #32 (8-bit)], R12	# long (R12_heapbase==0)
c4d   	movq    [R11 + #40 (8-bit)], R12	# long (R12_heapbase==0)
c4d
c51   B82: #	B214 B83 &lt;- B139 B81  Freq: 0.998281
c51   	movl    R9, [RCX + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
c55   	
c55   	MEMBAR-storestore (empty encoding)
c55   	# checkcastPP of R11
c55   	movzbl  R8, [R9 + #32 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/Control.isStopped
c5a   	NullCheck R9
c5a
c5a   B83: #	B140 B84 &lt;- B82  Freq: 0.99828
c5a   	MEMBAR-acquire ! (empty encoding)
c5a   	movl    R9, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a411e730:Constant:exact *	# compressed klass ptr
c60   	decode_klass_not_null RCX,R9
c6e   	decode_heap_oop_not_null RBX,R10
c71   	movl    [R11 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/infra/runners/StateHolder.countWorkers
c79   	movq    R9, R11	# ptr -&gt; long
c7c   	movb    [R11 + #16 (8-bit)], R8	# byte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
c80   	movl    [R11 + #24 (8-bit)], RBP	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
c84   	shrq    R9, #9
c88   	movq    R8, 0x00007f46dbf28000	# ptr
c92   	movb    [R8 + R9], R12	# short/char (R12_heapbase==0)
c96   	# TLS is in R15
c96   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
c9a   	movq    R8, RAX	# spill
c9d   	addq    R8, #16	# ptr
ca1   	# TLS is in R15
ca1   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
ca8   	jnb,u  B140  P=0.000100 C=-1.000000
ca8
cae   B84: #	B85 &lt;- B83  Freq: 0.99818
cae   	# TLS is in R15
cae   	movq    [R15 + #112 (8-bit)], R8	# ptr
cb2   	movq    R9, [RCX + #176 (32-bit)]	# ptr
cb9   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
cc1   	movq    [RAX], R9	# ptr
cc4   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a411e730:Constant:exact *	# compressed klass ptr
ccb   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
ccb
ccf   B85: #	B142 B86 &lt;- B141 B84  Freq: 0.99828
ccf   	
ccf   	MEMBAR-storestore (empty encoding)
ccf   	# checkcastPP of RAX
ccf   	encode_heap_oop_not_null R8,RAX
dda   	MEMBAR-release ! (empty encoding)
dda   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
de1   	lock addl [rsp + #0], 0	! membar_volatile
de6   	movq    R9, R11	# ptr -&gt; long
de9   	movl    [R11 + #32 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
ded   	shrq    R9, #9
df1   	movq    R8, 0x00007f46dbf28000	# ptr
dfb   	movb    [R8 + R9], R12	# short/char (R12_heapbase==0)
dff   	# TLS is in R15
dff   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
e03   	movq    R8, RAX	# spill
e06   	addq    R8, #16	# ptr
e0a   	# TLS is in R15
e0a   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
e11   	jnb,u  B142  P=0.000100 C=-1.000000
e11
e17   B86: #	B87 &lt;- B85  Freq: 0.99818
e17   	# TLS is in R15
e17   	movq    [R15 + #112 (8-bit)], R8	# ptr
e1b   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
e23   	movq    R8, [RCX + #176 (32-bit)]	# ptr
e2a   	movq    [RAX], R8	# ptr
e2d   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a411e730:Constant:exact *	# compressed klass ptr
e34   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
e34
e38   B87: #	B144 B88 &lt;- B143 B86  Freq: 0.99828
e38   	
e38   	MEMBAR-storestore (empty encoding)
e38   	# checkcastPP of RAX
e38   	MEMBAR-release ! (empty encoding)
e38   	encode_heap_oop_not_null R8,RAX
f43   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
f4a   	lock addl [rsp + #0], 0	! membar_volatile
f4f   	movl    [R11 + #28 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
f53   	movq    R8, R11	# ptr -&gt; long
f56   	shrq    R8, #9
f5a   	movq    R9, 0x00007f46dbf28000	# ptr
f64   	movb    [R9 + R8], R12	# short/char (R12_heapbase==0)
f68   	# TLS is in R15
f68   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
f6c   	movq    R8, RAX	# spill
f6f   	addq    R8, #16	# ptr
f73   	# TLS is in R15
f73   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
f7a   	jnb,u  B144  P=0.000100 C=-1.000000
f7a
f80   B88: #	B89 &lt;- B87  Freq: 0.99818
f80   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
f88   	# TLS is in R15
f88   	movq    [R15 + #112 (8-bit)], R8	# ptr
f8c   	movq    R8, [RCX + #176 (32-bit)]	# ptr
f93   	movq    [RAX], R8	# ptr
f96   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a411e730:Constant:exact *	# compressed klass ptr
f9d   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
f9d
fa1   B89: #	B146 B90 &lt;- B145 B88  Freq: 0.99828
fa1   	
fa1   	MEMBAR-storestore (empty encoding)
fa1   	# checkcastPP of RAX
fa1   	encode_heap_oop_not_null R8,RAX
10ac   	MEMBAR-release ! (empty encoding)
10ac   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
10b3   	lock addl [rsp + #0], 0	! membar_volatile
10b8   	movl    [R11 + #36 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
10bc   	movq    R8, R11	# ptr -&gt; long
10bf   	shrq    R8, #9
10c3   	movq    R9, 0x00007f46dbf28000	# ptr
10cd   	movb    [R9 + R8], R12	# short/char (R12_heapbase==0)
10d1   	# TLS is in R15
10d1   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
10d5   	movq    R8, RAX	# spill
10d8   	addq    R8, #16	# ptr
10dc   	# TLS is in R15
10dc   	cmpq    R8, [R15 + #128 (32-bit)]	# raw ptr
10e3   	jnb,u  B146  P=0.000100 C=-1.000000
10e3
10e9   B90: #	B91 &lt;- B89  Freq: 0.99818
10e9   	# TLS is in R15
10e9   	movq    [R15 + #112 (8-bit)], R8	# ptr
10ed   	movq    R9, [RCX + #176 (32-bit)]	# ptr
10f4   	movq    [RAX], R9	# ptr
10f7   	PREFETCHNTA [R8 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
10ff   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a411e730:Constant:exact *	# compressed klass ptr
1106   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
1106
110a   B91: #	B181 B92 &lt;- B147 B90  Freq: 0.99828
110a   	
110a   	MEMBAR-storestore (empty encoding)
110a   	# checkcastPP of RAX
110a   	encode_heap_oop_not_null R8,RAX
1215   	MEMBAR-release ! (empty encoding)
1215   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
121c   	MEMBAR-volatile (unnecessary so empty encoding)
121c   	movq    R9, R11	# ptr -&gt; long
121f   	movl    [R11 + #40 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
1223   	shrq    R9, #9
1227   	movq    R8, 0x00007f46dbf28000	# ptr
1231   	movb    [R8 + R9], R12	# short/char (R12_heapbase==0)
1235   	MEMBAR-release ! (empty encoding)
1235   	movb    [R11 + #18 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
123a   	MEMBAR-volatile (unnecessary so empty encoding)
123a   	MEMBAR-release ! (empty encoding)
123a   	movb    [R11 + #19 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
123f   	MEMBAR-volatile (unnecessary so empty encoding)
123f   	MEMBAR-release ! (empty encoding)
123f   	movb    [R11 + #17 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
1244   	MEMBAR-volatile (unnecessary so empty encoding)
1244   	MEMBAR-release ! (empty encoding)
1244   	movb    [R11 + #20 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1249   	lock addl [rsp + #0], 0	! membar_volatile
124e   	MEMBAR-release ! (empty encoding)
124e   	testl   R10, R10	# compressed ptr
1251   	je     B181  P=0.000001 C=-1.000000
1251
1257   B92: #	N3065 &lt;- B91  Freq: 0.998279
1257   	MEMBAR-release ! (empty encoding)
1257   	encode_heap_oop_not_null R8,R11
1362   	movq    R11, RBX	# ptr -&gt; long
1365   	movl    [R10 + #12 (8-bit)], R8	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
1369   	shrq    R11, #9
136d   	movq    R10, 0x00007f46dbf28000	# ptr
1377   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
137b   	lock addl [rsp + #0], 0	! membar_volatile
1380   	addq    rsp, 128	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

138e   	ret
138e
138f   B93: #	B33 &lt;- B4  Freq: 0.0109194
138f   	movl    R8, #1	# int
1395   	movl    [rsp + #88], R8	# spill
139a   	jmp     B33
139a
139f   B94: #	B229 B95 &lt;- B67  Freq: 0.00840509
139f   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# ptr
13a9   	movq    RBP, [rsp + #24]	# spill
      	nop 	# 1 bytes pad for loops and calls
13af   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=rsp + #8 L[7]=rsp + #16 L[8]=rsp + #88 L[9]=_ STK[0]=rsp + #40
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [40]=NarrowOop [48]=Oop off=5044}
13b4
13b4   B95: #	B69 &lt;- B94  Freq: 0.00840493
        # Block is sole successor of call
13b4   	movq    R9, RAX	# spill
13b7   	jmp     B69
13b7
13bc   B96: #	B230 B97 &lt;- B70  Freq: 0.00840509
13bc   	movq    [rsp + #56], RBX	# spill
13c1   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# ptr
13cb   	movl    [rsp + #40], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
13d3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #24 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=rsp + #8 L[7]=rsp + #16 L[8]=rsp + #40 L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [8]=Oop [24]=Oop [56]=Oop off=5080}
13d8
13d8   B97: #	B72 &lt;- B96  Freq: 0.00840492
        # Block is sole successor of call
13d8   	movq    R9, RAX	# spill
13db   	movq    RBX, [rsp + #56]	# spill
13e0   	jmp     B72
13e0
13e5   B98: #	B191 B99 &lt;- B12 B13  Freq: 0.0130658
13e5   	cmpl    R14, RBP	# unsigned
13e8   	jnb,u  B191  P=0.000001 C=-1.000000
13e8
13ee   B99: #	B188 B100 &lt;- B98  Freq: 0.0130657
13ee   	movl    R10, [rsp + #16]	# spill
13f3   	movl    R11, [R10 + #16 + R14 &lt;&lt; #2]	# compressed ptr
13f8   	decode_heap_oop_not_null R10,R11
13fb   	movq    R13, R10	# spill
13fe   	testl   R11, R11	# compressed ptr
1401   	je     B188  P=0.000052 C=38671.000000
1401
1407   B100: #	B193 B101 &lt;- B99  Freq: 0.0130651
1407   	movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
140b   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a4182f80:Constant:exact *	# compressed klass ptr
1412   	jne,u  B193  P=0.000001 C=-1.000000
1412
1418   B101: #	B166 B102 &lt;- B100  Freq: 0.013065
1418   	movq    R10, R13	# spill
141b   	# checkcastPP of R10
141b   	movq    R11, R10	# spill
141e   	movl    R10, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1425   	cmpq    R11, RSI	# ptr
1428   	je,u  B166  P=0.000439 C=11402.000000
1428
142e   B102: #	B152 B103 &lt;- B101  Freq: 0.0130593
142e   	movl    RCX, [R11 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1435   	cmpl    R10, R9
1438   	jne     B152  P=0.004739 C=11396.000000
1438
143e   B103: #	B152 B104 &lt;- B102  Freq: 0.0129974
143e   	cmpl    RCX, RBX
1440   	jne     B152  P=0.007317 C=11343.000000
1440
1446   B104: #	B14 &lt;- B103 B176  Freq: 0.0129042
1446   	movl    RCX, R14	# spill
1449   	jmp     B14
1449
144e   B105: #	B106 &lt;- B9  Freq: 5.62603e-05
144e   	movl    RAX, RCX	# spill
144e
1450   B106: #	B107 &lt;- B105 B153  Freq: 5.62684e-05
1450   	movdl   XMM1, RAX	# spill
1450
1454   B107: #	B108 &lt;- B106 B188 B171  Freq: 5.69445e-05
1454   	movss   [rsp + #20], XMM1	# spill
1454
145a   B108: #	B228 B109 &lt;- B107 B26  Freq: 0.00473936
145a   	movl    [rsp + #44], RDI	# spill
145e   	movslq  R11, [RSP + #20 (32-bit)]	# int -&gt; long
1463   	movl    R10, [rsp + #16]	# spill
1468   	leaq    R10, [R10 + #16 + R11 &lt;&lt; #2]	# ptr idxscaleoffnarrow
146d   	movq    [rsp + #104], R11	# spill
1472   	movq    [rsp + #64], R10	# spill
1477   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::decouple
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:103  L[0]=rsp + #48 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #20 L[6]=_ L[7]=_ STK[0]=rsp + #16 STK[1]=rsp + #20
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #8 L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #40 L[6]=rsp + #44 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[8]=Oop [16]=NarrowOop [24]=Oop [32]=Oop [48]=Oop [56]=Oop [64]=Derived_oop_[56] off=5244}
147c
147c   B109: #	B194 B110 &lt;- B108  Freq: 0.00473927
        # Block is sole successor of call
147c   	movl    R8, [rsp + #16]	# spill
1481   	movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
1485   	movl    RSI, #-28	# int
148a   	movl    R9, [rsp + #20]	# spill
148f   	cmpl    R9, RBP	# unsigned
1492   	jnb,u  B194  P=0.000001 C=-1.000000
1492
1498   B110: #	B196 B111 &lt;- B109  Freq: 0.00473926
1498   	encode_heap_oop R9,RAX
1523   	cmpl    R10, narrowklass: precise klass [Ljava/lang/Object;: 0x00007f4698179bb0:Constant:exact *	# compressed klass ptr
152a   	jne,u  B196  P=0.000001 C=-1.000000
152a
1530   B111: #	B215 B112 &lt;- B110  Freq: 0.00473926
1530   	movq    R10, [rsp + #64]	# spill
1535   	movl    [R10], R9	# compressed ptr
1538   	movq    R10, [rsp + #48]	# spill
153d   	movl    RBP, [R10 + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
1541   	movq    R10, [rsp + #64]	# spill
1546   	movq    R10, R10	# ptr -&gt; long
1546   	shrq    R10, #9
154a   	movq    R11, 0x00007f46dbf28000	# ptr
1554   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
1558   	movl    R11, [RBP + #12 (8-bit)]	# range
155c   	NullCheck RBP
155c
155c   B112: #	B195 B113 &lt;- B111  Freq: 0.00473925
155c   	movl    R10, [rsp + #20]	# spill
1561   	cmpl    R10, R11	# unsigned
1564   	jnb,u  B195  P=0.000001 C=-1.000000
1564
156a   B113: #	B18 &lt;- B112  Freq: 0.00473925
156a   	movq    R10, [rsp + #104]	# spill
156f   	movq    [RBP + #16 + R10 &lt;&lt; #3], #1	# long
1578   	jmp     B18
1578
157d   B114: #	B227 B115 &lt;- B56  Freq: 0.00234974
157d   	movq    RSI, [rsp + #8]	# spill
1582   	movl    RDX, [rsp + #64]	# spill
1586   	movq    RBP, [rsp + #24]	# spill
158b   	call,static  java.util.Arrays::copyOf
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:154  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #40 L[4]=rsp + #64 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [24]=Oop off=5520}
1590
1590   B115: #	B216 B116 &lt;- B114  Freq: 0.00234969
        # Block is sole successor of call
1590   	movq    R10, RAX	# spill
1593   	movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
1597   	NullCheck RAX
1597
1597   B116: #	B204 B117 &lt;- B115  Freq: 0.00234969
1597   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f4698177050:Constant:exact *	# compressed klass ptr
159e   	jne,u  B204  P=0.000000 C=-1.000000
159e
15a4   B117: #	B167 B118 &lt;- B116  Freq: 0.00234969
15a4   	# checkcastPP of R10
15a4   	movq    [rsp + #8], R10	# spill
15a9   	movl    RSI, #-122	# int
15ae   	movl    RCX, narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f46981770d0:Constant:exact *	# compressed klass ptr
15b3   	movl    R10, [R10 + #12 (8-bit)]	# range
15b7   	movl    [rsp + #44], R10	# spill
15bc   	movl    R10, [rsp + #40]	# spill
15c1   	cmpl    R10, [RSP + #64 (32-bit)]
15c6   	jge     B167  P=0.001763 C=7373.000000
15c6
15cc   B118: #	B197 B119 &lt;- B117  Freq: 0.00234554
15cc   	movl    R11, [rsp + #64]	# spill
15d1   	decl    R11	# int
15d4   	cmpl    R10, [RSP + #44 (32-bit)]	# unsigned
15d9   	jnb,u  B197  P=0.000001 C=-1.000000
15d9
15df   B119: #	B197 B120 &lt;- B118  Freq: 0.00234554
15df   	cmpl    R11, [RSP + #44 (32-bit)]	# unsigned
15e4   	jnb,u  B197  P=0.000001 C=-1.000000
15e4
15ea   B120: #	B121 &lt;- B119  Freq: 0.00234554
15ea   	decode_klass_not_null R10,RCX
15f8   	movq    [rsp + #48], R10	# spill
      	nop 	# 3 bytes pad for loops and calls

1600   B121: #	B134 B122 &lt;- B120 B125 	Loop: B121-B125 inner  Freq: 1.3303
1600   	movq    R10, [rsp + #8]	# spill
1605   	movl    R11, [rsp + #40]	# spill
160a   	leaq    RBP, [R10 + #16 + R11 &lt;&lt; #2]	# ptr posidxscaleoff
160f   	# TLS is in R15
160f   	movq    R11, [R15 + #112 (8-bit)]	# ptr
1613   	movq    R10, R11	# spill
1616   	addq    R10, #24	# ptr
161a   	# TLS is in R15
161a   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
1621   	jnb,u  B134  P=0.000100 C=-1.000000
1621
1627   B122: #	B123 &lt;- B121  Freq: 1.33017
1627   	# TLS is in R15
1627   	movq    [R15 + #112 (8-bit)], R10	# ptr
162b   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1633   	movq    R10, [rsp + #48]	# spill
1638   	movq    R10, [R10 + #176 (32-bit)]	# ptr
163f   	movq    [R11], R10	# ptr
1642   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f46981770d0:Constant:exact *	# compressed klass ptr
164a   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
164e   	movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
164e
1652   B123: #	B136 B124 &lt;- B135 B122  Freq: 1.3303
1652   	
1652   	MEMBAR-storestore (empty encoding)
1652   	# checkcastPP of R11
1652   	movq    [rsp + #56], R11	# spill
1657   	encode_heap_oop_not_null R10,R11
1762   	movl    [rsp + #68], R10	# spill
1767   	# TLS is in R15
1767   	movq    R8, [R15 + #112 (8-bit)]	# ptr
176b   	movq    R10, R8	# spill
176e   	addq    R10, #408	# ptr
1775   	# TLS is in R15
1775   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
177c   	jnb,u  B136  P=0.000100 C=-1.000000
177c
1782   B124: #	B125 &lt;- B123  Freq: 1.33017
1782   	# TLS is in R15
1782   	movq    [R15 + #112 (8-bit)], R10	# ptr
1786   	movq    RDI, R8	# spill
1789   	addq    RDI, #16	# ptr
178d   	movq    R11, [rsp + #16]	# spill
1792   	movq    R11, [R11 + #176 (32-bit)]	# ptr
1799   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
17a1   	movq    [R8], R11	# ptr
17a4   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a4182f80:Constant:exact *	# compressed klass ptr
17ac   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
17b0   	movl    RCX, #49	# long (unsigned 32-bit)
17b5   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
17bf
17bf   B125: #	B121 B126 &lt;- B137 B124  Freq: 1.3303
17bf   	
17bf   	MEMBAR-storestore (empty encoding)
17bf   	# checkcastPP of R8
17bf   	movq    R10, [rsp + #56]	# spill
17c4   	movq    R10, R10	# ptr -&gt; long
17c4   	movl    R9, [rsp + #68]	# spill
17c9   	movl    [RBP], R9	# compressed ptr
17cd   	encode_heap_oop_not_null R11,R8
18d8   	movq    R8, [rsp + #56]	# spill
18dd   	movl    [R8 + #16 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
18e1   	shrq    R10, #9
18e5   	movq    R11, RBP	# ptr -&gt; long
18e8   	movq    R8, 0x00007f46dbf28000	# ptr
18f2   	movb    [R8 + R10], R12	# short/char (R12_heapbase==0)
18f6   	shrq    R11, #9
18fa   	movq    R10, 0x00007f46dbf28000	# ptr
1904   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
1908   	movl    R11, [rsp + #40]	# spill
190d   	incl    R11	# int
1910   	movl    [rsp + #40], R11	# spill
1915   	cmpl    R11, [RSP + #64 (32-bit)]
191a   	jl     B121	# loop end  P=0.998237 C=7360.000000
191a
1920   B126: #	B80 B127 &lt;- B125  Freq: 0.00234554
1920   	movl    R11, [rsp + #44]	# spill
1925   	testl   R11, R11
1928   	jle     B80  P=0.011740 C=470544.000000
1928
192e   B127: #	B186 B128 &lt;- B126  Freq: 0.002318
192e   	movl    R10, R11	# spill
1931   	testl  R10, R10	# unsigned
1934   	jbe,u  B186  P=0.000001 C=-1.000000
1934
193a   B128: #	B60 &lt;- B127  Freq: 0.002318
193a   	movl    [rsp + #16], R10	# spill
193f   	jmp     B60
193f
1944   B129: #	B217 B130 &lt;- B33  Freq: 0.00234761
1944   	movl    RCX, [R8 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/infra/runners/Control.minStride
1948   	NullCheck R8
1948
1948   B130: #	B35 &lt;- B129  Freq: 0.0023476
1948   	movl    R10, [R8 + #16 (8-bit)]	# int ! Field: org/openjdk/jcstress/infra/runners/Control.maxStride
194c   	cmpl    R9, R10
194f   	cmovll R10, R9	# signed, int
1953   	cmpl    RCX, R10
1956   	cmovll RCX, R10	# signed, int
195a   	movl    [rsp + #64], RCX	# spill
195e   	jmp     B35
195e
1963   B131: #	B132 &lt;- B11  Freq: 0.000476826
1963   	movl    RAX, RCX	# spill
1963
1965   B132: #	B133 &lt;- B131 B155  Freq: 0.000476895
1965   	movdl   XMM1, RAX	# spill
1965
1969   B133: #	B15 &lt;- B132 B166 B173  Freq: 0.000482625
1969   	movss   [rsp + #20], XMM1	# spill
196f   	jmp     B15
196f
1974   B134: #	B225 B135 &lt;- B121  Freq: 0.000133052
1974   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f46981770d0:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
197f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=rsp + #24 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #64 L[5]=rsp + #8 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Derived_oop_[8] [8]=Oop [24]=Oop off=6532}
1984
1984   B135: #	B123 &lt;- B134  Freq: 0.000133049
        # Block is sole successor of call
1984   	movq    R11, RAX	# spill
1987   	jmp     B123
1987
198c   B136: #	B226 B137 &lt;- B123  Freq: 0.000133052
198c   	movq    [rsp + #80], RBP	# spill
1991   	movq    RSI, precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a4182f80:Constant:exact *	# ptr
199b   	movq    RBP, [rsp + #24]	# spill
      	nop 	# 3 bytes pad for loops and calls
19a3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:183  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #64 L[5]=rsp + #8 L[6]=rsp + #40 L[7]=rsp + #56 L[8]=_ L[9]=_ STK[0]=rsp + #56
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [56]=Oop [68]=NarrowOop [80]=Derived_oop_[8] off=6568}
19a8
19a8   B137: #	B125 &lt;- B136  Freq: 0.000133049
        # Block is sole successor of call
19a8   	movq    R8, RAX	# spill
19ab   	movq    RBP, [rsp + #80]	# spill
19b0   	jmp     B125
19b0
19b5   B138: #	B224 B139 &lt;- B80  Freq: 9.98447e-05
19b5   	movl    [rsp + #16], R10	# spill
19ba   	movq    [rsp + #0], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
19bf   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:254  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #16
        # OopMap{rbp=NarrowOop [0]=Oop [8]=Oop [16]=NarrowOop off=6596}
19c4
19c4   B139: #	B82 &lt;- B138  Freq: 9.98427e-05
        # Block is sole successor of call
19c4   	movq    RCX, [rsp + #0]	# spill
19c8   	movq    R11, RAX	# spill
19cb   	movl    R10, [rsp + #16]	# spill
19d0   	jmp     B82
19d0
19d5   B140: #	B220 B141 &lt;- B83  Freq: 9.98446e-05
19d5   	movq    [rsp + #32], RBX	# spill
19da   	movq    [rsp + #24], RCX	# spill
19df   	movl    [rsp + #16], R10	# spill
19e4   	movq    RBP, R11	# spill
19e7   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a411e730:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
19f3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:20  L[0]=RBP L[1]=_ L[2]=_ L[3]=#2 STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #16 STK[1]=RBP
        # OopMap{rbp=Oop [16]=NarrowOop [32]=Oop off=6648}
19f8
19f8   B141: #	B85 &lt;- B140  Freq: 9.98426e-05
        # Block is sole successor of call
19f8   	movq    R11, RBP	# spill
19fb   	movl    R10, [rsp + #16]	# spill
1a00   	movq    RCX, [rsp + #24]	# spill
1a05   	movq    RBX, [rsp + #32]	# spill
1a0a   	jmp     B85
1a0a
1a0f   B142: #	B221 B143 &lt;- B85  Freq: 9.98446e-05
1a0f   	movq    [rsp + #32], RBX	# spill
1a14   	movq    [rsp + #24], RCX	# spill
1a19   	movl    [rsp + #16], R10	# spill
1a1e   	movq    RBP, R11	# spill
1a21   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a411e730:Constant:exact *	# ptr
1a2b   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:32  L[0]=RBP L[1]=_ L[2]=_ L[3]=#2 STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #16 STK[1]=RBP
        # OopMap{rbp=Oop [16]=NarrowOop [32]=Oop off=6704}
1a30
1a30   B143: #	B87 &lt;- B142  Freq: 9.98426e-05
        # Block is sole successor of call
1a30   	movq    R11, RBP	# spill
1a33   	movl    R10, [rsp + #16]	# spill
1a38   	movq    RCX, [rsp + #24]	# spill
1a3d   	movq    RBX, [rsp + #32]	# spill
1a42   	jmp     B87
1a42
1a47   B144: #	B222 B145 &lt;- B87  Freq: 9.98446e-05
1a47   	movq    [rsp + #32], RBX	# spill
1a4c   	movq    [rsp + #24], RCX	# spill
1a51   	movl    [rsp + #16], R10	# spill
1a56   	movq    RBP, R11	# spill
1a59   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a411e730:Constant:exact *	# ptr
1a63   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:44  L[0]=RBP L[1]=_ L[2]=_ L[3]=#2 STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #16 STK[1]=RBP
        # OopMap{rbp=Oop [16]=NarrowOop [32]=Oop off=6760}
1a68
1a68   B145: #	B89 &lt;- B144  Freq: 9.98426e-05
        # Block is sole successor of call
1a68   	movq    R11, RBP	# spill
1a6b   	movl    R10, [rsp + #16]	# spill
1a70   	movq    RCX, [rsp + #24]	# spill
1a75   	movq    RBX, [rsp + #32]	# spill
1a7a   	jmp     B89
1a7a
1a7f   B146: #	B223 B147 &lt;- B89  Freq: 9.98446e-05
1a7f   	movq    [rsp + #24], RBX	# spill
1a84   	movl    [rsp + #16], R10	# spill
1a89   	movq    RBP, R11	# spill
1a8c   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a411e730:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
1a97   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:56  L[0]=RBP L[1]=_ L[2]=_ L[3]=#2 STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #16 STK[1]=RBP
        # OopMap{rbp=Oop [16]=NarrowOop [24]=Oop off=6812}
1a9c
1a9c   B147: #	B91 &lt;- B146  Freq: 9.98426e-05
        # Block is sole successor of call
1a9c   	movq    R11, RBP	# spill
1a9f   	movl    R10, [rsp + #16]	# spill
1aa4   	movq    RBX, [rsp + #24]	# spill
1aa9   	jmp     B91
1aa9
1aae   B148: #	B219 B149 &lt;- B61  Freq: 9.86896e-05
1aae   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# ptr
      	nop 	# 3 bytes pad for loops and calls
1abb   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #24 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=rsp + #8 L[7]=rsp + #16 L[8]=#0 L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [8]=Oop [24]=Oop off=6848}
1ac0
1ac0   B149: #	B63 &lt;- B148  Freq: 9.86876e-05
        # Block is sole successor of call
1ac0   	movq    R11, RAX	# spill
1ac3   	jmp     B63
1ac3
1ac8   B150: #	B218 B151 &lt;- B76  Freq: 9.86723e-05
1ac8   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f469817cbe0:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
1ad3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #24 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=rsp + #8 L[7]=rsp + #16 L[8]=rsp + #20 L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [8]=Oop [24]=Oop off=6872}
1ad8
1ad8   B151: #	B78 &lt;- B150  Freq: 9.86704e-05
        # Block is sole successor of call
1ad8   	movq    R11, RAX	# spill
1adb   	jmp     B78
1adb
1ae0   B152: #	B198 B153 &lt;- B102 B103  Freq: 0.000156988
1ae0   	cmpl    RAX, RBP	# unsigned
1ae2   	jnb,u  B198  P=0.000001 C=-1.000000
1ae2
1ae8   B153: #	B106 B154 &lt;- B152  Freq: 0.000156988
1ae8   	movl    R11, [rsp + #16]	# spill
1aed   	movl    R11, [R11 + #16 + RAX &lt;&lt; #2]	# compressed ptr
1af2   	decode_heap_oop_not_null R10,R11
1af5   	movq    R13, R10	# spill
1af8   	testl   R11, R11	# compressed ptr
1afb   	je     B106  P=0.000052 C=38671.000000
1afb
1b01   B154: #	B199 B155 &lt;- B153  Freq: 0.00015698
1b01   	movdl   RCX, XMM3	# spill
1b05   	andl    RCX, R8	# int
1b08   	movl    R11, [R11 + #8 (8-bit)]	# compressed klass ptr
1b0c   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a4182f80:Constant:exact *	# compressed klass ptr
1b13   	jne,u  B199  P=0.000001 C=-1.000000
1b13
1b19   B155: #	B132 B156 &lt;- B154  Freq: 0.00015698
1b19   	# checkcastPP of R10
1b19   	movq    R11, R10	# spill
1b1c   	movl    R10, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1b23   	cmpq    R11, RSI	# ptr
1b26   	je,u  B132  P=0.000439 C=11402.000000
1b26
1b2c   B156: #	B170 B157 &lt;- B155  Freq: 0.000156911
1b2c   	movl    R11, [R11 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1b33   	cmpl    R10, R9
1b36   	jne     B170  P=0.004739 C=11396.000000
1b36
1b3c   B157: #	B170 B158 &lt;- B156  Freq: 0.000156167
1b3c   	cmpl    R11, RBX
1b3f   	jne     B170  P=0.007317 C=11343.000000
1b3f
1b45   B158: #	B14 &lt;- B157  Freq: 0.000155024
1b45   	movl    RCX, RAX	# spill
1b47   	jmp     B14
1b47
1b4c   B159: #	N3065 &lt;- B25  Freq: 9.17064e-05
1b4c   	movq    RBP, [rsp + #8]	# spill
1b51   	movl    [rsp + #8], RDI	# spill
1b55   	movl    [rsp + #12], RDX	# spill
1b59   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
1b5f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=rsp + #48 L[1]=rsp + #12 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #20 L[6]=#0 L[7]=_ STK[0]=rsp + #16 STK[1]=rsp + #20
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #40 L[4]=RBP L[5]=rsp + #40 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [12]=NarrowOop [16]=NarrowOop [24]=Oop [32]=Oop [48]=Oop off=7012}
1b64   	int3	# ShouldNotReachHere
1b64
1b69   B160: #	N3065 &lt;- B16  Freq: 9.17013e-05
1b69   	movq    RBP, [rsp + #8]	# spill
1b6e   	movl    [rsp + #8], RDI	# spill
1b72   	movl    RSI, #-28	# int
1b77   	movl    R10, [rsp + #40]	# spill
1b7c   	movl    [rsp + #16], R10	# spill
1b81   	movl    [rsp + #44], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
1b87   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #44 STK[1]=rsp + #20 STK[2]=rsp + #44 STK[3]=rsp + #20
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #16 L[4]=RBP L[5]=rsp + #16 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [24]=Oop [32]=Oop [44]=NarrowOop off=7052}
1b8c   	int3	# ShouldNotReachHere
1b8c
1b91   B161: #	N3065 &lt;- B22  Freq: 9.05049e-05
1b91   	movq    RBP, [rsp + #8]	# spill
1b96   	movl    [rsp + #8], RDI	# spill
1b9a   	movl    [rsp + #12], RDX	# spill
1b9e   	movl    RSI, #-34	# int
1ba3   	movq    R10, [rsp + #24]	# spill
1ba8   	movq    [rsp + #16], R10	# spill
1bad   	movq    R10, [rsp + #32]	# spill
1bb2   	movq    [rsp + #24], R10	# spill
1bb7   	movl    R11, [rsp + #40]	# spill
1bbc   	movl    R10, R11	# spill
1bbf   	movl    [rsp + #36], R10	# spill
1bc4   	movl    [rsp + #40], R9	# spill
      	nop 	# 2 bytes pad for loops and calls
1bcb   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=RBP L[3]=rsp + #36 L[4]=RBP L[5]=rsp + #36 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #40 STK[1]=rsp + #12
        # OopMap{rbp=Oop [12]=NarrowOop [16]=Oop [24]=Oop [40]=NarrowOop off=7120}
1bd0   	int3	# ShouldNotReachHere
1bd0
1bd5   B162: #	B163 &lt;- B27  Freq: 9.04998e-05
1bd5   	movss   XMM1, [rsp + #20]	# spill
1bdb   	xorl    R10, R10	# int
1bde
1bde   B163: #	N3065 &lt;- B162 B180 B193 B201  Freq: 9.16004e-05
1bde   	movl    RSI, #-34	# int
1be3   	movq    RBP, [rsp + #8]	# spill
1be8   	movl    [rsp + #8], RDI	# spill
1bec   	movl    [rsp + #16], RDX	# spill
1bf0   	movss   [rsp + #44], XMM1	# spill
1bf6   	movl    [rsp + #56], R10	# spill
1bfb   	movq    [rsp + #64], R13	# spill
      	nop 	# 3 bytes pad for loops and calls
1c03   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=rsp + #48 L[1]=rsp + #16 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #44 L[6]=rsp + #56 L[7]=_ STK[0]=rsp + #64 STK[1]=rsp + #16
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #40 L[4]=RBP L[5]=rsp + #40 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [16]=NarrowOop [24]=Oop [32]=Oop [48]=Oop [64]=Oop off=7176}
1c08   	int3	# ShouldNotReachHere
1c08
1c0d   B164: #	B165 &lt;- B63 B69 B72  Freq: 0.000171306
1c0d   	movq    RBP, R9	# spill
1c0d
1c10   B165: #	N3065 &lt;- B187 B164  Freq: 0.000172305
1c10   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
1c17   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:241  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=Oop off=7196}
1c1c   	int3	# ShouldNotReachHere
1c1c
1c21   B166: #	B133 &lt;- B101  Freq: 5.72917e-06
1c21   	movdl   XMM1, R14	# spill
1c26   	jmp     B133
1c26
1c2b   B167: #	B80 B168 &lt;- B117  Freq: 4.14288e-06
1c2b   	movl    R11, [rsp + #44]	# spill
1c30   	testl   R11, R11
1c33   	jle     B80  P=0.011740 C=470544.000000
1c33
1c39   B168: #	B186 B169 &lt;- B167  Freq: 4.09425e-06
1c39   	movl    R10, R11	# spill
1c3c   	testl  R10, R10	# unsigned
1c3f   	jbe,u  B186  P=0.000001 C=-1.000000
1c3f
1c45   B169: #	B60 &lt;- B168  Freq: 4.09425e-06
1c45   	movl    [rsp + #16], R10	# spill
1c4a   	jmp     B60
1c4a
1c4f   B170: #	B200 B171 &lt;- B156 B157  Freq: 1.88625e-06
1c4f   	movdl   R10, XMM1	# spill
1c54   	cmpl    R10, RBP	# unsigned
1c57   	jnb,u  B200  P=0.000001 C=-1.000000
1c57
1c5d   B171: #	B107 B172 &lt;- B170  Freq: 1.88624e-06
1c5d   	movl    R10, [rsp + #16]	# spill
1c62   	movdl   R8, XMM1	# spill
1c67   	movl    R11, [R10 + #16 + R8 &lt;&lt; #2]	# compressed ptr
1c6c   	decode_heap_oop_not_null R10,R11
1c6f   	movq    R13, R10	# spill
1c72   	testl   R11, R11	# compressed ptr
1c75   	je     B107  P=0.000052 C=38671.000000
1c75
1c7b   B172: #	B201 B173 &lt;- B171  Freq: 1.88615e-06
1c7b   	movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
1c7f   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a4182f80:Constant:exact *	# compressed klass ptr
1c86   	jne,u  B201  P=0.000001 C=-1.000000
1c86
1c8c   B173: #	B133 B174 &lt;- B172  Freq: 1.88614e-06
1c8c   	movq    R10, R13	# spill
1c8f   	# checkcastPP of R10
1c8f   	cmpq    R10, RSI	# ptr
1c92   	je,u  B133  P=0.000439 C=11402.000000
1c92
1c98   B174: #	B189 B175 &lt;- B173  Freq: 1.88532e-06
1c98   	movl    R11, [R10 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1c9f   	cmpl    R11, R9
1ca2   	jne     B189  P=0.004739 C=11396.000000
1ca2
1ca8   B175: #	B189 B176 &lt;- B174  Freq: 1.87638e-06
1ca8   	movl    R10, [R10 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1caf   	cmpl    R10, RBX
1cb2   	jne     B189  P=0.007317 C=11343.000000
1cb2
1cb8   B176: #	B104 &lt;- B175  Freq: 1.86265e-06
1cb8   	movl    R14, R8	# spill
1cbb   	jmp     B104
1cbb
1cc0   B177: #	B178 &lt;- B8  Freq: 1.10187e-06
1cc0   	xorl    R10, R10	# int
1cc3   	movl    R8, RCX	# spill
1cc3
1cc6   B178: #	N3065 &lt;- B177 B192 B198 B202  Freq: 1.11527e-06
1cc6   	movq    RBP, [rsp + #8]	# spill
1ccb   	movl    [rsp + #8], RDI	# spill
1ccf   	movl    [rsp + #12], RDX	# spill
1cd3   	movl    RSI, #-28	# int
1cd8   	movl    [rsp + #56], R10	# spill
1cdd   	movl    [rsp + #60], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
1ce3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:70  L[0]=rsp + #48 L[1]=rsp + #12 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #60 L[6]=rsp + #56 L[7]=_ STK[0]=rsp + #16 STK[1]=rsp + #60
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #40 L[4]=RBP L[5]=rsp + #40 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [12]=NarrowOop [16]=NarrowOop [24]=Oop [32]=Oop [48]=Oop off=7400}
1ce8   	int3	# ShouldNotReachHere
1ce8
1ced   B179: #	B180 &lt;- B10  Freq: 1.08738e-06
1ced   	movl    RAX, RCX	# spill
1cef   	movl    R10, #1	# int
1cef
1cf5   B180: #	B163 &lt;- B179 B199  Freq: 1.08753e-06
1cf5   	movdl   XMM1, RAX	# spill
1cf9   	jmp     B163
1cf9
1cfe   B181: #	N3065 &lt;- B91  Freq: 1.01154e-06
1cfe   	movl    RSI, #-10	# int
1d03   	movq    RBP, R11	# spill
      	nop 	# 1 bytes pad for loops and calls
1d07   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:271  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=Oop off=7436}
1d0c   	int3	# ShouldNotReachHere
1d0c
1d11   B182: #	N3065 &lt;- B6 B5  Freq: 1.99129e-06
1d11   	movq    RBP, [rsp + #8]	# spill
1d16   	movq    R10, [rsp + #24]	# spill
1d1b   	movq    [rsp + #8], R10	# spill
1d20   	movl    R10, [rsp + #40]	# spill
1d25   	movl    [rsp + #28], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
1d2b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:29  L[0]=rsp + #8 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #28 L[4]=RBP L[5]=rsp + #40 L[6]=#0 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [8]=Oop [32]=Oop off=7472}
1d30   	int3	# ShouldNotReachHere
1d30
1d35   B183: #	N3065 &lt;- B37 B36  Freq: 1.9889e-06
1d35   	movq    RBP, [rsp + #8]	# spill
1d3a   	movq    R10, [rsp + #24]	# spill
1d3f   	movq    [rsp + #8], R10	# spill
1d44   	movl    R11, [rsp + #40]	# spill
1d49   	movl    [rsp + #24], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
1d4f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:110  L[0]=rsp + #8 L[1]=_ L[2]=RBP L[3]=rsp + #24 L[4]=rsp + #64 L[5]=RBP L[6]=rsp + #40 L[7]=#0 L[8]=_ L[9]=_
        # OopMap{rbp=Oop [8]=Oop off=7508}
1d54   	int3	# ShouldNotReachHere
1d54
1d59   B184: #	B51 &lt;- B40  Freq: 1.00101e-06
1d59   	movl    RCX, #1	# int
1d5e   	jmp     B51
1d5e
1d63   B185: #	B186 &lt;- B60  Freq: 9.99836e-07
1d63   	movl    R11, [rsp + #16]	# spill
1d63
1d68   B186: #	N3065 &lt;- B185 B127 B168 B58  Freq: 1.98657e-06
1d68   	movl    RSI, #-122	# int
1d6d   	movq    RBP, [rsp + #24]	# spill
1d72   	movl    [rsp + #16], R11	# spill
1d77   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:225  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=rsp + #8 L[7]=rsp + #16 L[8]=#0 L[9]=_
        # OopMap{rbp=Oop [8]=Oop off=7548}
1d7c   	int3	# ShouldNotReachHere
1d7c
1d81   B187: #	B165 &lt;- B78  Freq: 9.9966e-07
1d81   	movq    RBP, R11	# spill
1d84   	jmp     B165
1d84
1d89   B188: #	B107 &lt;- B99  Freq: 6.7598e-07
1d89   	movdl   XMM1, R14	# spill
1d8e   	jmp     B107
1d8e
1d93   B189: #	B202 B190 &lt;- B174 B175  Freq: 2.26637e-08
1d93   	movl    R8, RCX	# spill
1d96   	cmpl    RCX, RBP	# unsigned
1d98   	jnb,u  B202  P=0.000001 C=-1.000000
1d98
1d9e   B190: #	N3065 &lt;- B189  Freq: 2.26636e-08
1d9e   	movl    R10, [rsp + #16]	# spill
1da3   	movl    RBP, [R10 + #16 + RCX &lt;&lt; #2]	# compressed ptr
1da8   	movl    [rsp + #16], RDI	# spill
1dac   	movl    [rsp + #20], RDX	# spill
1db0   	movl    RSI, #-155	# int
1db5   	movl    [rsp + #56], RCX	# spill
      	nop 	# 2 bytes pad for loops and calls
1dbb   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:80  L[0]=rsp + #48 L[1]=rsp + #20 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #56 L[6]=#5 L[7]=RBP STK[0]=#4 STK[1]=#3
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #8 L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #40 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=NarrowOop [8]=Oop [20]=NarrowOop [24]=Oop [32]=Oop [48]=Oop off=7616}
1dc0   	int3	# ShouldNotReachHere
1dc0
1dc5   B191: #	B192 &lt;- B98  Freq: 1.32393e-08
1dc5   	movdl   XMM1, R14	# spill
1dca   	movl    R11, #1	# int
1dca
1dd0   B192: #	B178 &lt;- B191 B200  Freq: 1.32412e-08
1dd0   	movdl   R8, XMM1	# spill
1dd5   	movl    R10, R11	# spill
1dd8   	jmp     B178
1dd8
1ddd   B193: #	B163 &lt;- B100  Freq: 1.30651e-08
1ddd   	movdl   XMM1, R14	# spill
1de2   	movl    R10, #2	# int
1de8   	jmp     B163
1de8
1ded   B194: #	N3065 &lt;- B109  Freq: 4.8022e-09
1ded   	movq    RBP, [rsp + #8]	# spill
1df2   	movl    R10, [rsp + #44]	# spill
1df7   	movl    [rsp + #8], R10	# spill
1dfc   	movq    [rsp + #56], RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
1e03   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=rsp + #48 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #20 L[6]=_ L[7]=_ STK[0]=rsp + #16 STK[1]=rsp + #20 STK[2]=rsp + #56
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #40 L[4]=RBP L[5]=rsp + #40 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [16]=NarrowOop [24]=Oop [32]=Oop [48]=Oop [56]=Oop off=7688}
1e08   	int3	# ShouldNotReachHere
1e08
1e0d   B195: #	N3065 &lt;- B112  Freq: 4.80218e-09
1e0d   	movl    R11, [rsp + #44]	# spill
1e12   	movl    [rsp + #16], R11	# spill
1e17   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=RBP STK[1]=rsp + #20 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #8 L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #40 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=NarrowOop [8]=Oop [24]=Oop [32]=Oop off=7708}
1e1c   	int3	# ShouldNotReachHere
1e1c
1e21   B196: #	N3065 &lt;- B110  Freq: 4.73926e-09
1e21   	movq    RBP, [rsp + #8]	# spill
1e26   	movl    R8, [rsp + #44]	# spill
1e2b   	movl    [rsp + #8], R8	# spill
1e30   	movq    [rsp + #56], RAX	# spill
1e35   	movl    RSI, #-42	# int
      	nop 	# 1 bytes pad for loops and calls
1e3b   	call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=rsp + #48 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #20 L[6]=_ L[7]=_ STK[0]=rsp + #16 STK[1]=rsp + #20 STK[2]=rsp + #56
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #40 L[4]=RBP L[5]=rsp + #40 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [16]=NarrowOop [24]=Oop [32]=Oop [48]=Oop [56]=Oop off=7744}
1e40   	int3	# ShouldNotReachHere
1e40
1e45   B197: #	N3065 &lt;- B119 B118  Freq: 4.75338e-09
      	nop 	# 2 bytes pad for loops and calls
1e47   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #64 L[5]=rsp + #8 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [8]=Oop off=7756}
1e4c   	int3	# ShouldNotReachHere
1e4c
1e51   B198: #	B178 &lt;- B152  Freq: 1.59073e-10
1e51   	movl    R10, #2	# int
1e57   	movl    R8, RAX	# spill
1e5a   	jmp     B178
1e5a
1e5f   B199: #	B180 &lt;- B154  Freq: 1.5698e-10
1e5f   	movl    R10, [rsp + #96]	# spill
1e64   	jmp     B180
1e64
1e69   B200: #	B192 &lt;- B170  Freq: 1.91129e-12
1e69   	movl    R11, [rsp + #96]	# spill
1e6e   	jmp     B192
1e6e
1e73   B201: #	B163 &lt;- B172  Freq: 1.88615e-12
1e73   	movl    R10, #4	# int
1e79   	jmp     B163
1e79
1e7e   B202: #	B178 &lt;- B189  Freq: 2.29646e-14
1e7e   	movl    R10, #4	# int
1e84   	jmp     B178
1e84
1e89   B203: #	N3065 &lt;- B3  Freq: 1e-35
1e89   	movl    RSI, #-34	# int
      	nop 	# 1 bytes pad for loops and calls
1e8f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:4  L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [24]=Oop [32]=Oop off=7828}
1e94   	int3	# ShouldNotReachHere
1e94
1e99   B204: #	N3065 &lt;- B116  Freq: 1e-35
1e99   	movl    RSI, #-34	# int
1e9e   	movq    [rsp + #8], RAX	# spill
1ea3   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:157  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #40 L[4]=rsp + #64 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #8
        # OopMap{rbp=Oop [8]=Oop off=7848}
1ea8   	int3	# ShouldNotReachHere
1ea8
1ead   B205: #	N3065 &lt;- B53 B38 B42 B46 B44 B48  Freq: 0.000356479
1ead   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1eb3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:119  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{off=7864}
1eb8   	int3	# ShouldNotReachHere
1eb8
1ebd   B206: #	N3065 &lt;- B54 B39 B43 B47 B45 B49  Freq: 0.000356479
1ebd   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1ec3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:127  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=#0
        # OopMap{off=7880}
1ec8   	int3	# ShouldNotReachHere
1ec8
1ecd   B207: #	N3065 &lt;- B20  Freq: 9.17069e-05
1ecd   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1ed3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:42  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=7896}
1ed8   	int3	# ShouldNotReachHere
1ed8
1edd   B208: #	N3065 &lt;- B21  Freq: 9.17068e-05
1edd   	movl    RBP, RDX	# spill
1edf   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
1ee7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=NarrowOop off=7916}
1eec   	int3	# ShouldNotReachHere
1eec
1ef1   B209: #	N3065 &lt;- B23  Freq: 9.17066e-05
1ef1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1ef7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=7932}
1efc   	int3	# ShouldNotReachHere
1efc
1f01   B210: #	N3065 &lt;- B24  Freq: 9.17065e-05
1f01   	movl    RSI, #-10	# int
1f06   	movl    RBP, R10	# spill
      	nop 	# 2 bytes pad for loops and calls
1f0b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=7952}
1f10   	int3	# ShouldNotReachHere
1f10
1f15   B211: #	N3065 &lt;- B15  Freq: 9.17014e-05
1f15   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1f1b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=rsp + #20
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=7968}
1f20   	int3	# ShouldNotReachHere
1f20
1f25   B212: #	N3065 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
1f27   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{off=7980}
1f2c   	int3	# ShouldNotReachHere
1f2c
1f31   B213: #	N3065 &lt;- B2  Freq: 1.01328e-06
1f31   	movq    RBP, [rsp + #24]	# spill
1f36   	movq    [rsp + #0], RDX	# spill
      	nop 	# 1 bytes pad for loops and calls
1f3b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:4  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [0]=Oop off=8000}
1f40   	int3	# ShouldNotReachHere
1f40
1f45   B214: #	N3065 &lt;- B82  Freq: 1.01154e-06
1f45   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1f4b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:262  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=#NULL
        # OopMap{off=8016}
1f50   	int3	# ShouldNotReachHere
1f50
1f55   B215: #	N3065 &lt;- B111  Freq: 4.80219e-09
1f55   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1f5b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=rsp + #20 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=8032}
1f60   	int3	# ShouldNotReachHere
1f60
1f65   B216: #	N3065 &lt;- B115  Freq: 2.38089e-09
1f65   	movl    RSI, #-12	# int
      	nop 	# 1 bytes pad for loops and calls
1f6b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:157  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #40 L[4]=rsp + #64 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{rbp=Oop off=8048}
1f70   	int3	# ShouldNotReachHere
1f70
1f75   B217: #	N3065 &lt;- B129  Freq: 2.37878e-09
1f75   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1f7b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:67  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{off=8064}
1f80   	int3	# ShouldNotReachHere
1f80
1f85   B218: #	B231 &lt;- B150  Freq: 9.86723e-10
1f85   	# exception oop is in rax; no code emitted
1f85   	jmp,s   B231
1f85
1f87   B219: #	B231 &lt;- B148  Freq: 9.86896e-10
1f87   	# exception oop is in rax; no code emitted
1f87   	jmp,s   B231
1f87
1f89   B220: #	B232 &lt;- B140  Freq: 9.98446e-10
1f89   	# exception oop is in rax; no code emitted
1f89   	movq    RSI, RAX	# spill
1f8c   	jmp,s   B232
1f8c
1f8e   B221: #	B232 &lt;- B142  Freq: 9.98446e-10
1f8e   	# exception oop is in rax; no code emitted
1f8e   	movq    RSI, RAX	# spill
1f91   	jmp,s   B232
1f91
1f93   B222: #	B232 &lt;- B144  Freq: 9.98446e-10
1f93   	# exception oop is in rax; no code emitted
1f93   	movq    RSI, RAX	# spill
1f96   	jmp,s   B232
1f96
1f98   B223: #	B232 &lt;- B146  Freq: 9.98446e-10
1f98   	# exception oop is in rax; no code emitted
1f98   	movq    RSI, RAX	# spill
1f9b   	jmp,s   B232
1f9b
1f9d   B224: #	B232 &lt;- B138  Freq: 9.98447e-10
1f9d   	# exception oop is in rax; no code emitted
1f9d   	movq    RSI, RAX	# spill
1fa0   	jmp,s   B232
1fa0
1fa2   B225: #	B232 &lt;- B134  Freq: 1.33052e-09
1fa2   	# exception oop is in rax; no code emitted
1fa2   	movq    RSI, RAX	# spill
1fa5   	jmp,s   B232
1fa5
1fa7   B226: #	B232 &lt;- B136  Freq: 1.33052e-09
1fa7   	# exception oop is in rax; no code emitted
1fa7   	movq    RSI, RAX	# spill
1faa   	jmp,s   B232
1faa
1fac   B227: #	B232 &lt;- B114  Freq: 2.34974e-08
1fac   	# exception oop is in rax; no code emitted
1fac   	movq    RSI, RAX	# spill
1faf   	jmp,s   B232
1faf
1fb1   B228: #	B232 &lt;- B108  Freq: 4.73936e-08
1fb1   	# exception oop is in rax; no code emitted
1fb1   	movq    RSI, RAX	# spill
1fb4   	jmp,s   B232
1fb4
1fb6   B229: #	B231 &lt;- B94  Freq: 8.40509e-08
1fb6   	# exception oop is in rax; no code emitted
1fb6   	jmp,s   B231
1fb6
1fb8   B230: #	B231 &lt;- B96  Freq: 8.40509e-08
1fb8   	# exception oop is in rax; no code emitted
1fb8
1fb8   B231: #	B232 &lt;- B218 B219 B229 B230  Freq: 1.70075e-07
1fb8   	movq    RSI, RAX	# spill
1fb8
1fbb   B232: #	N3065 &lt;- B228 B227 B225 B226 B231 B224 B220 B221 B222 B223  Freq: 2.4862e-07
1fbb   	addq    rsp, 128	# Destroy frame
	popq   rbp

1fc3   	jmp     rethrow_stub
1fc3

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='418' compile_kind='osr'>
{method}
 - this oop:          0x00007f46c6ae1ba8
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1&apos;
 - constants:         0x00007f46c6ae1498 constant pool [132] {0x00007f46c6ae1498} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1&apos; cache=0x00007f46c6ae29b0
 - access:            0xc1000001  public 
 - name:              &apos;call&apos;
 - signature:         &apos;()Ljava/lang/Void;&apos;
 - max stack:         5
 - max locals:        12
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef760: 0xb0000000 i2c: 0x00007f46c9145620 c2i: 0x00007f46c914575a c2iUV: 0x00007f46c914572d
 - compiled entry     0x00007f46c92fc440
 - code size:         158
 - code start:        0x00007f46c6ae1a80
 - code end (excl):   0x00007f46c6ae1b1e
 - method data:       0x00007f46c6ae5b08
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae1b1e
 - localvar length:   9
 - localvar start:    0x00007f46c6ae1b3a
 - compiled code: nmethod   5021  381       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call (158 bytes)
#
#  java/lang/Void:exact * ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1069: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B69 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (304 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01c   	movl    R11, [RSI + #16 (8-bit)]	# int
020   	movl    [rsp + #52], R11	# spill
025   	movq    R10, [RSI + #40 (8-bit)]	# ptr
029   	movq    [rsp + #24], R10	# spill
02e   	movl    R13, [RSI + #8 (8-bit)]	# int
032   	movl    R10, [RSI + #64 (8-bit)]	# int
036   	movl    [rsp + #48], R10	# spill
03b   	movq    R14, [RSI + #24 (8-bit)]	# ptr
03f   	movq    R10, [RSI + #88 (8-bit)]	# ptr
043   	movq    [rsp + #32], R10	# spill
048   	movq    R10, [RSI + #48 (8-bit)]	# ptr
04c   	movq    [rsp + #40], R10	# spill
051   	movl    RBX, [RSI + #80 (8-bit)]	# int
054   	movq    R10, [RSI + #56 (8-bit)]	# ptr
058   	movq    [rsp + #56], R10	# spill
05d   	movq    RDI, RSI	# spill
060   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
06d   	movq    R10, [rsp + #32]	# spill
072   	testq   R10, R10	# ptr
075   	je     B69  P=0.001000 C=-1.000000
075
07b   B2: #	B76 B3 &lt;- B1  Freq: 0.999
07b   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
07f   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1: 0x00007f46a4074040:Constant:exact *	# compressed klass ptr
086   	jne,u  B76  P=0.000001 C=-1.000000
086
08c   B3: #	B4 &lt;- B2  Freq: 0.998999
08c   	# checkcastPP of R10
08c
08c   B4: #	B70 B5 &lt;- B3 B69  Freq: 0.999999
08c   	movq    R11, [rsp + #56]	# spill
091   	testq   R11, R11	# ptr
094   	je     B70  P=0.001000 C=-1.000000
094
09a   B5: #	B76 B6 &lt;- B4  Freq: 0.998999
09a   	movq    [rsp + #0], R10	# spill
09e   	movq    R10, R11	# spill
0a1   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
0a5   	cmpl    R10, narrowklass: precise klass java/util/concurrent/atomic/AtomicReference: 0x00007f46a40748b0:Constant:exact *	# compressed klass ptr
0ac   	jne,u  B76  P=0.000001 C=-1.000000
0ac
0b2   B6: #	B7 &lt;- B5  Freq: 0.998998
0b2   	movq    R10, R11	# spill
0b5   	# checkcastPP of R10
0b5   	movq    [rsp + #16], R10	# spill
0b5
0ba   B7: #	B71 B8 &lt;- B6 B70  Freq: 0.999998
0ba   	movq    R10, [rsp + #40]	# spill
0bf   	testq   R10, R10	# ptr
0c2   	je     B71  P=0.001000 C=-1.000000
0c2
0c8   B8: #	B76 B9 &lt;- B7  Freq: 0.998998
0c8   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
0cc   	cmpl    R11, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a4074c70:Constant:exact *	# compressed klass ptr
0d3   	jne,u  B76  P=0.000001 C=-1.000000
0d3
0d9   B9: #	B10 &lt;- B8  Freq: 0.998997
0d9   	movq    RBP, R10	# spill
0dc   	# checkcastPP of RBP
0dc
0dc   B10: #	B72 B11 &lt;- B9 B71  Freq: 0.999997
0dc   	movq    R10, [rsp + #24]	# spill
0e1   	testq   R10, R10	# ptr
0e4   	je     B72  P=0.001000 C=-1.000000
0e4
0ea   B11: #	B76 B12 &lt;- B10  Freq: 0.998997
0ea   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
0ee   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f46a4074980:Constant:exact *	# compressed klass ptr
0f5   	jne,u  B76  P=0.000001 C=-1.000000
0f5
0fb   B12: #	B13 &lt;- B11  Freq: 0.998996
0fb   	movq    R10, [rsp + #24]	# spill
100   	# checkcastPP of R10
100
100   B13: #	B73 B14 &lt;- B12 B72  Freq: 0.999996
100   	testq   R14, R14	# ptr
103   	je     B73  P=0.001000 C=-1.000000
103
109   B14: #	B76 B15 &lt;- B13  Freq: 0.998996
109   	movl    R11, [R14 + #8 (8-bit)]	# compressed klass ptr
10d   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f46a4074a50:Constant:exact *	# compressed klass ptr
114   	jne,u  B76  P=0.000001 C=-1.000000
114
11a   B15: #	B16 &lt;- B14  Freq: 0.998995
11a   	# checkcastPP of R14
11a
11a   B16: #	B21 &lt;- B15 B73  Freq: 0.999995
11a   	movq    [rsp + #32], R10	# spill
11f   	movl    [rsp + #8], RBX	# spill
123   	jmp,s   B21
123
125   B17: #	B80 B18 &lt;- B23  top-of-loop Freq: 141537
125   	movl    R11, [R14 + #16 + R13 &lt;&lt; #2]	# compressed ptr
12a   	incl    R13	# int
12d   	movl    R10, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
131   	NullCheck R11
131
131   B18: #	B81 B19 &lt;- B17  Freq: 141537
131   	movl    [R10 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
139   	NullCheck R10
139
139   B19: #	B20 &lt;- B18  Freq: 141537
139   	
139   	MEMBAR-release ! (empty encoding)
139   	movl    [R10 + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
144   	movl    [R10 + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
14c   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:100  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=rsp + #32 L[7]=_ L[8]=R14 L[9]=rsp + #52 L[10]=R13 L[11]=_
        # OopMap{rbp=Oop r14=Oop [0]=Oop [16]=Oop [32]=Oop off=332}
152   	movq    R10, [rsp + #32]	# spill
157   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #40], rax
	movq    rax, [rsp - #8]
157
169   B20: #	B21 &lt;- B19 B59  Freq: 142853
169   	movq    [rsp + #32], R10	# spill
16e   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
16e
180   B21: #	B25 B22 &lt;- B16 B20 	Loop: B21-B20  Freq: 142854
180   	cmpl    R13, [RSP + #52 (32-bit)]
185   	jge,s   B25  P=0.009214 C=725821.000000
185
187   B22: #	B79 B23 &lt;- B21  Freq: 141538
187   	movl    R10, [R14 + #12 (8-bit)]	# range
18b   	NullCheck R14
18b
18b   B23: #	B17 B24 &lt;- B22  Freq: 141538
18b   	cmpl    R13, R10	# unsigned
18e   	jb,us  B17  P=0.999999 C=-1.000000
18e
190   B24: #	N1069 &lt;- B23  Freq: 0.143417
190   	movl    R11, [rsp + #48]	# spill
195   	movl    [rsp + #12], R11	# spill
19a   	movq    R10, [rsp + #32]	# spill
19f   	movq    [rsp + #24], R10	# spill
1a4   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #52]
	movl    [rsp + #40], rax
	movq    rax, [rsp - #8]
1b6   	movq    [rsp + #48], R14	# spill
1bb   	movl    [rsp + #56], R13	# spill
1c0   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
1c7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:86  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=RBP L[6]=rsp + #24 L[7]=_ L[8]=rsp + #48 L[9]=rsp + #40 L[10]=rsp + #56 L[11]=_ STK[0]=rsp + #48 STK[1]=rsp + #56
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=Oop [48]=Oop off=460}
1cc   	int3	# ShouldNotReachHere
1cc
1d1   B25: #	B85 B26 &lt;- B21  Freq: 1316.31
1d1   	movq    R10, [rsp + #32]	# spill
1d6   	movl    R11, [R10 + #36 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
1da   	NullCheck R10
1da
1da   B26: #	B61 B27 &lt;- B25  Freq: 1316.31
1da   	decode_heap_oop_not_null RSI,R11
1dd   	testl   R11, R11	# compressed ptr
1e0   	je     B61  P=0.000001 C=-1.000000
1e0
1e6   B27: #	B83 B28 &lt;- B26  Freq: 1316.31
      	nop 	# 1 bytes pad for loops and calls
1e7   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=rsp + #32 L[1]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop off=492}
1ec
1ec   B28: #	B30 B29 &lt;- B27  Freq: 1316.29
        # Block is sole successor of call
1ec   	testl   RAX, RAX
1ee   	jne,s   B30  P=0.492537 C=67.000000
1ee
1f0   B29: #	B30 &lt;- B28  Freq: 667.966
1f0   	MEMBAR-release ! (empty encoding)
1f0   	movq    R10, [rsp + #32]	# spill
1f5   	movb    [R10 + #19 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
1f9   	lock addl [rsp + #0], 0	! membar_volatile
1fe
1fe   B30: #	B33 B31 &lt;- B29 B28  Freq: 1316.29
1fe   	movq    R10, [rsp + #32]	# spill
203   	movzbl  R11, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
208   	MEMBAR-acquire ! (empty encoding)
208   	movzbl  R8, [R10 + #17 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
20d   	orl     R11, R8	# int
210   	MEMBAR-acquire ! (empty encoding)
210   	MEMBAR-release ! (empty encoding)
210   	movb    [R10 + #21 (8-bit)], R11	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
214   	lock addl [rsp + #0], 0	! membar_volatile
219   	movzbl  R10, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
21e   	MEMBAR-acquire ! (empty encoding)
21e   	testl   R10, R10
221   	je,s   B33  P=0.000477 C=136189.000000
221
223   B31: #	B67 B32 &lt;- B30  Freq: 1315.66
223   	movl    R11, [rsp + #48]	# spill
228   	testl   R11, R11
22b   	jne     B67  P=0.000001 C=-1.000000
      	nop 	# 15 bytes pad for loops and calls

240   B32: #	B32 B33 &lt;- B31 B32 	Loop: B32-B32 inner  Freq: 2.75672e+06
240   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=rsp + #32 L[1]=rsp + #48 STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop off=576}
246   	movq    R10, [rsp + #32]	# spill
24b   	movzbl  R10, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
250   	MEMBAR-acquire ! (empty encoding)
250   	testl   R10, R10
253   	jne,s   B32  P=0.999523 C=136189.000000
253
255   B33: #	B62 B34 &lt;- B32 B30  Freq: 1316.28
255   	movl    R11, [rsp + #8]	# spill
25a   	incl    R11	# int
25d   	movl    [rsp + #40], R11	# spill
262   	testq   RBP, RBP	# ptr
265   	je     B62  P=0.000001 C=-1.000000
265
26b   B34: #	B37 B35 &lt;- B33  Freq: 1316.28
26b   	MEMBAR-release ! (empty encoding)
26b   	
26b   	movl    RAX, [rsp + #8]	# spill
26f   	cmpxchgl [RBP + #12 (8-bit)],R11	# If rax == [RBP + #12 (8-bit)] then store R11 into [RBP + #12 (8-bit)]
	sete    R10
	movzbl  R10, R10
27d   	
27d   	MEMBAR-acquire ! (empty encoding)
27d   	testl   R10, R10
280   	je,s   B37  P=0.789474 C=6688.000000
280
282   B35: #	B75 B36 &lt;- B34  Freq: 277.112
282   	movq    R10, [rsp + #0]	# spill
286   	testq   R10, R10	# ptr
289   	je     B75  P=0.000001 C=-1.000000
289
28f   B36: #	B82 B37 &lt;- B35  Freq: 277.112
28f   	movq    RSI, [rsp + #0]	# spill
293   	movq    RDX, [rsp + #32]	# spill
      	nop 	# 3 bytes pad for loops and calls
29b   	call,static  org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop off=672}
2a0
2a0   B37: #	B74 B38 &lt;- B36 B34  Freq: 1316.28
2a0   	movl    R11, [RBP + #12 (8-bit)]	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
2a4   	MEMBAR-acquire ! (empty encoding)
2a4   	movl    R10, [rsp + #40]	# spill
2a9   	cmpl    R10, R11
2ac   	jne     B74  P=0.000000 C=6688.000000
2ac
2b2   B38: #	B63 B39 &lt;- B37  Freq: 1316.28
2b2   	movq    R10, [rsp + #32]	# spill
2b7   	movl    R10, [R10 + #40 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
2bb   	testl   R10, R10	# compressed ptr
2be   	je     B63  P=0.000001 C=-1.000000
2be
2c4   B39: #	B41 B40 &lt;- B38  Freq: 1316.28
2c4   	MEMBAR-release ! (empty encoding)
2c4   	
2c4   	movl    R11, #-1	# int
2ca   	XADDL  [[R10 + #12 (8-bit)]],R11
2d0   	decl    R11	# int
2d3   	
2d3   	MEMBAR-acquire ! (empty encoding)
2d3   	testl   R11, R11
2d6   	jne,s   B41  P=0.502075 C=241.000000
2d6
2d8   B40: #	B41 &lt;- B39  Freq: 655.407
2d8   	MEMBAR-release ! (empty encoding)
2d8   	movq    R10, [rsp + #32]	# spill
2dd   	movb    [R10 + #20 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
2e1   	lock addl [rsp + #0], 0	! membar_volatile
2e6
2e6   B41: #	B44 B42 &lt;- B39 B40  Freq: 1316.28
2e6   	movq    R10, [rsp + #32]	# spill
2eb   	movzbl  R11, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
2f0   	MEMBAR-acquire ! (empty encoding)
2f0   	testl   R11, R11
2f3   	je,s   B44  P=0.000074 C=2941144.000000
2f3
2f5   B42: #	B66 B43 &lt;- B41  Freq: 1316.18
2f5   	movl    R11, [rsp + #48]	# spill
2fa   	testl   R11, R11
2fd   	jne     B66  P=0.000001 C=-1.000000
      	nop 	# 13 bytes pad for loops and calls

310   B43: #	B43 B44 &lt;- B42 B43 	Loop: B43-B43 inner  Freq: 1.77506e+07
310   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=rsp + #32 L[1]=rsp + #48 STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=rsp + #0 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop off=784}
316   	movq    R10, [rsp + #32]	# spill
31b   	movzbl  R11, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
320   	MEMBAR-acquire ! (empty encoding)
320   	testl   R11, R11
323   	jne,s   B43  P=0.999926 C=2941144.000000
323
325   B44: #	B86 B45 &lt;- B43 B41  Freq: 1316.27
325   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:155  L[0]=rsp + #0 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=805}
32b   	movq    R10, [rsp + #16]	# spill
330   	movl    R11, [R10 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
334   	NullCheck R10
334
334   B45: #	B87 B46 &lt;- B44  Freq: 1316.27
334   	MEMBAR-acquire ! (empty encoding)
334   	movl    R8, [R11 + #8 (8-bit)]	# compressed klass ptr
338   	NullCheck R11
338
338   B46: #	B77 B47 &lt;- B45  Freq: 1316.27
338   	decode_heap_oop_not_null R10,R11
33b   	cmpl    R8, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f46a4074980:Constant:exact *	# compressed klass ptr
342   	jne,u  B77  P=0.000000 C=-1.000000
342
348   B47: #	B60 B48 &lt;- B46  Freq: 1316.27
348   	# checkcastPP of R10
348   	movzbl  R8, [R10 + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
34d   	testl   R8, R8
350   	jne     B60  P=0.000299 C=6687.000000
350
356   B48: #	B88 B49 &lt;- B47  Freq: 1315.88
356   	movl    R11, [R10 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
35a   	movl    R9, [R11 + #8 (8-bit)]	# compressed klass ptr
35e   	NullCheck R11
35e
35e   B49: #	B78 B50 &lt;- B48  Freq: 1315.88
35e   	cmpl    R9, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f46a4074a50:Constant:exact *	# compressed klass ptr
365   	jne,u  B78  P=0.000000 C=-1.000000
365
36b   B50: #	B64 B51 &lt;- B49  Freq: 1315.88
36b   	movl    R9, [R10 + #32 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
36f   	decode_heap_oop_not_null R14,R11
372   	# checkcastPP of R14
372   	testl   R9, R9	# compressed ptr
375   	je     B64  P=0.000001 C=-1.000000
375
37b   B51: #	B53 B52 &lt;- B50  Freq: 1315.88
37b   	MEMBAR-release ! (empty encoding)
37b   	
37b   	movl    R11, #-1	# int
381   	XADDL  [[R9 + #12 (8-bit)]],R11
387   	decl    R11	# int
38a   	
38a   	MEMBAR-acquire ! (empty encoding)
38a   	testl   R11, R11
38d   	jne,s   B53  P=0.497143 C=175.000000
38d
38f   B52: #	B53 &lt;- B51  Freq: 661.697
38f   	MEMBAR-release ! (empty encoding)
38f   	movb    [R10 + #18 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
393   	lock addl [rsp + #0], 0	! membar_volatile
398
398   B53: #	B56 B54 &lt;- B51 B52  Freq: 1315.88
398   	movzbl  R8, [R10 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
39d   	MEMBAR-acquire ! (empty encoding)
39d   	testl   R8, R8
3a0   	je,s   B56  P=0.000796 C=192265.000000
3a0
3a2   B54: #	B68 B55 &lt;- B53  Freq: 1314.83
3a2   	movl    R11, [rsp + #48]	# spill
3a7   	testl   R11, R11
3aa   	jne     B68  P=0.000001 C=-1.000000
3aa
3b0   B55: #	B55 B56 &lt;- B54 B55 	Loop: B55-B55 inner  Freq: 1.65225e+06
3b0   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=R10 L[1]=rsp + #48 STK[0]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=rsp + #0 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=R10 L[7]=R14 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{r10=Oop rbp=Oop r14=Oop [0]=Oop [16]=Oop off=944}
3b6   	movzbl  R8, [R10 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
3bb   	MEMBAR-acquire ! (empty encoding)
3bb   	testl   R8, R8
3be   	jne,s   B55  P=0.999204 C=192265.000000
3be
3c0   B56: #	B65 B57 &lt;- B55 B53  Freq: 1315.87
3c0   	movl    R8, [R10 + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
3c4   	testl   R8, R8	# compressed ptr
3c7   	je     B65  P=0.000001 C=-1.000000
3c7
3cd   B57: #	B59 B58 &lt;- B56  Freq: 1315.87
3cd   	MEMBAR-release ! (empty encoding)
3cd   	movl    R9, [R14 + #12 (8-bit)]	# range
3d1   	movl    [rsp + #52], R9	# spill
3d6   	
3d6   	movl    R11, #-1	# int
3dc   	XADDL  [[R8 + #12 (8-bit)]],R11
3e2   	decl    R11	# int
3e5   	
3e5   	MEMBAR-acquire ! (empty encoding)
3e5   	testl   R11, R11
3e8   	jne,s   B59  P=0.500000 C=176.000000
3e8
3ea   B58: #	B59 &lt;- B57  Freq: 657.936
3ea   	MEMBAR-release ! (empty encoding)
3ea   	movb    [R10 + #17 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
3ee   	lock addl [rsp + #0], 0	! membar_volatile
3f3
3f3   B59: #	B20 &lt;- B58 B57  Freq: 1315.87
3f3   	xorl    R13, R13	# int
3f6   	jmp     B20
3f6
3fb   B60: #	N1069 &lt;- B47  Freq: 0.393535
3fb   	xorl    RAX, RAX	# ptr
3fd   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

408   	ret
408
409   B61: #	N1069 &lt;- B26  Freq: 0.00133379
409   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
40f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1044}
414   	int3	# ShouldNotReachHere
414
419   B62: #	N1069 &lt;- B33  Freq: 0.00133376
419   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
41f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:115  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=rsp + #8 STK[2]=rsp + #40
        # OopMap{off=1060}
424   	int3	# ShouldNotReachHere
424
429   B63: #	N1069 &lt;- B38  Freq: 0.00133376
429   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
42f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1076}
434   	int3	# ShouldNotReachHere
434
439   B64: #	N1069 &lt;- B50  Freq: 0.00133335
439   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
43f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1092}
444   	int3	# ShouldNotReachHere
444
449   B65: #	N1069 &lt;- B56  Freq: 0.00133335
449   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
44f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1108}
454   	int3	# ShouldNotReachHere
454
459   B66: #	N1069 &lt;- B42  Freq: 0.00131618
459   	movl    RSI, #-122	# int
45e   	movq    [rsp + #24], R10	# spill
463   	movl    R10, R11	# spill
466   	movl    [rsp + #32], R10	# spill
46b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:22  L[0]=rsp + #24 L[1]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=rsp + #0 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #16 L[5]=RBP L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=1136}
470   	int3	# ShouldNotReachHere
470
475   B67: #	N1069 &lt;- B31  Freq: 0.00131566
475   	movl    R10, [rsp + #48]	# spill
47a   	movl    [rsp + #12], R10	# spill
47f   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
487   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:35  L[0]=rsp + #32 L[1]=rsp + #12
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=RBP L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop off=1164}
48c   	int3	# ShouldNotReachHere
48c
491   B68: #	N1069 &lt;- B54  Freq: 0.00131483
491   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #40]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
4a3   	movq    [rsp + #32], R14	# spill
4a8   	movq    [rsp + #40], R10	# spill
4ad   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
4b3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:22  L[0]=rsp + #40 L[1]=rsp + #48
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=rsp + #40 L[7]=rsp + #32 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [32]=Oop [40]=Oop off=1208}
4b8   	int3	# ShouldNotReachHere
4b8
4bd   B69: #	B4 &lt;- B1  Freq: 0.000999987
4bd   	xorl    R10, R10	# ptr
4c0   	jmp     B4
4c0
4c5   B70: #	B7 &lt;- B4  Freq: 0.000999986
4c5   	movq    [rsp + #0], R10	# spill
4c9   	xorl    R10, R10	# ptr
4cc   	movq    [rsp + #16], R10	# spill
4d1   	jmp     B7
4d1
4d6   B71: #	B10 &lt;- B7  Freq: 0.000999985
4d6   	xorl    RBP, RBP	# ptr
4d8   	jmp     B10
4d8
4dd   B72: #	B13 &lt;- B10  Freq: 0.000999984
4dd   	xorl    R10, R10	# ptr
4e0   	jmp     B13
4e0
4e5   B73: #	B16 &lt;- B13  Freq: 0.000999983
4e5   	xorl    R14, R14	# ptr
4e8   	jmp     B16
4e8
4ed   B74: #	N1069 &lt;- B37  Freq: 0.00062765
4ed   	movl    RSI, #-155	# int
4f2   	movl    [rsp + #8], R10	# spill
4f7   	movq    R10, [rsp + #32]	# spill
4fc   	movq    [rsp + #24], R10	# spill
501   	movl    [rsp + #36], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
507   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:136  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #8 STK[1]=rsp + #36
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=1292}
50c   	int3	# ShouldNotReachHere
50c
511   B75: #	N1069 &lt;- B35  Freq: 0.000280792
511   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
517   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=rsp + #32
        # OopMap{[32]=Oop off=1308}
51c   	int3	# ShouldNotReachHere
51c
521   B76: #	N1069 &lt;- B2 B5 B8 B11 B14  Freq: 4.99499e-06
521   	movl    RBP, RBX	# spill
523   	movl    R11, [rsp + #48]	# spill
528   	movl    [rsp + #0], R11	# spill
52c   	movq    [rsp + #8], R14	# spill
531   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #52]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
543   	movl    [rsp + #16], R13	# spill
548   	movl    RSI, #-99	# int
      	nop 	# 2 bytes pad for loops and calls
54f   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:75  L[0]=rsp + #32 L[1]=RBP L[2]=_ L[3]=rsp + #0 L[4]=rsp + #56 L[5]=rsp + #40 L[6]=rsp + #24 L[7]=_ L[8]=rsp + #8 L[9]=rsp + #4 L[10]=rsp + #16 L[11]=_
        # OopMap{[8]=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop off=1364}
554   	int3	# ShouldNotReachHere
554
559   B77: #	N1069 &lt;- B46  Freq: 1e-35
559   	movl    [rsp + #24], R11	# spill
55e   	movl    RSI, #-34	# int
563   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=rsp + #0 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #24
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=NarrowOop off=1384}
568   	int3	# ShouldNotReachHere
568
56d   B78: #	N1069 &lt;- B49  Freq: 1e-35
56d   	movq    [rsp + #24], R10	# spill
572   	movl    [rsp + #32], R11	# spill
577   	movl    RSI, #-34	# int
      	nop 	# 3 bytes pad for loops and calls
57f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:52  L[0]=rsp + #0 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=Oop [32]=NarrowOop off=1412}
584   	int3	# ShouldNotReachHere
584
589   B79: #	N1069 &lt;- B22  Freq: 0.143417
589   	movl    RBP, R13	# spill
58c   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
593   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:86  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=1432}
598   	int3	# ShouldNotReachHere
598
59d   B80: #	N1069 &lt;- B17  Freq: 0.143417
59d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
5a3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:91  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1448}
5a8   	int3	# ShouldNotReachHere
5a8
5ad   B81: #	N1069 &lt;- B18  Freq: 0.143417
5ad   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
5b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:94  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1464}
5b8   	int3	# ShouldNotReachHere
5b8
5bd   B82: #	B84 &lt;- B36  Freq: 0.00277112
5bd   	# exception oop is in rax; no code emitted
5bd   	movq    RSI, RAX	# spill
5c0   	jmp,s   B84
5c0
5c2   B83: #	B84 &lt;- B27  Freq: 0.0131631
5c2   	# exception oop is in rax; no code emitted
5c2   	movq    RSI, RAX	# spill
5c2
5c5   B84: #	N1069 &lt;- B83 B82  Freq: 0.0159342
5c5   	addq    rsp, 80	# Destroy frame
	popq   rbp

5ca   	jmp     rethrow_stub
5ca
5cf   B85: #	N1069 &lt;- B25  Freq: 0.00133379
5cf   	movl    RBP, [rsp + #48]	# spill
5d3   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
5db   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=1504}
5e0   	int3	# ShouldNotReachHere
5e0
5e5   B86: #	N1069 &lt;- B44  Freq: 0.00133375
5e5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
5eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:29  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1520}
5f0   	int3	# ShouldNotReachHere
5f0
5f5   B87: #	N1069 &lt;- B45  Freq: 0.00133375
5f5   	movl    RSI, #-12	# int
      	nop 	# 1 bytes pad for loops and calls
5fb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=rsp + #0 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [0]=Oop [16]=Oop off=1536}
600   	int3	# ShouldNotReachHere
600
605   B88: #	N1069 &lt;- B48  Freq: 0.00133335
605   	movq    [rsp + #24], R10	# spill
60a   	movl    RSI, #-12	# int
60f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:52  L[0]=rsp + #0 L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #16 L[5]=RBP L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=1556}
614   	int3	# ShouldNotReachHere
614

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='416'>
{method}
 - this oop:          0x00007f46c6ae0c58
 - method holder:     &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos;
 - constants:         0x00007f46c6ae07d0 constant pool [84] {0x00007f46c6ae07d0} for &apos;org/openjdk/jcstress/infra/runners/StateHolder&apos; cache=0x00007f46c6ae0fa8
 - access:            0x81000001  public 
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;(Z[Ljava/lang/Object;I)V&apos;
 - max stack:         5
 - max locals:        4
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80eff40: 0xbaba0000 i2c: 0x00007f46c9153560 c2i: 0x00007f46c91536a5 c2iUV: 0x00007f46c9153678
 - compiled entry     0x00007f46c92f5c60
 - code size:         88
 - code start:        0x00007f46c6ae0bb8
 - code end (excl):   0x00007f46c6ae0c10
 - method data:       0x00007f46c6ae5950
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae0c10
 - localvar length:   4
 - localvar start:    0x00007f46c6ae0c24
 - compiled code: nmethod   5232  384       3       org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; (88 bytes)
#
#  void ( org/openjdk/jcstress/infra/runners/StateHolder:NotNull *, bool, narrowoop: java/lang/Object *[int:&gt;=0] *, int )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/infra/runners/StateHolder:NotNull *
#r016 rdx   : parm 1: bool
#r010 rcx:rcx   : parm 2: narrowoop: java/lang/Object *[int:&gt;=0] *
#r004 r8   : parm 3: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N405: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B10 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (152 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	movl    [rsp + #0], R8	# spill
030   	movq    RBP, RSI	# spill
033   	movq    R10, RSI	# ptr -&gt; long
036   	encode_heap_oop R11,RCX
0c1   	movl    [RSI + #12 (8-bit)], R8	# int ! Field: org/openjdk/jcstress/infra/runners/StateHolder.countWorkers
0c5   	movb    [RSI + #16 (8-bit)], RDX	# byte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
0c8   	shrq    R10, #9
0cc   	movq    R8, 0x00007f46dbf28000	# ptr
0d6   	movb    [R8 + R10], R12	# short/char (R12_heapbase==0)
0da   	# TLS is in R15
0da   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
0de   	movl    [RSI + #24 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
0e2   	movl    R11, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c079f50:Constant:exact *	# compressed klass ptr
0e8   	movq    R10, RAX	# spill
0eb   	addq    R10, #16	# ptr
0ef   	decode_klass_not_null R8,R11
0fd   	# TLS is in R15
0fd   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
104   	jnb,u  B10  P=0.000100 C=-1.000000
104
10a   B2: #	B3 &lt;- B1  Freq: 0.9999
10a   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
112   	# TLS is in R15
112   	movq    [R15 + #112 (8-bit)], R10	# ptr
116   	movq    R10, [R8 + #176 (32-bit)]	# ptr
11d   	movq    [RAX], R10	# ptr
120   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c079f50:Constant:exact *	# compressed klass ptr
127   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
127
12b   B3: #	B12 B4 &lt;- B11 B2  Freq: 1
12b   	
12b   	MEMBAR-storestore (empty encoding)
12b   	# checkcastPP of RAX
12b   	encode_heap_oop_not_null R11,RAX
236   	MEMBAR-release ! (empty encoding)
236   	movl    R9, [rsp + #0]	# spill
23a   	movl    [RAX + #12 (8-bit)], R9	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
23e   	lock addl [rsp + #0], 0	! membar_volatile
243   	movq    R10, RBP	# ptr -&gt; long
246   	movl    [RBP + #32 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
24a   	shrq    R10, #9
24e   	movq    R11, 0x00007f46dbf28000	# ptr
258   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
25c   	# TLS is in R15
25c   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
260   	movq    R10, RAX	# spill
263   	addq    R10, #16	# ptr
267   	# TLS is in R15
267   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
26e   	jnb,u  B12  P=0.000100 C=-1.000000
26e
274   B4: #	B5 &lt;- B3  Freq: 0.9999
274   	# TLS is in R15
274   	movq    [R15 + #112 (8-bit)], R10	# ptr
278   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
280   	movq    R10, [R8 + #176 (32-bit)]	# ptr
287   	movq    [RAX], R10	# ptr
28a   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c079f50:Constant:exact *	# compressed klass ptr
291   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
291
295   B5: #	B14 B6 &lt;- B13 B4  Freq: 1
295   	
295   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c079f50:Constant:exact *	# ptr
29f   	MEMBAR-storestore (empty encoding)
29f   	# checkcastPP of RAX
29f   	encode_heap_oop_not_null R11,RAX
3aa   	MEMBAR-release ! (empty encoding)
3aa   	movl    R10, [rsp + #0]	# spill
3ae   	movl    [RAX + #12 (8-bit)], R10	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
3b2   	lock addl [rsp + #0], 0	! membar_volatile
3b7   	movq    R10, RBP	# ptr -&gt; long
3ba   	movl    [RBP + #28 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
3be   	shrq    R10, #9
3c2   	movq    R11, 0x00007f46dbf28000	# ptr
3cc   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
3d0   	# TLS is in R15
3d0   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
3d4   	movq    R10, RAX	# spill
3d7   	addq    R10, #16	# ptr
3db   	# TLS is in R15
3db   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
3e2   	jnb,u  B14  P=0.000100 C=-1.000000
3e2
3e8   B6: #	B7 &lt;- B5  Freq: 0.9999
3e8   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
3f0   	# TLS is in R15
3f0   	movq    [R15 + #112 (8-bit)], R10	# ptr
3f4   	movq    R10, [R8 + #176 (32-bit)]	# ptr
3fb   	movq    [RAX], R10	# ptr
3fe   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c079f50:Constant:exact *	# compressed klass ptr
405   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
405
409   B7: #	B16 B8 &lt;- B15 B6  Freq: 1
409   	
409   	MEMBAR-storestore (empty encoding)
409   	# checkcastPP of RAX
409   	encode_heap_oop_not_null R11,RAX
514   	MEMBAR-release ! (empty encoding)
514   	movl    R9, [rsp + #0]	# spill
518   	movl    [RAX + #12 (8-bit)], R9	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
51c   	lock addl [rsp + #0], 0	! membar_volatile
521   	movq    R10, RBP	# ptr -&gt; long
524   	movl    [RBP + #36 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
528   	shrq    R10, #9
52c   	movq    R11, 0x00007f46dbf28000	# ptr
536   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
53a   	# TLS is in R15
53a   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
53e   	movq    R10, RAX	# spill
541   	addq    R10, #16	# ptr
545   	# TLS is in R15
545   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
54c   	jnb,u  B16  P=0.000100 C=-1.000000
54c
552   B8: #	B9 &lt;- B7  Freq: 0.9999
552   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
55a   	# TLS is in R15
55a   	movq    [R15 + #112 (8-bit)], R10	# ptr
55e   	movq    R10, [R8 + #176 (32-bit)]	# ptr
565   	movq    [RAX], R10	# ptr
568   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c079f50:Constant:exact *	# compressed klass ptr
56f   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
56f
573   B9: #	N405 &lt;- B17 B8  Freq: 1
573   	
573   	MEMBAR-storestore (empty encoding)
573   	# checkcastPP of RAX
573   	encode_heap_oop_not_null R11,RAX
67e   	MEMBAR-release ! (empty encoding)
67e   	movl    R10, [rsp + #0]	# spill
682   	movl    [RAX + #12 (8-bit)], R10	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
686   	MEMBAR-volatile (unnecessary so empty encoding)
686   	movq    R10, RBP	# ptr -&gt; long
689   	movl    [RBP + #40 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
68d   	shrq    R10, #9
691   	movq    R11, 0x00007f46dbf28000	# ptr
69b   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
69f   	MEMBAR-release ! (empty encoding)
69f   	movb    [RBP + #18 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
6a3   	MEMBAR-volatile (unnecessary so empty encoding)
6a3   	MEMBAR-release ! (empty encoding)
6a3   	movb    [RBP + #19 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
6a7   	MEMBAR-volatile (unnecessary so empty encoding)
6a7   	MEMBAR-release ! (empty encoding)
6a7   	movb    [RBP + #17 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
6ab   	MEMBAR-volatile (unnecessary so empty encoding)
6ab   	MEMBAR-release ! (empty encoding)
6ab   	movb    [RBP + #20 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
6af   	lock addl [rsp + #0], 0	! membar_volatile
6b4   	MEMBAR-release ! (empty encoding)
6b4   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

6bf   	ret
6bf
6c0   B10: #	B21 B11 &lt;- B1  Freq: 0.000100017
6c0   	movq    [rsp + #16], R8	# spill
6c5   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c079f50:Constant:exact *	# ptr
6cf   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:20  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #0 STK[0]=RBP
        # OopMap{rbp=Oop off=1748}
6d4
6d4   B11: #	B3 &lt;- B10  Freq: 0.000100015
        # Block is sole successor of call
6d4   	movq    R8, [rsp + #16]	# spill
6d9   	jmp     B3
6d9
6de   B12: #	B20 B13 &lt;- B3  Freq: 0.000100017
6de   	movq    [rsp + #16], R8	# spill
6e3   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c079f50:Constant:exact *	# ptr
      	nop 	# 2 bytes pad for loops and calls
6ef   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:32  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #0 STK[0]=RBP
        # OopMap{rbp=Oop off=1780}
6f4
6f4   B13: #	B5 &lt;- B12  Freq: 0.000100015
        # Block is sole successor of call
6f4   	movq    R8, [rsp + #16]	# spill
6f9   	jmp     B5
6f9
6fe   B14: #	B19 B15 &lt;- B5  Freq: 0.000100017
6fe   	movq    [rsp + #16], R8	# spill
703   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:44  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #0 STK[0]=RBP
        # OopMap{rbp=Oop off=1800}
708
708   B15: #	B7 &lt;- B14  Freq: 0.000100015
        # Block is sole successor of call
708   	movq    R8, [rsp + #16]	# spill
70d   	jmp     B7
70d
712   B16: #	B18 B17 &lt;- B7  Freq: 0.000100017
712   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f469c079f50:Constant:exact *	# ptr
      	nop 	# 3 bytes pad for loops and calls
71f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:56  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #0 STK[0]=RBP
        # OopMap{rbp=Oop off=1828}
724
724   B17: #	B9 &lt;- B16  Freq: 0.000100015
        # Block is sole successor of call
724   	jmp     B9
724
729   B18: #	B22 &lt;- B16  Freq: 1.00017e-09
729   	# exception oop is in rax; no code emitted
729   	movq    RSI, RAX	# spill
72c   	jmp,s   B22
72c
72e   B19: #	B22 &lt;- B14  Freq: 1.00017e-09
72e   	# exception oop is in rax; no code emitted
72e   	movq    RSI, RAX	# spill
731   	jmp,s   B22
731
733   B20: #	B22 &lt;- B12  Freq: 1.00017e-09
733   	# exception oop is in rax; no code emitted
733   	movq    RSI, RAX	# spill
736   	jmp,s   B22
736
738   B21: #	B22 &lt;- B10  Freq: 1.00017e-09
738   	# exception oop is in rax; no code emitted
738   	movq    RSI, RAX	# spill
738
73b   B22: #	N405 &lt;- B21 B20 B19 B18  Freq: 4.00066e-09
73b   	addq    rsp, 48	# Destroy frame
	popq   rbp

740   	jmp     rethrow_stub
740

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='139941923202816'/>
<opto_assembly compile_id='415'>
{method}
 - this oop:          0x00007f46c6ae3490
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2&apos;
 - constants:         0x00007f46c6ae2d50 constant pool [137] {0x00007f46c6ae2d50} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2&apos; cache=0x00007f46c6ae3618
 - access:            0xc1000001  public 
 - name:              &apos;call&apos;
 - signature:         &apos;()Ljava/lang/Void;&apos;
 - max stack:         5
 - max locals:        12
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef760: 0xb0000000 i2c: 0x00007f46c9145620 c2i: 0x00007f46c914575a c2iUV: 0x00007f46c914572d
 - compiled entry     0x00007f46c9302820
 - code size:         163
 - code start:        0x00007f46c6ae3360
 - code end (excl):   0x00007f46c6ae3403
 - method data:       0x00007f46c6ae5f50
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae3403
 - localvar length:   9
 - localvar start:    0x00007f46c6ae3422
 - compiled code: nmethod   5243  382       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call (163 bytes)
#
#  java/lang/Void:exact * ( org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2:NotNull * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor2:NotNull *
# -- Old rsp -- Framesize: 224 --
#r191 rsp+220: in_preserve
#r190 rsp+216: return address
#r189 rsp+212: in_preserve
#r188 rsp+208: saved fp register
#r187 rsp+204: pad2, stack alignment
#r186 rsp+200: pad2, stack alignment
#r185 rsp+196: Fixed slot 1
#r184 rsp+192: Fixed slot 0
#r239 rsp+188: spill
#r238 rsp+184: spill
#r237 rsp+180: spill
#r236 rsp+176: spill
#r235 rsp+172: spill
#r234 rsp+168: spill
#r233 rsp+164: spill
#r232 rsp+160: spill
#r231 rsp+156: spill
#r230 rsp+152: spill
#r229 rsp+148: spill
#r228 rsp+144: spill
#r227 rsp+140: spill
#r226 rsp+136: spill
#r225 rsp+132: spill
#r224 rsp+128: spill
#r223 rsp+124: spill
#r222 rsp+120: spill
#r221 rsp+116: spill
#r220 rsp+112: spill
#r219 rsp+108: spill
#r218 rsp+104: spill
#r217 rsp+100: spill
#r216 rsp+96: spill
#r215 rsp+92: spill
#r214 rsp+88: spill
#r213 rsp+84: spill
#r212 rsp+80: spill
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N4795: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B292 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (632 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #208	# Create frame

02f   	movq    R11, RSI	# spill
032   	movl    R9, [RSI + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.version
036   	movl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f46a41fd100:Constant:exact *	# compressed klass ptr
03c   	movl    RSI, #-10	# int
041   	movl    R8, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
045   	movzbl  RCX, [R8 + #33 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/Control.shouldYield
04a   	NullCheck R8
04a
04a   B2: #	B293 B3 &lt;- B1  Freq: 0.999999
04a   	movl    RDI, [R9 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
04e   	NullCheck R9
04e
04e   B3: #	B294 B4 &lt;- B2  Freq: 0.999998
04e   	movl    [rsp + #40], RCX	# spill
052   	movq    [rsp + #32], R11	# spill
057   	movl    R8, narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f46a41fd250:Constant:exact *	# compressed klass ptr
05d   	movl    RBX, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a42037e0:Constant:exact *	# compressed klass ptr
062   	movl    RSI, #-12	# int
067   	decode_heap_oop_not_null RCX,R9
06a   	movq    [rsp + #8], RCX	# spill
06f   	movl    [rsp + #16], R9	# spill
074   	movl    R9, [R11 + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.epoch
078   	movl    [rsp + #20], R9	# spill
07d   	decode_heap_oop_not_null R9,RDI
080   	MEMBAR-acquire ! (empty encoding)
080   	movl    RCX, [RDI + #8 (8-bit)]	# compressed klass ptr
083   	NullCheck RDI
083
083   B4: #	B273 B5 &lt;- B3  Freq: 0.999997
083   	movl    RSI, #-122	# int
088   	decode_klass_not_null R10,R10
08c   	movq    [rsp + #24], R10	# spill
091   	cmpl    RCX, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f46a41fd100:Constant:exact *	# compressed klass ptr
097   	jne,u  B273  P=0.000000 C=-1.000000
097
09d   B5: #	B189 B6 &lt;- B4  Freq: 0.999997
09d   	# checkcastPP of R9
09d   	movzbl  R10, [R9 + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
0a2   	testl   R10, R10
0a5   	jne     B189  P=0.000346 C=5784.000000
0a5
0ab   B6: #	B264 B7 &lt;- B5  Freq: 0.999651
0ab   	movl    R10, narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a41fd3f0:Constant:exact *	# compressed klass ptr
0b1   	movl    RCX, [rsp + #20]	# spill
0b5   	testl   RCX, RCX	# compressed ptr
0b7   	je     B264  P=0.000001 C=-1.000000
0b7
0bd   B7: #	B96 &lt;- B6  Freq: 0.99965
0bd   	movl    RCX, narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46a41fd320:Constant:exact *	# compressed klass ptr
0c2   	decode_klass_not_null R11,RCX
0d0   	movq    [rsp + #48], R11	# spill
0d5   	movl    R11, [rsp + #20]	# spill
0da   	decode_heap_oop_not_null R11,R11
0da   	movq    [rsp + #56], R11	# spill
0df   	decode_klass_not_null R11,RBX
0ed   	movq    [rsp + #64], R11	# spill
0f2   	decode_klass_not_null R10,R10
0f6   	movq    [rsp + #72], R10	# spill
0fb   	decode_klass_not_null R10,R8
109   	movq    [rsp + #80], R10	# spill
10e   	xorl    R10, R10	# int
111   	xorl    R8, R8	# int
114   	movl    [rsp + #156], R10	# spill
11c   	movl    [rsp + #44], R8	# spill
121   	jmp     B96
121
126   B8: #	B9 &lt;- B18  Freq: 0.000246115
126   	movl    R14, RBX	# spill
126
129   B9: #	B10 &lt;- B8 B228  Freq: 0.000246152
129   	movl    R10, R14	# spill
129
12c   B10: #	B11 &lt;- B143 B260 B9  Freq: 0.0204476
12c   	movl    [rsp + #124], R10	# spill
12c
131   B11: #	B309 B12 &lt;- B10 B160  Freq: 1.67812
131   	movl    [rsp + #128], RDX	# spill
138   	movl    R10, [rsp + #120]	# spill
13d   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
141   	movl    [rsp + #164], R11	# spill
149   	movslq  R10, [RSP + #124 (32-bit)]	# int -&gt; long
14e   	movq    [rsp + #176], R10	# spill
156   	movl    R11, [rsp + #120]	# spill
15b   	decode_heap_oop_not_null R10,R11
15e   	movq    [rsp + #184], R10	# spill
166   	movq    RSI, [rsp + #168]	# spill
      	nop 	# 1 bytes pad for loops and calls
16f   	call,static  org.openjdk.jcstress.util.OpenAddressHashCounter::decouple
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:103  L[0]=rsp + #112 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #124 L[6]=_ L[7]=_ STK[0]=rsp + #120 STK[1]=rsp + #124
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #32 L[1]=rsp + #88 L[2]=rsp + #104 L[3]=rsp + #100 L[4]=rsp + #104 L[5]=rsp + #100 L[6]=rsp + #128 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop [104]=Oop [112]=Oop [120]=NarrowOop [184]=Oop off=372}
174
174   B12: #	B261 B13 &lt;- B11  Freq: 1.67808
        # Block is sole successor of call
174   	movl    R10, [rsp + #124]	# spill
179   	cmpl    R10, RBP	# unsigned
17c   	jnb,u  B261  P=0.000001 C=-1.000000
17c
182   B13: #	B263 B14 &lt;- B12  Freq: 1.67808
182   	movl    RBP, [rsp + #120]	# spill
186   	movq    R8, [rsp + #176]	# spill
18e   	leaq    R9, [RBP + #16 + R8 &lt;&lt; #2]	# ptr idxscaleoffnarrow
193   	movl    R11, [rsp + #164]	# spill
19b   	cmpl    R11, narrowklass: precise klass [Ljava/lang/Object;: 0x00007f46a4200bd0:Constant:exact *	# compressed klass ptr
1a2   	jne,u  B263  P=0.000001 C=-1.000000
1a2
1a8   B14: #	B291 B15 &lt;- B13  Freq: 1.67808
1a8   	movq    R10, [rsp + #112]	# spill
1ad   	movl    RBP, [R10 + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
1b1   	movq    R10, R9	# ptr -&gt; long
1b4   	shrq    R10, #9
1b8   	encode_heap_oop R11,RAX
243   	movl    [R9], R11	# compressed ptr
246   	movq    R11, 0x00007f46dbf28000	# ptr
250   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
254   	movl    R10, [RBP + #12 (8-bit)]	# range
258   	NullCheck RBP
258
258   B15: #	B262 B16 &lt;- B14  Freq: 1.67808
258   	movl    R9, [rsp + #124]	# spill
25d   	cmpl    R9, R10	# unsigned
260   	jnb,u  B262  P=0.000001 C=-1.000000
260
266   B16: #	B152 &lt;- B15  Freq: 1.67807
266   	movq    [RBP + #16 + R8 &lt;&lt; #3], #1	# long
26f   	movl    RDX, [rsp + #128]	# spill
276   	jmp     B152
276
27b   B17: #	B257 B18 &lt;- B146 B147  Freq: 4.75707
27b   	cmpl    RBX, RBP	# unsigned
27d   	jnb,u  B257  P=0.000001 C=-1.000000
27d
283   B18: #	B8 B19 &lt;- B17  Freq: 4.75706
283   	movl    R10, [rsp + #120]	# spill
288   	movl    R10, [R10 + #16 + RBX &lt;&lt; #2]	# compressed ptr
28d   	decode_heap_oop_not_null R13,R10
290   	testl   R10, R10	# compressed ptr
293   	je     B8  P=0.000052 C=38671.000000
293
299   B19: #	B259 B20 &lt;- B18  Freq: 4.75682
299   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
29d   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a42037e0:Constant:exact *	# compressed klass ptr
2a4   	jne,u  B259  P=0.000001 C=-1.000000
2a4
2aa   B20: #	B188 B21 &lt;- B19  Freq: 4.75681
2aa   	# checkcastPP of R13
2aa   	movl    R9, [R13 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
2b1   	cmpq    R13, [RSP + #168 (32-bit)]	# ptr
2b9   	je,u  B188  P=0.000789 C=11408.000000
2b9
2bf   B21: #	B194 B22 &lt;- B20  Freq: 4.75306
2bf   	movl    R10, [R13 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
2c6   	cmpl    R9, R8
2c9   	jne     B194  P=0.004825 C=11398.000000
2c9
2cf   B22: #	B194 B23 &lt;- B21  Freq: 4.73012
2cf   	cmpl    R10, RDI
2d2   	jne     B194  P=0.007405 C=11343.000000
2d2
2d8   B23: #	B148 &lt;- B22 B233  Freq: 4.69579
2d8   	movl    R10, RBX	# spill
2db   	jmp     B148
2db
2e0   B24: #	B25 &lt;- B152  Freq: 337.957
2e0   	movl    RAX, [rsp + #160]	# spill
2e0
2e7   B25: #	B170 B26 &lt;- B24 B138  Freq: 341.563
2e7   	movq    R10, [rsp + #88]	# spill
2ec   	movzbl  R11, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
2f1   	movl    R10, [rsp + #100]	# spill
2f6   	sall    R10, #1
2f9   	MEMBAR-acquire ! (empty encoding)
2f9   	testl   R11, R11
2fc   	jne     B170  P=0.002882 C=5899.000000
2fc
302   B26: #	B27 &lt;- B25  Freq: 340.578
302   	movl    R10, [rsp + #100]	# spill
307   	movl    [rsp + #128], R10	# spill
307
30f   B27: #	B48 B28 &lt;- B26 B171  Freq: 341.563
30f   	movl    R11, [rsp + #100]	# spill
314   	testl   R11, R11
317   	jle     B48  P=0.011185 C=525986.000000
317
31d   B28: #	B248 B29 &lt;- B27  Freq: 337.743
31d   	testl  R11, R11	# unsigned
320   	jbe,u  B248  P=0.000001 C=-1.000000
320
326   B29: #	B248 B30 &lt;- B28  Freq: 337.742
326   	cmpl    RAX, R11	# unsigned
329   	jnb,u  B248  P=0.000001 C=-1.000000
329
32f   B30: #	B278 B31 &lt;- B29  Freq: 337.742
32f   	movq    R10, [rsp + #104]	# spill
334   	movl    R11, [R10 + #16 (8-bit)]	# compressed ptr
338   	movl    RCX, [rsp + #100]	# spill
33c   	addl    RCX, #-3	# int
33f   	movl    R11, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
343   	NullCheck R11
343
343   B31: #	B279 B32 &lt;- B30  Freq: 337.741
343   	cmpl    RAX, RCX
345   	movl    R8, #-2147483648	# int
34b   	cmovll RCX, R8	# signed, int
34f   	movl    [R11 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
356   	NullCheck R11
356
356   B32: #	B249 B33 &lt;- B31  Freq: 337.741
356   	movl    [R11 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
35d   	cmpl    RCX, #1
360   	jle     B249  P=0.000001 C=-1.000000
360
366   B33: #	B34 &lt;- B32  Freq: 337.741
366   	movl    RBX, #1	# int
      	nop 	# 5 bytes pad for loops and calls

370   B34: #	B278 B35 &lt;- B33 B42 	Loop: B34-B42 inner main of N687 Freq: 30175.1
370   	movq    R10, [rsp + #104]	# spill
375   	movl    R10, [R10 + #16 + RBX &lt;&lt; #2]	# compressed ptr
37a   	movl    R11, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
37e   	NullCheck R10
37e
37e   B35: #	B279 B36 &lt;- B34  Freq: 30175
37e   	movl    [R11 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
385   	NullCheck R11
385
385   B36: #	B278 B37 &lt;- B35  Freq: 30175
385   	movl    [R11 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
38c   	movslq  R10, RBX	# i2l
38f   	movq    R11, [rsp + #104]	# spill
394   	movl    R11, [R11 + #20 + R10 &lt;&lt; #2]	# compressed ptr
399   	movq    R8, [rsp + #104]	# spill
39e   	movl    R9, [R8 + #24 + R10 &lt;&lt; #2]	# compressed ptr
3a3   	movl    R11, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
3a7   	NullCheck R11
3a7
3a7   B37: #	B279 B38 &lt;- B36  Freq: 30175
3a7   	movl    [R11 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
3ae   	NullCheck R11
3ae
3ae   B38: #	B278 B39 &lt;- B37  Freq: 30174.9
3ae   	movl    [R11 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
3b5   	movl    R8, [R9 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
3b9   	NullCheck R9
3b9
3b9   B39: #	B279 B40 &lt;- B38  Freq: 30174.9
3b9   	movq    R11, [rsp + #104]	# spill
3be   	movl    R11, [R11 + #28 + R10 &lt;&lt; #2]	# compressed ptr
3c3   	movl    [R8 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
3ca   	NullCheck R8
3ca
3ca   B40: #	B278 B41 &lt;- B39  Freq: 30174.9
3ca   	movl    [R8 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
3d1   	movl    R10, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
3d5   	NullCheck R11
3d5
3d5   B41: #	B279 B42 &lt;- B40  Freq: 30174.9
3d5   	movl    [R10 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
3dc   	NullCheck R10
3dc
3dc   B42: #	B34 B43 &lt;- B41  Freq: 30174.8
3dc   	movl    [R10 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
3e3   	addl    RBX, #4	# int
3e6   	cmpl    RBX, RCX
3e8   	jl,s   B34	# loop end  P=0.988815 C=520103.000000
3e8
3ea   B43: #	B48 B44 &lt;- B249 B42  Freq: 337.497
3ea   	cmpl    RBX, [RSP + #100 (32-bit)]
3ee   	jge,s   B48  P=0.500000 C=-1.000000
3ee
3f0   B44: #	B45 &lt;- B43  Freq: 168.748
3f0   	# castII of RBX
3f0
3f0   B45: #	B278 B46 &lt;- B44 B47 	Loop: B45-B47 inner post of N3232 Freq: 337.496
3f0   	movq    R10, [rsp + #104]	# spill
3f5   	movl    R11, [R10 + #16 + RBX &lt;&lt; #2]	# compressed ptr
3fa   	movl    R10, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
3fe   	NullCheck R11
3fe
3fe   B46: #	B279 B47 &lt;- B45  Freq: 337.496
3fe   	incl    RBX	# int
400   	movl    [R10 + #140 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
407   	NullCheck R10
407
407   B47: #	B45 B48 &lt;- B46  Freq: 337.495
407   	movl    [R10 + #272 (32-bit)], R12	# int (R12_heapbase==0) ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
40e   	cmpl    RBX, [RSP + #100 (32-bit)]
412   	jl,s   B45	# loop end  P=0.500000 C=520103.000000
412
414   B48: #	B172 B49 &lt;- B47 B43 B27  Freq: 341.316
414   	movl    R11, [rsp + #128]	# spill
41c   	cmpl    R11, [RSP + #100 (32-bit)]
421   	jg     B172  P=0.002550 C=5883.000000
421
427   B49: #	B72 B50 &lt;- B48  Freq: 340.446
427   	movl    R10, [rsp + #100]	# spill
42c   	testl   R10, R10
42f   	jle     B72  P=0.012320 C=477503.000000
42f
435   B50: #	B251 B51 &lt;- B49  Freq: 336.251
435   	movl    R11, R10	# spill
438   	testl  R11, R11	# unsigned
43b   	jbe,u  B251  P=0.000001 C=-1.000000
43b
441   B51: #	B251 B52 &lt;- B185 B226 B50  Freq: 337.111
441   	movl    R11, [rsp + #100]	# spill
446   	decl    R11	# int
449   	movl    [rsp + #0], R11	# spill
44d   	cmpl    R11, [RSP + #100 (32-bit)]	# unsigned
452   	jnb,u  B251  P=0.000001 C=-1.000000
452
458   B52: #	B211 B53 &lt;- B51  Freq: 337.11
458   	# TLS is in R15
458   	movq    R8, [R15 + #112 (8-bit)]	# ptr
45c   	movq    R10, R8	# spill
45f   	addq    R10, #280	# ptr
466   	movq    R11, [rsp + #104]	# spill
46b   	movl    RBP, [R11 + #16 (8-bit)]	# compressed ptr
46f   	movq    RDI, R8	# spill
472   	addq    RDI, #16	# ptr
476   	decode_heap_oop_not_null R9,RBP
479   	# TLS is in R15
479   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
480   	jnb,u  B211  P=0.000100 C=-1.000000
480
486   B53: #	B54 &lt;- B52  Freq: 337.077
486   	# TLS is in R15
486   	movq    [R15 + #112 (8-bit)], R10	# ptr
48a   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
492   	movq    R10, [rsp + #48]	# spill
497   	movq    R10, [R10 + #176 (32-bit)]	# ptr
49e   	movq    [R8], R10	# ptr
4a1   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46a41fd320:Constant:exact *	# compressed klass ptr
4a9   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
4ad   	movl    RCX, #33	# long (unsigned 32-bit)
4b2   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
4bc
4bc   B54: #	B222 B55 &lt;- B212 B53  Freq: 337.11
4bc   	
4bc   	MEMBAR-storestore (empty encoding)
4bc   	# checkcastPP of R8
4bc   	encode_heap_oop_not_null R11,R8
5c7   	movl    [RBP + #12 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
5cb   	NullCheck RBP
5cb
5cb   B55: #	B252 B56 &lt;- B54  Freq: 337.11
5cb   	movq    R10, R9	# ptr -&gt; long
5ce   	shrq    R10, #9
5d2   	movq    R11, 0x00007f46dbf28000	# ptr
5dc   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
5e0   	movl    R11, [rsp + #0]	# spill
5e4   	cmpl    R11, #1
5e8   	jle     B252  P=0.000001 C=-1.000000
5e8
5ee   B56: #	B57 &lt;- B55  Freq: 337.11
5ee   	movl    R10, #1	# int
      	nop 	# 12 bytes pad for loops and calls

600   B57: #	B166 B58 &lt;- B56 B63 	Loop: B57-B63 inner main of N1182 Freq: 27357.6
600   	movslq  R11, R10	# i2l
603   	movq    R8, [rsp + #104]	# spill
608   	movl    R11, [R8 + #20 + R11 &lt;&lt; #2]	# compressed ptr
60d   	movl    [rsp + #4], R11	# spill
612   	# TLS is in R15
612   	movq    R8, [R15 + #112 (8-bit)]	# ptr
616   	decode_heap_oop_not_null R11,R11
616   	movq    [rsp + #112], R11	# spill
61b   	movq    R11, R8	# spill
61e   	addq    R11, #280	# ptr
625   	movq    R9, [rsp + #104]	# spill
62a   	movl    RBP, [R9 + #16 + R10 &lt;&lt; #2]	# compressed ptr
62f   	decode_heap_oop_not_null R9,RBP
632   	# TLS is in R15
632   	cmpq    R11, [R15 + #128 (32-bit)]	# raw ptr
639   	jnb,u  B166  P=0.000100 C=-1.000000
639
63f   B58: #	B59 &lt;- B57  Freq: 27354.9
63f   	# TLS is in R15
63f   	movq    [R15 + #112 (8-bit)], R11	# ptr
643   	PREFETCHNTA [R11 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
64b   	movq    RDI, R8	# spill
64e   	addq    RDI, #16	# ptr
652   	movq    R11, [rsp + #48]	# spill
657   	movq    R11, [R11 + #176 (32-bit)]	# ptr
65e   	movq    [R8], R11	# ptr
661   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46a41fd320:Constant:exact *	# compressed klass ptr
669   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
66d   	movl    RCX, #33	# long (unsigned 32-bit)
672   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
67c   	movl    [rsp + #120], R10	# spill
67c
681   B59: #	B222 B60 &lt;- B167 B58  Freq: 27357.6
681   	
681   	MEMBAR-storestore (empty encoding)
681   	# checkcastPP of R8
681   	encode_heap_oop_not_null R10,R8
78c   	movl    [RBP + #12 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
790   	NullCheck RBP
790
790   B60: #	B168 B61 &lt;- B59  Freq: 27357.6
790   	movq    R10, R9	# ptr -&gt; long
793   	shrq    R10, #9
797   	movq    R11, 0x00007f46dbf28000	# ptr
7a1   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
7a5   	# TLS is in R15
7a5   	movq    R8, [R15 + #112 (8-bit)]	# ptr
7a9   	movq    R10, R8	# spill
7ac   	addq    R10, #280	# ptr
7b3   	# TLS is in R15
7b3   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
7ba   	jnb,u  B168  P=0.000100 C=-1.000000
7ba
7c0   B61: #	B62 &lt;- B60  Freq: 27354.8
7c0   	movq    RDI, R8	# spill
7c3   	addq    RDI, #16	# ptr
7c7   	# TLS is in R15
7c7   	movq    [R15 + #112 (8-bit)], R10	# ptr
7cb   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
7d3   	movq    R10, [rsp + #48]	# spill
7d8   	movq    R10, [R10 + #176 (32-bit)]	# ptr
7df   	movq    [R8], R10	# ptr
7e2   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46a41fd320:Constant:exact *	# compressed klass ptr
7ea   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
7ee   	movl    RCX, #33	# long (unsigned 32-bit)
7f3   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
7fd
7fd   B62: #	B222 B63 &lt;- B169 B61  Freq: 27357.6
7fd   	movl    R10, [rsp + #120]	# spill
802   	addl    R10, #2	# int
806   	
806   	MEMBAR-storestore (empty encoding)
806   	# checkcastPP of R8
806   	movl    R9, [rsp + #4]	# spill
80b   	testl   R9, R9	# compressed ptr
80e   	je     B222  P=0.000001 C=-1.000000
80e
814   B63: #	B57 B64 &lt;- B62  Freq: 27357.5
814   	encode_heap_oop_not_null R8,R8
91c   	movq    R11, [rsp + #112]	# spill
921   	movq    R11, R11	# ptr -&gt; long
921   	movl    [R9 + #12 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
925   	shrq    R11, #9
929   	movq    R8, 0x00007f46dbf28000	# ptr
933   	movb    [R8 + R11], R12	# short/char (R12_heapbase==0)
937   	cmpl    R10, [RSP + #0 (32-bit)]
93b   	jl     B57	# loop end  P=0.987680 C=471620.000000
93b
941   B64: #	B65 &lt;- B63  Freq: 337.054
941   	movl    R8, R10	# spill
941
944   B65: #	B72 B66 &lt;- B252 B64  Freq: 337.054
944   	cmpl    R8, [RSP + #100 (32-bit)]
949   	jge     B72  P=0.500000 C=-1.000000
949
94f   B66: #	B67 &lt;- B65  Freq: 168.527
94f   	# castII of R8
      	nop 	# 1 bytes pad for loops and calls

950   B67: #	B213 B68 &lt;- B66 B71 	Loop: B67-B71 inner post of N3244 Freq: 337.054
950   	# TLS is in R15
950   	movq    R11, [R15 + #112 (8-bit)]	# ptr
954   	movl    R10, R8	# spill
957   	incl    R10	# int
95a   	movl    [rsp + #4], R10	# spill
95f   	movq    RDI, R11	# spill
962   	addq    RDI, #16	# ptr
966   	movq    R10, [rsp + #104]	# spill
96b   	movl    RBP, [R10 + #16 + R8 &lt;&lt; #2]	# compressed ptr
970   	movq    R10, R11	# spill
973   	addq    R10, #280	# ptr
97a   	# TLS is in R15
97a   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
981   	jnb,u  B213  P=0.000100 C=-1.000000
981
987   B68: #	B69 &lt;- B67  Freq: 337.02
987   	# TLS is in R15
987   	movq    [R15 + #112 (8-bit)], R10	# ptr
98b   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
993   	movq    R10, [rsp + #48]	# spill
998   	movq    R10, [R10 + #176 (32-bit)]	# ptr
99f   	movq    [R11], R10	# ptr
9a2   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46a41fd320:Constant:exact *	# compressed klass ptr
9aa   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
9ae   	movl    RCX, #33	# long (unsigned 32-bit)
9b3   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
9bd
9bd   B69: #	B253 B70 &lt;- B214 B68  Freq: 337.054
9bd   	
9bd   	MEMBAR-storestore (empty encoding)
9bd   	# checkcastPP of R11
9bd   	testl   RBP, RBP	# compressed ptr
9bf   	je     B253  P=0.000001 C=-1.000000
9bf
9c5   B70: #	B72 B71 &lt;- B69  Freq: 337.054
9c5   	encode_heap_oop_not_null R11,R11
acd   	decode_heap_oop_not_null R10,RBP
ad0   	movl    [RBP + #12 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
ad4   	movq    R10, R10	# ptr -&gt; long
ad4   	shrq    R10, #9
ad8   	movq    R11, 0x00007f46dbf28000	# ptr
ae2   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
ae6   	movl    R11, [rsp + #4]	# spill
aeb   	cmpl    R11, [RSP + #100 (32-bit)]
af0   	jge,s   B72	# loop end  P=0.500000 C=471620.000000
af0
af2   B71: #	B67 &lt;- B70  Freq: 168.527
af2   	movl    R8, R11	# spill
af5   	jmp     B67
af5
afa   B72: #	B201 B73 &lt;- B70 B65 B183 B224 B49  Freq: 341.259
afa   	movq    R10, [rsp + #32]	# spill
aff   	movl    R11, [R10 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.version
b03   	movl    [rsp + #100], R11	# spill
b08   	# TLS is in R15
b08   	movq    R9, [R15 + #112 (8-bit)]	# ptr
b0c   	movq    R10, R9	# spill
b0f   	addq    R10, #48	# ptr
b13   	# TLS is in R15
b13   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
b1a   	jnb,u  B201  P=0.000100 C=-1.000000
b1a
b20   B73: #	B74 &lt;- B72  Freq: 341.225
b20   	# TLS is in R15
b20   	movq    [R15 + #112 (8-bit)], R10	# ptr
b24   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
b2c   	movq    R10, [rsp + #24]	# spill
b31   	movq    R10, [R10 + #176 (32-bit)]	# ptr
b38   	movq    [R9], R10	# ptr
b3b   	movl    [R9 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f46a41fd100:Constant:exact *	# compressed klass ptr
b43   	movl    [R9 + #12 (8-bit)], R12	# int (R12_heapbase==0)
b47   	movq    [R9 + #16 (8-bit)], R12	# long (R12_heapbase==0)
b4b   	movq    [R9 + #24 (8-bit)], R12	# long (R12_heapbase==0)
b4f   	movq    [R9 + #32 (8-bit)], R12	# long (R12_heapbase==0)
b53   	movq    [R9 + #40 (8-bit)], R12	# long (R12_heapbase==0)
b53
b57   B74: #	B290 B75 &lt;- B202 B73  Freq: 341.259
b57   	movq    R10, [rsp + #32]	# spill
b5c   	movl    R8, [R10 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
b60   	
b60   	movq    R10, [rsp + #104]	# spill
b65   	encode_heap_oop_not_null R11,R10
c70   	MEMBAR-storestore (empty encoding)
c70   	# checkcastPP of R9
c70   	movq    [rsp + #104], R9	# spill
c75   	movzbl  R8, [R8 + #32 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/Control.isStopped
c7a   	NullCheck R8
c7a
c7a   B75: #	B203 B76 &lt;- B74  Freq: 341.259
c7a   	MEMBAR-acquire ! (empty encoding)
c7a   	movq    R10, R9	# ptr -&gt; long
c7d   	movb    [R9 + #16 (8-bit)], R8	# byte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
c81   	movl    [R9 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/infra/runners/StateHolder.countWorkers
c89   	movl    [R9 + #24 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
c8d   	shrq    R10, #9
c91   	movq    R11, 0x00007f46dbf28000	# ptr
c9b   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
c9f   	# TLS is in R15
c9f   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
ca3   	movq    R10, RAX	# spill
ca6   	addq    R10, #16	# ptr
caa   	# TLS is in R15
caa   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
cb1   	jnb,u  B203  P=0.000100 C=-1.000000
cb1
cb7   B76: #	B77 &lt;- B75  Freq: 341.225
cb7   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
cbf   	# TLS is in R15
cbf   	movq    [R15 + #112 (8-bit)], R10	# ptr
cc3   	movq    R10, [rsp + #72]	# spill
cc8   	movq    R10, [R10 + #176 (32-bit)]	# ptr
ccf   	movq    [RAX], R10	# ptr
cd2   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a41fd3f0:Constant:exact *	# compressed klass ptr
cd9   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
cd9
cdd   B77: #	B205 B78 &lt;- B204 B76  Freq: 341.259
cdd   	
cdd   	MEMBAR-storestore (empty encoding)
cdd   	# checkcastPP of RAX
cdd   	encode_heap_oop_not_null R11,RAX
de8   	MEMBAR-release ! (empty encoding)
de8   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
def   	lock addl [rsp + #0], 0	! membar_volatile
df4   	movq    R10, [rsp + #104]	# spill
df9   	movq    R10, R10	# ptr -&gt; long
df9   	movq    R8, [rsp + #104]	# spill
dfe   	movl    [R8 + #32 (8-bit)], R11	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
e02   	shrq    R10, #9
e06   	movq    R11, 0x00007f46dbf28000	# ptr
e10   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
e14   	# TLS is in R15
e14   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
e18   	movq    R10, RAX	# spill
e1b   	addq    R10, #16	# ptr
e1f   	# TLS is in R15
e1f   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
e26   	jnb,u  B205  P=0.000100 C=-1.000000
e26
e2c   B78: #	B79 &lt;- B77  Freq: 341.225
e2c   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
e34   	# TLS is in R15
e34   	movq    [R15 + #112 (8-bit)], R10	# ptr
e38   	movq    R10, [rsp + #72]	# spill
e3d   	movq    R10, [R10 + #176 (32-bit)]	# ptr
e44   	movq    [RAX], R10	# ptr
e47   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a41fd3f0:Constant:exact *	# compressed klass ptr
e4e   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
e4e
e52   B79: #	B207 B80 &lt;- B206 B78  Freq: 341.259
e52   	movq    R10, [rsp + #104]	# spill
e57   	encode_heap_oop_not_null RBP,R10
f62   	
f62   	MEMBAR-storestore (empty encoding)
f62   	# checkcastPP of RAX
f62   	encode_heap_oop_not_null R10,RAX
106d   	MEMBAR-release ! (empty encoding)
106d   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
1074   	lock addl [rsp + #0], 0	! membar_volatile
1079   	movq    R11, [rsp + #104]	# spill
107e   	movq    R11, R11	# ptr -&gt; long
107e   	movq    R8, [rsp + #104]	# spill
1083   	movl    [R8 + #28 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
1087   	shrq    R11, #9
108b   	movq    R10, 0x00007f46dbf28000	# ptr
1095   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
1099   	# TLS is in R15
1099   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
109d   	movq    R10, RAX	# spill
10a0   	addq    R10, #16	# ptr
10a4   	# TLS is in R15
10a4   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
10ab   	jnb,u  B207  P=0.000100 C=-1.000000
10ab
10b1   B80: #	B81 &lt;- B79  Freq: 341.225
10b1   	# TLS is in R15
10b1   	movq    [R15 + #112 (8-bit)], R10	# ptr
10b5   	movq    R11, [rsp + #72]	# spill
10ba   	movq    R11, [R11 + #176 (32-bit)]	# ptr
10c1   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
10c9   	movq    [RAX], R11	# ptr
10cc   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a41fd3f0:Constant:exact *	# compressed klass ptr
10d3   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
10d3
10d7   B81: #	B209 B82 &lt;- B208 B80  Freq: 341.259
10d7   	
10d7   	MEMBAR-storestore (empty encoding)
10d7   	# checkcastPP of RAX
10d7   	encode_heap_oop_not_null R10,RAX
11e2   	MEMBAR-release ! (empty encoding)
11e2   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
11e9   	lock addl [rsp + #0], 0	! membar_volatile
11ee   	movq    R11, [rsp + #104]	# spill
11f3   	movq    R11, R11	# ptr -&gt; long
11f3   	movq    R8, [rsp + #104]	# spill
11f8   	movl    [R8 + #36 (8-bit)], R10	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
11fc   	shrq    R11, #9
1200   	movq    R10, 0x00007f46dbf28000	# ptr
120a   	movb    [R10 + R11], R12	# short/char (R12_heapbase==0)
120e   	# TLS is in R15
120e   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
1212   	movq    R10, RAX	# spill
1215   	addq    R10, #16	# ptr
1219   	# TLS is in R15
1219   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
1220   	jnb,u  B209  P=0.000100 C=-1.000000
1220
1226   B82: #	B83 &lt;- B81  Freq: 341.225
1226   	# TLS is in R15
1226   	movq    [R15 + #112 (8-bit)], R10	# ptr
122a   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1232   	movq    R10, [rsp + #72]	# spill
1237   	movq    R10, [R10 + #176 (32-bit)]	# ptr
123e   	movq    [RAX], R10	# ptr
1241   	movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a41fd3f0:Constant:exact *	# compressed klass ptr
1248   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
1248
124c   B83: #	B246 B84 &lt;- B210 B82  Freq: 341.259
124c   	movl    R10, [rsp + #100]	# spill
1251   	decode_heap_oop_not_null R8,R10
1254   	
1254   	MEMBAR-storestore (empty encoding)
1254   	# checkcastPP of RAX
1254   	encode_heap_oop_not_null R9,RAX
135f   	MEMBAR-release ! (empty encoding)
135f   	movl    [RAX + #12 (8-bit)], #2	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
1366   	MEMBAR-volatile (unnecessary so empty encoding)
1366   	movq    R10, [rsp + #104]	# spill
136b   	movq    R10, R10	# ptr -&gt; long
136b   	movq    R11, [rsp + #104]	# spill
1370   	movl    [R11 + #40 (8-bit)], R9	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
1374   	shrq    R10, #9
1378   	movq    R11, 0x00007f46dbf28000	# ptr
1382   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
1386   	MEMBAR-release ! (empty encoding)
1386   	movq    R10, [rsp + #104]	# spill
138b   	movb    [R10 + #18 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
1390   	MEMBAR-volatile (unnecessary so empty encoding)
1390   	MEMBAR-release ! (empty encoding)
1390   	movb    [R10 + #19 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
1395   	MEMBAR-volatile (unnecessary so empty encoding)
1395   	MEMBAR-release ! (empty encoding)
1395   	movb    [R10 + #17 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
139a   	MEMBAR-volatile (unnecessary so empty encoding)
139a   	MEMBAR-release ! (empty encoding)
139a   	movb    [R10 + #20 (8-bit)], #1	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
139f   	lock addl [rsp + #0], 0	! membar_volatile
13a4   	MEMBAR-release ! (empty encoding)
13a4   	movl    R11, [rsp + #100]	# spill
13a9   	testl   R11, R11	# compressed ptr
13ac   	je     B246  P=0.000001 C=-1.000000
13ac
13b2   B84: #	B85 &lt;- B83  Freq: 341.259
13b2   	MEMBAR-release ! (empty encoding)
13b2   	movq    R10, R8	# ptr -&gt; long
13b5   	movl    [R11 + #12 (8-bit)], RBP	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
13b9   	shrq    R10, #9
13bd   	movq    R11, 0x00007f46dbf28000	# ptr
13c7   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
13cb   	lock addl [rsp + #0], 0	! membar_volatile
13d0
13d0   B85: #	B254 B86 &lt;- B84 B135  Freq: 414.657
13d0   	movl    R10, [rsp + #20]	# spill
13d5   	movl    R9, [R10 + #12 (8-bit)]	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
13d9   	MEMBAR-acquire ! (empty encoding)
13d9   	movq    R10, [rsp + #88]	# spill
13de   	movl    R11, [R10 + #40 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
13e2   	movl    R10, [rsp + #96]	# spill
13e7   	cmpl    R10, R9
13ea   	jne     B254  P=0.000000 C=5782.000000
13ea
13f0   B86: #	B237 B87 &lt;- B85  Freq: 414.657
13f0   	testl   R11, R11	# compressed ptr
13f3   	je     B237  P=0.000001 C=-1.000000
13f3
13f9   B87: #	B89 B88 &lt;- B86  Freq: 414.656
13f9   	MEMBAR-release ! (empty encoding)
13f9   	
13f9   	movl    R10, #-1	# int
13ff   	XADDL  [[R11 + #12 (8-bit)]],R10
1405   	decl    R10	# int
1408   	
1408   	MEMBAR-acquire ! (empty encoding)
1408   	testl   R10, R10
140b   	jne,s   B89  P=0.502075 C=241.000000
140b
140d   B88: #	B89 &lt;- B87  Freq: 206.468
140d   	MEMBAR-release ! (empty encoding)
140d   	movq    R10, [rsp + #88]	# spill
1412   	movb    [R10 + #20 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1416   	lock addl [rsp + #0], 0	! membar_volatile
141b
141b   B89: #	B92 B90 &lt;- B87 B88  Freq: 414.656
141b   	movq    R10, [rsp + #88]	# spill
1420   	movzbl  R11, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1425   	MEMBAR-acquire ! (empty encoding)
1425   	testl   R11, R11
1428   	je,s   B92  P=0.000074 C=2941144.000000
1428
142a   B90: #	B243 B91 &lt;- B89  Freq: 414.626
142a   	movl    R11, [rsp + #40]	# spill
142f   	testl   R11, R11
1432   	jne     B243  P=0.000001 C=-1.000000
      	nop 	# 8 bytes pad for loops and calls

1440   B91: #	B91 B92 &lt;- B90 B91 	Loop: B91-B91 inner  Freq: 5.59185e+06
1440   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=rsp + #88 L[1]=rsp + #40 STK[0]=rsp + #40
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=rsp + #32 L[1]=rsp + #96 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop off=5184}
1446   	movq    R10, [rsp + #88]	# spill
144b   	movzbl  R11, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1450   	MEMBAR-acquire ! (empty encoding)
1450   	testl   R11, R11
1453   	jne,s   B91  P=0.999926 C=2941144.000000
1453
1455   B92: #	B288 B93 &lt;- B91 B89  Freq: 414.656
1455   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:160  L[0]=rsp + #32 L[1]=rsp + #96 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop off=5205}
145b   	movl    R11, [rsp + #16]	# spill
1460   	movl    RCX, [R11 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
1464   	decode_heap_oop_not_null R9,RCX
1467   	MEMBAR-acquire ! (empty encoding)
1467   	movl    R11, [RCX + #8 (8-bit)]	# compressed klass ptr
146b   	NullCheck RCX
146b
146b   B93: #	B277 B94 &lt;- B92  Freq: 414.656
146b   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f46a41fd100:Constant:exact *	# compressed klass ptr
1472   	jne,u  B277  P=0.000000 C=-1.000000
1472
1478   B94: #	B189 B95 &lt;- B93  Freq: 414.656
1478   	# checkcastPP of R9
1478   	movzbl  R11, [R9 + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
147d   	testl   R11, R11
1480   	jne     B189  P=0.000346 C=5782.000000
1480
1486   B95: #	B96 &lt;- B94  Freq: 414.512
1486   	movl    R11, [rsp + #96]	# spill
148b   	movl    [rsp + #44], R11	# spill
148b
1490   B96: #	B287 B97 &lt;- B7 B95 	Loop: B96-B95  Freq: 415.516
1490   	movl    R10, [R9 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
1494   	decode_heap_oop_not_null RBX,R10
1497   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
149b   	NullCheck R10
149b
149b   B97: #	B274 B98 &lt;- B96  Freq: 415.516
149b   	cmpl    R11, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f46a41fd1d0:Constant:exact *	# compressed klass ptr
14a2   	jne,u  B274  P=0.000000 C=-1.000000
14a2
14a8   B98: #	B234 B99 &lt;- B97  Freq: 415.516
14a8   	# checkcastPP of R9
14a8   	movq    [rsp + #88], R9	# spill
14ad   	# checkcastPP of RBX
14ad   	movl    R10, [R9 + #32 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
14b1   	testl   R10, R10	# compressed ptr
14b4   	je     B234  P=0.000001 C=-1.000000
14b4
14ba   B99: #	B101 B100 &lt;- B98  Freq: 415.515
14ba   	MEMBAR-release ! (empty encoding)
14ba   	
14ba   	movl    R11, #-1	# int
14c0   	XADDL  [[R10 + #12 (8-bit)]],R11
14c6   	decl    R11	# int
14c9   	
14c9   	MEMBAR-acquire ! (empty encoding)
14c9   	testl   R11, R11
14cc   	jne,s   B101  P=0.497143 C=175.000000
14cc
14ce   B100: #	B101 &lt;- B99  Freq: 208.945
14ce   	MEMBAR-release ! (empty encoding)
14ce   	movb    [R9 + #18 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
14d2   	lock addl [rsp + #0], 0	! membar_volatile
14d7
14d7   B101: #	B104 B102 &lt;- B99 B100  Freq: 415.515
14d7   	movzbl  R11, [R9 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
14dc   	MEMBAR-acquire ! (empty encoding)
14dc   	testl   R11, R11
14df   	je,s   B104  P=0.000796 C=192265.000000
14df
14e1   B102: #	B241 B103 &lt;- B101  Freq: 415.185
14e1   	movl    R11, [rsp + #40]	# spill
14e6   	testl   R11, R11
14e9   	jne     B241  P=0.000001 C=-1.000000
      	nop 	# 1 bytes pad for loops and calls

14f0   B103: #	B103 B104 &lt;- B102 B103 	Loop: B103-B103 inner  Freq: 521731
14f0   	movq    R10, [rsp + #88]	# spill
14f5   	movzbl  R10, [R10 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
14fa   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=rsp + #88 L[1]=rsp + #40 STK[0]=rsp + #40
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #20 L[6]=rsp + #88 L[7]=RBX L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbx=Oop [8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop off=5370}
1500   	MEMBAR-acquire ! (empty encoding)
1500   	testl   R10, R10
1503   	jne,s   B103  P=0.999204 C=192265.000000
1503
1505   B104: #	B235 B105 &lt;- B103 B101  Freq: 415.515
1505   	movl    R10, [RBX + #12 (8-bit)]	# range
1509   	movq    R11, [rsp + #88]	# spill
150e   	movl    R8, [R11 + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
1512   	testl   R8, R8	# compressed ptr
1515   	je     B235  P=0.000001 C=-1.000000
1515
151b   B105: #	B107 B106 &lt;- B104  Freq: 415.514
151b   	MEMBAR-release ! (empty encoding)
151b   	movl    R11, R10	# spill
151e   	decl    R11	# int
1521   	
1521   	movl    RCX, #-1	# int
1526   	XADDL  [[R8 + #12 (8-bit)]],RCX
152c   	decl    RCX	# int
152e   	
152e   	MEMBAR-acquire ! (empty encoding)
152e   	testl   RCX, RCX
1530   	jne,s   B107  P=0.500000 C=176.000000
1530
1532   B106: #	B107 &lt;- B105  Freq: 207.757
1532   	MEMBAR-release ! (empty encoding)
1532   	movq    R8, [rsp + #88]	# spill
1537   	movb    [R8 + #17 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
153b   	lock addl [rsp + #0], 0	! membar_volatile
1540
1540   B107: #	B128 B108 &lt;- B106 B105  Freq: 415.514
1540   	testl   R10, R10
1543   	jle     B128  P=0.010101 C=572416.000000
1543
1549   B108: #	B238 B109 &lt;- B107  Freq: 411.317
1549   	testl  R10, R10	# unsigned
154c   	jbe,u  B238  P=0.000001 C=-1.000000
154c
1552   B109: #	B238 B110 &lt;- B108  Freq: 411.317
1552   	cmpl    R11, R10	# unsigned
1555   	jnb,u  B238  P=0.000001 C=-1.000000
1555
155b   B110: #	B280 B111 &lt;- B109  Freq: 411.316
155b   	movl    R8, [RBX + #16 (8-bit)]	# compressed ptr
155f   	movl    RCX, [R8 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
1563   	NullCheck R8
1563
1563   B111: #	B281 B112 &lt;- B110  Freq: 411.316
1563   	movl    RDI, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1567   	movl    R8, [RCX + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
156e   	NullCheck RCX
156e
156e   B112: #	B239 B113 &lt;- B111  Freq: 411.316
156e   	testl   RDI, RDI	# compressed ptr
1570   	je     B239  P=0.000001 C=-1.000000
1570
1576   B113: #	B240 B114 &lt;- B112  Freq: 411.315
1576   	movl    [RDI + #140 (32-bit)], R8	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
157d   	movl    R8, [RCX + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
1581   	movl    [RDI + #272 (32-bit)], R8	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1588   	cmpl    R11, #1
158c   	jle     B240  P=0.000001 C=-1.000000
158c
1592   B114: #	B115 &lt;- B113  Freq: 411.315
1592   	movl    RCX, #1	# int
      	nop 	# 9 bytes pad for loops and calls

15a0   B115: #	B280 B116 &lt;- B114 B121 	Loop: B115-B121 inner main of N1673 Freq: 40695.9
15a0   	movl    R8, [RBX + #16 + RCX &lt;&lt; #2]	# compressed ptr
15a5   	movl    R9, [R8 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
15a9   	NullCheck R8
15a9
15a9   B116: #	B281 B117 &lt;- B115  Freq: 40695.8
15a9   	movl    RDI, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
15ad   	movl    R8, [R9 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
15b4   	NullCheck R9
15b4
15b4   B117: #	B239 B118 &lt;- B116  Freq: 40695.8
15b4   	movslq  RDX, RCX	# i2l
15b7   	movl    RSI, [RBX + #20 + RDX &lt;&lt; #2]	# compressed ptr
15bb   	movl    [RDI + #140 (32-bit)], R8	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
15c2   	NullCheck RDI
15c2
15c2   B118: #	B280 B119 &lt;- B117  Freq: 40695.7
15c2   	movl    R9, [R9 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
15c6   	movl    [RDI + #272 (32-bit)], R9	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
15cd   	movl    RDX, [RSI + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
15d0   	NullCheck RSI
15d0
15d0   B119: #	B281 B120 &lt;- B118  Freq: 40695.7
15d0   	movl    RDI, [RSI + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
15d3   	movl    R8, [RDX + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
15da   	NullCheck RDX
15da
15da   B120: #	B239 B121 &lt;- B119  Freq: 40695.7
15da   	addl    RCX, #2	# int
15dd   	movl    [RDI + #140 (32-bit)], R8	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
15e4   	NullCheck RDI
15e4
15e4   B121: #	B115 B122 &lt;- B120  Freq: 40695.6
15e4   	movl    R9, [RDX + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
15e8   	movl    [RDI + #272 (32-bit)], R9	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
15ef   	cmpl    RCX, R11
15f2   	jl,s   B115	# loop end  P=0.989899 C=566633.000000
15f2
15f4   B122: #	B128 B123 &lt;- B240 B121  Freq: 411.068
15f4   	cmpl    RCX, R10
15f7   	jge,s   B128  P=0.500000 C=-1.000000
15f7
15f9   B123: #	B124 &lt;- B122  Freq: 205.534
15f9   	# castII of RCX
      	nop 	# 3 bytes pad for loops and calls

15fc   B124: #	B280 B125 &lt;- B123 B127 	Loop: B124-B127 inner post of N3220 Freq: 411.066
15fc   	movl    R11, [RBX + #16 + RCX &lt;&lt; #2]	# compressed ptr
1601   	movl    R9, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
1605   	NullCheck R11
1605
1605   B125: #	B281 B126 &lt;- B124  Freq: 411.066
1605   	movl    RDI, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1609   	incl    RCX	# int
160b   	movl    R8, [R9 + #144 (32-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
1612   	NullCheck R9
1612
1612   B126: #	B239 B127 &lt;- B125  Freq: 411.066
1612   	movl    R11, [R9 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
1616   	movl    [RDI + #140 (32-bit)], R8	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
161d   	NullCheck RDI
161d
161d   B127: #	B124 B128 &lt;- B126  Freq: 411.065
161d   	movl    [RDI + #272 (32-bit)], R11	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1624   	cmpl    RCX, R10
1627   	jl,s   B124	# loop end  P=0.500000 C=566633.000000
1627
1629   B128: #	B236 B129 &lt;- B127 B122 B107  Freq: 415.264
1629   	movq    R10, [rsp + #88]	# spill
162e   	movl    R10, [R10 + #36 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
1632   	decode_heap_oop_not_null RSI,R10
1635   	testl   R10, R10	# compressed ptr
1638   	je     B236  P=0.000001 C=-1.000000
1638
163e   B129: #	B311 B130 &lt;- B128  Freq: 415.263
163e   	movl    RBP, [rsp + #40]	# spill
      	nop 	# 1 bytes pad for loops and calls
1643   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=rsp + #88 L[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ L[3]=RBP L[4]=rsp + #8 L[5]=rsp + #20 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop off=5704}
1648
1648   B130: #	B132 B131 &lt;- B129  Freq: 415.255
        # Block is sole successor of call
1648   	testl   RAX, RAX
164a   	jne,s   B132  P=0.492537 C=67.000000
164a
164c   B131: #	B132 &lt;- B130  Freq: 210.726
164c   	MEMBAR-release ! (empty encoding)
164c   	movq    R10, [rsp + #88]	# spill
1651   	movb    [R10 + #19 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
1655   	lock addl [rsp + #0], 0	! membar_volatile
165a
165a   B132: #	B135 B133 &lt;- B131 B130  Freq: 415.255
165a   	movq    R10, [rsp + #88]	# spill
165f   	movzbl  R11, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
1664   	MEMBAR-acquire ! (empty encoding)
1664   	movzbl  R10, [R10 + #17 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
1669   	orl     R11, R10	# int
166c   	MEMBAR-acquire ! (empty encoding)
166c   	MEMBAR-release ! (empty encoding)
166c   	movq    R10, [rsp + #88]	# spill
1671   	movb    [R10 + #21 (8-bit)], R11	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
1675   	lock addl [rsp + #0], 0	! membar_volatile
167a   	movzbl  R11, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
167f   	MEMBAR-acquire ! (empty encoding)
167f   	testl   R11, R11
1682   	je,s   B135  P=0.000477 C=136189.000000
1682
1684   B133: #	B242 B134 &lt;- B132  Freq: 415.057
1684   	testl   RBP, RBP
1686   	jne     B242  P=0.000001 C=-1.000000
      	nop 	# 4 bytes pad for loops and calls

1690   B134: #	B134 B135 &lt;- B133 B134 	Loop: B134-B134 inner  Freq: 869675
1690   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=rsp + #88 L[1]=rsp + #40 STK[0]=rsp + #40
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #20 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop off=5776}
1696   	movq    R10, [rsp + #88]	# spill
169b   	movzbl  R11, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
16a0   	MEMBAR-acquire ! (empty encoding)
16a0   	testl   R11, R11
16a3   	jne,s   B134  P=0.999523 C=136189.000000
16a3
16a5   B135: #	B85 B136 &lt;- B134 B132  Freq: 415.254
16a5   	MEMBAR-release ! (empty encoding)
16a5   	movl    R11, [rsp + #44]	# spill
16aa   	incl    R11	# int
16ad   	movl    [rsp + #96], R11	# spill
16b2   	
16b2   	movl    R10, [rsp + #20]	# spill
16b7   	movl    RAX, [rsp + #44]	# spill
16bb   	cmpxchgl [R10 + #12 (8-bit)],R11	# If rax == [R10 + #12 (8-bit)] then store R11 into [R10 + #12 (8-bit)]
	sete    R10
	movzbl  R10, R10
16c9   	
16c9   	MEMBAR-acquire ! (empty encoding)
16c9   	movq    R11, [rsp + #88]	# spill
16ce   	movl    R11, [R11 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
16d2   	decode_heap_oop_not_null R8,R11
16d5   	testl   R10, R10
16d8   	je     B85  P=0.176755 C=5782.000000
16d8
16de   B136: #	B289 B137 &lt;- B135  Freq: 341.856
16de   	movl    R9, [R11 + #8 (8-bit)]	# compressed klass ptr
16e2   	NullCheck R11
16e2
16e2   B137: #	B275 B138 &lt;- B136  Freq: 341.856
16e2   	cmpl    R9, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f46a41fd1d0:Constant:exact *	# compressed klass ptr
16e9   	jne,u  B275  P=0.000000 C=-1.000000
16e9
16ef   B138: #	B25 B139 &lt;- B137  Freq: 341.856
16ef   	# checkcastPP of R8
16ef   	movq    [rsp + #104], R8	# spill
16f4   	movl    R11, [R8 + #12 (8-bit)]	# range
16f8   	movl    [rsp + #100], R11	# spill
16fd   	movl    RAX, R11	# spill
1700   	decl    RAX	# int
1702   	testl   R11, R11
1705   	jle     B25  P=0.010548 C=559259.000000
1705
170b   B139: #	B247 B140 &lt;- B138  Freq: 338.25
170b   	testl  R11, R11	# unsigned
170e   	jbe,u  B247  P=0.000001 C=-1.000000
170e
1714   B140: #	B247 B141 &lt;- B139  Freq: 338.249
1714   	cmpl    RAX, R11	# unsigned
1717   	jnb,u  B247  P=0.000001 C=-1.000000
1717
171d   B141: #	B154 &lt;- B140  Freq: 338.249
171d   	xorl    RDX, RDX	# int
171f   	jmp     B154
171f
1724   B142: #	B244 B143 &lt;- B163 B164  top-of-loop Freq: 390.408
1724   	cmpl    R10, RBP	# unsigned
1727   	jnb,u  B244  P=0.000001 C=-1.000000
1727
172d   B143: #	B10 B144 &lt;- B142  Freq: 390.408
172d   	movl    R9, [rsp + #120]	# spill
1732   	movl    R13, [R9 + #16 + R10 &lt;&lt; #2]	# compressed ptr
1737   	movl    RAX, R14	# spill
173a   	incl    RAX	# int
173c   	testl   R13, R13	# compressed ptr
173f   	je     B10  P=0.000052 C=38671.000000
173f
1745   B144: #	B218 B145 &lt;- B143  Freq: 390.387
1745   	movl    R11, [R13 + #8 (8-bit)]	# compressed klass ptr
1749   	decode_heap_oop_not_null R13,R13
1749   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a42037e0:Constant:exact *	# compressed klass ptr
1750   	jne,u  B218  P=0.000001 C=-1.000000
1750
1756   B145: #	B187 B146 &lt;- B144  Freq: 390.387
1756   	# checkcastPP of R13
1756   	movl    R11, [R13 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
175d   	movl    R9, [R13 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1764   	cmpq    R13, [RSP + #168 (32-bit)]	# ptr
176c   	je,u  B187  P=0.000789 C=11408.000000
176c
1772   B146: #	B17 B147 &lt;- B145  Freq: 390.079
1772   	cmpl    R11, R8
1775   	jne     B17  P=0.004825 C=11398.000000
1775
177b   B147: #	B17 B148 &lt;- B146  Freq: 388.197
177b   	cmpl    R9, RDI
177e   	jne     B17  P=0.007405 C=11343.000000
177e
1784   B148: #	B149 &lt;- B147 B200 B23  Freq: 390.075
1784   	movl    [rsp + #124], R10	# spill
      	nop 	# 7 bytes pad for loops and calls

1790   B149: #	B286 B150 &lt;- B162 B188 B165 B148  top-of-loop Freq: 32038.7
1790   	movq    R10, [rsp + #112]	# spill
1795   	movl    R10, [R10 + #20 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.counts
1799   	movl    R8, [R10 + #12 (8-bit)]	# range
179d   	NullCheck R10
179d
179d   B150: #	B216 B151 &lt;- B149  Freq: 32038.6
179d   	movl    R9, [rsp + #124]	# spill
17a2   	cmpl    R9, R8	# unsigned
17a5   	jnb,u  B216  P=0.000001 C=-1.000000
17a5
17ab   B151: #	B152 &lt;- B150  Freq: 32038.6
17ab   	incq    [R10 + #16 + R9 &lt;&lt; #3]	# long
17b0
17b0   B152: #	B24 B153 &lt;- B151 B16  Freq: 32040.3
17b0   	incl    RDX	# int
17b2   	cmpl    RDX, [RSP + #100 (32-bit)]
17b6   	jge     B24	# loop end  P=0.010548 C=553360.000000
17b6
17bc   B153: #	B154 &lt;- B152  Freq: 31702.3
17bc   	movl    RAX, [rsp + #160]	# spill
17bc
17c3   B154: #	B282 B155 &lt;- B141 B153 	Loop: B154-B153 inner  Freq: 32040.6
17c3   	movq    R10, [rsp + #104]	# spill
17c8   	movl    R11, [R10 + #16 + RDX &lt;&lt; #2]	# compressed ptr
17cd   	movl    R9, [R11 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
17d1   	NullCheck R11
17d1
17d1   B155: #	B283 B156 &lt;- B154  Freq: 32040.5
17d1   	movq    R10, [rsp + #32]	# spill
17d6   	movl    R10, [R10 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.counter
17da   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
17de   	NullCheck R10
17de
17de   B156: #	B217 B157 &lt;- B155  Freq: 32040.5
17de   	decode_heap_oop_not_null R8,R10
17e1   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/util/OpenAddressHashCounter: 0x00007f46980f92c0:Constant:exact *	# compressed klass ptr
17e8   	jne,u  B217  P=0.000001 C=-1.000000
17e8
17ee   B157: #	B284 B158 &lt;- B156  Freq: 32040.5
17ee   	# checkcastPP of R8
17ee   	movq    [rsp + #112], R8	# spill
17f3   	movl    R10, [R8 + #16 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.keys
17f7   	movl    [rsp + #120], R10	# spill
17fc   	movl    RCX, [R8 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/util/OpenAddressHashCounter.length
1800   	decl    RCX	# int
1802   	movl    R8, [R9 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1809   	NullCheck R9
1809
1809   B158: #	B285 B159 &lt;- B157  Freq: 32040.4
1809   	movl    RDI, [R9 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1810   	movl    R11, R8	# spill
1813   	sall    R11, #5
1817   	decode_heap_oop_not_null R13,R9
181a   	subl    R11, R8	# int
181d   	addl    R11, RDI	# int
1820   	andl    R11, RCX	# int
1823   	movl    [rsp + #124], R11	# spill
1828   	movl    R10, R11	# spill
182b   	incl    R10	# int
182e   	andl    R10, RCX	# int
1831   	movl    RBX, R10	# spill
1834   	incl    RBX	# int
1836   	andl    RBX, RCX	# int
1838   	movl    RSI, RBX	# spill
183a   	incl    RSI	# int
183c   	andl    RSI, RCX	# int
183e   	movl    R14, RSI	# spill
1841   	incl    R14	# int
1844   	andl    R14, RCX	# int
1847   	movl    RBP, [rsp + #120]	# spill
184b   	movl    RBP, [RBP + #12 (8-bit)]	# range
184e   	NullCheck RBP
184e
184e   B159: #	B215 B160 &lt;- B158  Freq: 32040.4
184e   	cmpl    R11, RBP	# unsigned
1851   	jnb,u  B215  P=0.000001 C=-1.000000
1851
1857   B160: #	B11 B161 &lt;- B159  Freq: 32040.4
1857   	movq    [rsp + #168], R13	# spill
185f   	movdl   XMM0, R9	# spill
1864   	movl    [rsp + #160], RAX	# spill
186b   	movl    R9, [rsp + #120]	# spill
1870   	movl    R11, [R9 + #16 + R11 &lt;&lt; #2]	# compressed ptr
1875   	decode_heap_oop_not_null R13,R11
1878   	testl   R11, R11	# compressed ptr
187b   	je     B11  P=0.000052 C=38671.000000
187b
1881   B161: #	B221 B162 &lt;- B160  Freq: 32038.7
1881   	movl    R9, [R11 + #8 (8-bit)]	# compressed klass ptr
1885   	cmpl    R9, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a42037e0:Constant:exact *	# compressed klass ptr
188c   	jne,u  B221  P=0.000001 C=-1.000000
188c
1892   B162: #	B149 B163 &lt;- B161  Freq: 32038.7
1892   	# checkcastPP of R13
1892   	cmpq    R13, [RSP + #168 (32-bit)]	# ptr
189a   	je,u  B149  P=0.000789 C=11408.000000
189a
18a0   B163: #	B142 B164 &lt;- B162  Freq: 32013.4
18a0   	movl    R11, [R13 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
18a7   	cmpl    R11, R8
18aa   	jne     B142  P=0.004825 C=11398.000000
18aa
18b0   B164: #	B142 B165 &lt;- B163  Freq: 31858.9
18b0   	movl    R11, [R13 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
18b7   	cmpl    R11, RDI
18ba   	jne     B142  P=0.007405 C=11343.000000
18ba
18c0   B165: #	B149 &lt;- B164  Freq: 31623
18c0   	jmp     B149
18c0
18c5   B166: #	B307 B167 &lt;- B57  Freq: 2.73621
18c5   	movq    [rsp + #144], R9	# spill
18cd   	movl    [rsp + #120], R10	# spill
18d2   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46a41fd320:Constant:exact *	# ptr
      	nop 	# 3 bytes pad for loops and calls
18df   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #32 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #104 L[6]=rsp + #104 L[7]=rsp + #100 L[8]=rsp + #120 L[9]=_ STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [4]=NarrowOop [8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop [104]=Oop [112]=Oop [144]=Oop off=6372}
18e4
18e4   B167: #	B59 &lt;- B166  Freq: 2.73616
        # Block is sole successor of call
18e4   	movq    R8, RAX	# spill
18e7   	movq    R9, [rsp + #144]	# spill
18ef   	jmp     B59
18ef
18f4   B168: #	B308 B169 &lt;- B60  Freq: 2.73621
18f4   	movl    RBP, [rsp + #120]	# spill
18f8   	incl    RBP	# int
18fa   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46a41fd320:Constant:exact *	# ptr
      	nop 	# 3 bytes pad for loops and calls
1907   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #32 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #104 L[6]=rsp + #104 L[7]=rsp + #100 L[8]=RBP L[9]=_ STK[0]=rsp + #4
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[4]=NarrowOop [8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop [104]=Oop [112]=Oop off=6412}
190c
190c   B169: #	B62 &lt;- B168  Freq: 2.73616
        # Block is sole successor of call
190c   	movq    R8, RAX	# spill
190f   	jmp     B62
190f
1914   B170: #	B295 B171 &lt;- B25  Freq: 0.984324
1914   	movq    R11, [rsp + #32]	# spill
1919   	movl    R8, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
191d   	movl    R11, [R8 + #12 (8-bit)]	# int ! Field: org/openjdk/jcstress/infra/runners/Control.minStride
1921   	NullCheck R8
1921
1921   B171: #	B27 &lt;- B170  Freq: 0.984323
1921   	movl    R9, [R8 + #16 (8-bit)]	# int ! Field: org/openjdk/jcstress/infra/runners/Control.maxStride
1925   	cmpl    R10, R9
1928   	cmovll R9, R10	# signed, int
192c   	cmpl    R11, R9
192f   	cmovll R11, R9	# signed, int
1933   	movl    [rsp + #128], R11	# spill
193b   	jmp     B27
193b
1940   B172: #	B306 B173 &lt;- B48  Freq: 0.870256
1940   	movq    RSI, [rsp + #104]	# spill
1945   	movl    RDX, [rsp + #128]	# spill
      	nop 	# 3 bytes pad for loops and calls
194f   	call,static  java.util.Arrays::copyOf
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:154  L[0]=rsp + #32 L[1]=_ L[2]=_ L[3]=rsp + #100 L[4]=rsp + #128 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop off=6484}
1954
1954   B173: #	B296 B174 &lt;- B172  Freq: 0.870239
        # Block is sole successor of call
1954   	movl    R10, [RAX + #8 (8-bit)]	# compressed klass ptr
1958   	NullCheck RAX
1958
1958   B174: #	B276 B175 &lt;- B173  Freq: 0.870238
1958   	cmpl    R10, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f46a41fd1d0:Constant:exact *	# compressed klass ptr
195f   	jne,u  B276  P=0.000000 C=-1.000000
195f
1965   B175: #	B224 B176 &lt;- B174  Freq: 0.870238
1965   	# checkcastPP of RAX
1965   	movq    [rsp + #104], RAX	# spill
196a   	movl    R10, [rsp + #128]	# spill
1972   	decl    R10	# int
1975   	movl    R8, [RAX + #12 (8-bit)]	# range
1979   	movl    [rsp + #0], R8	# spill
197d   	movl    R8, [rsp + #100]	# spill
1982   	cmpl    R8, [RSP + #128 (32-bit)]
198a   	jge     B224  P=0.002028 C=7395.000000
198a
1990   B176: #	B265 B177 &lt;- B175  Freq: 0.868473
1990   	movl    R11, R8	# spill
1993   	cmpl    R11, [RSP + #0 (32-bit)]	# unsigned
1997   	jnb,u  B265  P=0.000001 C=-1.000000
1997
199d   B177: #	B265 B178 &lt;- B176  Freq: 0.868472
199d   	cmpl    R10, [RSP + #0 (32-bit)]	# unsigned
19a1   	jnb,u  B265  P=0.000001 C=-1.000000
      	nop 	# 9 bytes pad for loops and calls

19b0   B178: #	B190 B179 &lt;- B177 B182 	Loop: B178-B182 inner  Freq: 428.154
19b0   	# TLS is in R15
19b0   	movq    R11, [R15 + #112 (8-bit)]	# ptr
19b4   	movq    R10, R11	# spill
19b7   	addq    R10, #24	# ptr
19bb   	# TLS is in R15
19bb   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
19c2   	jnb,u  B190  P=0.000100 C=-1.000000
19c2
19c8   B179: #	B180 &lt;- B178  Freq: 428.111
19c8   	# TLS is in R15
19c8   	movq    [R15 + #112 (8-bit)], R10	# ptr
19cc   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
19d4   	movq    R10, [rsp + #80]	# spill
19d9   	movq    R10, [R10 + #176 (32-bit)]	# ptr
19e0   	movq    [R11], R10	# ptr
19e3   	movl    [R11 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f46a41fd250:Constant:exact *	# compressed klass ptr
19eb   	movl    [R11 + #12 (8-bit)], R12	# int (R12_heapbase==0)
19ef   	movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
19ef
19f3   B180: #	B192 B181 &lt;- B191 B179  Freq: 428.154
19f3   	movq    R10, [rsp + #104]	# spill
19f8   	movl    R9, [rsp + #100]	# spill
19fd   	leaq    RBP, [R10 + #16 + R9 &lt;&lt; #2]	# ptr posidxscaleoff
1a02   	
1a02   	MEMBAR-storestore (empty encoding)
1a02   	# checkcastPP of R11
1a02   	movq    [rsp + #112], R11	# spill
1a07   	# TLS is in R15
1a07   	movq    R8, [R15 + #112 (8-bit)]	# ptr
1a0b   	movq    R10, R8	# spill
1a0e   	addq    R10, #408	# ptr
1a15   	# TLS is in R15
1a15   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
1a1c   	jnb,u  B192  P=0.000100 C=-1.000000
1a1c
1a22   B181: #	B182 &lt;- B180  Freq: 428.111
1a22   	# TLS is in R15
1a22   	movq    [R15 + #112 (8-bit)], R10	# ptr
1a26   	PREFETCHNTA [R10 + #192 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1a2e   	movq    RDI, R8	# spill
1a31   	addq    RDI, #16	# ptr
1a35   	movq    R10, [rsp + #64]	# spill
1a3a   	movq    R10, [R10 + #176 (32-bit)]	# ptr
1a41   	movq    [R8], R10	# ptr
1a44   	movl    [R8 + #8 (8-bit)], narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a42037e0:Constant:exact *	# compressed klass ptr
1a4c   	movl    [R8 + #12 (8-bit)], R12	# int (R12_heapbase==0)
1a50   	movl    RCX, #49	# long (unsigned 32-bit)
1a55   	xorq    rax, rax	# ClearArray:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
1a5f
1a5f   B182: #	B178 B183 &lt;- B193 B181  Freq: 428.154
1a5f   	movq    R10, [rsp + #112]	# spill
1a64   	encode_heap_oop_not_null R10,R10
1b6c   	
1b6c   	MEMBAR-storestore (empty encoding)
1b6c   	# checkcastPP of R8
1b6c   	movq    R11, [rsp + #112]	# spill
1b71   	movq    R11, R11	# ptr -&gt; long
1b71   	shrq    R11, #9
1b75   	encode_heap_oop_not_null R8,R8
1c7d   	movq    R9, 0x00007f46dbf28000	# ptr
1c87   	movb    [R9 + R11], R12	# short/char (R12_heapbase==0)
1c8b   	movq    R11, [rsp + #112]	# spill
1c90   	movl    [R11 + #16 (8-bit)], R8	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.r
1c94   	movl    [RBP], R10	# compressed ptr
1c98   	movq    R10, RBP	# ptr -&gt; long
1c9b   	shrq    R10, #9
1c9f   	movq    R11, 0x00007f46dbf28000	# ptr
1ca9   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
1cad   	movl    R10, [rsp + #100]	# spill
1cb2   	incl    R10	# int
1cb5   	movl    [rsp + #100], R10	# spill
1cba   	cmpl    R10, [RSP + #128 (32-bit)]
1cc2   	jl     B178	# loop end  P=0.997972 C=7380.000000
1cc2
1cc8   B183: #	B72 B184 &lt;- B182  Freq: 0.86847
1cc8   	movl    R10, [rsp + #0]	# spill
1ccc   	testl   R10, R10
1ccf   	jle     B72  P=0.012320 C=477503.000000
1ccf
1cd5   B184: #	B250 B185 &lt;- B183  Freq: 0.85777
1cd5   	testl  R10, R10	# unsigned
1cd8   	jbe,u  B250  P=0.000001 C=-1.000000
1cd8
1cde   B185: #	B51 &lt;- B184  Freq: 0.85777
1cde   	movl    [rsp + #100], R10	# spill
1ce3   	jmp     B51
1ce3
1ce8   B186: #	B187 &lt;- B197  Freq: 4.57271e-05
1ce8   	movl    R10, RSI	# spill
1ce8
1ceb   B187: #	B188 &lt;- B145 B186  Freq: 0.308033
1ceb   	movl    RBX, R10	# spill
1ceb
1cee   B188: #	B149 &lt;- B187 B20 B266  Freq: 0.311786
1cee   	movl    [rsp + #124], RBX	# spill
1cf2   	jmp     B149
1cf2
1cf7   B189: #	N4795 &lt;- B94 B5  Freq: 0.14372
1cf7   	xorl    RAX, RAX	# ptr
1cf9   	addq    rsp, 208	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

1d07   	ret
1d07
1d08   B190: #	B304 B191 &lt;- B178  Freq: 0.0428225
1d08   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair: 0x00007f46a41fd250:Constant:exact *	# ptr
1d12   	movq    RBP, [rsp + #32]	# spill
1d17   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #128 L[5]=rsp + #104 L[6]=rsp + #100 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop [104]=Oop off=7452}
1d1c
1d1c   B191: #	B180 &lt;- B190  Freq: 0.0428217
        # Block is sole successor of call
1d1c   	movq    R11, RAX	# spill
1d1f   	jmp     B180
1d1f
1d24   B192: #	B305 B193 &lt;- B180  Freq: 0.0428225
1d24   	movq    RSI, precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a42037e0:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
1d2f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:183  L[0]=rsp + #32 L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #128 L[5]=rsp + #104 L[6]=rsp + #100 L[7]=rsp + #112 L[8]=_ L[9]=_ STK[0]=rsp + #112
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Derived_oop_[104] [8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop [104]=Oop [112]=Oop off=7476}
1d34
1d34   B193: #	B182 &lt;- B192  Freq: 0.0428217
        # Block is sole successor of call
1d34   	movq    R8, RAX	# spill
1d37   	jmp     B182
1d37
1d3c   B194: #	B267 B195 &lt;- B21 B22  Freq: 0.0579642
1d3c   	cmpl    RSI, RBP	# unsigned
1d3e   	jnb,u  B267  P=0.000001 C=-1.000000
1d3e
1d44   B195: #	B260 B196 &lt;- B194  Freq: 0.0579642
1d44   	movl    R10, [rsp + #120]	# spill
1d49   	movl    R10, [R10 + #16 + RSI &lt;&lt; #2]	# compressed ptr
1d4e   	decode_heap_oop_not_null R13,R10
1d51   	andl    RAX, RCX	# int
1d53   	testl   R10, R10	# compressed ptr
1d56   	je     B260  P=0.000052 C=38671.000000
1d56
1d5c   B196: #	B268 B197 &lt;- B195  Freq: 0.0579612
1d5c   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
1d60   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a42037e0:Constant:exact *	# compressed klass ptr
1d67   	jne,u  B268  P=0.000001 C=-1.000000
1d67
1d6d   B197: #	B186 B198 &lt;- B196  Freq: 0.0579611
1d6d   	# checkcastPP of R13
1d6d   	movl    R10, [R13 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
1d74   	cmpq    R13, [RSP + #168 (32-bit)]	# ptr
1d7c   	je,u  B186  P=0.000789 C=11408.000000
1d7c
1d82   B198: #	B227 B199 &lt;- B197  Freq: 0.0579154
1d82   	cmpl    R10, R8
1d85   	jne     B227  P=0.004825 C=11398.000000
1d85
1d8b   B199: #	B227 B200 &lt;- B198  Freq: 0.0576359
1d8b   	movl    R11, [R13 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
1d92   	cmpl    R11, RDI
1d95   	jne     B227  P=0.007405 C=11343.000000
1d95
1d9b   B200: #	B148 &lt;- B199  Freq: 0.0572091
1d9b   	movl    R10, RSI	# spill
1d9e   	jmp     B148
1d9e
1da3   B201: #	B303 B202 &lt;- B72  Freq: 0.0341316
1da3   	movq    RSI, precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f46a41fd100:Constant:exact *	# ptr
1dad   	movq    RBP, [rsp + #32]	# spill
      	nop 	# 1 bytes pad for loops and calls
1db3   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:254  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #104 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #100
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop [100]=NarrowOop [104]=Oop off=7608}
1db8
1db8   B202: #	B74 &lt;- B201  Freq: 0.0341309
        # Block is sole successor of call
1db8   	movq    R9, RAX	# spill
1dbb   	jmp     B74
1dbb
1dc0   B203: #	B299 B204 &lt;- B75  Freq: 0.0341315
1dc0   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a41fd3f0:Constant:exact *	# ptr
1dca   	movq    RBP, [rsp + #32]	# spill
1dcf   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:20  L[0]=rsp + #104 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #104
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #100 STK[1]=rsp + #104
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop [100]=NarrowOop [104]=Oop off=7636}
1dd4
1dd4   B204: #	B77 &lt;- B203  Freq: 0.0341309
        # Block is sole successor of call
1dd4   	jmp     B77
1dd4
1dd9   B205: #	B300 B206 &lt;- B77  Freq: 0.0341315
1dd9   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a41fd3f0:Constant:exact *	# ptr
1de3   	movq    RBP, [rsp + #32]	# spill
      	nop 	# 3 bytes pad for loops and calls
1deb   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:32  L[0]=rsp + #104 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #104
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #100 STK[1]=rsp + #104
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop [100]=NarrowOop [104]=Oop off=7664}
1df0
1df0   B206: #	B79 &lt;- B205  Freq: 0.0341309
        # Block is sole successor of call
1df0   	jmp     B79
1df0
1df5   B207: #	B301 B208 &lt;- B79  Freq: 0.0341315
1df5   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a41fd3f0:Constant:exact *	# ptr
1dff   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:44  L[0]=rsp + #104 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #104
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #100 STK[1]=rsp + #104
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop [100]=NarrowOop [104]=Oop off=7684}
1e04
1e04   B208: #	B81 &lt;- B207  Freq: 0.0341309
        # Block is sole successor of call
1e04   	jmp     B81
1e04
1e09   B209: #	B302 B210 &lt;- B81  Freq: 0.0341315
1e09   	movl    R10, [rsp + #44]	# spill
1e0e   	movl    [rsp + #0], R10	# spill
1e12   	movq    RSI, precise klass java/util/concurrent/atomic/AtomicInteger: 0x00007f46a41fd3f0:Constant:exact *	# ptr
      	nop 	# 3 bytes pad for loops and calls
1e1f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.infra.runners.StateHolder::&lt;init&gt; @ bci:56  L[0]=rsp + #104 L[1]=_ L[2]=_ L[3]=#2 STK[0]=rsp + #104
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:268  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #100 STK[1]=rsp + #104
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop [100]=NarrowOop [104]=Oop off=7716}
1e24
1e24   B210: #	B83 &lt;- B209  Freq: 0.0341309
        # Block is sole successor of call
1e24   	jmp     B83
1e24
1e29   B211: #	B298 B212 &lt;- B52  Freq: 0.0337166
1e29   	movq    [rsp + #128], R9	# spill
1e31   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46a41fd320:Constant:exact *	# ptr
1e3b   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #32 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #104 L[6]=rsp + #104 L[7]=rsp + #100 L[8]=#0 L[9]=_ STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop [104]=Oop [128]=Oop off=7744}
1e40
1e40   B212: #	B54 &lt;- B211  Freq: 0.0337159
        # Block is sole successor of call
1e40   	movq    R8, RAX	# spill
1e43   	movq    R9, [rsp + #128]	# spill
1e4b   	jmp     B54
1e4b
1e50   B213: #	B297 B214 &lt;- B67  Freq: 0.033711
1e50   	movl    [rsp + #0], R8	# spill
1e54   	movq    RSI, precise klass org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest: 0x00007f46a41fd320:Constant:exact *	# ptr
      	nop 	# 1 bytes pad for loops and calls
1e5f   	call,static  wrapper for: _new_instance_Java
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:234  L[0]=rsp + #32 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #104 L[6]=rsp + #104 L[7]=rsp + #100 L[8]=rsp + #0 L[9]=_ STK[0]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #56 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [8]=Oop [16]=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop [88]=Oop [104]=Oop off=7780}
1e64
1e64   B214: #	B69 &lt;- B213  Freq: 0.0337103
        # Block is sole successor of call
1e64   	movq    R11, RAX	# spill
1e67   	jmp     B69
1e67
1e6c   B215: #	N4795 &lt;- B159  Freq: 0.0324659
1e6c   	movq    RBP, [rsp + #32]	# spill
1e71   	movl    R10, [rsp + #44]	# spill
1e76   	movl    [rsp + #0], R10	# spill
1e7a   	movl    R11, [rsp + #40]	# spill
1e7f   	movl    [rsp + #4], R11	# spill
1e84   	movl    R10, [rsp + #16]	# spill
1e89   	movl    [rsp + #8], R10	# spill
1e8e   	movl    R11, [rsp + #20]	# spill
1e93   	movl    [rsp + #12], R11	# spill
1e98   	movq    R10, [rsp + #88]	# spill
1e9d   	movq    [rsp + #16], R10	# spill
1ea2   	movq    R10, [rsp + #104]	# spill
1ea7   	movq    [rsp + #40], R10	# spill
1eac   	movl    R10, [rsp + #100]	# spill
1eb1   	movl    [rsp + #48], R10	# spill
1eb6   	movl    [rsp + #64], RDX	# spill
1eba   	movl    [rsp + #68], R9	# spill
1ebf   	movl    R10, [rsp + #124]	# spill
1ec4   	movl    [rsp + #88], R10	# spill
1ec9   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
1ecf   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=rsp + #112 L[1]=rsp + #68 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #88 L[6]=#0 L[7]=_ STK[0]=rsp + #120 STK[1]=rsp + #124
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=rsp + #40 L[5]=rsp + #48 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [40]=Oop [68]=NarrowOop [112]=Oop [120]=NarrowOop off=7892}
1ed4   	int3	# ShouldNotReachHere
1ed4
1ed9   B216: #	N4795 &lt;- B150  Freq: 0.0324641
1ed9   	movq    RBP, [rsp + #32]	# spill
1ede   	movl    R11, [rsp + #44]	# spill
1ee3   	movl    [rsp + #0], R11	# spill
1ee7   	movl    R8, [rsp + #40]	# spill
1eec   	movl    [rsp + #4], R8	# spill
1ef1   	movl    R11, [rsp + #16]	# spill
1ef6   	movl    [rsp + #8], R11	# spill
1efb   	movl    R8, [rsp + #20]	# spill
1f00   	movl    [rsp + #12], R8	# spill
1f05   	movq    R11, [rsp + #88]	# spill
1f0a   	movq    [rsp + #16], R11	# spill
1f0f   	movq    R11, [rsp + #104]	# spill
1f14   	movl    R8, [rsp + #100]	# spill
1f19   	movq    [rsp + #56], R11	# spill
1f1e   	movl    R11, R8	# spill
1f21   	movl    [rsp + #52], R11	# spill
1f26   	movl    [rsp + #64], RDX	# spill
1f2a   	movl    [rsp + #76], R10	# spill
1f2f   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
1f37   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #76 STK[1]=rsp + #124 STK[2]=rsp + #76 STK[3]=rsp + #124
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #56 L[3]=rsp + #52 L[4]=rsp + #104 L[5]=rsp + #100 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [56]=Oop [76]=NarrowOop [104]=Oop off=7996}
1f3c   	int3	# ShouldNotReachHere
1f3c
1f41   B217: #	N4795 &lt;- B156  Freq: 0.0320405
1f41   	movl    RSI, #-34	# int
1f46   	movq    RBP, [rsp + #32]	# spill
1f4b   	movl    R11, [rsp + #44]	# spill
1f50   	movl    [rsp + #0], R11	# spill
1f54   	movl    R8, [rsp + #40]	# spill
1f59   	movl    [rsp + #4], R8	# spill
1f5e   	movl    R11, [rsp + #16]	# spill
1f63   	movl    [rsp + #8], R11	# spill
1f68   	movl    R8, [rsp + #20]	# spill
1f6d   	movl    [rsp + #12], R8	# spill
1f72   	movq    R11, [rsp + #88]	# spill
1f77   	movq    [rsp + #16], R11	# spill
1f7c   	movq    R11, [rsp + #104]	# spill
1f81   	movq    [rsp + #40], R11	# spill
1f86   	movl    R11, [rsp + #100]	# spill
1f8b   	movl    [rsp + #48], R11	# spill
1f90   	movl    [rsp + #64], RDX	# spill
1f94   	movl    [rsp + #68], R10	# spill
1f99   	movl    [rsp + #72], R9	# spill
      	nop 	# 1 bytes pad for loops and calls
1f9f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=rsp + #40 L[5]=rsp + #48 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #68 STK[1]=rsp + #72
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [40]=Oop [68]=NarrowOop [72]=NarrowOop off=8100}
1fa4   	int3	# ShouldNotReachHere
1fa4
1fa9   B218: #	B219 &lt;- B144  Freq: 0.000390387
1fa9   	movl    RSI, R10	# spill
1fac   	movl    R10, #1	# int
1fac
1fb2   B219: #	B220 &lt;- B218 B268  Freq: 0.000390445
1fb2   	movl    R14, RSI	# spill
1fb2
1fb5   B220: #	B221 &lt;- B219 B259 B271  Freq: 0.000395203
1fb5   	movl    [rsp + #156], R10	# spill
1fbd   	movl    [rsp + #124], R14	# spill
1fbd
1fc2   B221: #	N4795 &lt;- B161 B220  Freq: 0.0324339
1fc2   	movq    RBP, [rsp + #32]	# spill
1fc7   	movl    R10, [rsp + #44]	# spill
1fcc   	movl    [rsp + #0], R10	# spill
1fd0   	movl    R11, [rsp + #40]	# spill
1fd5   	movl    [rsp + #4], R11	# spill
1fda   	movl    R10, [rsp + #16]	# spill
1fdf   	movl    [rsp + #8], R10	# spill
1fe4   	movl    R11, [rsp + #20]	# spill
1fe9   	movl    [rsp + #12], R11	# spill
1fee   	movq    R10, [rsp + #88]	# spill
1ff3   	movq    [rsp + #16], R10	# spill
1ff8   	movq    R10, [rsp + #104]	# spill
1ffd   	movq    [rsp + #40], R10	# spill
2002   	movl    R10, [rsp + #100]	# spill
2007   	movl    [rsp + #48], R10	# spill
200c   	movl    [rsp + #64], RDX	# spill
2010   	movq    [rsp + #88], R13	# spill
2015   	movss   [rsp + #96], XMM0	# spill
201b   	movl    RSI, #-34	# int
      	nop 	# 3 bytes pad for loops and calls
2023   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:33  L[0]=rsp + #112 L[1]=rsp + #96 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #124 L[6]=rsp + #156 L[7]=_ STK[0]=rsp + #88 STK[1]=rsp + #96
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=rsp + #40 L[5]=rsp + #48 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [40]=Oop [88]=Oop [96]=NarrowOop [112]=Oop off=8232}
2028   	int3	# ShouldNotReachHere
2028
202d   B222: #	B223 &lt;- B54 B59 B62  Freq: 0.0557833
202d   	movq    RBP, R8	# spill
202d
2030   B223: #	N4795 &lt;- B253 B222  Freq: 0.0561248
2030   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
2037   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:241  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop off=8252}
203c   	int3	# ShouldNotReachHere
203c
2041   B224: #	B72 B225 &lt;- B175  Freq: 0.0017652
2041   	movl    R11, [rsp + #0]	# spill
2045   	testl   R11, R11
2048   	jle     B72  P=0.012320 C=477503.000000
2048
204e   B225: #	B269 B226 &lt;- B224  Freq: 0.00174345
204e   	testl  R11, R11	# unsigned
2051   	jbe,u  B269  P=0.000001 C=-1.000000
2051
2057   B226: #	B51 &lt;- B225  Freq: 0.00174345
2057   	movl    [rsp + #100], R11	# spill
205c   	jmp     B51
205c
2061   B227: #	B270 B228 &lt;- B198 B199  Freq: 0.000706286
2061   	cmpl    R14, RBP	# unsigned
2064   	jnb,u  B270  P=0.000001 C=-1.000000
2064
206a   B228: #	B9 B229 &lt;- B227  Freq: 0.000706285
206a   	movl    R10, [rsp + #120]	# spill
206f   	movl    R10, [R10 + #16 + R14 &lt;&lt; #2]	# compressed ptr
2074   	decode_heap_oop_not_null R13,R10
2077   	testl   R10, R10	# compressed ptr
207a   	je     B9  P=0.000052 C=38671.000000
207a
2080   B229: #	B271 B230 &lt;- B228  Freq: 0.000706249
2080   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
2084   	cmpl    R11, narrowklass: precise klass org/openjdk/jcstress/infra/results/IntResult2: 0x00007f46a42037e0:Constant:exact *	# compressed klass ptr
208b   	jne,u  B271  P=0.000001 C=-1.000000
208b
2091   B230: #	B266 B231 &lt;- B229  Freq: 0.000706248
2091   	# checkcastPP of R13
2091   	movl    R10, [R13 + #140 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r1
2098   	cmpq    R13, [RSP + #168 (32-bit)]	# ptr
20a0   	je,u  B266  P=0.000789 C=11408.000000
20a0
20a6   B231: #	B255 B232 &lt;- B230  Freq: 0.000705691
20a6   	cmpl    R10, R8
20a9   	jne     B255  P=0.004825 C=11398.000000
20a9
20af   B232: #	B255 B233 &lt;- B231  Freq: 0.000702286
20af   	movl    R11, [R13 + #272 (32-bit)]	# int ! Field: org/openjdk/jcstress/infra/results/IntResult2.r2
20b6   	cmpl    R11, RDI
20b9   	jne     B255  P=0.007405 C=11343.000000
20b9
20bf   B233: #	B23 &lt;- B232  Freq: 0.000697085
20bf   	movl    RBX, R14	# spill
20c2   	jmp     B23
20c2
20c7   B234: #	N4795 &lt;- B98  Freq: 0.000421033
20c7   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
20cf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=8404}
20d4   	int3	# ShouldNotReachHere
20d4
20d9   B235: #	N4795 &lt;- B104  Freq: 0.000421032
20d9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
20df   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=8420}
20e4   	int3	# ShouldNotReachHere
20e4
20e9   B236: #	N4795 &lt;- B128  Freq: 0.000420778
20e9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
20ef   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=8436}
20f4   	int3	# ShouldNotReachHere
20f4
20f9   B237: #	N4795 &lt;- B86  Freq: 0.000420163
20f9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
20ff   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=8452}
2104   	int3	# ShouldNotReachHere
2104
2109   B238: #	N4795 &lt;- B109 B108  Freq: 0.000828096
2109   	movq    RBP, [rsp + #32]	# spill
210e   	movl    R11, [rsp + #16]	# spill
2113   	movl    [rsp + #8], R11	# spill
2118   	movl    R8, [rsp + #20]	# spill
211d   	movl    [rsp + #12], R8	# spill
2122   	movq    [rsp + #24], RBX	# spill
2127   	movl    [rsp + #32], R10	# spill
212c   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
2133   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:82  L[0]=RBP L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #88 L[7]=_ L[8]=rsp + #24 L[9]=rsp + #32 L[10]=#0 L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [24]=Oop [88]=Oop off=8504}
2138   	int3	# ShouldNotReachHere
2138
213d   B239: #	N4795 &lt;- B126 B112 B117 B120  Freq: 0.0833056
213d   	movl    RBP, R8	# spill
2140   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
2147   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.FencedAcquireReleaseTest::actor2 @ bci:12  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:99  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=8524}
214c   	int3	# ShouldNotReachHere
214c
2151   B240: #	B122 &lt;- B113  Freq: 0.000416777
2151   	movl    RCX, #1	# int
2156   	jmp     B122
2156
215b   B241: #	N4795 &lt;- B102  Freq: 0.000415185
215b   	movq    RBP, [rsp + #32]	# spill
2160   	movl    R10, [rsp + #16]	# spill
2165   	movl    [rsp + #8], R10	# spill
216a   	movl    R11, [rsp + #20]	# spill
216f   	movl    [rsp + #12], R11	# spill
2174   	movq    [rsp + #24], RBX	# spill
2179   	movq    [rsp + #32], R9	# spill
217e   	movl    RSI, #-122	# int
2183   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:22  L[0]=rsp + #88 L[1]=rsp + #40
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:60  L[0]=RBP L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #32 L[7]=rsp + #24 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [24]=Oop [32]=Oop [88]=Oop off=8584}
2188   	int3	# ShouldNotReachHere
2188
218d   B242: #	N4795 &lt;- B133  Freq: 0.000415057
218d   	movq    RBP, [rsp + #32]	# spill
2192   	movl    R11, [rsp + #40]	# spill
2197   	movl    [rsp + #4], R11	# spill
219c   	movl    R10, [rsp + #16]	# spill
21a1   	movl    [rsp + #8], R10	# spill
21a6   	movl    R11, [rsp + #20]	# spill
21ab   	movl    [rsp + #12], R11	# spill
21b0   	movq    R10, [rsp + #88]	# spill
21b5   	movq    [rsp + #24], R10	# spill
21ba   	movl    RSI, #-122	# int
21bf   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:35  L[0]=rsp + #88 L[1]=rsp + #4
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:111  L[0]=RBP L[1]=rsp + #44 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [24]=Oop [88]=Oop off=8644}
21c4   	int3	# ShouldNotReachHere
21c4
21c9   B243: #	N4795 &lt;- B90  Freq: 0.000414626
21c9   	movq    RBP, [rsp + #32]	# spill
21ce   	movl    [rsp + #4], R11	# spill
21d3   	movl    R10, [rsp + #16]	# spill
21d8   	movl    [rsp + #8], R10	# spill
21dd   	movl    R11, [rsp + #20]	# spill
21e2   	movl    [rsp + #12], R11	# spill
21e7   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
21ef   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:22  L[0]=rsp + #88 L[1]=rsp + #4
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:157  L[0]=RBP L[1]=rsp + #96 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [88]=Oop off=8692}
21f4   	int3	# ShouldNotReachHere
21f4
21f9   B244: #	B245 &lt;- B142  Freq: 0.000395592
21f9   	movl    RAX, R10	# spill
21fc   	xorl    R9, R9	# int
21ff
21ff   B245: #	N4795 &lt;- B244 B258 B267 B272  Freq: 0.000400472
21ff   	movq    RBP, [rsp + #32]	# spill
2204   	movl    R11, [rsp + #44]	# spill
2209   	movl    [rsp + #0], R11	# spill
220d   	movl    R10, [rsp + #40]	# spill
2212   	movl    [rsp + #4], R10	# spill
2217   	movl    R11, [rsp + #16]	# spill
221c   	movl    [rsp + #8], R11	# spill
2221   	movl    R10, [rsp + #20]	# spill
2226   	movl    [rsp + #12], R10	# spill
222b   	movq    R10, [rsp + #88]	# spill
2230   	movq    [rsp + #16], R10	# spill
2235   	movq    R10, [rsp + #104]	# spill
223a   	movl    R11, [rsp + #100]	# spill
223f   	movq    [rsp + #56], R10	# spill
2244   	movl    [rsp + #52], R11	# spill
2249   	movl    [rsp + #64], RDX	# spill
224d   	movss   [rsp + #68], XMM0	# spill
2253   	movl    [rsp + #88], RAX	# spill
2257   	movl    RSI, #-28	# int
225c   	movl    [rsp + #92], R9	# spill
      	nop 	# 2 bytes pad for loops and calls
2263   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:70  L[0]=rsp + #112 L[1]=rsp + #68 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #88 L[6]=rsp + #92 L[7]=_ STK[0]=rsp + #120 STK[1]=rsp + #88
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #56 L[3]=rsp + #52 L[4]=rsp + #104 L[5]=rsp + #100 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [56]=Oop [68]=NarrowOop [104]=Oop [112]=Oop [120]=NarrowOop off=8808}
2268   	int3	# ShouldNotReachHere
2268
226d   B246: #	N4795 &lt;- B83  Freq: 0.00034579
226d   	movl    RSI, #-10	# int
2272   	movq    RBP, R10	# spill
      	nop 	# 2 bytes pad for loops and calls
2277   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:271  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop off=8828}
227c   	int3	# ShouldNotReachHere
227c
2281   B247: #	N4795 &lt;- B140 B139  Freq: 0.000680991
2281   	movq    RBP, [rsp + #32]	# spill
2286   	movl    R10, [rsp + #44]	# spill
228b   	movl    [rsp + #0], R10	# spill
228f   	movl    R11, [rsp + #40]	# spill
2294   	movl    [rsp + #4], R11	# spill
2299   	movl    R10, [rsp + #16]	# spill
229e   	movl    [rsp + #8], R10	# spill
22a3   	movl    R11, [rsp + #20]	# spill
22a8   	movl    [rsp + #12], R11	# spill
22ad   	movq    R10, [rsp + #88]	# spill
22b2   	movq    [rsp + #16], R10	# spill
22b7   	movl    R10, [rsp + #100]	# spill
22bc   	movl    [rsp + #48], R10	# spill
22c1   	movq    [rsp + #56], R8	# spill
22c6   	movl    RSI, #-122	# int
22cb   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:29  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #56 L[3]=rsp + #48 L[4]=rsp + #104 L[5]=rsp + #48 L[6]=#0 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [56]=Oop [104]=Oop off=8912}
22d0   	int3	# ShouldNotReachHere
22d0
22d5   B248: #	N4795 &lt;- B29 B28  Freq: 0.00067997
22d5   	movq    RBP, [rsp + #32]	# spill
22da   	movl    R11, [rsp + #44]	# spill
22df   	movl    [rsp + #0], R11	# spill
22e3   	movl    R10, [rsp + #40]	# spill
22e8   	movl    [rsp + #4], R10	# spill
22ed   	movl    R11, [rsp + #16]	# spill
22f2   	movl    [rsp + #8], R11	# spill
22f7   	movl    R10, [rsp + #20]	# spill
22fc   	movl    [rsp + #12], R10	# spill
2301   	movq    R10, [rsp + #104]	# spill
2306   	movq    [rsp + #32], R10	# spill
230b   	movl    R11, [rsp + #100]	# spill
2310   	movl    [rsp + #56], R11	# spill
2315   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
231b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:110  L[0]=RBP L[1]=_ L[2]=rsp + #32 L[3]=rsp + #56 L[4]=rsp + #128 L[5]=rsp + #32 L[6]=rsp + #100 L[7]=#0 L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [32]=Oop [88]=Oop off=8992}
2320   	int3	# ShouldNotReachHere
2320
2325   B249: #	B43 &lt;- B32  Freq: 0.000342226
2325   	movl    RBX, #1	# int
232a   	jmp     B43
232a
232f   B250: #	B251 &lt;- B184  Freq: 8.5777e-07
232f   	movl    [rsp + #100], R10	# spill
232f
2334   B251: #	N4795 &lt;- B51 B250 B269 B50  Freq: 0.000678698
2334   	movq    RBP, [rsp + #32]	# spill
2339   	movl    R10, [rsp + #44]	# spill
233e   	movl    [rsp + #0], R10	# spill
2342   	movl    R11, [rsp + #40]	# spill
2347   	movl    [rsp + #4], R11	# spill
234c   	movl    R10, [rsp + #16]	# spill
2351   	movl    [rsp + #8], R10	# spill
2356   	movl    R11, [rsp + #20]	# spill
235b   	movl    [rsp + #12], R11	# spill
2360   	movl    RSI, #-122	# int
      	nop 	# 2 bytes pad for loops and calls
2367   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:225  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #104 L[6]=rsp + #104 L[7]=rsp + #100 L[8]=#0 L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [88]=Oop [104]=Oop off=9068}
236c   	int3	# ShouldNotReachHere
236c
2371   B252: #	B65 &lt;- B55  Freq: 0.000341586
2371   	movl    R8, #1	# int
2377   	jmp     B65
2377
237c   B253: #	B223 &lt;- B69  Freq: 0.00034153
237c   	movq    RBP, R11	# spill
237f   	jmp     B223
237f
2384   B254: #	N4795 &lt;- B85  Freq: 0.000197724
2384   	movq    RBP, [rsp + #32]	# spill
2389   	movl    [rsp + #0], R10	# spill
238d   	movl    R10, [rsp + #16]	# spill
2392   	movl    [rsp + #8], R10	# spill
2397   	movl    R11, [rsp + #20]	# spill
239c   	movl    [rsp + #12], R11	# spill
23a1   	movl    [rsp + #28], R9	# spill
23a6   	movl    RSI, #-155	# int
23ab   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:141  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #0 STK[1]=rsp + #28
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [88]=Oop off=9136}
23b0   	int3	# ShouldNotReachHere
23b0
23b5   B255: #	B272 B256 &lt;- B231 B232  Freq: 8.606e-06
23b5   	cmpl    RAX, RBP	# unsigned
23b7   	jnb,u  B272  P=0.000001 C=-1.000000
23b7
23bd   B256: #	N4795 &lt;- B255  Freq: 8.60599e-06
23bd   	movl    R11, [rsp + #120]	# spill
23c2   	movl    RBP, [R11 + #16 + RAX &lt;&lt; #2]	# compressed ptr
23c7   	movl    R11, [rsp + #44]	# spill
23cc   	movl    [rsp + #8], R11	# spill
23d1   	movl    R10, [rsp + #40]	# spill
23d6   	movl    [rsp + #12], R10	# spill
23db   	movq    R10, [rsp + #88]	# spill
23e0   	movq    [rsp + #40], R10	# spill
23e5   	movq    R10, [rsp + #104]	# spill
23ea   	movl    R11, [rsp + #100]	# spill
23ef   	movq    [rsp + #64], R10	# spill
23f4   	movl    [rsp + #60], R11	# spill
23f9   	movl    [rsp + #72], RDX	# spill
23fd   	movss   [rsp + #76], XMM0	# spill
2403   	movl    [rsp + #88], RAX	# spill
2407   	movl    RSI, #-155	# int
      	nop 	# 3 bytes pad for loops and calls
240f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:80  L[0]=rsp + #112 L[1]=rsp + #76 L[2]=#1 L[3]=_ L[4]=#3 L[5]=rsp + #88 L[6]=#5 L[7]=RBP STK[0]=#4 STK[1]=#3
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=rsp + #64 L[3]=rsp + #60 L[4]=rsp + #104 L[5]=rsp + #100 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #32 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #20 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=NarrowOop [20]=NarrowOop [32]=Oop [40]=Oop [64]=Oop [76]=NarrowOop [104]=Oop [112]=Oop off=9236}
2414   	int3	# ShouldNotReachHere
2414
2419   B257: #	B258 &lt;- B17  Freq: 4.82024e-06
2419   	movl    R14, RBX	# spill
241c   	movl    R9, #1	# int
241c
2422   B258: #	B245 &lt;- B257 B270  Freq: 4.82095e-06
2422   	movl    RAX, R14	# spill
2425   	jmp     B245
2425
242a   B259: #	B220 &lt;- B19  Freq: 4.75682e-06
242a   	movl    R14, RBX	# spill
242d   	movl    R10, #2	# int
2433   	jmp     B220
2433
2438   B260: #	B10 &lt;- B195  Freq: 2.99888e-06
2438   	movl    R10, RSI	# spill
243b   	jmp     B10
243b
2440   B261: #	N4795 &lt;- B12  Freq: 1.70036e-06
2440   	movq    RBP, [rsp + #32]	# spill
2445   	movl    R10, [rsp + #44]	# spill
244a   	movl    [rsp + #0], R10	# spill
244e   	movl    R11, [rsp + #40]	# spill
2453   	movl    [rsp + #4], R11	# spill
2458   	movl    R10, [rsp + #16]	# spill
245d   	movl    [rsp + #8], R10	# spill
2462   	movl    R11, [rsp + #20]	# spill
2467   	movl    [rsp + #12], R11	# spill
246c   	movq    R10, [rsp + #88]	# spill
2471   	movq    [rsp + #16], R10	# spill
2476   	movq    R10, [rsp + #104]	# spill
247b   	movq    [rsp + #40], R10	# spill
2480   	movl    R10, [rsp + #100]	# spill
2485   	movl    [rsp + #48], R10	# spill
248a   	movl    RSI, #-28	# int
248f   	movq    [rsp + #88], RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
2497   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=rsp + #112 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #124 L[6]=_ L[7]=_ STK[0]=rsp + #120 STK[1]=rsp + #124 STK[2]=rsp + #88
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=rsp + #40 L[5]=rsp + #48 L[6]=rsp + #128 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [40]=Oop [88]=Oop [112]=Oop [120]=NarrowOop off=9372}
249c   	int3	# ShouldNotReachHere
249c
24a1   B262: #	N4795 &lt;- B15  Freq: 1.70036e-06
24a1   	movl    R10, [rsp + #44]	# spill
24a6   	movl    [rsp + #8], R10	# spill
24ab   	movl    R11, [rsp + #40]	# spill
24b0   	movl    [rsp + #12], R11	# spill
24b5   	movq    R10, [rsp + #88]	# spill
24ba   	movq    [rsp + #40], R10	# spill
24bf   	movq    R10, [rsp + #104]	# spill
24c4   	movq    [rsp + #48], R10	# spill
24c9   	movl    R10, [rsp + #100]	# spill
24ce   	movl    [rsp + #56], R10	# spill
24d3   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
24db   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=RBP STK[1]=rsp + #124 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=rsp + #32 L[1]=rsp + #88 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #48 L[5]=rsp + #56 L[6]=rsp + #128 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=rsp + #32 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #20 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop [16]=NarrowOop [20]=NarrowOop [32]=Oop [40]=Oop [48]=Oop [88]=Oop off=9440}
24e0   	int3	# ShouldNotReachHere
24e0
24e5   B263: #	N4795 &lt;- B13  Freq: 1.67808e-06
24e5   	movq    RBP, [rsp + #32]	# spill
24ea   	movl    R10, [rsp + #44]	# spill
24ef   	movl    [rsp + #0], R10	# spill
24f3   	movl    R11, [rsp + #40]	# spill
24f8   	movl    [rsp + #4], R11	# spill
24fd   	movl    R10, [rsp + #16]	# spill
2502   	movl    [rsp + #8], R10	# spill
2507   	movl    R11, [rsp + #20]	# spill
250c   	movl    [rsp + #12], R11	# spill
2511   	movq    R10, [rsp + #88]	# spill
2516   	movq    [rsp + #16], R10	# spill
251b   	movq    R10, [rsp + #104]	# spill
2520   	movq    [rsp + #40], R10	# spill
2525   	movl    R10, [rsp + #100]	# spill
252a   	movl    [rsp + #48], R10	# spill
252f   	movl    RSI, #-42	# int
2534   	movq    [rsp + #88], RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
253b   	call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:106  L[0]=rsp + #112 L[1]=_ L[2]=#1 L[3]=_ L[4]=_ L[5]=rsp + #124 L[6]=_ L[7]=_ STK[0]=rsp + #120 STK[1]=rsp + #124 STK[2]=rsp + #88
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=rsp + #40 L[5]=rsp + #48 L[6]=rsp + #128 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [40]=Oop [88]=Oop [112]=Oop [120]=NarrowOop off=9536}
2540   	int3	# ShouldNotReachHere
2540
2545   B264: #	N4795 &lt;- B6  Freq: 1.01293e-06
2545   	movq    RBP, [rsp + #32]	# spill
254a   	movl    R10, [rsp + #16]	# spill
254f   	movl    [rsp + #4], R10	# spill
2554   	movl    [rsp + #8], RCX	# spill
2558   	movq    [rsp + #16], R9	# spill
      	nop 	# 2 bytes pad for loops and calls
255f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:47  L[0]=RBP L[1]=#0 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #4 L[5]=rsp + #8 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [4]=NarrowOop [8]=NarrowOop [16]=Oop off=9572}
2564   	int3	# ShouldNotReachHere
2564
2569   B265: #	N4795 &lt;- B177 B176  Freq: 1.76001e-06
2569   	movq    RBP, [rsp + #32]	# spill
256e   	movl    R10, [rsp + #44]	# spill
2573   	movl    [rsp + #0], R10	# spill
2577   	movl    R11, [rsp + #40]	# spill
257c   	movl    [rsp + #4], R11	# spill
2581   	movl    R10, [rsp + #16]	# spill
2586   	movl    [rsp + #8], R10	# spill
258b   	movl    R11, [rsp + #20]	# spill
2590   	movl    [rsp + #12], R11	# spill
2595   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
259b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:172  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #128 L[5]=rsp + #104 L[6]=rsp + #100 L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [88]=Oop [104]=Oop off=9632}
25a0   	int3	# ShouldNotReachHere
25a0
25a5   B266: #	B188 &lt;- B230  Freq: 5.57178e-07
25a5   	movl    RBX, R14	# spill
25a8   	jmp     B188
25a8
25ad   B267: #	B245 &lt;- B194  Freq: 5.87339e-08
25ad   	movl    RAX, RSI	# spill
25af   	movl    R9, #2	# int
25b5   	jmp     B245
25b5
25ba   B268: #	B219 &lt;- B196  Freq: 5.79612e-08
25ba   	movl    R10, #3	# int
25c0   	jmp     B219
25c0
25c5   B269: #	B251 &lt;- B225  Freq: 1.74345e-09
25c5   	movl    [rsp + #100], R11	# spill
25ca   	jmp     B251
25ca
25cf   B270: #	B258 &lt;- B227  Freq: 7.15665e-10
25cf   	movl    R9, #3	# int
25d5   	jmp     B258
25d5
25da   B271: #	B220 &lt;- B229  Freq: 7.06249e-10
25da   	movl    R10, #4	# int
25e0   	jmp     B220
25e0
25e5   B272: #	B245 &lt;- B255  Freq: 8.72028e-12
25e5   	movl    R9, #4	# int
25eb   	jmp     B245
25eb
25f0   B273: #	N4795 &lt;- B4  Freq: 1e-35
25f0   	movl    RSI, #-34	# int
25f5   	movq    RBP, [rsp + #32]	# spill
25fa   	movl    [rsp + #12], RDI	# spill
      	nop 	# 1 bytes pad for loops and calls
25ff   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:32  L[0]=RBP L[1]=#0 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #16 L[5]=rsp + #20 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #12
        # OopMap{rbp=Oop [12]=NarrowOop [16]=NarrowOop [20]=NarrowOop off=9732}
2604   	int3	# ShouldNotReachHere
2604
2609   B274: #	N4795 &lt;- B97  Freq: 1e-35
2609   	movl    RSI, #-34	# int
260e   	movq    RBP, [rsp + #32]	# spill
2613   	movl    R8, [rsp + #16]	# spill
2618   	movl    [rsp + #8], R8	# spill
261d   	movl    R11, [rsp + #20]	# spill
2622   	movl    [rsp + #12], R11	# spill
2627   	movq    [rsp + #16], R9	# spill
262c   	movl    [rsp + #24], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
2633   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:52  L[0]=RBP L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #24
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [24]=NarrowOop off=9784}
2638   	int3	# ShouldNotReachHere
2638
263d   B275: #	N4795 &lt;- B137  Freq: 1e-35
263d   	movq    RBP, [rsp + #32]	# spill
2642   	movl    R8, [rsp + #40]	# spill
2647   	movl    [rsp + #4], R8	# spill
264c   	movl    R10, [rsp + #16]	# spill
2651   	movl    [rsp + #8], R10	# spill
2656   	movl    R8, [rsp + #20]	# spill
265b   	movl    [rsp + #12], R8	# spill
2660   	movq    R10, [rsp + #88]	# spill
2665   	movq    [rsp + #16], R10	# spill
266a   	movl    [rsp + #40], R11	# spill
266f   	movl    RSI, #-34	# int
      	nop 	# 3 bytes pad for loops and calls
2677   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:4  L[0]=RBP L[1]=rsp + #16 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #40
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #44 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [40]=NarrowOop off=9852}
267c   	int3	# ShouldNotReachHere
267c
2681   B276: #	N4795 &lt;- B174  Freq: 1e-35
2681   	movl    RSI, #-34	# int
2686   	movq    RBP, [rsp + #32]	# spill
268b   	movl    R10, [rsp + #44]	# spill
2690   	movl    [rsp + #0], R10	# spill
2694   	movl    R11, [rsp + #40]	# spill
2699   	movl    [rsp + #4], R11	# spill
269e   	movl    R10, [rsp + #16]	# spill
26a3   	movl    [rsp + #8], R10	# spill
26a8   	movl    R11, [rsp + #20]	# spill
26ad   	movl    [rsp + #12], R11	# spill
26b2   	movq    [rsp + #40], RAX	# spill
26b7   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:157  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #100 L[4]=rsp + #128 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #40
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [40]=Oop [88]=Oop off=9916}
26bc   	int3	# ShouldNotReachHere
26bc
26c1   B277: #	N4795 &lt;- B93  Freq: 1e-35
26c1   	movl    RSI, #-34	# int
26c6   	movq    RBP, [rsp + #32]	# spill
26cb   	movl    R10, [rsp + #16]	# spill
26d0   	movl    [rsp + #8], R10	# spill
26d5   	movl    [rsp + #16], RCX	# spill
      	nop 	# 2 bytes pad for loops and calls
26db   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:32  L[0]=RBP L[1]=rsp + #96 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #20 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #16
        # OopMap{rbp=Oop [8]=NarrowOop [16]=NarrowOop [20]=NarrowOop off=9952}
26e0   	int3	# ShouldNotReachHere
26e0
26e5   B278: #	N4795 &lt;- B45 B30 B34 B38 B36 B40  Freq: 0.122987
26e5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
26eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:119  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=9968}
26f0   	int3	# ShouldNotReachHere
26f0
26f5   B279: #	N4795 &lt;- B46 B31 B35 B39 B37 B41  Freq: 0.122987
26f5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
26fb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:127  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=#0
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=9984}
2700   	int3	# ShouldNotReachHere
2700
2705   B280: #	N4795 &lt;- B124 B110 B115 B118  Freq: 0.0833057
2705   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
270b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:91  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=10000}
2710   	int3	# ShouldNotReachHere
2710
2715   B281: #	N4795 &lt;- B125 B111 B116 B119  Freq: 0.0833056
2715   	movl    RBP, RDI	# spill
2717   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
271f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:99  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{rbp=NarrowOop off=10020}
2724   	int3	# ShouldNotReachHere
2724
2729   B282: #	N4795 &lt;- B154  Freq: 0.032466
2729   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
272f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:42  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10036}
2734   	int3	# ShouldNotReachHere
2734
2739   B283: #	N4795 &lt;- B155  Freq: 0.032466
2739   	movl    RBP, R9	# spill
273c   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
2743   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=NarrowOop off=10056}
2748   	int3	# ShouldNotReachHere
2748
274d   B284: #	N4795 &lt;- B157  Freq: 0.0324659
274d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2753   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10072}
2758   	int3	# ShouldNotReachHere
2758
275d   B285: #	N4795 &lt;- B158  Freq: 0.0324659
275d   	movl    RBP, R11	# spill
2760   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
2767   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:22  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=RBP
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10092}
276c   	int3	# ShouldNotReachHere
276c
2771   B286: #	N4795 &lt;- B149  Freq: 0.0324641
2771   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2777   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:46  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=rsp + #124
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10108}
277c   	int3	# ShouldNotReachHere
277c
2781   B287: #	N4795 &lt;- B96  Freq: 0.000421034
2781   	movq    RBP, [rsp + #32]	# spill
2786   	movl    R11, [rsp + #16]	# spill
278b   	movl    [rsp + #8], R11	# spill
2790   	movl    R10, [rsp + #20]	# spill
2795   	movl    [rsp + #12], R10	# spill
279a   	movq    [rsp + #16], R9	# spill
279f   	movl    RSI, #-12	# int
      	nop 	# 3 bytes pad for loops and calls
27a7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:52  L[0]=RBP L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop off=10156}
27ac   	int3	# ShouldNotReachHere
27ac
27b1   B288: #	N4795 &lt;- B92  Freq: 0.000420162
27b1   	movq    RBP, [rsp + #32]	# spill
27b6   	movl    RSI, #-12	# int
27bb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:32  L[0]=RBP L[1]=rsp + #96 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #16 L[5]=rsp + #20 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [16]=NarrowOop [20]=NarrowOop off=10176}
27c0   	int3	# ShouldNotReachHere
27c0
27c5   B289: #	N4795 &lt;- B136  Freq: 0.000346396
27c5   	movq    RBP, [rsp + #32]	# spill
27ca   	movl    R10, [rsp + #16]	# spill
27cf   	movl    [rsp + #8], R10	# spill
27d4   	movl    R11, [rsp + #20]	# spill
27d9   	movl    [rsp + #12], R11	# spill
27de   	movq    R10, [rsp + #88]	# spill
27e3   	movq    [rsp + #16], R10	# spill
27e8   	movl    RSI, #-12	# int
      	nop 	# 2 bytes pad for loops and calls
27ef   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:4  L[0]=RBP L[1]=rsp + #16 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop off=10228}
27f4   	int3	# ShouldNotReachHere
27f4
27f9   B290: #	N4795 &lt;- B74  Freq: 0.000345791
27f9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
27ff   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:262  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10244}
2804   	int3	# ShouldNotReachHere
2804
2809   B291: #	N4795 &lt;- B14  Freq: 1.70036e-06
2809   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
280f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.util.OpenAddressHashCounter::recordWithTries @ bci:114  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL STK[1]=rsp + #124 STK[2]=#1 STK[3]=_
        # org.openjdk.jcstress.util.OpenAddressHashCounter::record @ bci:4  L[0]=_ L[1]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10260}
2814   	int3	# ShouldNotReachHere
2814
2819   B292: #	N4795 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
281b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:11  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=10272}
2820   	int3	# ShouldNotReachHere
2820
2825   B293: #	N4795 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
2827   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:29  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=10284}
282c   	int3	# ShouldNotReachHere
282c
2831   B294: #	N4795 &lt;- B3  Freq: 1.01328e-06
2831   	movq    RBP, [rsp + #32]	# spill
      	nop 	# 1 bytes pad for loops and calls
2837   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:32  L[0]=RBP L[1]=#0 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #16 L[5]=rsp + #20 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [16]=NarrowOop [20]=NarrowOop off=10300}
283c   	int3	# ShouldNotReachHere
283c
2841   B295: #	N4795 &lt;- B170  Freq: 9.97395e-07
2841   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2847   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:67  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=10316}
284c   	int3	# ShouldNotReachHere
284c
2851   B296: #	N4795 &lt;- B173  Freq: 8.81795e-07
2851   	movq    RBP, [rsp + #32]	# spill
2856   	movl    R10, [rsp + #16]	# spill
285b   	movl    [rsp + #8], R10	# spill
2860   	movl    R11, [rsp + #20]	# spill
2865   	movl    [rsp + #12], R11	# spill
286a   	movl    RSI, #-12	# int
286f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch @ bci:157  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #100 L[4]=rsp + #128 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor2::call @ bci:129  L[0]=RBP L[1]=rsp + #44 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #88 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [88]=Oop off=10356}
2874   	int3	# ShouldNotReachHere
2874
2879   B297: #	B310 &lt;- B213  Freq: 3.3711e-07
2879   	# exception oop is in rax; no code emitted
2879   	jmp,s   B310
2879
287b   B298: #	B310 &lt;- B211  Freq: 3.37166e-07
287b   	# exception oop is in rax; no code emitted
287b   	jmp,s   B310
287b
287d   B299: #	B310 &lt;- B203  Freq: 3.41316e-07
287d   	# exception oop is in rax; no code emitted
287d   	jmp,s   B310
287d
287f   B300: #	B310 &lt;- B205  Freq: 3.41316e-07
287f   	# exception oop is in rax; no code emitted
287f   	jmp,s   B310
287f
2881   B301: #	B310 &lt;- B207  Freq: 3.41316e-07
2881   	# exception oop is in rax; no code emitted
2881   	jmp,s   B310
2881
2883   B302: #	B310 &lt;- B209  Freq: 3.41316e-07
2883   	# exception oop is in rax; no code emitted
2883   	jmp,s   B310
2883
2885   B303: #	B310 &lt;- B201  Freq: 3.41316e-07
2885   	# exception oop is in rax; no code emitted
2885   	jmp,s   B310
2885
2887   B304: #	B310 &lt;- B190  Freq: 4.28225e-07
2887   	# exception oop is in rax; no code emitted
2887   	jmp,s   B310
2887
2889   B305: #	B310 &lt;- B192  Freq: 4.28225e-07
2889   	# exception oop is in rax; no code emitted
2889   	jmp,s   B310
2889
288b   B306: #	B310 &lt;- B172  Freq: 8.70256e-06
288b   	# exception oop is in rax; no code emitted
288b   	jmp,s   B310
288b
288d   B307: #	B310 &lt;- B166  Freq: 2.73621e-05
288d   	# exception oop is in rax; no code emitted
288d   	jmp,s   B310
288d
288f   B308: #	B310 &lt;- B168  Freq: 2.73621e-05
288f   	# exception oop is in rax; no code emitted
288f   	jmp,s   B310
288f
2891   B309: #	B310 &lt;- B11  Freq: 1.67812e-05
2891   	# exception oop is in rax; no code emitted
2891
2891   B310: #	B312 &lt;- B309 B306 B304 B305 B297 B298 B307 B308 B303 B299 B300 B301 B302  Freq: 8.34453e-05
2891   	movq    RSI, RAX	# spill
2894   	jmp,s   B312
2894
2896   B311: #	B312 &lt;- B129  Freq: 0.00415263
2896   	# exception oop is in rax; no code emitted
2896   	movq    RSI, RAX	# spill
2896
2899   B312: #	N4795 &lt;- B311 B310  Freq: 0.00423608
2899   	addq    rsp, 208	# Destroy frame
	popq   rbp

28a1   	jmp     rethrow_stub
28a1

</opto_assembly>
<writer thread='139941922150144'/>
<opto_assembly compile_id='419'>
{method}
 - this oop:          0x00007f46c6ae1ba8
 - method holder:     &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1&apos;
 - constants:         0x00007f46c6ae1498 constant pool [132] {0x00007f46c6ae1498} for &apos;org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1&apos; cache=0x00007f46c6ae29b0
 - access:            0xc1000001  public 
 - name:              &apos;call&apos;
 - signature:         &apos;()Ljava/lang/Void;&apos;
 - max stack:         5
 - max locals:        12
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      6
 - i2i entry:         0x00007f46c901eb00
 - adapters:          AHE@0x00007f46d80ef760: 0xb0000000 i2c: 0x00007f46c9145620 c2i: 0x00007f46c914575a c2iUV: 0x00007f46c914572d
 - compiled entry     0x00007f46c92fc440
 - code size:         158
 - code start:        0x00007f46c6ae1a80
 - code end (excl):   0x00007f46c6ae1b1e
 - method data:       0x00007f46c6ae5b08
 - checked ex length: 0
 - linenumber start:  0x00007f46c6ae1b1e
 - localvar length:   9
 - localvar start:    0x00007f46c6ae1b3a
 - compiled code: nmethod   5377  381       3       org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call (158 bytes)
#
#  java/lang/Void:exact * ( org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1:NotNull * )
#
#r018 rsi:rsi   : parm 0: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Runner_actor1:NotNull *
# -- Old rsp -- Framesize: 96 --
#r191 rsp+92: in_preserve
#r190 rsp+88: return address
#r189 rsp+84: in_preserve
#r188 rsp+80: saved fp register
#r187 rsp+76: pad2, stack alignment
#r186 rsp+72: pad2, stack alignment
#r185 rsp+68: Fixed slot 1
#r184 rsp+64: Fixed slot 0
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N1155: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B79 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang (304 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c   	movq    RDI, RSI	# spill
02f   	movl    R9, [RSI + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.version
033   	movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.control
037   	movl    RSI, #-10	# int
03c   	movzbl  R10, [R10 + #33 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/Control.shouldYield
041   	NullCheck R10
041
041   B2: #	B80 B3 &lt;- B1  Freq: 0.999999
041   	movl    R8, [R9 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
045   	NullCheck R9
045
045   B3: #	B81 B4 &lt;- B2  Freq: 0.999998
045   	movl    RBX, [RDI + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$RunnerBase.epoch
048   	movl    RSI, #-12	# int
04d   	MEMBAR-acquire ! (empty encoding)
04d   	movl    RCX, [R8 + #8 (8-bit)]	# compressed klass ptr
051   	NullCheck R8
051
051   B4: #	B69 B5 &lt;- B3  Freq: 0.999997
051   	movl    RSI, #-34	# int
056   	cmpl    RCX, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4698045160:Constant:exact *	# compressed klass ptr
05c   	jne,u  B69  P=0.000000 C=-1.000000
05c
062   B5: #	B57 B6 &lt;- B4  Freq: 0.999997
062   	decode_heap_oop_not_null R11,R8
065   	# checkcastPP of R11
065   	movzbl  R8, [R11 + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
06a   	testl   R8, R8
06d   	jne     B57  P=0.000290 C=6898.000000
06d
073   B6: #	B68 B7 &lt;- B5  Freq: 0.999707
073   	testl   RBX, RBX	# compressed ptr
075   	je     B68  P=0.000001 C=-1.000000
075
07b   B7: #	B28 &lt;- B6  Freq: 0.999706
07b   	movl    [rsp + #40], R10	# spill
080   	movq    [rsp + #0], RDI	# spill
084   	decode_heap_oop_not_null R10,R9
087   	movq    [rsp + #24], R10	# spill
08c   	movl    [rsp + #12], R9	# spill
091   	decode_heap_oop_not_null R10,RBX
094   	movq    [rsp + #48], R10	# spill
099   	movl    [rsp + #16], RBX	# spill
09d   	xorl    R10, R10	# int
0a0   	movl    [rsp + #8], R10	# spill
0a5   	jmp     B28
0a5
0aa   B8: #	B60 B9 &lt;- B56 B51 B39  top-of-loop Freq: 1115.35
0aa   	movq    R10, [rsp + #32]	# spill
0af   	movl    R11, [R10 + #36 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.finished
0b3   	testl   R11, R11	# compressed ptr
0b6   	je     B60  P=0.000001 C=-1.000000
0b6
0bc   B9: #	B75 B10 &lt;- B8  Freq: 1115.35
0bc   	decode_heap_oop_not_null RSI,R11
0bf   	call,static  java.util.concurrent.atomic.AtomicInteger::decrementAndGet
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=rsp + #32 L[1]=rsp + #40
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #24 L[5]=rsp + #16 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [12]=NarrowOop [16]=NarrowOop [24]=Oop [32]=Oop [48]=Oop off=196}
0c4
0c4   B10: #	B12 B11 &lt;- B9  Freq: 1115.33
        # Block is sole successor of call
0c4   	testl   RAX, RAX
0c6   	jne,s   B12  P=0.492537 C=67.000000
0c6
0c8   B11: #	B12 &lt;- B10  Freq: 565.989
0c8   	MEMBAR-release ! (empty encoding)
0c8   	movq    R10, [rsp + #32]	# spill
0cd   	movb    [R10 + #19 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
0d1   	lock addl [rsp + #0], 0	! membar_volatile
0d6
0d6   B12: #	B15 B13 &lt;- B11 B10  Freq: 1115.33
0d6   	movq    R10, [rsp + #32]	# spill
0db   	movzbl  R10, [R10 + #21 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
0e0   	movl    RBP, [rsp + #8]	# spill
0e4   	incl    RBP	# int
0e6   	MEMBAR-acquire ! (empty encoding)
0e6   	movq    R11, [rsp + #32]	# spill
0eb   	movzbl  R8, [R11 + #17 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
0f0   	orl     R10, R8	# int
0f3   	MEMBAR-acquire ! (empty encoding)
0f3   	MEMBAR-release ! (empty encoding)
0f3   	movb    [R11 + #21 (8-bit)], R10	# byte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.hasLaggedWorkers
0f7   	lock addl [rsp + #0], 0	! membar_volatile
0fc   	movzbl  R11, [R11 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
101   	MEMBAR-acquire ! (empty encoding)
101   	testl   R11, R11
104   	je,s   B15  P=0.000477 C=136189.000000
104
106   B13: #	B66 B14 &lt;- B12  Freq: 1114.8
106   	movl    R11, [rsp + #40]	# spill
10b   	testl   R11, R11
10e   	jne     B66  P=0.000001 C=-1.000000
      	nop 	# 12 bytes pad for loops and calls

120   B14: #	B14 B15 &lt;- B13 B14 	Loop: B14-B14 inner  Freq: 2.33586e+06
120   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:36  L[0]=rsp + #32 L[1]=rsp + #40 STK[0]=rsp + #40
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #24 L[5]=rsp + #16 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [12]=NarrowOop [16]=NarrowOop [24]=Oop [32]=Oop [48]=Oop off=288}
126   	movq    R10, [rsp + #32]	# spill
12b   	movzbl  R10, [R10 + #19 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllFinished
130   	MEMBAR-acquire ! (empty encoding)
130   	testl   R10, R10
133   	jne,s   B14  P=0.999523 C=136189.000000
133
135   B15: #	B17 B16 &lt;- B14 B12  Freq: 1115.33
135   	MEMBAR-release ! (empty encoding)
135   	
135   	movl    R11, [rsp + #16]	# spill
13a   	movl    RAX, [rsp + #8]	# spill
13e   	cmpxchgl [R11 + #12 (8-bit)],RBP	# If rax == [R11 + #12 (8-bit)] then store RBP into [R11 + #12 (8-bit)]
	sete    R10
	movzbl  R10, R10
14c   	
14c   	MEMBAR-acquire ! (empty encoding)
14c   	testl   R10, R10
14f   	je,s   B17  P=0.780711 C=6895.000000
14f
151   B16: #	B74 B17 &lt;- B15  Freq: 244.58
151   	movq    RSI, [rsp + #0]	# spill
155   	movq    RDX, [rsp + #32]	# spill
      	nop 	# 1 bytes pad for loops and calls
15b   	call,static  org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$RunnerBase::newEpoch
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:124  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #24 L[5]=rsp + #48 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [12]=NarrowOop [16]=NarrowOop [24]=Oop [32]=Oop [48]=Oop off=352}
160
160   B17: #	B67 B18 &lt;- B16 B15  Freq: 1115.33
160   	movl    R10, [rsp + #16]	# spill
165   	movl    R10, [R10 + #12 (8-bit)]	# int ! Field: volatile java/util/concurrent/atomic/AtomicInteger.value
169   	MEMBAR-acquire ! (empty encoding)
169   	cmpl    RBP, R10
16c   	jne     B67  P=0.000000 C=6895.000000
16c
172   B18: #	B61 B19 &lt;- B17  Freq: 1115.32
172   	movq    R10, [rsp + #32]	# spill
177   	movl    R10, [R10 + #40 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.consumed
17b   	testl   R10, R10	# compressed ptr
17e   	je     B61  P=0.000001 C=-1.000000
17e
184   B19: #	B21 B20 &lt;- B18  Freq: 1115.32
184   	MEMBAR-release ! (empty encoding)
184   	
184   	movl    R8, #-1	# int
18a   	XADDL  [[R10 + #12 (8-bit)]],R8
190   	decl    R8	# int
193   	
193   	MEMBAR-acquire ! (empty encoding)
193   	testl   R8, R8
196   	jne,s   B21  P=0.502075 C=241.000000
196
198   B20: #	B21 &lt;- B19  Freq: 555.348
198   	MEMBAR-release ! (empty encoding)
198   	movq    R10, [rsp + #32]	# spill
19d   	movb    [R10 + #20 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1a1   	lock addl [rsp + #0], 0	! membar_volatile
1a6
1a6   B21: #	B24 B22 &lt;- B19 B20  Freq: 1115.32
1a6   	movq    R10, [rsp + #32]	# spill
1ab   	movzbl  R11, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1b0   	MEMBAR-acquire ! (empty encoding)
1b0   	testl   R11, R11
1b3   	je,s   B24  P=0.000074 C=2941144.000000
1b3
1b5   B22: #	B64 B23 &lt;- B21  Freq: 1115.24
1b5   	movl    R11, [rsp + #40]	# spill
1ba   	testl   R11, R11
1bd   	jne     B64  P=0.000001 C=-1.000000
      	nop 	# 13 bytes pad for loops and calls

1d0   B23: #	B23 B24 &lt;- B22 B23 	Loop: B23-B23 inner  Freq: 1.50407e+07
1d0   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:23  L[0]=rsp + #32 L[1]=rsp + #40 STK[0]=rsp + #40
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=rsp + #40 L[4]=rsp + #24 L[5]=rsp + #48 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [12]=NarrowOop [16]=NarrowOop [24]=Oop [32]=Oop [48]=Oop off=464}
1d6   	movq    R10, [rsp + #32]	# spill
1db   	movzbl  R11, [R10 + #20 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllConsumed
1e0   	MEMBAR-acquire ! (empty encoding)
1e0   	testl   R11, R11
1e3   	jne,s   B23  P=0.999926 C=2941144.000000
1e3
1e5   B24: #	B78 B25 &lt;- B23 B21  Freq: 1115.32
1e5   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:155  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=rsp + #40 L[4]=rsp + #24 L[5]=rsp + #48 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [12]=NarrowOop [16]=NarrowOop [24]=Oop [48]=Oop off=485}
1eb   	movl    R11, [rsp + #12]	# spill
1f0   	movl    R9, [R11 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/util/concurrent/atomic/AtomicReference.value
1f4   	decode_heap_oop_not_null R11,R9
1f7   	MEMBAR-acquire ! (empty encoding)
1f7   	movl    R10, [R9 + #8 (8-bit)]	# compressed klass ptr
1fb   	NullCheck R9
1fb
1fb   B25: #	B71 B26 &lt;- B24  Freq: 1115.32
1fb   	cmpl    R10, narrowklass: precise klass org/openjdk/jcstress/infra/runners/StateHolder: 0x00007f4698045160:Constant:exact *	# compressed klass ptr
202   	jne,u  B71  P=0.000000 C=-1.000000
202
208   B26: #	B57 B27 &lt;- B25  Freq: 1115.32
208   	# checkcastPP of R11
208   	movzbl  R10, [R11 + #16 (8-bit)]	# ubyte ! Field: org/openjdk/jcstress/infra/runners/StateHolder.stopped
20d   	testl   R10, R10
210   	jne     B57  P=0.000290 C=6895.000000
210
216   B27: #	B28 &lt;- B26  Freq: 1115
216   	movl    [rsp + #8], RBP	# spill
216
21a   B28: #	B77 B29 &lt;- B7 B27 	Loop: B28-B27  Freq: 1116.01
21a   	movl    R10, [R11 + #24 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.pairs
21e   	movl    RCX, [R10 + #8 (8-bit)]	# compressed klass ptr
222   	NullCheck R10
222
222   B29: #	B70 B30 &lt;- B28  Freq: 1116.01
222   	decode_heap_oop_not_null R9,R10
225   	cmpl    RCX, narrowklass: precise klass [Lorg/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair;: 0x00007f4698045230:Constant:exact *	# compressed klass ptr
22b   	jne,u  B70  P=0.000000 C=-1.000000
22b
231   B30: #	B58 B31 &lt;- B29  Freq: 1116.01
231   	# checkcastPP of R11
231   	movq    [rsp + #32], R11	# spill
236   	# checkcastPP of R9
236   	movl    R10, [R11 + #32 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.ready
23a   	testl   R10, R10	# compressed ptr
23d   	je     B58  P=0.000001 C=-1.000000
23d
243   B31: #	B33 B32 &lt;- B30  Freq: 1116.01
243   	MEMBAR-release ! (empty encoding)
243   	
243   	movl    R8, #-1	# int
249   	XADDL  [[R10 + #12 (8-bit)]],R8
24f   	decl    R8	# int
252   	
252   	MEMBAR-acquire ! (empty encoding)
252   	testl   R8, R8
255   	jne,s   B33  P=0.497143 C=175.000000
255
257   B32: #	B33 &lt;- B31  Freq: 561.193
257   	MEMBAR-release ! (empty encoding)
257   	movb    [R11 + #18 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
25b   	lock addl [rsp + #0], 0	! membar_volatile
260
260   B33: #	B36 B34 &lt;- B31 B32  Freq: 1116.01
260   	movl    RBX, [R9 + #12 (8-bit)]	# range
264   	movzbl  R10, [R11 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
269   	MEMBAR-acquire ! (empty encoding)
269   	testl   R10, R10
26c   	je,s   B36  P=0.000796 C=192265.000000
26c
26e   B34: #	B65 B35 &lt;- B33  Freq: 1115.12
26e   	movl    R11, [rsp + #40]	# spill
273   	testl   R11, R11
276   	jne     B65  P=0.000001 C=-1.000000
      	nop 	# 4 bytes pad for loops and calls

280   B35: #	B35 B36 &lt;- B34 B35 	Loop: B35-B35 inner  Freq: 1.40129e+06
280   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:23  L[0]=rsp + #32 L[1]=rsp + #40 STK[0]=rsp + #40
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #24 L[5]=rsp + #16 L[6]=rsp + #32 L[7]=R9 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{r9=Oop [0]=Oop [12]=NarrowOop [16]=NarrowOop [24]=Oop [32]=Oop [48]=Oop off=640}
286   	movq    R10, [rsp + #32]	# spill
28b   	movzbl  R11, [R10 + #18 (8-bit)]	# ubyte ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllReady
290   	MEMBAR-acquire ! (empty encoding)
290   	testl   R11, R11
293   	jne,s   B35  P=0.999204 C=192265.000000
293
295   B36: #	B59 B37 &lt;- B35 B33  Freq: 1116.01
295   	movq    R10, [rsp + #32]	# spill
29a   	movl    R10, [R10 + #28 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/infra/runners/StateHolder.started
29e   	testl   R10, R10	# compressed ptr
2a1   	je     B59  P=0.000001 C=-1.000000
2a1
2a7   B37: #	B39 B38 &lt;- B36  Freq: 1116.01
2a7   	MEMBAR-release ! (empty encoding)
2a7   	
2a7   	movl    R8, #-1	# int
2ad   	XADDL  [[R10 + #12 (8-bit)]],R8
2b3   	decl    R8	# int
2b6   	
2b6   	MEMBAR-acquire ! (empty encoding)
2b6   	testl   R8, R8
2b9   	jne,s   B39  P=0.500000 C=176.000000
2b9
2bb   B38: #	B39 &lt;- B37  Freq: 558.003
2bb   	MEMBAR-release ! (empty encoding)
2bb   	movq    R10, [rsp + #32]	# spill
2c0   	movb    [R10 + #17 (8-bit)], R12	# short/char (R12_heapbase==0) ! Field: volatile org/openjdk/jcstress/infra/runners/StateHolder.notAllStarted
2c4   	lock addl [rsp + #0], 0	! membar_volatile
2c9
2c9   B39: #	B8 B40 &lt;- B38 B37  Freq: 1116.01
2c9   	movl    R8, RBX	# spill
2cc   	decl    R8	# int
2cf   	testl   RBX, RBX
2d1   	jle     B8  P=0.006956 C=991230.000000
2d1
2d7   B40: #	B62 B41 &lt;- B39  Freq: 1108.24
2d7   	testl  RBX, RBX	# unsigned
2d9   	jbe,u  B62  P=0.000001 C=-1.000000
2d9
2df   B41: #	B62 B42 &lt;- B40  Freq: 1108.24
2df   	cmpl    R8, RBX	# unsigned
2e2   	jnb,u  B62  P=0.000001 C=-1.000000
2e2
2e8   B42: #	B72 B43 &lt;- B41  Freq: 1108.24
2e8   	movl    R10, [R9 + #16 (8-bit)]	# compressed ptr
2ec   	movl    R11, [R10 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
2f0   	NullCheck R10
2f0
2f0   B43: #	B73 B44 &lt;- B42  Freq: 1108.24
2f0   	movl    [R11 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
2f8   	NullCheck R11
2f8
2f8   B44: #	B63 B45 &lt;- B43  Freq: 1108.24
2f8   	
2f8   	MEMBAR-release ! (empty encoding)
2f8   	movl    [R11 + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
303   	movl    [R11 + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
30b   	cmpl    R8, #1
30f   	jle     B63  P=0.000001 C=-1.000000
30f
315   B45: #	B46 &lt;- B44  Freq: 1108.24
315   	movl    RDI, #1	# int
      	nop 	# 6 bytes pad for loops and calls

320   B46: #	B72 B47 &lt;- B45 B50 	Loop: B46-B50 inner main of N401 Freq: 159229
320   	movl    R11, [R9 + #16 + RDI &lt;&lt; #2]	# compressed ptr
325   	movl    R10, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
329   	NullCheck R11
329
329   B47: #	B73 B48 &lt;- B46  Freq: 159229
329   	movl    [R10 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
331   	NullCheck R10
331
331   B48: #	B72 B49 &lt;- B47  Freq: 159229
331   	movslq  R11, RDI	# i2l
334   	
334   	MEMBAR-release ! (empty encoding)
334   	movl    R11, [R9 + #20 + R11 &lt;&lt; #2]	# compressed ptr
339   	movl    [R10 + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
344   	movl    [R10 + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
34c   	movl    R10, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
350   	NullCheck R11
350
350   B49: #	B73 B50 &lt;- B48  Freq: 159229
350   	movl    [R10 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
358   	NullCheck R10
358
358   B50: #	B46 B51 &lt;- B49  Freq: 159229
358   	
358   	MEMBAR-release ! (empty encoding)
358   	movl    [R10 + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
360   	movl    [R10 + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
36b   	addl    RDI, #2	# int
36e   	cmpl    RDI, R8
371   	jl,s   B46	# loop end  P=0.993044 C=984335.000000
371
373   B51: #	B8 B52 &lt;- B63 B50  Freq: 1107.59
373   	cmpl    RDI, RBX
375   	jge     B8  P=0.500000 C=-1.000000
375
37b   B52: #	B53 &lt;- B51  Freq: 553.797
37b   	# castII of RDI
      	nop 	# 1 bytes pad for loops and calls

37c   B53: #	B72 B54 &lt;- B52 B55 	Loop: B53-B55 inner post of N1244 Freq: 1107.59
37c   	movl    R11, [R9 + #16 + RDI &lt;&lt; #2]	# compressed ptr
381   	movl    R10, [R11 + #12 (8-bit)]	# compressed ptr ! Field: org/openjdk/jcstress/tests/fences/generated/FencedAcquireReleaseTest_jcstress$Pair.s
385   	NullCheck R11
385
385   B54: #	B73 B55 &lt;- B53  Freq: 1107.59
385   	movl    [R10 + #12 (8-bit)], #2	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
38d   	NullCheck R10
38d
38d   B55: #	B53 B56 &lt;- B54  Freq: 1107.59
38d   	
38d   	MEMBAR-release ! (empty encoding)
38d   	movl    [R10 + #12 (8-bit)], #3	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.x
395   	movl    [R10 + #144 (32-bit)], #1	# int ! Field: org/openjdk/jcstress/tests/fences/FencedAcquireReleaseTest.y
3a0   	incl    RDI	# int
3a2   	cmpl    RDI, RBX
3a4   	jl,s   B53	# loop end  P=0.500000 C=984335.000000
3a4
3a6   B56: #	B8 &lt;- B55  Freq: 553.795
3a6   	jmp     B8
3a6
3ab   B57: #	N1155 &lt;- B26 B5  Freq: 0.32364
3ab   	xorl    RAX, RAX	# ptr
3ad   	addq    rsp, 80	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

3b8   	ret
3b8
3b9   B58: #	N1155 &lt;- B30  Freq: 0.00113083
3b9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
3bf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=964}
3c4   	int3	# ShouldNotReachHere
3c4
3c9   B59: #	N1155 &lt;- B36  Freq: 0.00113083
3c9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
3cf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:36  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=980}
3d4   	int3	# ShouldNotReachHere
3d4
3d9   B60: #	N1155 &lt;- B8  Freq: 0.00113017
3d9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
3df   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=996}
3e4   	int3	# ShouldNotReachHere
3e4
3e9   B61: #	N1155 &lt;- B18  Freq: 0.00113013
3e9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
3ef   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:4  L[0]=_ L[1]=_ STK[0]=#NULL
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1012}
3f4   	int3	# ShouldNotReachHere
3f4
3f9   B62: #	N1155 &lt;- B41 B40  Freq: 0.0022312
3f9   	movq    RBP, [rsp + #0]	# spill
3fd   	movl    R10, [rsp + #8]	# spill
402   	movl    [rsp + #0], R10	# spill
406   	movl    R10, [rsp + #12]	# spill
40b   	movl    [rsp + #8], R10	# spill
410   	movl    R11, [rsp + #16]	# spill
415   	movl    [rsp + #12], R11	# spill
41a   	movq    R10, [rsp + #32]	# spill
41f   	movq    [rsp + #16], R10	# spill
424   	movq    [rsp + #24], R9	# spill
429   	movl    [rsp + #32], RBX	# spill
42d   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
433   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:82  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=rsp + #24 L[9]=rsp + #32 L[10]=#0 L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [24]=Oop off=1080}
438   	int3	# ShouldNotReachHere
438
43d   B63: #	B51 &lt;- B44  Freq: 0.00112296
43d   	movl    RDI, #1	# int
442   	jmp     B51
442
447   B64: #	N1155 &lt;- B22  Freq: 0.00111524
447   	movl    R10, R11	# spill
44a   	movl    [rsp + #20], R10	# spill
44f   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
457   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postConsume @ bci:22  L[0]=rsp + #32 L[1]=rsp + #40
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:152  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=rsp + #20 L[4]=rsp + #12 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [12]=NarrowOop [16]=NarrowOop [32]=Oop off=1116}
45c   	int3	# ShouldNotReachHere
45c
461   B65: #	N1155 &lt;- B34  Freq: 0.00111512
461   	movq    RBP, [rsp + #0]	# spill
465   	movl    R10, [rsp + #8]	# spill
46a   	movl    [rsp + #0], R10	# spill
46e   	movl    R10, [rsp + #12]	# spill
473   	movl    [rsp + #8], R10	# spill
478   	movl    R11, [rsp + #16]	# spill
47d   	movl    [rsp + #12], R11	# spill
482   	movq    [rsp + #24], R9	# spill
487   	movl    RSI, #-122	# int
      	nop 	# 3 bytes pad for loops and calls
48f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::preRun @ bci:22  L[0]=rsp + #32 L[1]=rsp + #40
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:60  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #32 L[7]=rsp + #24 L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [24]=Oop [32]=Oop off=1172}
494   	int3	# ShouldNotReachHere
494
499   B66: #	N1155 &lt;- B13  Freq: 0.0011148
499   	movq    RBP, [rsp + #0]	# spill
49d   	movl    R10, [rsp + #8]	# spill
4a2   	movl    [rsp + #0], R10	# spill
4a6   	movl    [rsp + #4], R11	# spill
4ab   	movl    R10, [rsp + #12]	# spill
4b0   	movl    [rsp + #8], R10	# spill
4b5   	movl    R11, [rsp + #16]	# spill
4ba   	movl    [rsp + #12], R11	# spill
4bf   	movq    R10, [rsp + #32]	# spill
4c4   	movq    [rsp + #24], R10	# spill
4c9   	movl    RSI, #-122	# int
      	nop 	# 1 bytes pad for loops and calls
4cf   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.infra.runners.StateHolder::postRun @ bci:35  L[0]=rsp + #24 L[1]=rsp + #4
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:106  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [24]=Oop off=1236}
4d4   	int3	# ShouldNotReachHere
4d4
4d9   B67: #	N1155 &lt;- B17  Freq: 0.000531828
4d9   	movq    R11, [rsp + #32]	# spill
4de   	movq    [rsp + #24], R11	# spill
4e3   	movl    [rsp + #32], R10	# spill
4e8   	movl    RSI, #-155	# int
      	nop 	# 2 bytes pad for loops and calls
4ef   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:136  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=rsp + #40 L[4]=rsp + #12 L[5]=rsp + #16 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=RBP STK[1]=rsp + #32
        # OopMap{[0]=Oop [12]=NarrowOop [16]=NarrowOop [24]=Oop off=1268}
4f4   	int3	# ShouldNotReachHere
4f4
4f9   B68: #	N1155 &lt;- B6  Freq: 1.01298e-06
4f9   	movl    RSI, #-122	# int
4fe   	movq    RBP, RDI	# spill
501   	movl    [rsp + #0], R10	# spill
505   	movl    [rsp + #4], R9	# spill
50a   	movl    [rsp + #8], RBX	# spill
50e   	movq    [rsp + #16], R11	# spill
513   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:47  L[0]=RBP L[1]=#0 L[2]=_ L[3]=rsp + #0 L[4]=rsp + #4 L[5]=rsp + #8 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [4]=NarrowOop [8]=NarrowOop [16]=Oop off=1304}
518   	int3	# ShouldNotReachHere
518
51d   B69: #	N1155 &lt;- B4  Freq: 1e-35
51d   	movq    RBP, RDI	# spill
520   	movl    [rsp + #0], R10	# spill
524   	movl    [rsp + #4], R9	# spill
529   	movl    [rsp + #8], RBX	# spill
52d   	movl    [rsp + #12], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
533   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=RBP L[1]=#0 L[2]=_ L[3]=rsp + #0 L[4]=rsp + #4 L[5]=rsp + #8 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #12
        # OopMap{rbp=Oop [4]=NarrowOop [8]=NarrowOop [12]=NarrowOop off=1336}
538   	int3	# ShouldNotReachHere
538
53d   B70: #	N1155 &lt;- B29  Freq: 1e-35
53d   	movl    RSI, #-34	# int
542   	movq    RBP, [rsp + #0]	# spill
546   	movl    R8, [rsp + #8]	# spill
54b   	movl    [rsp + #0], R8	# spill
54f   	movl    R8, [rsp + #12]	# spill
554   	movl    [rsp + #8], R8	# spill
559   	movl    R9, [rsp + #16]	# spill
55e   	movl    [rsp + #12], R9	# spill
563   	movq    [rsp + #16], R11	# spill
568   	movl    [rsp + #24], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
56f   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:52  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #24
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop [24]=NarrowOop off=1396}
574   	int3	# ShouldNotReachHere
574
579   B71: #	N1155 &lt;- B25  Freq: 1e-35
579   	movl    [rsp + #20], R9	# spill
57e   	movl    RSI, #-34	# int
583   	call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=rsp + #40 L[4]=rsp + #12 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #20
        # OopMap{[0]=Oop [12]=NarrowOop [16]=NarrowOop [20]=NarrowOop off=1416}
588   	int3	# ShouldNotReachHere
588
58d   B72: #	N1155 &lt;- B53 B42 B46 B48  Freq: 0.324933
58d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
593   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:91  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1432}
598   	int3	# ShouldNotReachHere
598
59d   B73: #	N1155 &lt;- B54 B43 B47 B49  Freq: 0.324932
59d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
5a3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:94  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1448}
5a8   	int3	# ShouldNotReachHere
5a8
5ad   B74: #	B76 &lt;- B16  Freq: 0.0024458
5ad   	# exception oop is in rax; no code emitted
5ad   	movq    RSI, RAX	# spill
5b0   	jmp,s   B76
5b0
5b2   B75: #	B76 &lt;- B9  Freq: 0.0111535
5b2   	# exception oop is in rax; no code emitted
5b2   	movq    RSI, RAX	# spill
5b2
5b5   B76: #	N1155 &lt;- B75 B74  Freq: 0.0135993
5b5   	addq    rsp, 80	# Destroy frame
	popq   rbp

5ba   	jmp     rethrow_stub
5ba
5bf   B77: #	N1155 &lt;- B28  Freq: 0.00113083
5bf   	movq    RBP, [rsp + #0]	# spill
5c3   	movl    R10, [rsp + #8]	# spill
5c8   	movl    [rsp + #0], R10	# spill
5cc   	movl    R10, [rsp + #12]	# spill
5d1   	movl    [rsp + #8], R10	# spill
5d6   	movl    R8, [rsp + #16]	# spill
5db   	movl    [rsp + #12], R8	# spill
5e0   	movq    [rsp + #16], R11	# spill
5e5   	movl    RSI, #-12	# int
      	nop 	# 1 bytes pad for loops and calls
5eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:52  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [8]=NarrowOop [12]=NarrowOop [16]=Oop off=1520}
5f0   	int3	# ShouldNotReachHere
5f0
5f5   B78: #	N1155 &lt;- B24  Freq: 0.00113013
5f5   	movl    RSI, #-12	# int
      	nop 	# 1 bytes pad for loops and calls
5fb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=rsp + #40 L[4]=rsp + #12 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{[0]=Oop [12]=NarrowOop [16]=NarrowOop off=1536}
600   	int3	# ShouldNotReachHere
600
605   B79: #	N1155 &lt;- B1  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
607   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:11  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1548}
60c   	int3	# ShouldNotReachHere
60c
611   B80: #	N1155 &lt;- B2  Freq: 1.01328e-06
      	nop 	# 2 bytes pad for loops and calls
613   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:29  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1560}
618   	int3	# ShouldNotReachHere
618
61d   B81: #	N1155 &lt;- B3  Freq: 1.01328e-06
61d   	movq    RBP, RDI	# spill
620   	movl    [rsp + #0], R10	# spill
624   	movl    [rsp + #4], R9	# spill
629   	movl    [rsp + #8], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
62f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos;)
        # org.openjdk.jcstress.tests.fences.generated.FencedAcquireReleaseTest_jcstress$Runner_actor1::call @ bci:32  L[0]=RBP L[1]=#0 L[2]=_ L[3]=rsp + #0 L[4]=rsp + #4 L[5]=rsp + #8 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{rbp=Oop [4]=NarrowOop [8]=NarrowOop off=1588}
634   	int3	# ShouldNotReachHere
634

</opto_assembly>
<writer thread='139941038249728'/>
C1 Runtime statistics:
 _resolve_invoke_virtual_cnt:     42
 _resolve_invoke_opt_virtual_cnt: 252
 _resolve_invoke_static_cnt:      70
 _handle_wrong_method_cnt:        39
 _ic_miss_cnt:                    18
 _generic_arraycopy_cnt:          0
 _generic_arraycopystub_cnt:      0
 _byte_arraycopy_cnt:             0
 _short_arraycopy_cnt:            0
 _int_arraycopy_cnt:              0
 _long_arraycopy_cnt:             0
 _primitive_arraycopy_cnt:        0
 _oop_arraycopy_cnt (C):          0
 _oop_arraycopy_cnt (stub):       0
 _arraycopy_slowcase_cnt:         0
 _arraycopy_checkcast_cnt:        0
 _arraycopy_checkcast_attempt_cnt:0
 _new_type_array_slowcase_cnt:    0
 _new_object_array_slowcase_cnt:  0
 _new_instance_slowcase_cnt:      6
 _new_multi_array_slowcase_cnt:   0
 _monitorenter_slowcase_cnt:      0
 _monitorexit_slowcase_cnt:       0
 _patch_code_slowcase_cnt:        1
 _throw_range_check_exception_count:            0:
 _throw_index_exception_count:                  0:
 _throw_div0_exception_count:                   0:
 _throw_null_pointer_exception_count:           0:
 _throw_class_cast_exception_count:             0:
 _throw_incompatible_class_change_error_count:  0:
 _throw_array_store_exception_count:            0:
 _throw_count:                                  0:

<statistics type='deoptimization'>
Deoptimization traps recorded:
    72 (100.0%) total
  class_check/maybe_recompile/invokevirtual: 4 (5.6%)
                unreached/reinterpret/ifeq: 1 (1.4%)
                       constraint/none/nop: 61 (84.7%)
              unstable_if/reinterpret/ifeq: 5 (6.9%)
         unstable_if/reinterpret/if_acmpne: 1 (1.4%)
</statistics>
<statistics type='SharedRuntime'>
  975 new instance requires GC
    5 new array requires GC
   18 inline cache miss in compiled
   39 wrong method
   70 unresolved static call site
   42 unresolved virtual call site
  252 unresolved opt virtual call site
  134 slow partial subtype
  383 byte array copies
22622 short array copies
  415 int array copies
   12 long array copies
   40 checkcast array copies
AdapterHandlerTable: empty 152 longest 3 total 191 average 1.354610
AdapterHandlerTable: lookups 10793 buckets 11065 equals 10327 hits 10327 compact 10327
</statistics>
<statistics type='nmethod'>
Statistics for 66 native nmethods:
 N. total size  = 61592
 N. relocation  = 5560
 N. main code   = 35352
Statistics for 345 bytecoded nmethods:
 total in heap  = 933728
 relocation     = 58856
 constants      = 32
 main code      = 445344
 stub code      = 68744
 oops           = 384
 scopes data    = 78112
 scopes pcs     = 152432
 dependencies   = 2888
 handler table  = 4480
 nul chk table  = 7640
Debug Data Chunks: 17474, shared 1858+5908, non-SP&apos;s elided 195
PcDesc Statistics:  883 queries, 9.40 comparisons per query
  caches=345 queries=883/0, hits=0+113, tests=3195+5105, adds=770
</statistics>
<statistics type='opto'>
--- Compiler Statistics ---
Methods seen: 304  Methods parsed: 304  Nodes created: 98148
Blocks parsed: 949  Blocks seen: 1121
1281 original NULL checks - 982 elided (76%); optimizer leaves 385,
263 made implicit (68%)
CCP: 44  constants found: 0
Total frameslots = 616, Max frameslots = 48
Inserted 0 spill loads, 0 spill stores, 0 mem-mem moves and 0 copies.
Total load cost=      0, store cost =      0, mem-mem cost =  0.00, copy cost =     0.
Adjusted spill cost =       0.
Conservatively coalesced 633 copies, 0 pairs, 2618 post alloc.
Used cisc instruction  193,  remained in register 630
Average allocation trips 1.700000
High Pressure Blocks = 0, Low Pressure Blocks = 0
Nops added 0 bytes to total of 83196 bytes, for 0.00%
Peephole: peephole rules applied: 0
PhaseIdealLoop=261, sum _unique=331334
</statistics>
<statistics type='intrinsic'>
Compiler intrinsic usage:
    15 (23.4%) _getClass (worked)
    10 (15.6%) _min (worked)
     8 (12.5%) _max (worked)
     5 ( 7.8%) _arraycopy (worked)
     1 ( 1.6%) _copyOf (worked)
     4 ( 6.2%) _storeFence (worked)
     5 ( 7.8%) _compareAndSwapInt (worked)
    16 (25.0%) _getAndAddInt (worked)
    64 (100.0%) total (worked)
</statistics>
<tty_done stamp='8.880'/>
</tty>
<hotspot_log_done stamp='8.880'/>
</hotspot_log>
